import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest22 {

    public static boolean debug = false;

    @Test
    public void test11001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11001");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        java.lang.String str5 = property2.getAsShortText();
        org.joda.time.LocalTime localTime6 = property2.roundFloorCopy();
        org.joda.time.LocalTime localTime8 = localTime6.withHourOfDay((int) (byte) 10);
        int int9 = localTime6.getSecondOfMinute();
        org.joda.time.LocalTime.Property property10 = localTime6.millisOfSecond();
        org.joda.time.LocalTime localTime12 = property10.addCopy(0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test11002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11002");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths(9);
        java.lang.Object obj3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(obj3, dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minus((org.joda.time.ReadablePeriod) mutablePeriod10);
        boolean boolean13 = localDateTime11.equals((java.lang.Object) 14);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusDays(10);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withFieldAdded(durationFieldType16, (int) (short) -1);
        int int19 = mutablePeriod0.get(durationFieldType16);
        int int20 = mutablePeriod0.getDays();
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test11003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11003");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(117448L, periodType3);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 0, 0L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period14 = period12.withPeriodType(periodType13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateTime dateTime19 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime19.toMutableDateTime();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = timeOfDay25.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay25.plusHours((-1));
        org.joda.time.Chronology chronology29 = timeOfDay28.getChronology();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.TimeOfDay timeOfDay32 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay32.withChronologyRetainFields(chronology33);
        long long36 = chronology29.set((org.joda.time.ReadablePartial) timeOfDay32, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay37 = new org.joda.time.TimeOfDay(chronology29);
        org.joda.time.DateTime dateTime38 = dateTime19.toDateTime(chronology29);
        org.joda.time.DateTimeField dateTimeField39 = chronology29.yearOfCentury();
        org.joda.time.DurationField durationField40 = chronology29.centuries();
        org.joda.time.DateTimeField dateTimeField41 = chronology29.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 'a', (long) 7, periodType13, chronology29);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) '4', chronology29);
        org.joda.time.Period period44 = new org.joda.time.Period(58L, periodType6, chronology29);
        org.joda.time.Period period45 = new org.joda.time.Period(1645487999901L, periodType3, chronology29);
        org.joda.time.Period period46 = new org.joda.time.Period((long) (-31), periodType3);
        int int47 = periodType3.size();
        org.joda.time.PeriodType periodType48 = periodType3.withHoursRemoved();
        org.joda.time.PeriodType periodType49 = periodType3.withMonthsRemoved();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-86399999L) + "'", long36 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
    }

    @Test
    public void test11004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11004");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay0.plusMonths(184);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.dayOfMonth();
        org.joda.time.DurationField durationField7 = property6.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusDays(2022);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.plusMonths(15);
        int int13 = yearMonthDay12.getYear();
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay12.minusDays(32770);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.withYear(3);
        int int18 = property6.compareTo((org.joda.time.ReadablePartial) yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2023 + "'", int13 == 2023);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test11005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11005");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date7 = new java.util.Date(69, (int) '4', 969, 292278993, 4, 969);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder12 = builder0.setTimeOfDay(85500001, 122, 2032);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: instant has been set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Wed Jan 04 09:20:09 GMT 35319");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test11006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11006");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        int int4 = timeZone1.getOffset(0L);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay5.plusDays(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay7.withField(dateTimeFieldType8, 69);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.plusDays(2022);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.withMonthOfYear(4);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight18 = yearMonthDay16.toDateMidnight(dateTimeZone17);
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = dateTimeZone17.getShortName(781L, locale20);
        java.lang.String str22 = yearMonthDay10.toString("0020-02-21", locale20);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone1, locale20);
        java.lang.String str24 = timeZone1.getID();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = timeZone1.getOffset(687, 53469, (-23), 11, 53607000, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0020-02-21" + "'", str22, "0020-02-21");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645455301026,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=55,SECOND=1,MILLISECOND=26,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GMT" + "'", str24, "GMT");
    }

    @Test
    public void test11007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11007");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = property1.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime3 = property1.roundCeilingCopy();
        org.joda.time.DateTime dateTime4 = property1.roundFloorCopy();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test11008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11008");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(6);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        org.joda.time.MutableDateTime mutableDateTime11 = property6.set("1", locale10);
        org.joda.time.MutableDateTime mutableDateTime13 = property6.addWrapField(21);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        int int15 = mutableDateTime14.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateTime dateTime20 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime14, (org.joda.time.ReadableInstant) dateTime19, periodType22);
        org.joda.time.DateTime dateTime24 = dateTime19.toDateTimeISO();
        boolean boolean25 = mutableDateTime13.isBefore((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime13.dayOfMonth();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = dateTime27.minusYears((int) ' ');
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime();
        int int31 = mutableDateTime30.getDayOfMonth();
        org.joda.time.Instant instant32 = mutableDateTime30.toInstant();
        org.joda.time.MutableDateTime mutableDateTime33 = instant32.toMutableDateTime();
        boolean boolean34 = dateTime27.isEqual((org.joda.time.ReadableInstant) instant32);
        int int35 = dateTime27.getMinuteOfDay();
        org.joda.time.DateTime.Property property36 = dateTime27.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime39 = dateTime27.withField(dateTimeFieldType37, 53376419);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime13.property(dateTimeFieldType37);
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 0, 0L);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period45 = period43.withPeriodType(periodType44);
        org.joda.time.Period period47 = period43.withDays((int) (short) 100);
        org.joda.time.Period period48 = period43.negated();
        org.joda.time.Period period50 = period43.withMinutes(9);
        org.joda.time.Period period52 = period43.withHours(117);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(chronology53);
        org.joda.time.DateMidnight.Property property55 = dateMidnight54.era();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight54.minusWeeks((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight54.plusMonths(9);
        org.joda.time.Duration duration60 = period43.toDurationTo((org.joda.time.ReadableInstant) dateMidnight59);
        mutableDateTime13.add((org.joda.time.ReadablePeriod) period43);
        long long62 = mutableDateTime13.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 21 + "'", int15 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 21 + "'", int31 == 21);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 895 + "'", int35 == 895);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-61472908800000L) + "'", long62 == (-61472908800000L));
    }

    @Test
    public void test11009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11009");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.minuteOfHour();
        int int4 = localDateTime2.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusWeeks(11);
        int int7 = localDateTime2.size();
        org.joda.time.ReadablePartial readablePartial8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withFields(readablePartial8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean13 = dateTimeZone11.isStandardOffset((long) 'u');
        org.joda.time.DateTime dateTime14 = localDateTime2.toDateTime(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime2.minusSeconds((int) (short) 0);
        int int17 = localDateTime16.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = localDateTime16.getValue(1439);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1439");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
    }

    @Test
    public void test11010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11010");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int5 = dateTimeZone3.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(dateTimeZone3);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType10 = periodType9.withWeeksRemoved();
        org.joda.time.DurationFieldType durationFieldType12 = periodType10.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime18.toMutableDateTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = timeOfDay24.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay24.plusHours((-1));
        org.joda.time.Chronology chronology28 = timeOfDay27.getChronology();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.TimeOfDay timeOfDay31 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay31.withChronologyRetainFields(chronology32);
        long long35 = chronology28.set((org.joda.time.ReadablePartial) timeOfDay31, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(chronology28);
        org.joda.time.DateTime dateTime37 = dateTime18.toDateTime(chronology28);
        org.joda.time.DateTimeField dateTimeField38 = chronology28.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = chronology28.millisOfDay();
        org.joda.time.DurationField durationField40 = chronology28.centuries();
        org.joda.time.DurationField durationField41 = durationFieldType13.getField(chronology28);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((-86399999L), 311L, periodType10, chronology28);
        mutableDateTime6.setChronology(chronology28);
        org.joda.time.Period period44 = new org.joda.time.Period((long) 905, (long) (-325), chronology28);
        int int45 = period44.getMonths();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-86399999L) + "'", long35 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test11011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11011");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(53510000);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test11012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11012");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 21);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay1.minusMinutes(888);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfDay();
        org.joda.time.LocalTime localTime10 = property8.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime11 = property8.roundHalfFloorCopy();
        int int12 = localTime11.size();
        org.joda.time.LocalTime localTime14 = localTime11.minusSeconds(100);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType19 = periodType18.withWeeksRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17, periodType18);
        org.joda.time.Period period22 = period20.withSeconds(0);
        org.joda.time.Period period24 = period22.plusMinutes((int) (byte) 1);
        org.joda.time.Period period26 = period22.withSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period29 = period22.withField(durationFieldType27, 14);
        org.joda.time.LocalTime localTime31 = localTime11.withFieldAdded(durationFieldType27, (int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay5.withFieldAdded(durationFieldType27, 32772);
        int int34 = timeOfDay5.getSecondOfMinute();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test11013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11013");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusYears((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime2.withWeekyear(32772);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.TimeOfDay timeOfDay6 = dateTime5.toTimeOfDay();
        org.joda.time.DateTime dateTime7 = timeOfDay6.toDateTimeToday();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        int int10 = mutableDateTime9.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType17 = periodType16.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime9, (org.joda.time.ReadableInstant) dateTime14, periodType17);
        org.joda.time.PeriodType periodType19 = periodType17.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod23 = mutablePeriod22.copy();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = timeOfDay30.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay30.plusHours((-1));
        org.joda.time.Chronology chronology34 = timeOfDay33.getChronology();
        mutablePeriod22.setPeriod((long) (byte) 1, 845L, chronology34);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1009843200021L, periodType17, chronology34);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.monthOfYear();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType42 = periodType41.withWeeksRemoved();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight39, readableDuration40, periodType41);
        org.joda.time.Period period45 = period43.withSeconds(0);
        org.joda.time.Period period47 = period45.plusMinutes((int) (byte) 1);
        org.joda.time.Period period49 = period45.withSeconds((int) (byte) 10);
        org.joda.time.Period period50 = period45.toPeriod();
        int int51 = period45.getMillis();
        int[] intArray53 = chronology34.get((org.joda.time.ReadablePeriod) period45, (long) 16);
        org.joda.time.Period period55 = period45.withHours(2922789);
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay6.plus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.TimeOfDay timeOfDay58 = timeOfDay6.minusHours(184);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21 + "'", int10 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 0, 0, 0, 0, 0, 16]");
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(timeOfDay58);
    }

    @Test
    public void test11014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11014");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(6);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        org.joda.time.MutableDateTime mutableDateTime11 = property6.set("1", locale10);
        boolean boolean12 = locale10.hasExtensions();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test11015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11015");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 0, 0L);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period9 = period7.withPeriodType(periodType8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = timeOfDay20.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay20.plusHours((-1));
        org.joda.time.Chronology chronology24 = timeOfDay23.getChronology();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.TimeOfDay timeOfDay27 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.withChronologyRetainFields(chronology28);
        long long31 = chronology24.set((org.joda.time.ReadablePartial) timeOfDay27, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(chronology24);
        org.joda.time.DateTime dateTime33 = dateTime14.toDateTime(chronology24);
        org.joda.time.DateTimeField dateTimeField34 = chronology24.yearOfCentury();
        org.joda.time.DurationField durationField35 = chronology24.centuries();
        org.joda.time.DateTimeField dateTimeField36 = chronology24.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 'a', (long) 7, periodType8, chronology24);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) '4', chronology24);
        org.joda.time.Period period39 = new org.joda.time.Period(58L, periodType1, chronology24);
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay(chronology24);
        org.joda.time.DateTimeField dateTimeField41 = chronology24.weekyearOfCentury();
        long long43 = dateTimeField41.roundHalfFloor(55L);
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime();
        int int47 = mutableDateTime46.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone50);
        org.joda.time.DateTime dateTime52 = dateTime51.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType54 = periodType53.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime46, (org.joda.time.ReadableInstant) dateTime51, periodType54);
        org.joda.time.PeriodType periodType56 = periodType54.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod60 = mutablePeriod59.copy();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.TimeOfDay timeOfDay65 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.TimeOfDay timeOfDay67 = timeOfDay65.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = timeOfDay67.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay70 = timeOfDay67.plusHours((-1));
        org.joda.time.Chronology chronology71 = timeOfDay70.getChronology();
        mutablePeriod59.setPeriod((long) (byte) 1, 845L, chronology71);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(1009843200021L, periodType54, chronology71);
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight(389L, chronology71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth75 = new org.joda.time.YearMonth((java.lang.Object) dateTimeField41, chronology71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.field.RemainderDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-86399999L) + "'", long31 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 21 + "'", int47 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(mutablePeriod60);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(chronology71);
    }

    @Test
    public void test11016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11016");
        java.lang.Object obj0 = null;
        org.joda.time.Period period1 = new org.joda.time.Period(obj0);
        org.joda.time.Period period3 = period1.withWeeks(59);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.minutes();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateTime dateTime10 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime10.toMutableDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay16.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay16.plusHours((-1));
        org.joda.time.Chronology chronology20 = timeOfDay19.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.withChronologyRetainFields(chronology24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) timeOfDay23, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(chronology20);
        org.joda.time.DateTime dateTime29 = dateTime10.toDateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField30 = chronology20.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = chronology20.millisOfDay();
        org.joda.time.DurationField durationField32 = chronology20.centuries();
        org.joda.time.Period period33 = new org.joda.time.Period(818L, periodType5, chronology20);
        org.joda.time.PeriodType periodType34 = periodType5.withSecondsRemoved();
        org.joda.time.Period period35 = period1.withPeriodType(periodType5);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-86399999L) + "'", long27 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
    }

    @Test
    public void test11017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11017");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int3 = dateTimeZone1.getOffset(0L);
        boolean boolean4 = dateTimeZone1.isFixed();
        long long6 = dateTimeZone1.previousTransition((long) 53593846);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 53593846L + "'", long6 == 53593846L);
    }

    @Test
    public void test11018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11018");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology3 = localDate2.getChronology();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableDuration4, (org.joda.time.ReadableInstant) mutableDateTime5);
        int[] intArray8 = chronology3.get((org.joda.time.ReadablePeriod) mutablePeriod6, (long) 100);
        java.util.Calendar.Builder builder9 = builder0.setFields(intArray8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.year();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.lang.String str19 = locale18.getDisplayScript();
        java.util.Locale.setDefault(locale18);
        java.lang.String str21 = locale18.getISO3Language();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = locale18.getDisplayScript(locale22);
        int int24 = dateTimeField17.getMaximumShortTextLength(locale22);
        java.util.Calendar.Builder builder25 = builder0.setLocale(locale22);
        java.util.Calendar.Builder builder30 = builder0.setTimeOfDay(67, 969, 100, (-292275054));
        java.util.Calendar.Builder builder32 = builder0.setLenient(false);
        java.util.Calendar.Builder builder36 = builder32.setDate(51, 2100001, 49);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime();
        int int38 = mutableDateTime37.getHourOfDay();
        java.util.Date date39 = mutableDateTime37.toDate();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder40 = builder36.setInstant(date39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zho" + "'", str21, "zho");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 14 + "'", int38 == 14);
        org.junit.Assert.assertNotNull(date39);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Mon Feb 21 14:55:01 GMT 2022");
    }

    @Test
    public void test11019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11019");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        boolean boolean4 = mutableDateTime0.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime0.setZone(dateTimeZone6);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone6);
        org.joda.time.LocalDate.Property property12 = localDate11.era();
        int int13 = localDate11.getWeekyear();
        int int14 = localDate11.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test11020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11020");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate.Property property2 = localDate1.era();
        int int3 = localDate1.getWeekyear();
        int int4 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate.Property property5 = localDate1.yearOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test11021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11021");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay5.plusDays(2022);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.withMonthOfYear(4);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight11 = yearMonthDay9.toDateMidnight(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime();
        int int13 = mutableDateTime12.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType20 = periodType19.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableInstant) dateTime17, periodType20);
        int int22 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Interval interval23 = localDate4.toInterval(dateTimeZone10);
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay24.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime27 = yearMonthDay24.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval28 = yearMonthDay24.toInterval();
        org.joda.time.Period period29 = interval28.toPeriod();
        org.joda.time.Interval interval30 = interval28.toInterval();
        org.joda.time.MutableInterval mutableInterval31 = interval28.toMutableInterval();
        org.joda.time.Period period32 = interval28.toPeriod();
        org.joda.time.MutableInterval mutableInterval33 = interval28.toMutableInterval();
        org.joda.time.Chronology chronology34 = interval28.getChronology();
        boolean boolean35 = interval23.isBefore((org.joda.time.ReadableInterval) interval28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval37 = interval28.withEndMillis(702L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21 + "'", int13 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test11022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11022");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int5 = localDate1.get(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate1.plusDays((int) (byte) 0);
        int int8 = localDate1.getDayOfMonth();
        int int9 = localDate1.getYearOfEra();
        org.joda.time.LocalDate localDate11 = localDate1.plusDays(1);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDate11.getFields();
        int int13 = localDate11.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test11023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11023");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.adjustOffset((long) ' ', true);
        java.lang.Object obj4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(obj4, dateTimeZone5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.secondOfMinute();
        long long8 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property7.getLocalDateTime();
        boolean boolean11 = property7.equals((java.lang.Object) 1.0f);
        org.joda.time.LocalDateTime localDateTime13 = property7.setCopy((int) (short) 1);
        boolean boolean14 = dateTimeZone0.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusWeeks(1900);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMillisOfSecond(2099);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2099 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 504L + "'", long8 == 504L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test11024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11024");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("0001-02-21T14:24:16.191");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0001-02-21T14:24:16.191\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11025");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime9 = property6.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime11 = property6.add((long) 1);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.weekyear();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate16 = localDate14.plusWeeks(9);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '4');
        org.joda.time.LocalDate localDate19 = localDate16.plus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.LocalDate localDate21 = localDate19.minusYears(51);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.LocalDate.Property property23 = localDate19.property(dateTimeFieldType22);
        mutableDateTime11.set(dateTimeFieldType22, 3);
        mutableDateTime11.addWeekyears(316);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) -1, chronology29);
        org.joda.time.LocalDate localDate32 = localDate30.minusYears(1);
        org.joda.time.LocalDate.Property property33 = localDate30.year();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(chronology34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType38 = periodType37.withWeeksRemoved();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight35, readableDuration36, periodType37);
        org.joda.time.Period period41 = period39.withSeconds(0);
        org.joda.time.Period period43 = period41.plusMinutes((int) (byte) 1);
        org.joda.time.Period period45 = period41.withSeconds((int) (byte) 10);
        org.joda.time.Period period46 = period41.toPeriod();
        org.joda.time.LocalDate localDate47 = localDate30.minus((org.joda.time.ReadablePeriod) period46);
        int int48 = localDate47.getDayOfWeek();
        org.joda.time.LocalDate.Property property49 = localDate47.weekOfWeekyear();
        org.joda.time.LocalDate localDate51 = property49.setCopy(27);
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay52.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property55 = yearMonthDay52.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property55.withMinimumValue();
        int int57 = property55.get();
        org.joda.time.YearMonthDay yearMonthDay58 = property55.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay59.plusDays(2022);
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay61.withMonthOfYear(4);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int65 = yearMonthDay61.get(dateTimeFieldType64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = yearMonthDay61.toDateTimeAtMidnight(dateTimeZone66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.year();
        int int69 = dateTime67.get(dateTimeFieldType68);
        org.joda.time.MutableDateTime mutableDateTime70 = dateTime67.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime();
        int int72 = mutableDateTime71.getDayOfMonth();
        org.joda.time.Instant instant73 = mutableDateTime71.toInstant();
        boolean boolean75 = mutableDateTime71.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int79 = dateTimeZone77.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime71.setZone(dateTimeZone77);
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology83 = localDate82.getChronology();
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(chronology83);
        org.joda.time.DateTimeZone dateTimeZone85 = dateTime84.getZone();
        org.joda.time.MutableDateTime mutableDateTime86 = mutableDateTime71.toMutableDateTime(dateTimeZone85);
        org.joda.time.LocalDate localDate87 = new org.joda.time.LocalDate(dateTimeZone85);
        mutableDateTime70.setZone(dateTimeZone85);
        org.joda.time.DateMidnight dateMidnight89 = yearMonthDay58.toDateMidnight(dateTimeZone85);
        org.joda.time.DateTime dateTime90 = localDate51.toDateTimeAtMidnight(dateTimeZone85);
        org.joda.time.LocalDate localDate91 = org.joda.time.LocalDate.now(dateTimeZone85);
        mutableDateTime11.setZoneRetainFields(dateTimeZone85);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2027 + "'", int69 == 2027);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 21 + "'", int72 == 21);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(mutableDateTime86);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(localDate91);
    }

    @Test
    public void test11026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11026");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(366, 899, 53324166);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 366 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11027");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        org.joda.time.YearMonthDay yearMonthDay4 = property3.withMinimumValue();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = property3.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay7 = property3.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay8 = property3.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay9 = property3.getYearMonthDay();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
    }

    @Test
    public void test11028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11028");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        java.lang.Object obj3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(obj3, dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusMinutes((int) (short) 100);
        int int16 = localDateTime11.size();
        boolean boolean17 = dateTimeZone1.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalDateTime.Property property18 = localDateTime11.secondOfMinute();
        int int19 = localDateTime11.getYearOfCentury();
        int int20 = localDateTime11.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 21 + "'", int20 == 21);
    }

    @Test
    public void test11029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11029");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime5.toMutableDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusHours((-1));
        org.joda.time.Chronology chronology15 = timeOfDay14.getChronology();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.withChronologyRetainFields(chronology19);
        long long22 = chronology15.set((org.joda.time.ReadablePartial) timeOfDay18, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(chronology15);
        org.joda.time.DateTime dateTime24 = dateTime5.toDateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField25 = chronology15.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) 1, chronology15);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime localTime30 = localTime28.plusHours((int) (short) 10);
        org.joda.time.LocalTime localTime32 = localTime28.minusMinutes((int) '4');
        long long34 = chronology15.set((org.joda.time.ReadablePartial) localTime32, 0L);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime.Property property36 = localTime32.millisOfDay();
        org.joda.time.LocalTime localTime37 = property36.withMinimumValue();
        org.joda.time.LocalTime localTime38 = property36.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-86399999L) + "'", long22 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 83280001L + "'", long34 == 83280001L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
    }

    @Test
    public void test11030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11030");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.LocalDateTime localDateTime5 = property3.getLocalDateTime();
        boolean boolean7 = property3.equals((java.lang.Object) 1.0f);
        org.joda.time.LocalDateTime localDateTime9 = property3.setCopy((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears((int) 'u');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusSeconds(53);
        int int14 = localDateTime9.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.plusMillis(2139);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMinuteOfHour(2134);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2134 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 750L + "'", long4 == 750L);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test11031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11031");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(6);
        mutableDateTime8.addDays((int) (byte) -1);
        int int11 = mutableDateTime8.getYear();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Instant instant13 = dateTime12.toInstant();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime8, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTime dateTime20 = timeOfDay19.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = timeOfDay22.toDateTimeToday();
        int int24 = dateTime23.getYearOfEra();
        boolean boolean25 = interval14.isAfter((org.joda.time.ReadableInstant) dateTime23);
        int int26 = dateTime23.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int28 = dateTime23.get(dateTimeFieldType27);
        org.joda.time.DateTime dateTime30 = dateTime23.withYear(53382349);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = dateTime23.withHourOfDay(76);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 76 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1975 + "'", int11 == 1975);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 23 + "'", int28 == 23);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test11032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11032");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime9 = property6.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime10 = property6.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime11 = property6.roundFloor();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.Period period14 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period16 = period14.minusHours((int) '4');
        org.joda.time.Period period18 = period14.minusYears(10);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime11, (org.joda.time.ReadablePeriod) period14);
        org.joda.time.Period period21 = period14.plusMonths(292278174);
        org.joda.time.Period period23 = period21.withSeconds(969);
        org.joda.time.Period period25 = period21.withMillis(346);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateTime dateTime30 = dateTime29.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime30.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.year();
        org.joda.time.MutableDateTime mutableDateTime34 = property32.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime35 = property32.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime36 = property32.roundHalfFloor();
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.Instant instant39 = instant37.withMillis(328L);
        mutableDateTime36.setDate((org.joda.time.ReadableInstant) instant37);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime();
        int int42 = mutableDateTime41.getDayOfMonth();
        org.joda.time.Instant instant43 = mutableDateTime41.toInstant();
        boolean boolean45 = mutableDateTime41.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int49 = dateTimeZone47.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime41.setZone(dateTimeZone47);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology53 = localDate52.getChronology();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime54.getZone();
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime41.toMutableDateTime(dateTimeZone55);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(dateTimeZone55);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = localDate57.getFieldType(0);
        org.joda.time.LocalTime localTime60 = null;
        org.joda.time.DateTime dateTime61 = localDate57.toDateTime(localTime60);
        org.joda.time.DateTime.Property property62 = dateTime61.weekyear();
        boolean boolean63 = mutableDateTime36.isBefore((org.joda.time.ReadableInstant) dateTime61);
        boolean boolean64 = period21.equals((java.lang.Object) dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 21 + "'", int42 == 21);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test11033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11033");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 969);
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 0, 0L);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period13 = period11.withPeriodType(periodType12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime18.toMutableDateTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = timeOfDay24.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay24.plusHours((-1));
        org.joda.time.Chronology chronology28 = timeOfDay27.getChronology();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.TimeOfDay timeOfDay31 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay31.withChronologyRetainFields(chronology32);
        long long35 = chronology28.set((org.joda.time.ReadablePartial) timeOfDay31, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(chronology28);
        org.joda.time.DateTime dateTime37 = dateTime18.toDateTime(chronology28);
        org.joda.time.DateTimeField dateTimeField38 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField39 = chronology28.centuries();
        org.joda.time.DateTimeField dateTimeField40 = chronology28.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 'a', (long) 7, periodType12, chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter6.withChronology(chronology28);
        org.joda.time.format.DateTimePrinter dateTimePrinter43 = null;
        org.joda.time.format.DateTimeParser dateTimeParser44 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter43, dateTimeParser44);
        boolean boolean46 = dateTimeFormatter45.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser47 = dateTimeFormatter45.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter45.withPivotYear((java.lang.Integer) 969);
        org.joda.time.Period period54 = new org.joda.time.Period((long) (byte) 0, 0L);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period56 = period54.withPeriodType(periodType55);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone59);
        org.joda.time.DateTime dateTime61 = dateTime60.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime61.toMutableDateTime();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.TimeOfDay timeOfDay65 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.TimeOfDay timeOfDay67 = timeOfDay65.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = timeOfDay67.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay70 = timeOfDay67.plusHours((-1));
        org.joda.time.Chronology chronology71 = timeOfDay70.getChronology();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.TimeOfDay timeOfDay74 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.TimeOfDay timeOfDay76 = timeOfDay74.withChronologyRetainFields(chronology75);
        long long78 = chronology71.set((org.joda.time.ReadablePartial) timeOfDay74, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay79 = new org.joda.time.TimeOfDay(chronology71);
        org.joda.time.DateTime dateTime80 = dateTime61.toDateTime(chronology71);
        org.joda.time.DateTimeField dateTimeField81 = chronology71.yearOfCentury();
        org.joda.time.DurationField durationField82 = chronology71.centuries();
        org.joda.time.DateTimeField dateTimeField83 = chronology71.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((long) 'a', (long) 7, periodType55, chronology71);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = dateTimeFormatter49.withChronology(chronology71);
        java.lang.String str86 = chronology71.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter87 = dateTimeFormatter6.withChronology(chronology71);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 899);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = dateTimeFormatter6.withDefaultYear(857);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-86399999L) + "'", long35 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(dateTimeParser47);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(timeOfDay74);
        org.junit.Assert.assertNotNull(timeOfDay76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-86399999L) + "'", long78 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeFormatter85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ISOChronology[UTC]" + "'", str86, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeFormatter87);
        org.junit.Assert.assertNotNull(dateTimeFormatter89);
        org.junit.Assert.assertNotNull(dateTimeFormatter91);
    }

    @Test
    public void test11034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11034");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("00:00:00.001");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        int int3 = timeZone1.getRawOffset();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645455301900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=55,SECOND=1,MILLISECOND=900,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test11035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11035");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime10 = property6.addWrapField(0);
        org.joda.time.MutableDateTime mutableDateTime12 = property6.add((long) 9);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone15);
        int int17 = dateTime16.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime16.toDateTime(dateTimeZone19);
        mutableDateTime12.setZone(dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        int int24 = mutableDateTime23.getHourOfDay();
        java.util.Date date25 = mutableDateTime23.toDate();
        int int26 = date25.getMinutes();
        java.lang.Object obj27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(obj27, dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.minus((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withWeekyear((int) '4');
        java.util.Date date38 = localDateTime35.toDate();
        date38.setHours((int) (byte) 1);
        boolean boolean41 = date25.before(date38);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.fromDateFields(date38);
        boolean boolean43 = dateTimeZone19.isLocalDateTimeGap(localDateTime42);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(dateTimeZone19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period45 = new org.joda.time.Period((java.lang.Object) dateTimeZone19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Mon Feb 21 14:55:01 GMT 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 55 + "'", int26 == 55);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(date38);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Mon Feb 21 01:55:01 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test11036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11036");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 250);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate5 = localDate3.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int7 = localDate3.get(dateTimeFieldType6);
        org.joda.time.LocalDate localDate9 = localDate3.plusDays((int) (byte) 0);
        int int10 = localDate3.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(821L);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus(41L);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.dayOfYear();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight16.withDurationAdded((long) 17, 1);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight16.withEra((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight16.withWeekyear(2022);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight12, (org.joda.time.ReadableInstant) dateMidnight24);
        int int26 = dateMidnight12.getMillisOfSecond();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight12.minus((-86399999L));
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) -1, chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.LocalDate localDate34 = localDate31.withField(dateTimeFieldType32, 10);
        org.joda.time.DateMidnight.Property property35 = dateMidnight12.property(dateTimeFieldType32);
        boolean boolean36 = localDate3.isSupported(dateTimeFieldType32);
        int int37 = yearMonthDay1.get(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test11037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11037");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        int int2 = mutableDateTime1.getDayOfMonth();
        org.joda.time.Instant instant3 = mutableDateTime1.toInstant();
        boolean boolean5 = mutableDateTime1.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int9 = dateTimeZone7.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime1.setZone(dateTimeZone7);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.LocalDate.Property property13 = localDate12.era();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        java.util.Locale locale20 = java.util.Locale.getDefault();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateTime dateTime28 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.year();
        org.joda.time.DateTimeField dateTimeField31 = property30.getField();
        java.util.Locale locale32 = java.util.Locale.PRC;
        java.lang.String str33 = locale32.getDisplayScript();
        java.util.Locale.setDefault(locale32);
        java.lang.String str35 = locale32.getISO3Language();
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = locale32.getDisplayScript(locale36);
        int int38 = dateTimeField31.getMaximumShortTextLength(locale36);
        long long41 = dateTimeField31.getDifferenceAsLong(525L, (long) (short) -1);
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.lang.String str44 = dateTimeField31.getAsText(525L, locale43);
        java.lang.String str45 = dateTimeZone22.getShortName(1645454846663L, locale43);
        java.lang.String str46 = locale20.getDisplayVariant(locale43);
        java.lang.String str47 = dateTimeZone18.getName(1645454846663L, locale43);
        org.joda.time.DateTime dateTime48 = localDate12.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(1645454849969L, dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Interval interval51 = localDate49.toInterval(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 21 + "'", int2 == 21);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "zho" + "'", str35, "zho");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970" + "'", str44, "1970");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval51);
    }

    @Test
    public void test11038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11038");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.weekOfWeekyear();
        boolean boolean4 = dateMidnight1.isEqualNow();
        org.joda.time.LocalDate localDate5 = dateMidnight1.toLocalDate();
        org.joda.time.Interval interval6 = localDate5.toInterval();
        org.joda.time.LocalDate localDate8 = localDate5.plusDays(22);
        org.joda.time.LocalDate localDate10 = localDate8.plusDays(53436);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = localDate8.getFields();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
    }

    @Test
    public void test11039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11039");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.PRC;
        java.lang.String str2 = locale1.getDisplayScript();
        java.util.Locale.setDefault(locale1);
        java.lang.String str4 = locale1.getISO3Language();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = timeOfDay9.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay9.plusHours((-1));
        org.joda.time.Chronology chronology13 = timeOfDay12.getChronology();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.withChronologyRetainFields(chronology17);
        long long20 = chronology13.set((org.joda.time.ReadablePartial) timeOfDay16, (long) (byte) -1);
        org.joda.time.TimeOfDay.Property property21 = timeOfDay16.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay23 = property21.addToCopy(23);
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        int int25 = property21.getMaximumShortTextLength(locale24);
        java.util.Locale locale26 = java.util.Locale.ITALY;
        int int27 = property21.getMaximumShortTextLength(locale26);
        java.lang.String str28 = locale1.getDisplayScript(locale26);
        java.lang.String str29 = locale1.getDisplayName();
        java.util.Locale.Builder builder30 = builder0.setLocale(locale1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder32 = builder30.setVariant("\u82f1\u6587 (STANDARD)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ?? (STANDARD) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zho" + "'", str4, "zho");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-86399999L) + "'", long20 == (-86399999L));
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str29, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test11040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11040");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime localTime3 = localTime1.plusHours((int) (short) 10);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime();
        int int5 = mutableDateTime4.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateTime dateTime10 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType12 = periodType11.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadableInstant) dateTime9, periodType12);
        org.joda.time.PeriodType periodType14 = periodType12.withDaysRemoved();
        boolean boolean15 = localTime3.equals((java.lang.Object) periodType14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean17 = localTime3.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime22.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.year();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime27 = property24.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime28 = property24.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime29 = property24.roundFloor();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.weekOfWeekyear();
        org.joda.time.Period period32 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period34 = period32.minusHours((int) '4');
        org.joda.time.Period period36 = period32.minusYears(10);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime29, (org.joda.time.ReadablePeriod) period32);
        org.joda.time.Period period39 = period32.plusMonths(292278174);
        org.joda.time.LocalTime localTime40 = localTime3.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTime dateTime41 = localTime3.toDateTimeToday();
        java.lang.Object obj42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(obj42, dateTimeZone43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.secondOfMinute();
        long long46 = property45.remainder();
        org.joda.time.LocalDateTime localDateTime47 = property45.getLocalDateTime();
        boolean boolean49 = property45.equals((java.lang.Object) 1.0f);
        java.util.Locale.Category category50 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale51 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category50, locale51);
        int int53 = property45.getMaximumTextLength(locale51);
        java.lang.String str54 = property45.getName();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight.Property property57 = dateMidnight56.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight58 = property57.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone61);
        org.joda.time.DateTime dateTime63 = dateTime62.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime63.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime64.year();
        org.joda.time.DateTimeField dateTimeField66 = property65.getField();
        long long69 = dateTimeField66.add((long) 21, (long) ' ');
        org.joda.time.DurationField durationField70 = dateTimeField66.getRangeDurationField();
        java.util.Locale locale72 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet73 = locale72.getExtensionKeys();
        java.lang.String str74 = dateTimeField66.getAsText(21, locale72);
        java.lang.String str75 = locale72.getLanguage();
        int int76 = property57.getMaximumTextLength(locale72);
        java.lang.String str77 = property45.getAsText(locale72);
        org.joda.time.LocalDateTime localDateTime78 = property45.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime79 = property45.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime.Property property81 = localDateTime79.property(dateTimeFieldType80);
        java.lang.String str82 = dateTimeFieldType80.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime84 = localTime3.withField(dateTimeFieldType80, 2269);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2269 for clockhourOfDay must be in the range [1,24]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21 + "'", int5 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property45);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 60L + "'", long46 == 60L);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + category50 + "' != '" + java.util.Locale.Category.FORMAT + "'", category50.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "secondOfMinute" + "'", str54, "secondOfMinute");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1009843200021L + "'", long69 == 1009843200021L);
        org.junit.Assert.assertNull(durationField70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "21" + "'", str74, "21");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "fr" + "'", str75, "fr");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2" + "'", str77, "2");
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "clockhourOfDay" + "'", str82, "clockhourOfDay");
    }

    @Test
    public void test11041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11041");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '#');
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32770);
        org.joda.time.DateTime dateTime11 = dateTime7.plusWeeks(53442580);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay16.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay16.plusHours((-1));
        org.joda.time.Chronology chronology20 = timeOfDay19.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.withChronologyRetainFields(chronology24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) timeOfDay23, (long) (byte) -1);
        org.joda.time.TimeOfDay.Property property28 = timeOfDay23.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay30 = property28.addWrapFieldToCopy(14);
        org.joda.time.TimeOfDay timeOfDay32 = property28.setCopy(0);
        org.joda.time.TimeOfDay.Property property33 = timeOfDay32.hourOfDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.TimeOfDay timeOfDay36 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.withChronologyRetainFields(chronology37);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay38.minusMinutes(10);
        int int41 = timeOfDay38.getMinuteOfHour();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateMidnight.Property property44 = dateMidnight43.dayOfYear();
        org.joda.time.DateMidnight dateMidnight45 = property44.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight.Property property47 = dateMidnight45.property(dateTimeFieldType46);
        int int48 = timeOfDay38.indexOf(dateTimeFieldType46);
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType46.getDurationType();
        boolean boolean50 = timeOfDay32.isSupported(dateTimeFieldType46);
        org.joda.time.DateTime.Property property51 = dateTime11.property(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-86399999L) + "'", long27 == (-86399999L));
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test11042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11042");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(6);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        org.joda.time.MutableDateTime mutableDateTime11 = property6.set("1", locale10);
        org.joda.time.MutableDateTime mutableDateTime13 = property6.addWrapField(21);
        org.joda.time.MutableDateTime mutableDateTime14 = property6.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property6.roundFloor();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateTime dateTime20 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime20.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.year();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime25 = property22.roundHalfFloor();
        mutableDateTime25.addMinutes(21);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) mutableDateTime25);
        mutableDateTime15.add(251L);
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime15.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone31);
    }

    @Test
    public void test11043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11043");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        int int6 = localDateTime2.getValue(2);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone9);
        int int11 = dateTime10.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTime(dateTimeZone13);
        org.joda.time.DateTime.Property property16 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime17 = property16.roundHalfEvenCopy();
        boolean boolean18 = localDateTime2.equals((java.lang.Object) property16);
        int int19 = localDateTime2.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime2.withHourOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime2.millisOfSecond();
        org.joda.time.DurationField durationField23 = property22.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime24 = property22.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime25 = property22.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime26 = property22.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime27 = property22.withMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21 + "'", int6 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test11044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11044");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(768516514632550000L, 11739168000000L);
    }

    @Test
    public void test11045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11045");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("22");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate5 = localDate3.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int7 = localDate3.get(dateTimeFieldType6);
        org.joda.time.DateTime dateTime8 = dateTime1.withFields((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval();
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.DateTime dateTime15 = dateTime1.withChronology(chronology14);
        org.joda.time.DateTime dateTime16 = dateTime1.withLaterOffsetAtOverlap();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime16.toMutableDateTimeISO();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) -1, chronology19);
        org.joda.time.LocalDate localDate22 = localDate20.minusYears(1);
        org.joda.time.LocalDate.Property property23 = localDate20.year();
        int int24 = localDate20.getYearOfEra();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay25.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime28 = yearMonthDay25.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval29 = yearMonthDay25.toInterval();
        org.joda.time.LocalDate localDate30 = yearMonthDay25.toLocalDate();
        int[] intArray31 = localDate30.getValues();
        org.joda.time.LocalDate.Property property32 = localDate30.monthOfYear();
        org.joda.time.LocalDate localDate34 = localDate30.plusMonths(53251426);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) -1, chronology36);
        org.joda.time.LocalDate localDate39 = localDate37.minusYears(1);
        org.joda.time.LocalDate.Property property40 = localDate37.year();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType45 = periodType44.withWeeksRemoved();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight42, readableDuration43, periodType44);
        org.joda.time.Period period48 = period46.withSeconds(0);
        org.joda.time.Period period50 = period48.plusMinutes((int) (byte) 1);
        org.joda.time.Period period52 = period48.withSeconds((int) (byte) 10);
        org.joda.time.Period period53 = period48.toPeriod();
        org.joda.time.LocalDate localDate54 = localDate37.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.Period period55 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate34, (org.joda.time.ReadablePartial) localDate54);
        int int56 = localDate20.compareTo((org.joda.time.ReadablePartial) localDate54);
        org.joda.time.DateTime dateTime57 = dateTime16.withFields((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTime dateTime59 = dateTime16.plusWeeks(33);
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay60.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime63 = yearMonthDay60.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval64 = yearMonthDay60.toInterval();
        org.joda.time.LocalDate localDate65 = yearMonthDay60.toLocalDate();
        org.joda.time.LocalDate localDate67 = localDate65.plusYears(51);
        org.joda.time.LocalDate localDate69 = localDate67.minusMonths(6);
        int int70 = localDate69.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone73);
        org.joda.time.DateTime dateTime75 = dateTime74.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime76 = dateTime75.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime76.year();
        org.joda.time.MutableDateTime mutableDateTime79 = property77.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime80 = property77.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime();
        int int82 = mutableDateTime81.getDayOfMonth();
        org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate86 = localDate84.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int88 = localDate84.get(dateTimeFieldType87);
        mutableDateTime81.set(dateTimeFieldType87, 2);
        boolean boolean91 = mutableDateTime80.isSupported(dateTimeFieldType87);
        java.lang.String str92 = dateTimeFieldType87.toString();
        org.joda.time.DurationFieldType durationFieldType93 = dateTimeFieldType87.getRangeDurationType();
        org.joda.time.LocalDate.Property property94 = localDate69.property(dateTimeFieldType87);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime96 = dateTime16.withField(dateTimeFieldType87, 53514000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53514000 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1969 + "'", int24 == 1969);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2022, 2, 21]");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2072 + "'", int70 == 2072);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 21 + "'", int82 == 21);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "dayOfMonth" + "'", str92, "dayOfMonth");
        org.junit.Assert.assertNotNull(durationFieldType93);
        org.junit.Assert.assertNotNull(property94);
    }

    @Test
    public void test11046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11046");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone.setDefault(timeZone1);
        timeZone1.setRawOffset(8);
        int int7 = timeZone1.getOffset(578L);
        int int9 = timeZone1.getOffset(51L);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
    }

    @Test
    public void test11047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11047");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = property3.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTime dateTime16 = timeOfDay15.toDateTimeToday();
        boolean boolean17 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime16.getWeekyear();
        org.joda.time.DateTime dateTime20 = dateTime16.plusHours(4);
        org.joda.time.DateTime.Property property21 = dateTime20.year();
        org.joda.time.DateTime dateTime23 = property21.addToCopy((long) 15);
        org.joda.time.DateTime dateTime24 = property21.withMinimumValue();
        org.joda.time.DateTime.Property property25 = dateTime24.millisOfSecond();
        org.joda.time.DateTime dateTime26 = property25.roundHalfEvenCopy();
        boolean boolean27 = dateMidnight4.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test11048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11048");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.minus((long) 4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateTime dateTime11 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime11.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.year();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime16 = property13.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime();
        int int18 = mutableDateTime17.getDayOfMonth();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate22 = localDate20.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int24 = localDate20.get(dateTimeFieldType23);
        mutableDateTime17.set(dateTimeFieldType23, 2);
        boolean boolean27 = mutableDateTime16.isSupported(dateTimeFieldType23);
        boolean boolean28 = dateTime3.isSupported(dateTimeFieldType23);
        org.joda.time.DateTime dateTime30 = dateTime3.plusMonths(2134);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime3.toMutableDateTime();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 21 + "'", int18 == 21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
    }

    @Test
    public void test11049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11049");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(11, (int) ' ');
        java.util.Date date9 = new java.util.Date(58, 52, 2022, (int) (byte) 10, 21);
        date9.setMonth(0);
        calendar0.setTime(date9);
        org.joda.time.YearMonthDay yearMonthDay13 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        boolean boolean14 = calendar0.isWeekDateSupported();
        calendar0.clear(0);
        calendar0.roll(6, true);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=8,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1967,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=12,DAY_OF_YEAR=13,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=21,SECOND=0,MILLISECOND=0,ZONE_OFFSET=8,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 12 10:21:00 GMT 1967");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test11050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11050");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(711, (-40), 346, 53469, 597);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53469 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11051");
        java.util.Date date6 = new java.util.Date(19, 19, 2072, (int) (byte) 0, 2032, 184);
        org.joda.time.YearMonth yearMonth7 = org.joda.time.YearMonth.fromDateFields(date6);
        org.joda.time.YearMonth yearMonth9 = yearMonth7.minusMonths(891);
        java.lang.Object obj10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(obj10, dateTimeZone11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.minuteOfHour();
        java.util.Locale locale15 = java.util.Locale.ROOT;
        org.joda.time.LocalDateTime localDateTime16 = property13.setCopy("58", locale15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = yearMonth9.compareTo((org.joda.time.ReadablePartial) localDateTime16);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date6.toString(), "Sun Apr 04 09:55:04 GMT 1926");
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test11052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11052");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        org.joda.time.YearMonthDay yearMonthDay5 = property3.addToCopy(0);
        org.joda.time.YearMonthDay yearMonthDay7 = property3.setCopy(2023);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate.Property property10 = localDate9.era();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight16 = yearMonthDay7.toDateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.yearOfCentury();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight21 = property20.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plusWeeks(20);
        org.joda.time.Interval interval24 = dateMidnight21.toInterval();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 58);
        org.joda.time.MutablePeriod mutablePeriod27 = mutablePeriod26.copy();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime();
        int int29 = mutableDateTime28.getDayOfMonth();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate31.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int35 = localDate31.get(dateTimeFieldType34);
        mutableDateTime28.set(dateTimeFieldType34, 2);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime28.add(durationFieldType38, (int) '4');
        mutablePeriod27.set(durationFieldType38, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone45);
        org.joda.time.DateTime dateTime47 = dateTime46.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime47.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime48.year();
        org.joda.time.MutableDateTime mutableDateTime51 = property49.addWrapField(6);
        mutableDateTime51.addMillis(0);
        boolean boolean54 = mutablePeriod27.equals((java.lang.Object) 0);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight21.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod27, 39);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight21.withMillis((-93706740008L));
        boolean boolean59 = dateMidnight16.equals((java.lang.Object) (-93706740008L));
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 21 + "'", int29 == 21);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test11053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11053");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType1 = null;
        boolean boolean2 = periodType0.isSupported(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(periodType0);
        java.lang.String str4 = periodType0.toString();
        org.joda.time.PeriodType periodType5 = periodType0.withHoursRemoved();
        org.joda.time.PeriodType periodType6 = periodType0.withMinutesRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PeriodType[YearMonthDayTime]" + "'", str4, "PeriodType[YearMonthDayTime]");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
    }

    @Test
    public void test11054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11054");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.monthOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateMidnight3);
        int int6 = mutableDateTime0.getEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone9);
        int int11 = dateTime10.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTime(dateTimeZone13);
        org.joda.time.DateTime.Property property16 = dateTime10.weekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTime();
        org.joda.time.DateTime.Property property23 = dateTime21.year();
        org.joda.time.DateTime dateTime24 = property23.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight25 = dateTime24.toDateMidnight();
        int int26 = property16.compareTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.minusDays((int) (byte) 10);
        org.joda.time.DateMidnight.Property property29 = dateMidnight25.dayOfWeek();
        java.lang.String str31 = dateMidnight25.toString("1970-01-01");
        org.joda.time.DateMidnight.Property property32 = dateMidnight25.dayOfYear();
        mutableDateTime0.setTime((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.era();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone40);
        org.joda.time.DateTime dateTime42 = dateTime41.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime42.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.year();
        org.joda.time.DateTimeField dateTimeField45 = property44.getField();
        java.util.Locale locale46 = java.util.Locale.PRC;
        java.lang.String str47 = locale46.getDisplayScript();
        java.util.Locale.setDefault(locale46);
        java.lang.String str49 = locale46.getISO3Language();
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.lang.String str51 = locale46.getDisplayScript(locale50);
        int int52 = dateTimeField45.getMaximumShortTextLength(locale50);
        java.lang.String str53 = property37.getAsText(locale50);
        java.lang.String str54 = mutableDateTime0.toString("\u4e0a\u5348 12:00:00", locale50);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone57);
        org.joda.time.DateTime dateTime59 = dateTime58.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime59.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.year();
        org.joda.time.MutableDateTime mutableDateTime63 = property61.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime64 = property61.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime66 = property61.add((long) 1);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime66.weekyear();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) mutableDateTime66);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01" + "'", str31, "1970-01-01");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "zho" + "'", str49, "zho");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "AD" + "'", str53, "AD");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u4e0a\u5348 12:00:00" + "'", str54, "\u4e0a\u5348 12:00:00");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test11055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11055");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(11, (int) ' ');
        java.util.Date date9 = new java.util.Date(58, 52, 2022, (int) (byte) 10, 21);
        date9.setMonth(0);
        calendar0.setTime(date9);
        org.joda.time.YearMonthDay yearMonthDay13 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        calendar0.setFirstDayOfWeek(2022);
        java.time.Instant instant16 = calendar0.toInstant();
        boolean boolean17 = calendar0.isWeekDateSupported();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology20 = localDate19.getChronology();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime21.getZone();
        java.lang.String str23 = dateTimeZone22.toString();
        java.util.TimeZone timeZone24 = dateTimeZone22.toTimeZone();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance();
        calendar25.setTimeInMillis(845L);
        long long28 = calendar25.getTimeInMillis();
        int int30 = calendar25.getActualMinimum(3);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        calendar31.setTimeInMillis(845L);
        java.util.TimeZone timeZone34 = null;
        calendar31.setTimeZone(timeZone34);
        int int37 = calendar31.getGreatestMinimum(9);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229");
        calendar31.setTimeZone(timeZone39);
        calendar25.setTimeZone(timeZone39);
        java.lang.String str42 = timeZone39.getID();
        int int43 = timeZone39.getRawOffset();
        boolean boolean44 = timeZone24.hasSameRules(timeZone39);
        calendar0.setTimeZone(timeZone39);
        timeZone39.setID("2022-02-21T14:49:47.657Z");
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-93706740008,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:49:47.657Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2022,minimalDaysInFirstWeek=1,ERA=1,YEAR=1967,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=12,DAY_OF_YEAR=12,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=21,SECOND=0,MILLISECOND=0,ZONE_OFFSET=8,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 12 10:21:00 GMT 1967");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=845,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:49:47.657Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=853,ZONE_OFFSET=8,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 845L + "'", long28 == 845L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=845,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:49:47.657Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=853,ZONE_OFFSET=8,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GMT" + "'", str42, "GMT");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test11056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11056");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight1, readableDuration2, periodType3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = timeOfDay10.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusHours((-1));
        org.joda.time.Chronology chronology14 = timeOfDay13.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        long long21 = chronology14.set((org.joda.time.ReadablePartial) timeOfDay17, (long) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = chronology14.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight1.withChronology(chronology14);
        org.joda.time.DateTimeField dateTimeField24 = chronology14.halfdayOfDay();
        org.joda.time.Chronology chronology25 = chronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfHalfday();
        org.joda.time.DurationField durationField27 = chronology25.days();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-86399999L) + "'", long21 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test11057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11057");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.TimeOfDay.Property property8 = timeOfDay4.millisOfSecond();
        org.joda.time.LocalTime localTime9 = timeOfDay4.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = localTime9.withHourOfDay(44);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 44 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test11058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11058");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval4 = yearMonthDay0.toInterval();
        org.joda.time.Period period5 = interval4.toPeriod();
        org.joda.time.Interval interval6 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType12 = periodType11.withWeeksRemoved();
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, readableDuration10, periodType11);
        org.joda.time.Interval interval14 = dateMidnight9.toInterval();
        org.joda.time.Interval interval15 = interval4.gap((org.joda.time.ReadableInterval) interval14);
        org.joda.time.Period period16 = interval4.toPeriod();
        long long17 = interval4.toDurationMillis();
        org.joda.time.DateTime dateTime18 = interval4.getStart();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(821L);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus(41L);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight.Property property25 = dateMidnight24.dayOfYear();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight24.withDurationAdded((long) 17, 1);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight24.withEra((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight24.withWeekyear(2022);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Interval interval34 = interval4.withStart((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType37 = null;
        boolean boolean38 = periodType36.isSupported(durationFieldType37);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((-369216316799883L), periodType36);
        mutablePeriod39.setMinutes((int) (short) 10);
        mutablePeriod39.setMonths(818);
        mutablePeriod39.addSeconds(1);
        mutablePeriod39.addYears(687);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval48 = interval4.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 86400000L + "'", long17 == 86400000L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test11059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11059");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(845L);
        java.util.TimeZone timeZone3 = null;
        calendar0.setTimeZone(timeZone3);
        int int6 = calendar0.getGreatestMinimum(9);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229");
        calendar0.setTimeZone(timeZone8);
        boolean boolean10 = calendar0.isWeekDateSupported();
        java.util.Date date16 = new java.util.Date(58, 52, 2022, (int) (byte) 10, 21);
        java.lang.String str17 = date16.toLocaleString();
        date16.setYear(0);
        java.lang.String str20 = date16.toGMTString();
        int int21 = date16.getSeconds();
        int int22 = date16.getMonth();
        calendar0.setTime(date16);
        java.util.TimeZone timeZone24 = calendar0.getTimeZone();
        int int25 = timeZone24.getRawOffset();
        java.lang.String str26 = timeZone24.getID();
        timeZone24.setRawOffset(895);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-2181735540008,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=895,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1900,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=316,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=20,SECOND=59,MILLISECOND=992,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals(date16.toString(), "Mon Nov 12 10:21:00 GMT 1900");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1967-11-12 10:21:00" + "'", str17, "1967-11-12 10:21:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "12 Nov 1900 10:20:59 GMT" + "'", str20, "12 Nov 1900 10:20:59 GMT");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GMT" + "'", str26, "GMT");
    }

    @Test
    public void test11060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11060");
        java.util.Date date3 = new java.util.Date(53251426, (-1), 51);
        java.time.Instant instant4 = date3.toInstant();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        int int6 = mutableDateTime5.getHourOfDay();
        java.util.Date date7 = mutableDateTime5.toDate();
        date7.setDate(3);
        java.time.Instant instant10 = date7.toInstant();
        java.time.Instant instant11 = date7.toInstant();
        java.util.Date date12 = java.util.Date.from(instant11);
        boolean boolean13 = date3.after(date12);
        java.lang.Object obj14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(obj14, dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusYears((int) (short) 0);
        int int20 = localDateTime16.getValue(2);
        int int21 = localDateTime16.getHourOfDay();
        java.util.Date date22 = localDateTime16.toDate();
        date22.setMinutes((int) (byte) 100);
        int int25 = date22.getDay();
        boolean boolean26 = date12.before(date22);
        date22.setTime(1645455135030L);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Jan 20 00:00:00 GMT 53253326");
        org.junit.Assert.assertNotNull(instant4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 14 + "'", int6 == 14);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Thu Feb 03 14:55:02 GMT 2022");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Feb 03 14:55:02 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 21 + "'", int20 == 21);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 14 + "'", int21 == 14);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Mon Feb 21 14:52:15 GMT 2022");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test11061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11061");
        org.joda.time.PeriodType periodType1 = null;
        java.lang.Object obj2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(obj2, dateTimeZone3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra(20);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withTime(0, 31, 54, 58);
        org.joda.time.Chronology chronology15 = localDateTime7.getChronology();
        java.lang.String str16 = chronology15.toString();
        org.joda.time.Period period17 = new org.joda.time.Period(86400000L, periodType1, chronology15);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
    }

    @Test
    public void test11062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11062");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Instant instant3 = instant1.plus(41L);
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTime();
        org.joda.time.Period period6 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period8 = period6.plusHours((int) '#');
        org.joda.time.Period period9 = period6.toPeriod();
        org.joda.time.Duration duration10 = period9.toStandardDuration();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.dayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = property13.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight.Property property16 = dateMidnight14.property(dateTimeFieldType15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.ReadableInterval readableInterval21 = null;
        mutablePeriod20.add(readableInterval21);
        org.joda.time.PeriodType periodType23 = mutablePeriod20.getPeriodType();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadableDuration) duration10, periodType23);
        org.joda.time.Period period26 = period24.plusYears(316);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period26);
    }

    @Test
    public void test11063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11063");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.monthOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateMidnight3);
        int int6 = dateMidnight3.getMinuteOfHour();
        org.joda.time.Instant instant7 = dateMidnight3.toInstant();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        int int9 = mutableDateTime8.getDayOfMonth();
        org.joda.time.Instant instant10 = mutableDateTime8.toInstant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.minusYears((int) ' ');
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime12.toMutableDateTime();
        mutableDateTime15.setMillisOfSecond(2);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant10, (org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.MutableDateTime mutableDateTime19 = instant10.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = dateTime20.minusYears((int) ' ');
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        int int24 = mutableDateTime23.getDayOfMonth();
        org.joda.time.Instant instant25 = mutableDateTime23.toInstant();
        org.joda.time.MutableDateTime mutableDateTime26 = instant25.toMutableDateTime();
        boolean boolean27 = dateTime20.isEqual((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Instant instant29 = instant25.plus((long) 15);
        org.joda.time.Instant instant30 = instant25.toInstant();
        org.joda.time.Instant instant32 = instant25.plus(32100001L);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone35);
        org.joda.time.DateTime dateTime37 = dateTime36.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime37.toMutableDateTime();
        org.joda.time.DateTime.Property property39 = dateTime37.year();
        org.joda.time.DateTime dateTime40 = property39.roundFloorCopy();
        org.joda.time.DateTime.Property property41 = dateTime40.dayOfMonth();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType46 = periodType45.withWeeksRemoved();
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight43, readableDuration44, periodType45);
        org.joda.time.Period period49 = period47.withSeconds(0);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone52);
        org.joda.time.DateTime dateTime54 = dateTime53.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime55 = dateTime53.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.TimeOfDay timeOfDay58 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTime dateTime61 = timeOfDay60.toDateTimeToday();
        boolean boolean62 = dateTime55.isEqual((org.joda.time.ReadableInstant) dateTime61);
        int int63 = dateTime61.getWeekyear();
        org.joda.time.DateTime dateTime65 = dateTime61.plusHours(4);
        org.joda.time.Duration duration66 = period47.toDurationFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod70 = mutablePeriod69.copy();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight(chronology71);
        org.joda.time.DateMidnight.Property property73 = dateMidnight72.yearOfCentury();
        org.joda.time.Duration duration74 = mutablePeriod70.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight72);
        boolean boolean75 = duration66.isEqual((org.joda.time.ReadableDuration) duration74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight(chronology76);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType80 = periodType79.withWeeksRemoved();
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight77, readableDuration78, periodType79);
        org.joda.time.Period period83 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period85 = period83.plusHours((int) '#');
        org.joda.time.Period period86 = period81.minus((org.joda.time.ReadablePeriod) period83);
        org.joda.time.Period period87 = period81.toPeriod();
        org.joda.time.PeriodType periodType88 = period87.getPeriodType();
        org.joda.time.Period period89 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableDuration) duration74, periodType88);
        long long90 = duration74.getMillis();
        org.joda.time.Instant instant91 = instant32.plus((org.joda.time.ReadableDuration) duration74);
        org.joda.time.Instant instant92 = instant10.plus((org.joda.time.ReadableDuration) duration74);
        org.joda.time.Instant instant93 = instant7.minus((org.joda.time.ReadableDuration) duration74);
        java.lang.String str94 = duration74.toString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 21 + "'", int24 == 21);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2022 + "'", int63 == 2022);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 99L + "'", long90 == 99L);
        org.junit.Assert.assertNotNull(instant91);
        org.junit.Assert.assertNotNull(instant92);
        org.junit.Assert.assertNotNull(instant93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "PT0.099S" + "'", str94, "PT0.099S");
    }

    @Test
    public void test11064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11064");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        int int3 = yearMonthDay0.getDayOfMonth();
        java.lang.String str5 = yearMonthDay0.toString("\u610f\u5927\u5229");
        int int6 = yearMonthDay0.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int12 = dateTimeZone10.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime7.toMutableDateTime(dateTimeZone10);
        int int15 = dateTimeZone10.getOffsetFromLocal(1650865L);
        org.joda.time.DateMidnight dateMidnight16 = yearMonthDay0.toDateMidnight(dateTimeZone10);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay0.minusYears((int) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = yearMonthDay0.getFieldTypes();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 21 + "'", int3 == 21);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u610f\u5927\u5229" + "'", str5, "\u610f\u5927\u5229");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21 + "'", int6 == 21);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
    }

    @Test
    public void test11065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11065");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime11 = property9.addToCopy(886L);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMonths(0);
        int int14 = localDateTime11.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withWeekOfWeekyear(152);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 152 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test11066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11066");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2100001, 979, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 979 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test11067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11067");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        int int3 = localDate2.getYearOfCentury();
        org.joda.time.LocalDate.Property property4 = localDate2.centuryOfEra();
        int int5 = localDate2.getDayOfYear();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod8.copy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.yearOfCentury();
        org.joda.time.Duration duration13 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight11.withZoneRetainFields(dateTimeZone15);
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone15);
        int int18 = localDate2.compareTo((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) localDate2);
        org.joda.time.LocalDate.Property property20 = localDate19.monthOfYear();
        org.joda.time.LocalDate localDate21 = property20.roundCeilingCopy();
        org.joda.time.DurationField durationField22 = property20.getDurationField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 69 + "'", int3 == 69);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 365 + "'", int5 == 365);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test11068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11068");
        org.joda.time.Period period8 = new org.joda.time.Period((-49), 40, 0, 796, 12, 905, 55533051, 122);
    }

    @Test
    public void test11069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11069");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        org.joda.time.Chronology chronology4 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        int int7 = mutableDateTime6.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int11 = dateTimeZone9.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime6.toMutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime();
        int int14 = mutableDateTime13.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateTime dateTime19 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType21 = periodType20.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadableInstant) dateTime18, periodType21);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod25.copy();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.yearOfCentury();
        org.joda.time.Duration duration30 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight28);
        mutablePeriod22.setPeriod((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableDuration) duration30);
        int[] intArray34 = chronology4.get((org.joda.time.ReadablePeriod) period32, 32L);
        org.joda.time.DateTimeField dateTimeField35 = chronology4.halfdayOfDay();
        java.lang.String str36 = chronology4.toString();
        org.joda.time.DateTimeField dateTimeField37 = chronology4.weekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay((long) 16, chronology4);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 21 + "'", int14 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 0, 0, 32]");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[UTC]" + "'", str36, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test11070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11070");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = mutablePeriod2.copy();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.yearOfCentury();
        org.joda.time.Duration duration7 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight5.withZoneRetainFields(dateTimeZone9);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod13.copy();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.yearOfCentury();
        org.joda.time.Duration duration18 = mutablePeriod14.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod21.copy();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight.Property property25 = dateMidnight24.yearOfCentury();
        org.joda.time.Duration duration26 = mutablePeriod22.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight24);
        boolean boolean27 = duration18.isEqual((org.joda.time.ReadableDuration) duration26);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod31 = mutablePeriod30.copy();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.yearOfCentury();
        org.joda.time.Duration duration35 = mutablePeriod31.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        boolean boolean36 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod40 = mutablePeriod39.copy();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.yearOfCentury();
        org.joda.time.Duration duration44 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod51 = mutablePeriod50.copy();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.TimeOfDay timeOfDay56 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.TimeOfDay timeOfDay58 = timeOfDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = timeOfDay58.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay61 = timeOfDay58.plusHours((-1));
        org.joda.time.Chronology chronology62 = timeOfDay61.getChronology();
        mutablePeriod50.setPeriod((long) (byte) 1, 845L, chronology62);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime(41L, chronology62);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', periodType46, chronology62);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateMidnight42, periodType46);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight10.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateMidnight.Property property68 = dateMidnight10.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight70 = property68.setCopy("+00:0012");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"+00:0012\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(property68);
    }

    @Test
    public void test11071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11071");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        int int6 = localDateTime2.getValue(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minusWeeks(47);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays(2022);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusWeeks((int) ' ');
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21 + "'", int6 == 21);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test11072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11072");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) timeOfDay11, (long) (byte) -1);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay11.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay18 = property16.addToCopy(23);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property16.getFieldType();
        org.joda.time.TimeOfDay timeOfDay20 = property16.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.withMillisOfSecond((int) 'a');
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay20.withMillisOfSecond(97);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay26 = timeOfDay20.withMillisOfSecond(86399999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399999 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86399999L) + "'", long15 == (-86399999L));
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
    }

    @Test
    public void test11073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11073");
        java.lang.Character[] charArray7 = new java.lang.Character[] { '#', 'x', '#', 'u', ' ', '#' };
        java.util.LinkedHashSet<java.lang.Character> charSet8 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet8, charArray7);
        java.lang.Object[] objArray10 = charSet8.toArray();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.minutes();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime17.toMutableDateTime();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = timeOfDay23.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay23.plusHours((-1));
        org.joda.time.Chronology chronology27 = timeOfDay26.getChronology();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.TimeOfDay timeOfDay30 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.withChronologyRetainFields(chronology31);
        long long34 = chronology27.set((org.joda.time.ReadablePartial) timeOfDay30, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(chronology27);
        org.joda.time.DateTime dateTime36 = dateTime17.toDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField37 = chronology27.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology27.millisOfDay();
        org.joda.time.DurationField durationField39 = chronology27.centuries();
        org.joda.time.Period period40 = new org.joda.time.Period(818L, periodType12, chronology27);
        org.joda.time.DateTimeField dateTimeField41 = chronology27.secondOfDay();
        boolean boolean42 = charSet8.remove((java.lang.Object) chronology27);
        org.joda.time.DateTimeField dateTimeField43 = chronology27.millisOfDay();
        org.joda.time.DateMidnight dateMidnight44 = org.joda.time.DateMidnight.now(chronology27);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.withMillis(86400000L);
        int int47 = dateMidnight46.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone48 = dateMidnight46.getZone();
        long long50 = dateTimeZone48.previousTransition(5443200000L);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(1645454977838L, dateTimeZone48);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone48);
        boolean boolean54 = dateTimeZone48.isStandardOffset((long) 5870);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[#, x, u,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[#, x, u,  ]");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-86399999L) + "'", long34 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 19 + "'", int47 == 19);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 5443200000L + "'", long50 == 5443200000L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test11074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11074");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset(152L);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(dateTimeZone0);
        int int4 = localDate3.getYearOfCentury();
        org.joda.time.Interval interval5 = localDate3.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(interval5);
    }

    @Test
    public void test11075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11075");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        int int3 = yearMonthDay0.getDayOfMonth();
        int int4 = yearMonthDay0.getDayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod8 = mutablePeriod7.copy();
        org.joda.time.format.PeriodFormatter periodFormatter9 = null;
        java.lang.String str10 = mutablePeriod8.toString(periodFormatter9);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay0.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod8, (-1));
        org.joda.time.YearMonthDay.Property property13 = yearMonthDay12.year();
        int int14 = property13.getMinimumValueOverall();
        java.lang.String str15 = property13.getAsString();
        org.joda.time.DurationField durationField16 = property13.getDurationField();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 21 + "'", int3 == 21);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0.099S" + "'", str10, "PT0.099S");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-292275054) + "'", int14 == (-292275054));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test11076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11076");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-21T14:51:01.651");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-21t14:51:01.651");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11077");
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod12 = mutablePeriod11.copy();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = timeOfDay19.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.plusHours((-1));
        org.joda.time.Chronology chronology23 = timeOfDay22.getChronology();
        mutablePeriod11.setPeriod((long) (byte) 1, 845L, chronology23);
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 1, chronology23);
        org.joda.time.Period period27 = period25.withMinutes((int) ' ');
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.years();
        org.joda.time.Period period29 = period25.normalizedStandard(periodType28);
        org.joda.time.PeriodType periodType30 = periodType28.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(714, 53624, 27, 39, 69, 53410232, 2, 681, periodType30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(periodType30);
    }

    @Test
    public void test11078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11078");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.monthOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateMidnight3);
        mutablePeriod5.addYears(1900);
        mutablePeriod5.setSeconds(0);
        int int10 = mutablePeriod5.getMinutes();
        mutablePeriod5.addDays(26);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate16 = localDate14.plusWeeks(9);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '4');
        org.joda.time.LocalDate localDate19 = localDate16.plus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        int int21 = mutableDateTime20.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType28 = periodType27.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime20, (org.joda.time.ReadableInstant) dateTime25, periodType28);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod32.copy();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(chronology34);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.yearOfCentury();
        org.joda.time.Duration duration37 = mutablePeriod33.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        mutablePeriod29.setPeriod((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Period period39 = period18.plus((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Period period40 = period18.toPeriod();
        org.joda.time.Period period41 = period40.normalizedStandard();
        mutablePeriod5.add((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period44 = period40.multipliedBy((-184));
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-55) + "'", int10 == (-55));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 21 + "'", int21 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period44);
    }

    @Test
    public void test11079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11079");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 5, (long) (byte) 10);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        mutablePeriod2.setPeriod((long) 47, chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((java.lang.Object) dateTimeField11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.field.PreciseDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test11080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11080");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.standard();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.PeriodType periodType3 = periodType1.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(periodType3);
        org.joda.time.PeriodType periodType5 = periodType3.withYearsRemoved();
        org.joda.time.PeriodType periodType6 = periodType5.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(189L, periodType5);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Standard" + "'", str2, "Standard");
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
    }

    @Test
    public void test11081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11081");
        org.joda.time.Period period1 = org.joda.time.Period.days(0);
        org.joda.time.Minutes minutes2 = period1.toStandardMinutes();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(minutes2);
    }

    @Test
    public void test11082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11082");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = timeOfDay10.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusHours((-1));
        org.joda.time.Chronology chronology14 = timeOfDay13.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        long long21 = chronology14.set((org.joda.time.ReadablePartial) timeOfDay17, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(chronology14);
        org.joda.time.DateTime dateTime23 = dateTime4.toDateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField24 = chronology14.weekyearOfCentury();
        org.joda.time.DurationField durationField25 = dateTimeField24.getRangeDurationField();
        int int27 = dateTimeField24.getLeapAmount(258L);
        org.joda.time.DurationField durationField28 = dateTimeField24.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-86399999L) + "'", long21 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(durationField28);
    }

    @Test
    public void test11083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11083");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        int int4 = mutableDateTime3.getDayOfMonth();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate8 = localDate6.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int10 = localDate6.get(dateTimeFieldType9);
        mutableDateTime3.set(dateTimeFieldType9, 2);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime3.add(durationFieldType13, (int) '4');
        mutableDateTime2.add(durationFieldType13, (int) (short) 0);
        mutableDateTime2.addMonths(1900);
        boolean boolean21 = mutableDateTime2.isAfter((-19L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test11084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11084");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(9);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '4');
        org.joda.time.LocalDate localDate6 = localDate3.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDate.Property property7 = localDate3.centuryOfEra();
        org.joda.time.LocalDate localDate9 = property7.setCopy(58);
        org.joda.time.LocalDate localDate11 = localDate9.minusDays(0);
        int int12 = localDate11.getDayOfMonth();
        org.joda.time.LocalDate.Property property13 = localDate11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.LocalDate localDate16 = property13.addToCopy(2021);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra(96);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test11085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11085");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod8.copy();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay16.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay16.plusHours((-1));
        org.joda.time.Chronology chronology20 = timeOfDay19.getChronology();
        mutablePeriod8.setPeriod((long) (byte) 1, 845L, chronology20);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(41L, chronology20);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', periodType4, chronology20);
        org.joda.time.Interval interval24 = new org.joda.time.Interval(660L, 792L, chronology20);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateTime dateTime29 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime29.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.year();
        org.joda.time.MutableDateTime mutableDateTime33 = property31.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime34 = property31.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime36 = property31.add((long) 1);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateTime dateTime41 = dateTime40.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime41.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.year();
        org.joda.time.MutableDateTime mutableDateTime45 = property43.addWrapField(6);
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        org.joda.time.MutableDateTime mutableDateTime48 = property43.set("1", locale47);
        org.joda.time.MutableDateTime mutableDateTime50 = property43.set(23);
        org.joda.time.Period period55 = new org.joda.time.Period((long) (byte) 0, 0L);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period57 = period55.withPeriodType(periodType56);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone60);
        org.joda.time.DateTime dateTime62 = dateTime61.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime62.toMutableDateTime();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.TimeOfDay timeOfDay66 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.TimeOfDay timeOfDay68 = timeOfDay66.withChronologyRetainFields(chronology67);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = timeOfDay68.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay71 = timeOfDay68.plusHours((-1));
        org.joda.time.Chronology chronology72 = timeOfDay71.getChronology();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.TimeOfDay timeOfDay75 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.TimeOfDay timeOfDay77 = timeOfDay75.withChronologyRetainFields(chronology76);
        long long79 = chronology72.set((org.joda.time.ReadablePartial) timeOfDay75, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay80 = new org.joda.time.TimeOfDay(chronology72);
        org.joda.time.DateTime dateTime81 = dateTime62.toDateTime(chronology72);
        org.joda.time.DateTimeField dateTimeField82 = chronology72.yearOfCentury();
        org.joda.time.DurationField durationField83 = chronology72.centuries();
        org.joda.time.DateTimeField dateTimeField84 = chronology72.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((long) 'a', (long) 7, periodType56, chronology72);
        org.joda.time.PeriodType periodType86 = periodType56.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime36, (org.joda.time.ReadableInstant) mutableDateTime50, periodType56);
        org.joda.time.Period period88 = interval24.toPeriod(periodType56);
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod(0L, periodType56);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(timeOfDay71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(timeOfDay75);
        org.junit.Assert.assertNotNull(timeOfDay77);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-86399999L) + "'", long79 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(period88);
    }

    @Test
    public void test11086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11086");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.year();
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime8.getZone();
        java.lang.String str12 = dateTimeZone10.getName(1645455023708L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
    }

    @Test
    public void test11087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11087");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime.Property property1 = localTime0.millisOfDay();
        org.joda.time.LocalTime localTime2 = property1.roundFloorCopy();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
    }

    @Test
    public void test11088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11088");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        int int3 = localDate2.getYearOfCentury();
        org.joda.time.LocalDate.Property property4 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate5 = property4.roundFloorCopy();
        int int6 = localDate5.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = localDate5.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate9 = localDate5.minusDays(53410232);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = localDate9.withDayOfMonth((int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 69 + "'", int3 == 69);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test11089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11089");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.plusDays(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay2.withField(dateTimeFieldType3, 69);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.dayOfMonth();
        int int7 = property6.get();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay9 = property6.setCopy(687);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 687 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
    }

    @Test
    public void test11090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11090");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime5 = property2.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property6 = localTime5.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property6.roundFloorCopy();
        org.joda.time.LocalTime localTime8 = property6.roundCeilingCopy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTime dateTime14 = timeOfDay13.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.minusHours((int) (byte) 1);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.lang.String str19 = timeOfDay13.toString("1", locale18);
        int int20 = localTime8.compareTo((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay.Property property21 = timeOfDay13.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay23 = property21.addToCopy((int) ' ');
        org.joda.time.DurationField durationField24 = property21.getDurationField();
        org.joda.time.TimeOfDay timeOfDay26 = property21.addWrapFieldToCopy(0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(timeOfDay26);
    }

    @Test
    public void test11091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11091");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekyear();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundCeiling();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
    }

    @Test
    public void test11092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11092");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int5 = localDate1.get(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate1.plusDays((int) (byte) 0);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfMonth();
        org.joda.time.LocalDate.Property property9 = localDate7.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test11093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11093");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(328L);
        long long3 = instant2.getMillis();
        org.joda.time.Instant instant5 = instant2.minus((long) 53459623);
        boolean boolean6 = instant2.isEqualNow();
        org.joda.time.Instant instant9 = instant2.withDurationAdded(792L, 248);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 328L + "'", long3 == 328L);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(instant9);
    }

    @Test
    public void test11094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11094");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight1, readableDuration2, periodType3);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 300);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight11 = property10.roundHalfEvenCopy();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime();
        int int13 = mutableDateTime12.getDayOfMonth();
        org.joda.time.Instant instant14 = mutableDateTime12.toInstant();
        boolean boolean16 = mutableDateTime12.isBefore((long) 2);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime12.monthOfYear();
        boolean boolean19 = mutableDateTime12.isBefore(909L);
        boolean boolean20 = dateMidnight11.isBefore((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.monthOfYear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight.Property property25 = dateMidnight24.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime21, (org.joda.time.ReadableInstant) dateMidnight24);
        int int27 = dateMidnight24.getMinuteOfHour();
        org.joda.time.Instant instant28 = dateMidnight24.toInstant();
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.dayOfYear();
        org.joda.time.DateMidnight dateMidnight33 = property32.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight.Property property35 = dateMidnight33.property(dateTimeFieldType34);
        org.joda.time.DateMidnight.Property property36 = dateMidnight33.year();
        org.joda.time.Duration duration37 = period29.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight24, (org.joda.time.ReadableDuration) duration37);
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration37);
        mutablePeriod7.setPeriod((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone45);
        org.joda.time.DateTime dateTime47 = dateTime46.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime47.toMutableDateTime();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.TimeOfDay timeOfDay51 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay51.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = timeOfDay53.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay53.plusHours((-1));
        org.joda.time.Chronology chronology57 = timeOfDay56.getChronology();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.TimeOfDay timeOfDay60 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.TimeOfDay timeOfDay62 = timeOfDay60.withChronologyRetainFields(chronology61);
        long long64 = chronology57.set((org.joda.time.ReadablePartial) timeOfDay60, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay65 = new org.joda.time.TimeOfDay(chronology57);
        org.joda.time.DateTime dateTime66 = dateTime47.toDateTime(chronology57);
        org.joda.time.DateTimeField dateTimeField67 = chronology57.millisOfDay();
        mutablePeriod7.setPeriod(1645454950460L, 805L, chronology57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period69 = period5.withFields((org.joda.time.ReadablePeriod) mutablePeriod7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21 + "'", int13 == 21);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-86399999L) + "'", long64 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test11095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11095");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        int int3 = yearMonthDay0.getDayOfMonth();
        java.lang.String str5 = yearMonthDay0.toString("\u610f\u5927\u5229");
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay7 = property6.getYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 21 + "'", int3 == 21);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u610f\u5927\u5229" + "'", str5, "\u610f\u5927\u5229");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test11096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11096");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.DateTime.Property property6 = dateTime4.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getRangeDurationType();
        org.joda.time.DateTime.Property property9 = dateTime4.property(dateTimeFieldType7);
        org.joda.time.DateTime dateTime10 = property9.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = property9.roundFloorCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks(53345483);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test11097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11097");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = timeOfDay10.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusHours((-1));
        org.joda.time.Chronology chronology14 = timeOfDay13.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        long long21 = chronology14.set((org.joda.time.ReadablePartial) timeOfDay17, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(chronology14);
        org.joda.time.DateTime dateTime23 = dateTime4.toDateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField24 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField25 = chronology14.centuries();
        org.joda.time.DateTimeField dateTimeField26 = chronology14.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = chronology14.clockhourOfHalfday();
        org.joda.time.DurationField durationField28 = chronology14.hours();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-86399999L) + "'", long21 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test11098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11098");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime5 = property2.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property6 = localTime5.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property6.roundFloorCopy();
        org.joda.time.LocalTime localTime9 = property6.addCopy((int) '#');
        org.joda.time.LocalTime localTime11 = property6.addCopy((long) 17);
        org.joda.time.LocalTime localTime13 = property6.addCopy(905);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test11099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11099");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(5760000, 53514000, (-1970), 96, 53683789, 109, 53469);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 96 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11100");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.YearMonth yearMonth4 = org.joda.time.YearMonth.now(dateTimeZone1);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(yearMonth4);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test11101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11101");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTime dateTime5 = timeOfDay4.toDateTimeToday();
        org.joda.time.DateTime dateTime7 = dateTime5.plusYears((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateTime dateTime12 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = timeOfDay18.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay18.plusHours((-1));
        org.joda.time.Chronology chronology22 = timeOfDay21.getChronology();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.TimeOfDay timeOfDay25 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay25.withChronologyRetainFields(chronology26);
        long long29 = chronology22.set((org.joda.time.ReadablePartial) timeOfDay25, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(chronology22);
        org.joda.time.DateTime dateTime31 = dateTime12.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField32 = chronology22.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology22.yearOfCentury();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(chronology34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType38 = periodType37.withWeeksRemoved();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight35, readableDuration36, periodType37);
        org.joda.time.Period period41 = period39.withSeconds(0);
        org.joda.time.Period period43 = period41.plusMinutes((int) (byte) 1);
        org.joda.time.Period period45 = period41.withSeconds((int) (byte) 10);
        org.joda.time.Period period46 = period41.toPeriod();
        org.joda.time.Period period48 = period41.plusHours(58);
        org.joda.time.Period period50 = period48.plusHours(69);
        int[] intArray53 = chronology22.get((org.joda.time.ReadablePeriod) period48, 3155695200000L, (long) (byte) 100);
        long long57 = chronology22.add((long) 1975, 837L, 1970);
        org.joda.time.DateTime dateTime58 = dateTime7.toDateTime(chronology22);
        org.joda.time.DurationField durationField59 = chronology22.minutes();
        org.joda.time.Chronology chronology60 = chronology22.withUTC();
        org.joda.time.DurationField durationField61 = chronology22.weeks();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-86399999L) + "'", long29 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-99, -11, -30, -5, -59, -59, -900]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1650865L + "'", long57 == 1650865L);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
    }

    @Test
    public void test11102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11102");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime13 = property11.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime18.toMutableDateTime();
        org.joda.time.DateTime dateTime21 = dateTime18.minusHours(2100001);
        org.joda.time.DateTime dateTime23 = dateTime21.minusWeeks(53914874);
        java.lang.Object obj24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(obj24, dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusYears((int) (short) 0);
        int int30 = localDateTime26.getValue(2);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone33);
        int int35 = dateTime34.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = dateTime34.toDateTime(dateTimeZone37);
        org.joda.time.DateTime.Property property40 = dateTime34.weekyear();
        org.joda.time.DateTime dateTime41 = property40.roundHalfEvenCopy();
        boolean boolean42 = localDateTime26.equals((java.lang.Object) property40);
        int int43 = localDateTime26.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime26.withHourOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusHours(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.property(dateTimeFieldType48);
        boolean boolean50 = dateTime21.isSupported(dateTimeFieldType48);
        java.lang.String str51 = dateTimeFieldType48.toString();
        int int52 = localDateTime13.get(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 21 + "'", int30 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "yearOfCentury" + "'", str51, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 22 + "'", int52 == 22);
    }

    @Test
    public void test11103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11103");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(1645454970, 190087, 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1645454970 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11104");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        int int3 = yearMonthDay0.getDayOfMonth();
        int int4 = yearMonthDay0.getDayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod8 = mutablePeriod7.copy();
        org.joda.time.format.PeriodFormatter periodFormatter9 = null;
        java.lang.String str10 = mutablePeriod8.toString(periodFormatter9);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay0.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod8, (-1));
        org.joda.time.YearMonthDay.Property property13 = yearMonthDay12.year();
        java.lang.String str14 = property13.getName();
        org.joda.time.YearMonthDay yearMonthDay16 = property13.setCopy("19");
        org.joda.time.Period period18 = org.joda.time.Period.seconds(272);
        org.joda.time.Duration duration19 = period18.toStandardDuration();
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay16.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.plusYears(2032);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay20.monthOfYear();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 21 + "'", int3 == 21);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0.099S" + "'", str10, "PT0.099S");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "year" + "'", str14, "year");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test11105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11105");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3, periodType4);
        org.joda.time.Period period8 = period6.withSeconds(0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime14 = dateTime12.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTime dateTime20 = timeOfDay19.toDateTimeToday();
        boolean boolean21 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getWeekyear();
        org.joda.time.DateTime dateTime24 = dateTime20.plusHours(4);
        org.joda.time.Duration duration25 = period6.toDurationFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod28.copy();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.yearOfCentury();
        org.joda.time.Duration duration33 = mutablePeriod29.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight31);
        boolean boolean34 = duration25.isEqual((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTime dateTime35 = dateTime0.minus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMillis((-23));
        org.joda.time.DateTime dateTime39 = dateTime35.minusSeconds(53305126);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test11106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11106");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        int int3 = yearMonthDay0.getDayOfMonth();
        int int4 = yearMonthDay0.getDayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod8 = mutablePeriod7.copy();
        org.joda.time.format.PeriodFormatter periodFormatter9 = null;
        java.lang.String str10 = mutablePeriod8.toString(periodFormatter9);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay0.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod8, (-1));
        org.joda.time.YearMonthDay.Property property13 = yearMonthDay12.year();
        int int14 = property13.getMinimumValueOverall();
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("45");
        java.lang.String str17 = property13.getAsShortText(locale16);
        org.joda.time.YearMonthDay yearMonthDay19 = property13.addToCopy(535);
        org.joda.time.DateTimeField dateTimeField20 = property13.getField();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 21 + "'", int3 == 21);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0.099S" + "'", str10, "PT0.099S");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-292275054) + "'", int14 == (-292275054));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022" + "'", str17, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test11107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11107");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology3 = localDate2.getChronology();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableDuration4, (org.joda.time.ReadableInstant) mutableDateTime5);
        int[] intArray8 = chronology3.get((org.joda.time.ReadablePeriod) mutablePeriod6, (long) 100);
        java.util.Calendar.Builder builder9 = builder0.setFields(intArray8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.year();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.lang.String str19 = locale18.getDisplayScript();
        java.util.Locale.setDefault(locale18);
        java.lang.String str21 = locale18.getISO3Language();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = locale18.getDisplayScript(locale22);
        int int24 = dateTimeField17.getMaximumShortTextLength(locale22);
        java.util.Calendar.Builder builder25 = builder0.setLocale(locale22);
        java.util.Calendar.Builder builder29 = builder0.setTimeOfDay(47, 0, (int) (short) -1);
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology34 = localDate33.getChronology();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType31.getField(chronology34);
        long long38 = dateTimeField36.roundFloor((long) (short) 100);
        java.util.Locale locale42 = new java.util.Locale("hi!", "hi!");
        java.lang.String str43 = locale42.getCountry();
        java.lang.String str44 = dateTimeField36.getAsShortText(7, locale42);
        java.lang.String str45 = locale30.getDisplayName(locale42);
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay46.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime49 = yearMonthDay46.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval50 = yearMonthDay46.toInterval();
        org.joda.time.Chronology chronology51 = interval50.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.weekyearOfCentury();
        boolean boolean54 = dateTimeField53.isSupported();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone58);
        org.joda.time.DateTime dateTime60 = dateTime59.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime60.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime61.year();
        org.joda.time.DateTimeField dateTimeField63 = property62.getField();
        long long66 = dateTimeField63.add((long) 21, (long) ' ');
        org.joda.time.DurationField durationField67 = dateTimeField63.getRangeDurationField();
        java.util.Locale locale69 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet70 = locale69.getExtensionKeys();
        java.lang.String str71 = dateTimeField63.getAsText(21, locale69);
        java.lang.String str72 = dateTimeField53.getAsShortText((long) 1969, locale69);
        java.lang.String str73 = locale30.getDisplayVariant(locale69);
        java.util.Calendar.Builder builder74 = builder0.setLocale(locale30);
        java.util.Calendar.Builder builder78 = builder0.setDate(857, 55388261, 15);
        java.util.Calendar calendar79 = java.util.Calendar.getInstance();
        calendar79.add(11, (int) ' ');
        java.util.Date date88 = new java.util.Date(58, 52, 2022, (int) (byte) 10, 21);
        date88.setMonth(0);
        calendar79.setTime(date88);
        int int92 = date88.getYear();
        date88.setYear((int) (byte) 100);
        org.joda.time.LocalDate localDate95 = org.joda.time.LocalDate.fromDateFields(date88);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder96 = builder78.setInstant(date88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zho" + "'", str21, "zho");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L + "'", long38 == 100L);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!_HI!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "HI!" + "'", str43, "HI!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "7" + "'", str44, "7");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Japanese (Japan)" + "'", str45, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1009843200021L + "'", long66 == 1009843200021L);
        org.junit.Assert.assertNull(durationField67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "21" + "'", str71, "21");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "70" + "'", str72, "70");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(calendar79);
// flaky:         org.junit.Assert.assertEquals(calendar79.toString(), "java.util.GregorianCalendar[time=-93706740000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Standard\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1967,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=12,DAY_OF_YEAR=12,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=21,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date88.toString(), "Wed Jan 12 10:21:00 GMT+00:00 2000");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 67 + "'", int92 == 67);
        org.junit.Assert.assertNotNull(localDate95);
    }

    @Test
    public void test11108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11108");
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        int int4 = mutableDateTime3.getDayOfMonth();
        org.joda.time.Instant instant5 = mutableDateTime3.toInstant();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        boolean boolean8 = mutableDateTime3.isBefore((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime7.secondOfMinute();
        org.joda.time.Instant instant10 = mutableDateTime7.toInstant();
        org.joda.time.Chronology chronology11 = instant10.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(81, (-1510304491), 5760000, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1510304491 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test11109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11109");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.Chronology chronology3 = localTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        int int6 = mutableDateTime5.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int10 = dateTimeZone8.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime5.toMutableDateTime(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime();
        int int13 = mutableDateTime12.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType20 = periodType19.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableInstant) dateTime17, periodType20);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod25 = mutablePeriod24.copy();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.yearOfCentury();
        org.joda.time.Duration duration29 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight27);
        mutablePeriod21.setPeriod((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime5, (org.joda.time.ReadableDuration) duration29);
        int[] intArray33 = chronology3.get((org.joda.time.ReadablePeriod) period31, 32L);
        org.joda.time.DateTimeField dateTimeField34 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology3.hourOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21 + "'", int6 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21 + "'", int13 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 0, 0, 32]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test11110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11110");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTime dateTime11 = timeOfDay10.toDateTimeToday();
        boolean boolean12 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime11.getWeekyear();
        int int14 = dateTime11.getDayOfMonth();
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded(186L, 48);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone20);
        int int22 = dateTime21.getDayOfMonth();
        org.joda.time.DateTime dateTime24 = dateTime21.withWeekOfWeekyear(1);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateTime dateTime29 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime29.toMutableDateTime();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.TimeOfDay timeOfDay33 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = timeOfDay35.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay35.plusHours((-1));
        org.joda.time.Chronology chronology39 = timeOfDay38.getChronology();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.TimeOfDay timeOfDay42 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay42.withChronologyRetainFields(chronology43);
        long long46 = chronology39.set((org.joda.time.ReadablePartial) timeOfDay42, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay47 = new org.joda.time.TimeOfDay(chronology39);
        org.joda.time.DateTime dateTime48 = dateTime29.toDateTime(chronology39);
        org.joda.time.DateTimeField dateTimeField49 = chronology39.yearOfCentury();
        org.joda.time.DurationField durationField50 = chronology39.centuries();
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime21.toMutableDateTime(chronology39);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType56 = periodType55.withWeeksRemoved();
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight53, readableDuration54, periodType55);
        org.joda.time.Period period59 = period57.withSeconds(0);
        org.joda.time.Period period61 = period59.plusMinutes((int) (byte) 1);
        org.joda.time.Period period63 = period59.withMillis((int) (short) 1);
        org.joda.time.Period period65 = period59.plusHours((int) (short) -1);
        int[] intArray68 = chronology39.get((org.joda.time.ReadablePeriod) period65, 186L, (long) 896);
        org.joda.time.DateTime dateTime69 = dateTime17.toDateTime(chronology39);
        org.joda.time.MutableDateTime mutableDateTime70 = dateTime17.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime70.setWeekOfWeekyear(887);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 887 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 21 + "'", int14 == 21);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-86399999L) + "'", long46 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0, 0, 0, 0, 0, 710]");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
    }

    @Test
    public void test11111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11111");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        boolean boolean5 = mutableDateTime0.isBefore((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay6.plusDays(2022);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.withMonthOfYear(4);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int12 = yearMonthDay8.get(dateTimeFieldType11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay8.toDateTimeAtMidnight(dateTimeZone13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = dateTime14.get(dateTimeFieldType15);
        int int17 = dateTime14.getMillisOfDay();
        mutableDateTime4.setMillis((org.joda.time.ReadableInstant) dateTime14);
        mutableDateTime4.setMillis(0L);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval25 = yearMonthDay21.toInterval();
        org.joda.time.Period period26 = interval25.toPeriod();
        org.joda.time.Interval interval27 = interval25.toInterval();
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.Duration duration29 = interval28.toDuration();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime();
        int int31 = mutableDateTime30.getDayOfMonth();
        int int32 = mutableDateTime30.getMinuteOfHour();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType34 = periodType33.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) mutableDateTime30, periodType33);
        mutableDateTime4.add((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.era();
        org.joda.time.DateMidnight dateMidnight40 = property39.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight41 = property39.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight42 = property39.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays(1);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight44.dayOfWeek();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2027 + "'", int16 == 2027);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 21 + "'", int31 == 21);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 55 + "'", int32 == 55);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test11112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11112");
        java.lang.Object obj1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(obj1, dateTimeZone2);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(631L, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(chronology4);
        org.joda.time.DateTimeZone dateTimeZone7 = chronology4.getZone();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
    }

    @Test
    public void test11113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11113");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(6);
        mutableDateTime8.addDays((int) (byte) -1);
        int int11 = mutableDateTime8.getYear();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Instant instant13 = dateTime12.toInstant();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime8, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime8.copy();
        mutableDateTime15.addWeekyears(1969);
        int int18 = mutableDateTime15.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfEven();
        mutableDateTime20.setMillis((long) 1970);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime20.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundHalfFloor();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1975 + "'", int11 == 1975);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test11114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11114");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.LocalDateTime localDateTime5 = property3.getLocalDateTime();
        boolean boolean7 = property3.equals((java.lang.Object) 1.0f);
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category8, locale9);
        int int11 = property3.getMaximumTextLength(locale9);
        java.lang.String str12 = property3.getName();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight16 = property15.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.year();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        long long27 = dateTimeField24.add((long) 21, (long) ' ');
        org.joda.time.DurationField durationField28 = dateTimeField24.getRangeDurationField();
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet31 = locale30.getExtensionKeys();
        java.lang.String str32 = dateTimeField24.getAsText(21, locale30);
        java.lang.String str33 = locale30.getLanguage();
        int int34 = property15.getMaximumTextLength(locale30);
        java.lang.String str35 = property3.getAsText(locale30);
        org.joda.time.LocalDateTime localDateTime36 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime37 = property3.withMinimumValue();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.TimeOfDay timeOfDay40 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay40.withChronologyRetainFields(chronology41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = timeOfDay42.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay42.plusHours((-1));
        org.joda.time.Chronology chronology46 = timeOfDay45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.secondOfDay();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology46);
        org.joda.time.DateTimeField dateTimeField51 = chronology46.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((java.lang.Object) property3, chronology46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 431L + "'", long4 == 431L);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondOfMinute" + "'", str12, "secondOfMinute");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1009843200021L + "'", long27 == 1009843200021L);
        org.junit.Assert.assertNull(durationField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "21" + "'", str32, "21");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fr" + "'", str33, "fr");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "4" + "'", str35, "4");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test11115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11115");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) timeOfDay11, (long) (byte) -1);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay11.millisOfSecond();
        int[] intArray17 = timeOfDay11.getValues();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86399999L) + "'", long15 == (-86399999L));
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 1]");
    }

    @Test
    public void test11116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11116");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        long long4 = dateTimeZone1.convertLocalToUTC(290L, false);
        long long6 = dateTimeZone1.previousTransition((long) 54);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 280L + "'", long4 == 280L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 54L + "'", long6 == 54L);
    }

    @Test
    public void test11117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11117");
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfDay();
        org.joda.time.LocalTime localTime10 = property9.withMaximumValue();
        int int11 = property9.getMaximumValue();
        org.joda.time.LocalTime localTime12 = property9.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime14 = property9.addCopy(58);
        java.lang.Object obj17 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = timeOfDay22.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay22.plusHours((-1));
        org.joda.time.Chronology chronology26 = timeOfDay25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.centuryOfEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType32 = periodType31.withWeeksRemoved();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight29, readableDuration30, periodType31);
        org.joda.time.Period period35 = period33.withSeconds(0);
        org.joda.time.Period period37 = period35.plusMinutes((int) (byte) 1);
        org.joda.time.Period period39 = period35.withSeconds((int) (byte) 10);
        org.joda.time.Period period41 = period39.withMillis((int) 'x');
        int[] intArray44 = chronology26.get((org.joda.time.ReadablePeriod) period41, (long) 2022, (long) 6);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime();
        int int46 = mutableDateTime45.getDayOfMonth();
        org.joda.time.Instant instant47 = mutableDateTime45.toInstant();
        boolean boolean49 = mutableDateTime45.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int53 = dateTimeZone51.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime45.setZone(dateTimeZone51);
        mutableDateTime45.setMillisOfDay((int) ' ');
        org.joda.time.Duration duration57 = period41.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime45);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime45.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int62 = dateTimeZone60.getOffset(0L);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone60);
        org.joda.time.DateTime.Property property64 = dateTime63.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean67 = dateTimeZone66.isFixed();
        org.joda.time.DateTime dateTime68 = dateTime63.toDateTime(dateTimeZone66);
        mutableDateTime45.setZoneRetainFields(dateTimeZone66);
        long long71 = dateTimeZone66.nextTransition(145L);
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime(obj17, dateTimeZone66);
        org.joda.time.Interval interval73 = new org.joda.time.Interval(529L, (long) 1900, dateTimeZone66);
        org.joda.time.DateTime dateTime74 = localTime14.toDateTimeToday(dateTimeZone66);
        long long78 = dateTimeZone66.convertLocalToUTC((long) (byte) 0, true, 749L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(15, 86, 2021, 1439, 190087, 1999, 31, dateTimeZone66);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1439 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 86399999 + "'", int11 == 86399999);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, -2, -16]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 21 + "'", int46 == 21);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 145L + "'", long71 == 145L);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
    }

    @Test
    public void test11118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11118");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.plusDays(2022);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.withMonthOfYear(4);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay4.toDateMidnight(dateTimeZone5);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = dateMidnight6.toLocalDate();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test11119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11119");
        java.util.Date date1 = new java.util.Date(156L);
        date1.setTime(558L);
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromDateFields(date1);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.copy();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = timeOfDay18.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay18.plusHours((-1));
        org.joda.time.Chronology chronology22 = timeOfDay21.getChronology();
        mutablePeriod10.setPeriod((long) (byte) 1, 845L, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.dayOfYear();
        org.joda.time.DurationField durationField25 = chronology22.weekyears();
        org.joda.time.Period period26 = new org.joda.time.Period(837L, periodType7, chronology22);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) 100, chronology22);
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay4.withChronologyRetainFields(chronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay30 = timeOfDay4.withHourOfDay(841);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 841 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(timeOfDay28);
    }

    @Test
    public void test11120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11120");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight3 = property2.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.property(dateTimeFieldType4);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDurationAdded((long) 10, 5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.year();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime18 = property15.add(799L);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTime();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.TimeOfDay timeOfDay27 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = timeOfDay29.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay29.plusHours((-1));
        org.joda.time.Chronology chronology33 = timeOfDay32.getChronology();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.TimeOfDay timeOfDay36 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.withChronologyRetainFields(chronology37);
        long long40 = chronology33.set((org.joda.time.ReadablePartial) timeOfDay36, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(chronology33);
        org.joda.time.DateTime dateTime42 = dateTime23.toDateTime(chronology33);
        org.joda.time.DateTimeField dateTimeField43 = chronology33.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = dateTimeField43.getType();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime18.property(dateTimeFieldType44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight3.property(dateTimeFieldType44);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone49);
        org.joda.time.DateTime dateTime51 = dateTime50.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime51.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime52.year();
        org.joda.time.DateTimeField dateTimeField54 = property53.getField();
        java.util.Locale locale55 = java.util.Locale.PRC;
        java.lang.String str56 = locale55.getDisplayScript();
        java.util.Locale.setDefault(locale55);
        java.lang.String str58 = locale55.getISO3Language();
        java.util.Locale locale59 = java.util.Locale.ENGLISH;
        java.lang.String str60 = locale55.getDisplayScript(locale59);
        int int61 = dateTimeField54.getMaximumShortTextLength(locale59);
        long long64 = dateTimeField54.getDifferenceAsLong(525L, (long) (short) -1);
        java.util.Locale locale66 = java.util.Locale.JAPANESE;
        java.lang.String str67 = dateTimeField54.getAsText(525L, locale66);
        java.lang.String str68 = property46.getAsShortText(locale66);
        java.lang.String str69 = locale66.getLanguage();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-86399999L) + "'", long40 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "zho" + "'", str58, "zho");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1970" + "'", str67, "1970");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0" + "'", str68, "0");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ja" + "'", str69, "ja");
    }

    @Test
    public void test11121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11121");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfEra(15);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.size();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455304656,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Standard\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=55,SECOND=4,MILLISECOND=656,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
    }

    @Test
    public void test11122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11122");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        boolean boolean4 = mutableDateTime0.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime0.setZone(dateTimeZone6);
        mutableDateTime0.addMillis(0);
        int int12 = mutableDateTime0.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.monthOfYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight21 = property20.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime26.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.year();
        org.joda.time.DateTimeField dateTimeField29 = property28.getField();
        long long32 = dateTimeField29.add((long) 21, (long) ' ');
        org.joda.time.DurationField durationField33 = dateTimeField29.getRangeDurationField();
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet36 = locale35.getExtensionKeys();
        java.lang.String str37 = dateTimeField29.getAsText(21, locale35);
        java.lang.String str38 = locale35.getLanguage();
        int int39 = property20.getMaximumTextLength(locale35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter17.withLocale(locale35);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime();
        int int42 = mutableDateTime41.getDayOfMonth();
        org.joda.time.Instant instant43 = mutableDateTime41.toInstant();
        boolean boolean45 = mutableDateTime41.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int49 = dateTimeZone47.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime41.setZone(dateTimeZone47);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology53 = localDate52.getChronology();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime54.getZone();
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime41.toMutableDateTime(dateTimeZone55);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(dateTimeZone55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter17.withZone(dateTimeZone55);
        long long60 = dateTimeZone55.convertUTCToLocal(121L);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(157L, dateTimeZone55);
        org.joda.time.DateTime dateTime62 = mutableDateTime0.toDateTime(dateTimeZone55);
        java.util.Locale.Category category64 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale65 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category64, locale65);
        java.lang.String str67 = dateTimeZone55.getName(599616000023L, locale65);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 55 + "'", int12 == 55);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1009843200021L + "'", long32 == 1009843200021L);
        org.junit.Assert.assertNull(durationField33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "21" + "'", str37, "21");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fr" + "'", str38, "fr");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 21 + "'", int42 == 21);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 121L + "'", long60 == 121L);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + category64 + "' != '" + java.util.Locale.Category.FORMAT + "'", category64.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
    }

    @Test
    public void test11123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11123");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime9 = property6.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime11 = property6.add((long) 1);
        org.joda.time.MutableDateTime mutableDateTime12 = property6.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime13 = property6.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime14 = property6.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime16 = property6.set(0);
        org.joda.time.MutableDateTime mutableDateTime18 = property6.set(292269054);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime18, readableInstant19);
        java.util.GregorianCalendar gregorianCalendar21 = mutableDateTime18.toGregorianCalendar();
        boolean boolean22 = gregorianCalendar21.isWeekDateSupported();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test11124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11124");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight1.withDurationAdded((long) 17, 1);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight1.plus((long) 1);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        int int9 = mutableDateTime8.getDayOfMonth();
        org.joda.time.Instant instant10 = mutableDateTime8.toInstant();
        int int11 = mutableDateTime8.getRoundingMode();
        mutableDateTime8.addYears(86399999);
        int int14 = mutableDateTime8.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime8.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod19 = mutablePeriod18.copy();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(chronology20);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.yearOfCentury();
        org.joda.time.Duration duration23 = mutablePeriod19.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime();
        int int25 = mutableDateTime24.getDayOfMonth();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate29 = localDate27.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int31 = localDate27.get(dateTimeFieldType30);
        mutableDateTime24.set(dateTimeFieldType30, 2);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime24.add(durationFieldType34, (int) '4');
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight21.withFieldAdded(durationFieldType34, 17);
        org.joda.time.Instant instant39 = dateMidnight38.toInstant();
        org.joda.time.DateTime dateTime40 = instant39.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.monthOfYear();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime41, (org.joda.time.ReadableInstant) dateMidnight44);
        int int47 = dateMidnight44.getMinuteOfHour();
        org.joda.time.Instant instant48 = dateMidnight44.toInstant();
        org.joda.time.Period period49 = org.joda.time.Period.ZERO;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(chronology50);
        org.joda.time.DateMidnight.Property property52 = dateMidnight51.dayOfYear();
        org.joda.time.DateMidnight dateMidnight53 = property52.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight.Property property55 = dateMidnight53.property(dateTimeFieldType54);
        org.joda.time.DateMidnight.Property property56 = dateMidnight53.year();
        org.joda.time.Duration duration57 = period49.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight44, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Instant instant59 = instant39.minus((org.joda.time.ReadableDuration) duration57);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration57);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight1.minus((org.joda.time.ReadableDuration) duration57);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 895 + "'", int14 == 895);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 21 + "'", int25 == 21);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(dateMidnight61);
    }

    @Test
    public void test11125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11125");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period3 = period1.plusHours((int) '#');
        org.joda.time.Period period4 = period1.toPeriod();
        org.joda.time.Duration duration5 = period4.toStandardDuration();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.dayOfYear();
        org.joda.time.DateMidnight dateMidnight9 = property8.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight.Property property11 = dateMidnight9.property(dateTimeFieldType10);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = interval12.contains(readableInstant13);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay17.year();
        org.joda.time.YearMonthDay yearMonthDay20 = property18.setCopy(1900);
        org.joda.time.Chronology chronology21 = yearMonthDay20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfDay();
        org.joda.time.Interval interval23 = interval12.withChronology(chronology21);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(interval23);
    }

    @Test
    public void test11126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11126");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        int int2 = mutableDateTime1.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone5);
        org.joda.time.DateTime dateTime7 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType9 = periodType8.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateTime6, periodType9);
        org.joda.time.PeriodType periodType11 = periodType9.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod15 = mutablePeriod14.copy();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = timeOfDay22.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay22.plusHours((-1));
        org.joda.time.Chronology chronology26 = timeOfDay25.getChronology();
        mutablePeriod14.setPeriod((long) (byte) 1, 845L, chronology26);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1009843200021L, periodType9, chronology26);
        int int29 = mutablePeriod28.getHours();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType34 = periodType33.withWeeksRemoved();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight31, readableDuration32, periodType33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(chronology36);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.era();
        java.lang.String str39 = dateMidnight37.toString();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight31, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight37.withFieldAdded(durationFieldType41, (-1));
        org.joda.time.DateMidnight.Property property44 = dateMidnight37.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime();
        int int46 = mutableDateTime45.getDayOfMonth();
        int int47 = mutableDateTime45.getMinuteOfHour();
        int int48 = mutableDateTime45.getWeekOfWeekyear();
        java.util.Date date49 = mutableDateTime45.toDate();
        int int50 = mutableDateTime45.getHourOfDay();
        boolean boolean51 = dateMidnight37.isEqual((org.joda.time.ReadableInstant) mutableDateTime45);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int55 = dateTimeZone53.getOffset(0L);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone53);
        org.joda.time.DateTime.Property property57 = dateTime56.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean60 = dateTimeZone59.isFixed();
        org.joda.time.DateTime dateTime61 = dateTime56.toDateTime(dateTimeZone59);
        org.joda.time.DateTime dateTime63 = dateTime56.plusMinutes((int) (byte) 1);
        mutablePeriod28.setPeriod((org.joda.time.ReadableInstant) dateMidnight37, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime66 = dateTime63.minusDays(69);
        org.joda.time.DateTime.Property property67 = dateTime63.year();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 21 + "'", int2 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str39, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 21 + "'", int46 == 21);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 55 + "'", int47 == 55);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Mon Feb 21 14:55:04 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 14 + "'", int50 == 14);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test11127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11127");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.DateTime.Property property6 = dateTime4.year();
        org.joda.time.DateTime dateTime7 = property6.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.withDurationAdded(842L, 105);
        int int13 = dateMidnight8.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 19 + "'", int13 == 19);
    }

    @Test
    public void test11128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11128");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight6 = property5.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateTime dateTime11 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime11.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.year();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        long long17 = dateTimeField14.add((long) 21, (long) ' ');
        org.joda.time.DurationField durationField18 = dateTimeField14.getRangeDurationField();
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        java.lang.String str22 = dateTimeField14.getAsText(21, locale20);
        java.lang.String str23 = locale20.getLanguage();
        int int24 = property5.getMaximumTextLength(locale20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withLocale(locale20);
        java.lang.String str26 = locale20.getISO3Language();
        java.util.Set<java.lang.String> strSet27 = locale20.getUnicodeLocaleAttributes();
        java.lang.String str28 = locale20.getISO3Country();
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str30 = locale29.getCountry();
        java.lang.String str31 = locale20.getDisplayScript(locale29);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1009843200021L + "'", long17 == 1009843200021L);
        org.junit.Assert.assertNull(durationField18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "21" + "'", str22, "21");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "fr" + "'", str23, "fr");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fra" + "'", str26, "fra");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "FRA" + "'", str28, "FRA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "TW" + "'", str30, "TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test11129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11129");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(9);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '4');
        org.joda.time.LocalDate localDate6 = localDate3.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDate.Property property7 = localDate3.centuryOfEra();
        org.joda.time.LocalDate localDate9 = property7.addToCopy(10);
        org.joda.time.LocalDate localDate10 = property7.roundCeilingCopy();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay11.year();
        org.joda.time.YearMonthDay yearMonthDay15 = property14.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int21 = dateTimeZone19.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(dateTimeZone19);
        long long25 = dateTimeZone19.convertLocalToUTC(0L, false);
        org.joda.time.DateTime dateTime26 = yearMonthDay17.toDateTimeAtMidnight(dateTimeZone19);
        org.joda.time.DateTime dateTime27 = localDate10.toDateTimeAtMidnight(dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime27.toMutableDateTime();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
    }

    @Test
    public void test11130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11130");
        java.util.Locale.Category category0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale1 = java.util.Locale.getDefault(category0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11131");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        int int3 = localDateTime2.getCenturyOfEra();
        int int4 = localDateTime2.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMinutes(887);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusHours((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withYearOfCentury((int) '4');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusHours((-1898));
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withDayOfMonth(1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20 + "'", int3 == 20);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test11132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11132");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval4 = yearMonthDay0.toInterval();
        org.joda.time.Period period6 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period8 = period6.plusHours((int) '#');
        org.joda.time.Period period9 = period6.toPeriod();
        org.joda.time.Interval interval10 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Interval interval12 = interval10.withStartMillis((long) '#');
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval17 = yearMonthDay13.toInterval();
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.Interval interval19 = interval17.toInterval();
        org.joda.time.Chronology chronology20 = interval17.getChronology();
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval25 = yearMonthDay21.toInterval();
        org.joda.time.Period period26 = interval25.toPeriod();
        org.joda.time.Interval interval27 = interval25.toInterval();
        org.joda.time.MutableInterval mutableInterval28 = interval25.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateTime dateTime33 = dateTime32.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime33.toMutableDateTime();
        org.joda.time.DateTime.Property property35 = dateTime33.year();
        org.joda.time.DateTime dateTime36 = property35.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight37 = dateTime36.toDateMidnight();
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight40 = property38.setCopy(1975);
        boolean boolean41 = interval25.contains((org.joda.time.ReadableInstant) dateMidnight40);
        boolean boolean42 = interval17.abuts((org.joda.time.ReadableInterval) interval25);
        boolean boolean43 = interval12.isBefore((org.joda.time.ReadableInterval) interval25);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test11133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11133");
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.parse("22");
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate6 = localDate4.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int8 = localDate4.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime2.withFields((org.joda.time.ReadablePartial) localDate4);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval14 = yearMonthDay10.toInterval();
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.DateTime dateTime16 = dateTime2.withChronology(chronology15);
        org.joda.time.Period period17 = new org.joda.time.Period((-125999990L), chronology15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) period17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test11134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11134");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        int int9 = mutableDateTime8.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType16 = periodType15.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime8, (org.joda.time.ReadableInstant) dateTime13, periodType16);
        org.joda.time.PeriodType periodType18 = periodType16.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod21.copy();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.TimeOfDay timeOfDay27 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = timeOfDay29.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay29.plusHours((-1));
        org.joda.time.Chronology chronology33 = timeOfDay32.getChronology();
        mutablePeriod21.setPeriod((long) (byte) 1, 845L, chronology33);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1009843200021L, periodType16, chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.monthOfYear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType41 = periodType40.withWeeksRemoved();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight38, readableDuration39, periodType40);
        org.joda.time.Period period44 = period42.withSeconds(0);
        org.joda.time.Period period46 = period44.plusMinutes((int) (byte) 1);
        org.joda.time.Period period48 = period44.withSeconds((int) (byte) 10);
        org.joda.time.Period period49 = period44.toPeriod();
        int int50 = period44.getMillis();
        int[] intArray52 = chronology33.get((org.joda.time.ReadablePeriod) period44, (long) 16);
        org.joda.time.DateTimeZone dateTimeZone53 = chronology33.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(86399901, 316, 53310623, 2, 53385982, 2955, 48, dateTimeZone53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53385982 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 0, 0, 0, 0, 0, 16]");
        org.junit.Assert.assertNotNull(dateTimeZone53);
    }

    @Test
    public void test11135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11135");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int5 = dateTimeZone3.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime0.toMutableDateTime(dateTimeZone3);
        mutableDateTime6.setDayOfWeek(4);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.parse("22");
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate14 = localDate12.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int16 = localDate12.get(dateTimeFieldType15);
        org.joda.time.DateTime dateTime17 = dateTime10.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate19 = localDate12.withCenturyOfEra(8);
        org.joda.time.DateTime dateTime20 = localDate12.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean22 = localDate12.isSupported(dateTimeFieldType21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime6.property(dateTimeFieldType21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateTime dateTime28 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.year();
        org.joda.time.MutableDateTime mutableDateTime32 = property30.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime33 = property30.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime35 = property30.add((long) 1);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.weekyear();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate40 = localDate38.plusWeeks(9);
        org.joda.time.Period period42 = new org.joda.time.Period((long) '4');
        org.joda.time.LocalDate localDate43 = localDate40.plus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.LocalDate localDate45 = localDate43.minusYears(51);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.LocalDate.Property property47 = localDate43.property(dateTimeFieldType46);
        mutableDateTime35.set(dateTimeFieldType46, 3);
        int int50 = mutableDateTime6.get(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
    }

    @Test
    public void test11136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11136");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval4 = yearMonthDay0.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        boolean boolean6 = mutableInterval5.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType15 = periodType14.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime7, (org.joda.time.ReadableInstant) dateTime12, periodType15);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod19.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.yearOfCentury();
        org.joda.time.Duration duration24 = mutablePeriod20.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        mutablePeriod16.setPeriod((org.joda.time.ReadableDuration) duration24);
        mutablePeriod16.setHours(1975);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateTime dateTime32 = dateTime31.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime32.toMutableDateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod16, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone37);
        org.joda.time.DateTime dateTime39 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime39.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.year();
        org.joda.time.MutableDateTime mutableDateTime43 = property41.addWrapField(6);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        org.joda.time.MutableDateTime mutableDateTime46 = property41.set("1", locale45);
        org.joda.time.Interval interval47 = interval34.withStart((org.joda.time.ReadableInstant) mutableDateTime46);
        boolean boolean48 = mutableInterval5.isBefore((org.joda.time.ReadableInterval) interval34);
        boolean boolean49 = interval34.isAfterNow();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test11137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11137");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.DateTime.Property property6 = dateTime4.year();
        org.joda.time.DateTime dateTime7 = property6.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfWeek();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant10.withDurationAdded((long) (byte) 0, (int) (byte) 0);
        org.joda.time.Instant instant15 = instant10.minus(951091200000L);
        org.joda.time.Instant instant17 = instant10.minus(823L);
        org.joda.time.Instant instant19 = instant10.minus((long) 1970);
        org.joda.time.Instant instant20 = instant10.toInstant();
        int int21 = property9.compareTo((org.joda.time.ReadableInstant) instant10);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test11138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11138");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval4 = yearMonthDay0.toInterval();
        org.joda.time.Period period5 = interval4.toPeriod();
        org.joda.time.Interval interval6 = interval4.toInterval();
        java.lang.Object obj7 = null;
        boolean boolean8 = interval6.equals(obj7);
        org.joda.time.Period period11 = new org.joda.time.Period((-369216316799883L), 1645488000000L);
        org.joda.time.Interval interval12 = interval6.withPeriodAfterStart((org.joda.time.ReadablePeriod) period11);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType15 = periodType14.withWeeksRemoved();
        org.joda.time.PeriodType periodType16 = periodType15.withMillisRemoved();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(156L, periodType16, chronology19);
        org.joda.time.Period period22 = period11.normalizedStandard(periodType16);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(period22);
    }

    @Test
    public void test11139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11139");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.TimeOfDay.Property property8 = timeOfDay4.millisOfSecond();
        org.joda.time.DurationField durationField9 = property8.getDurationField();
        java.lang.String str10 = property8.getAsShortText();
        int int11 = property8.getMaximumValue();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTime dateTime17 = timeOfDay16.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay16.minusHours((int) (byte) 1);
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.lang.String str22 = timeOfDay16.toString("1", locale21);
        java.lang.String str23 = property8.getAsShortText(locale21);
        org.joda.time.TimeOfDay timeOfDay24 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.withMillisOfSecond((int) (short) 1);
        org.joda.time.Chronology chronology27 = timeOfDay24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.year();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 999 + "'", int11 == 999);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test11140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11140");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval4 = yearMonthDay0.toInterval();
        org.joda.time.Period period5 = interval4.toPeriod();
        org.joda.time.Interval interval6 = interval4.toInterval();
        org.joda.time.Interval interval8 = interval6.withEndMillis(1645401600000L);
        java.lang.String str9 = interval6.toString();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T00:00:00.000Z/2022-02-22T00:00:00.000Z" + "'", str9, "2022-02-21T00:00:00.000Z/2022-02-22T00:00:00.000Z");
    }

    @Test
    public void test11141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11141");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        org.joda.time.YearMonthDay yearMonthDay4 = property3.withMinimumValue();
        int int5 = property3.getMaximumValueOverall();
        int int6 = property3.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField7 = property3.getField();
        org.joda.time.YearMonthDay yearMonthDay9 = property3.setCopy(2100001);
        java.lang.String str10 = yearMonthDay9.toString();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-292275054) + "'", int6 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2100001-02-21" + "'", str10, "2100001-02-21");
    }

    @Test
    public void test11142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11142");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(11, (int) ' ');
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        java.time.Instant instant5 = calendar0.toInstant();
        calendar0.set(2023, 48, (-1970), 1976, (int) (byte) 10, 32769);
        calendar0.add(0, 45);
        java.util.TimeZone timeZone16 = calendar0.getTimeZone();
        boolean boolean17 = timeZone16.useDaylightTime();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Standard\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2021,MONTH=9,WEEK_OF_YEAR=44,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=303,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=16,SECOND=9,MILLISECOND=525,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test11143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11143");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        org.joda.time.YearMonthDay yearMonthDay5 = property3.addToCopy(0);
        org.joda.time.Chronology chronology6 = yearMonthDay5.getChronology();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay5.year();
        org.joda.time.YearMonthDay yearMonthDay9 = property7.addToCopy(802);
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test11144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11144");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod12 = mutablePeriod11.copy();
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod12);
        mutablePeriod7.setMonths((int) '#');
        mutablePeriod7.addSeconds(0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
    }

    @Test
    public void test11145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11145");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod8.copy();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay16.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay16.plusHours((-1));
        org.joda.time.Chronology chronology20 = timeOfDay19.getChronology();
        mutablePeriod8.setPeriod((long) (byte) 1, 845L, chronology20);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(41L, chronology20);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '4', periodType4, chronology20);
        org.joda.time.Interval interval24 = new org.joda.time.Interval(660L, 792L, chronology20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 11, chronology20);
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(chronology20);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.millisOfSecond();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test11146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11146");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType10 = periodType9.withWeeksRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, readableDuration8, periodType9);
        org.joda.time.Period period13 = period11.withSeconds(0);
        org.joda.time.Period period15 = period13.plusMinutes((int) (byte) 1);
        org.joda.time.Period period17 = period13.withSeconds((int) (byte) 10);
        org.joda.time.Period period18 = period13.toPeriod();
        org.joda.time.LocalDate localDate19 = localDate2.minus((org.joda.time.ReadablePeriod) period18);
        int int20 = localDate19.getDayOfWeek();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay22.year();
        org.joda.time.YearMonthDay yearMonthDay26 = property25.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay28 = property25.setCopy(20);
        org.joda.time.YearMonthDay yearMonthDay30 = property25.addToCopy(47);
        org.joda.time.LocalDate localDate31 = localDate19.withFields((org.joda.time.ReadablePartial) yearMonthDay30);
        int int32 = yearMonthDay30.size();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
    }

    @Test
    public void test11147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11147");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime5.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime7 = dateTime5.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.centuryOfEra();
        boolean boolean11 = dateTimeZone0.isLocalDateTimeGap(localDateTime7);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = property12.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test11148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11148");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime6.toMutableDateTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = timeOfDay12.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay12.plusHours((-1));
        org.joda.time.Chronology chronology16 = timeOfDay15.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.withChronologyRetainFields(chronology20);
        long long23 = chronology16.set((org.joda.time.ReadablePartial) timeOfDay19, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(chronology16);
        org.joda.time.DateTime dateTime25 = dateTime6.toDateTime(chronology16);
        org.joda.time.DateTimeField dateTimeField26 = chronology16.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology16.millisOfDay();
        org.joda.time.DurationField durationField28 = chronology16.centuries();
        org.joda.time.Period period29 = new org.joda.time.Period(818L, periodType1, chronology16);
        org.joda.time.PeriodType periodType30 = periodType1.withWeeksRemoved();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-86399999L) + "'", long23 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(periodType30);
    }

    @Test
    public void test11149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11149");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTime dateTime5 = timeOfDay4.toDateTimeToday();
        org.joda.time.DateTime dateTime7 = dateTime5.plusYears((int) 'u');
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        int int9 = mutableDateTime8.getDayOfMonth();
        org.joda.time.Instant instant10 = mutableDateTime8.toInstant();
        boolean boolean12 = mutableDateTime8.isBefore((long) 2);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime8.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime18.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.year();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        java.util.Locale locale22 = java.util.Locale.PRC;
        java.lang.String str23 = locale22.getDisplayScript();
        java.util.Locale.setDefault(locale22);
        java.lang.String str25 = locale22.getISO3Language();
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.lang.String str27 = locale22.getDisplayScript(locale26);
        int int28 = dateTimeField21.getMaximumShortTextLength(locale26);
        mutableDateTime8.setRounding(dateTimeField21);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone32);
        org.joda.time.DateTime dateTime34 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTime();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.TimeOfDay timeOfDay38 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = timeOfDay40.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay40.plusHours((-1));
        org.joda.time.Chronology chronology44 = timeOfDay43.getChronology();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.TimeOfDay timeOfDay47 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay47.withChronologyRetainFields(chronology48);
        long long51 = chronology44.set((org.joda.time.ReadablePartial) timeOfDay47, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay(chronology44);
        org.joda.time.DateTime dateTime53 = dateTime34.toDateTime(chronology44);
        org.joda.time.DateTimeField dateTimeField54 = chronology44.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField55 = chronology44.millisOfDay();
        mutableDateTime8.setRounding(dateTimeField55);
        int int57 = dateTimeField55.getMinimumValue();
        int int58 = dateTime5.get(dateTimeField55);
        org.joda.time.DateTime dateTime59 = dateTime5.toDateTime();
        org.joda.time.DateTime.Property property60 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime62 = property60.setCopy(896);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone66);
        org.joda.time.DateTime dateTime68 = dateTime67.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime68.toMutableDateTime();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.TimeOfDay timeOfDay72 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.TimeOfDay timeOfDay74 = timeOfDay72.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray75 = timeOfDay74.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay77 = timeOfDay74.plusHours((-1));
        org.joda.time.Chronology chronology78 = timeOfDay77.getChronology();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.TimeOfDay timeOfDay81 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology80);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.TimeOfDay timeOfDay83 = timeOfDay81.withChronologyRetainFields(chronology82);
        long long85 = chronology78.set((org.joda.time.ReadablePartial) timeOfDay81, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay86 = new org.joda.time.TimeOfDay(chronology78);
        org.joda.time.DateTime dateTime87 = dateTime68.toDateTime(chronology78);
        org.joda.time.DateTimeField dateTimeField88 = chronology78.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField89 = chronology78.millisOfDay();
        org.joda.time.DurationField durationField90 = chronology78.centuries();
        org.joda.time.DurationField durationField91 = durationFieldType63.getField(chronology78);
        java.lang.String str92 = durationFieldType63.getName();
        org.joda.time.DateTime dateTime94 = dateTime62.withFieldAdded(durationFieldType63, 53385982);
        org.joda.time.DateTime dateTime96 = dateTime94.withMillis(1645455270709L);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zho" + "'", str25, "zho");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-86399999L) + "'", long51 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(timeOfDay72);
        org.junit.Assert.assertNotNull(timeOfDay74);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray75);
        org.junit.Assert.assertNotNull(timeOfDay77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(timeOfDay81);
        org.junit.Assert.assertNotNull(timeOfDay83);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-86399999L) + "'", long85 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "halfdays" + "'", str92, "halfdays");
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime96);
    }

    @Test
    public void test11150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11150");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTime dateTime5 = timeOfDay4.toDateTimeToday();
        org.joda.time.DateTime dateTime7 = dateTime5.plusYears((int) 'u');
        org.joda.time.DateTime dateTime9 = dateTime5.withHourOfDay((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.minus(readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod17 = mutablePeriod16.copy();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.yearOfCentury();
        org.joda.time.Duration duration21 = mutablePeriod17.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableDuration22, (org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType26 = periodType25.withWeeksRemoved();
        org.joda.time.DurationFieldType durationFieldType28 = periodType26.getFieldType(0);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) mutableDateTime23, periodType26);
        org.joda.time.Period period30 = new org.joda.time.Period((long) 2027, (long) 23, periodType26);
        org.joda.time.Period period32 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period34 = period32.plusHours((int) '#');
        org.joda.time.Hours hours35 = period34.toStandardHours();
        org.joda.time.Period period36 = period34.toPeriod();
        java.lang.String str37 = period36.toString();
        org.joda.time.Hours hours38 = period36.toStandardHours();
        org.joda.time.Period period39 = period30.withFields((org.joda.time.ReadablePeriod) hours38);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone42);
        org.joda.time.DateTime dateTime44 = dateTime43.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime44.toMutableDateTime();
        org.joda.time.DateTime dateTime47 = dateTime44.withYear((int) (short) -1);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.TimeOfDay timeOfDay50 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = timeOfDay52.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay52.plusHours((-1));
        org.joda.time.Chronology chronology56 = timeOfDay55.getChronology();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.TimeOfDay timeOfDay59 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.TimeOfDay timeOfDay61 = timeOfDay59.withChronologyRetainFields(chronology60);
        long long63 = chronology56.set((org.joda.time.ReadablePartial) timeOfDay59, (long) (byte) -1);
        org.joda.time.DateTimeField dateTimeField64 = chronology56.millisOfSecond();
        org.joda.time.DurationField durationField65 = chronology56.years();
        org.joda.time.DateTime dateTime66 = dateTime44.withChronology(chronology56);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.TimeOfDay timeOfDay69 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.TimeOfDay timeOfDay71 = timeOfDay69.withChronologyRetainFields(chronology70);
        org.joda.time.DateTime dateTime72 = timeOfDay71.toDateTimeToday();
        org.joda.time.DateTime dateTime74 = dateTime72.plusYears((int) 'u');
        org.joda.time.DateTime dateTime76 = dateTime72.minusHours(2027);
        int int77 = dateTime66.compareTo((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Duration duration78 = period39.toDurationTo((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime79 = dateTime5.minus((org.joda.time.ReadableDuration) duration78);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT35H0.052S" + "'", str37, "PT35H0.052S");
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-86399999L) + "'", long63 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertNotNull(timeOfDay71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test11151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11151");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay5.plusDays(2022);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.withMonthOfYear(4);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight11 = yearMonthDay9.toDateMidnight(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime();
        int int13 = mutableDateTime12.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType20 = periodType19.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableInstant) dateTime17, periodType20);
        int int22 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Interval interval23 = localDate4.toInterval(dateTimeZone10);
        int int24 = localDate4.getDayOfMonth();
        org.joda.time.DateTime dateTime25 = localDate4.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate27 = localDate4.minusMonths(2720);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21 + "'", int13 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 31 + "'", int24 == 31);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate27);
    }

    @Test
    public void test11152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11152");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        org.joda.time.YearMonthDay yearMonthDay5 = property3.addToCopy(0);
        org.joda.time.YearMonthDay yearMonthDay7 = property3.setCopy((int) 'u');
        org.joda.time.YearMonthDay yearMonthDay8 = property3.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay9 = property3.getYearMonthDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) -1, chronology11);
        org.joda.time.LocalDate localDate14 = localDate12.minusYears(1);
        org.joda.time.LocalDate.Property property15 = localDate12.year();
        int int16 = localDate12.getYearOfEra();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime20 = yearMonthDay17.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval21 = yearMonthDay17.toInterval();
        org.joda.time.LocalDate localDate22 = yearMonthDay17.toLocalDate();
        int[] intArray23 = localDate22.getValues();
        org.joda.time.LocalDate.Property property24 = localDate22.monthOfYear();
        org.joda.time.LocalDate localDate26 = localDate22.plusMonths(53251426);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) -1, chronology28);
        org.joda.time.LocalDate localDate31 = localDate29.minusYears(1);
        org.joda.time.LocalDate.Property property32 = localDate29.year();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType37 = periodType36.withWeeksRemoved();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, readableDuration35, periodType36);
        org.joda.time.Period period40 = period38.withSeconds(0);
        org.joda.time.Period period42 = period40.plusMinutes((int) (byte) 1);
        org.joda.time.Period period44 = period40.withSeconds((int) (byte) 10);
        org.joda.time.Period period45 = period40.toPeriod();
        org.joda.time.LocalDate localDate46 = localDate29.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Period period47 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate46);
        int int48 = localDate12.compareTo((org.joda.time.ReadablePartial) localDate46);
        org.joda.time.LocalDate localDate50 = localDate46.minusYears(126000000);
        int int51 = property3.compareTo((org.joda.time.ReadablePartial) localDate46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate53 = localDate46.withMonthOfYear(67);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 67 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1969 + "'", int16 == 1969);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[2022, 2, 21]");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test11153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11153");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.add(818);
        mutableDateTime3.addDays(6);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        int int7 = mutableDateTime6.getDayOfMonth();
        org.joda.time.Instant instant8 = mutableDateTime6.toInstant();
        boolean boolean10 = mutableDateTime6.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime6.setZone(dateTimeZone12);
        mutableDateTime6.addMillis(0);
        int int18 = mutableDateTime6.getMinuteOfHour();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        mutableDateTime3.setMillis(845L);
        int int22 = mutableDateTime3.getDayOfWeek();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime3.millisOfDay();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime3.weekOfWeekyear();
        mutableDateTime3.addSeconds(686);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 55 + "'", int18 == 55);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test11154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11154");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        int int2 = mutableDateTime1.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone5);
        org.joda.time.DateTime dateTime7 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType9 = periodType8.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateTime6, periodType9);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod13.copy();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.yearOfCentury();
        org.joda.time.Duration duration18 = mutablePeriod14.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight16);
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration18);
        mutablePeriod10.setHours(1975);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime26.toMutableDateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod10, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateTime dateTime33 = dateTime32.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime33.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.year();
        org.joda.time.MutableDateTime mutableDateTime37 = property35.addWrapField(6);
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        org.joda.time.MutableDateTime mutableDateTime40 = property35.set("1", locale39);
        org.joda.time.Interval interval41 = interval28.withStart((org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.Instant instant42 = mutableDateTime40.toInstant();
        org.joda.time.Instant instant44 = instant42.plus(935L);
        org.joda.time.Period period45 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableInstant) instant44);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 21 + "'", int2 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(instant44);
    }

    @Test
    public void test11155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11155");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod12 = mutablePeriod11.copy();
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType18 = periodType17.withWeeksRemoved();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight15, readableDuration16, periodType17);
        org.joda.time.Period period21 = period19.withSeconds(0);
        boolean boolean22 = mutablePeriod12.equals((java.lang.Object) period19);
        org.joda.time.Duration duration23 = period19.toStandardDuration();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime();
        int int25 = mutableDateTime24.getDayOfMonth();
        org.joda.time.Instant instant26 = mutableDateTime24.toInstant();
        boolean boolean28 = mutableDateTime24.isBefore((long) 2);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime24.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone32);
        org.joda.time.DateTime dateTime34 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.year();
        org.joda.time.DateTimeField dateTimeField37 = property36.getField();
        java.util.Locale locale38 = java.util.Locale.PRC;
        java.lang.String str39 = locale38.getDisplayScript();
        java.util.Locale.setDefault(locale38);
        java.lang.String str41 = locale38.getISO3Language();
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.lang.String str43 = locale38.getDisplayScript(locale42);
        int int44 = dateTimeField37.getMaximumShortTextLength(locale42);
        mutableDateTime24.setRounding(dateTimeField37);
        int int46 = mutableDateTime24.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime24.dayOfYear();
        mutableDateTime24.setMinuteOfDay(19);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.standard();
        java.lang.String str51 = periodType50.getName();
        org.joda.time.PeriodType periodType52 = periodType50.withMillisRemoved();
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) mutableDateTime24, periodType52);
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime55 = instant54.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime55.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime57 = property56.roundHalfEven();
        int int58 = mutableDateTime57.getSecondOfDay();
        int int59 = mutableDateTime57.getMinuteOfHour();
        mutableDateTime24.setMillis((org.joda.time.ReadableInstant) mutableDateTime57);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 21 + "'", int25 == 21);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zho" + "'", str41, "zho");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Standard" + "'", str51, "Standard");
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test11156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11156");
        org.joda.time.Period period1 = org.joda.time.Period.days(100);
        org.joda.time.Period period3 = period1.minusMonths(1439);
        org.joda.time.Period period4 = period1.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMonths(156);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test11157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11157");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        java.lang.String str3 = property2.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property2.getFieldType();
        java.lang.String str5 = dateTimeFieldType4.getName();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "22" + "'", str3, "22");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "yearOfCentury" + "'", str5, "yearOfCentury");
    }

    @Test
    public void test11158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11158");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = timeOfDay15.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay15.plusHours((-1));
        org.joda.time.Chronology chronology19 = timeOfDay18.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.withChronologyRetainFields(chronology23);
        long long26 = chronology19.set((org.joda.time.ReadablePartial) timeOfDay22, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(chronology19);
        org.joda.time.DateTime dateTime28 = dateTime9.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField29 = chronology19.yearOfCentury();
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.fromMillisOfDay(80L, chronology19);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(2, 45, 16, 366, chronology19);
        org.joda.time.DateTimeField dateTimeField32 = chronology19.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime37.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime38.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.year();
        org.joda.time.MutableDateTime mutableDateTime42 = property40.addWrapField(6);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        org.joda.time.MutableDateTime mutableDateTime45 = property40.set("1", locale44);
        java.lang.String str46 = dateTimeField32.getAsText(43L, locale44);
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 0, 0L);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period51 = period49.withPeriodType(periodType50);
        org.joda.time.Period period53 = period49.withDays((int) (short) 100);
        org.joda.time.Period period54 = period49.negated();
        org.joda.time.Period period56 = period49.withMinutes(9);
        org.joda.time.Period period58 = period49.withMillis((int) '#');
        org.joda.time.PeriodType periodType59 = period58.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(periodType59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period61 = new org.joda.time.Period((java.lang.Object) 43L, periodType59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-86399999L) + "'", long26 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0" + "'", str46, "0");
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(periodType59);
    }

    @Test
    public void test11159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11159");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(845L);
        java.util.TimeZone timeZone3 = null;
        calendar0.setTimeZone(timeZone3);
        int int6 = calendar0.getGreatestMinimum(9);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229");
        calendar0.setTimeZone(timeZone8);
        boolean boolean10 = calendar0.isWeekDateSupported();
        calendar0.add(0, 15);
        boolean boolean15 = calendar0.after((java.lang.Object) 3155695200000L);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=845,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test11160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11160");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.DateTime.Property property6 = dateTime4.year();
        org.joda.time.DateTime dateTime8 = property6.setCopy((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = property6.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.plusYears(32769);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        long long13 = instant12.getMillis();
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime14.getZone();
        org.joda.time.DateTime dateTime18 = dateTime9.withZone(dateTimeZone17);
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.lang.String str22 = locale19.getExtension('a');
        java.util.Calendar calendar23 = dateTime18.toCalendar(locale19);
        calendar23.setTimeInMillis(1645455119008L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455306269L + "'", long13 == 1645455306269L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645455119008,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=51,SECOND=59,MILLISECOND=8,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11161");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '#');
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32770);
        long long10 = dateTime7.getMillis();
        int int11 = dateTime7.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 92016000001L + "'", long10 == 92016000001L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test11162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11162");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.era();
        org.joda.time.DateMidnight dateMidnight3 = property2.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight4 = property2.getDateMidnight();
        int int5 = dateMidnight4.getSecondOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withYear(0);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate9.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int13 = localDate9.get(dateTimeFieldType12);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        int int15 = mutableDateTime14.getDayOfMonth();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate19 = localDate17.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int21 = localDate17.get(dateTimeFieldType20);
        mutableDateTime14.set(dateTimeFieldType20, 2);
        int int24 = localDate9.get(dateTimeFieldType20);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.parse("22");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int30 = dateTimeZone28.getOffset(0L);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTime.Property property32 = dateTime31.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.DateTime dateTime36 = dateTime31.toDateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime26.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = localDate9.toDateTimeAtMidnight(dateTimeZone34);
        org.joda.time.LocalDate localDate40 = localDate9.withYear(899);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean42 = localDate40.isSupported(dateTimeFieldType41);
        org.joda.time.DateMidnight.Property property43 = dateMidnight4.property(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 21 + "'", int15 == 21);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test11163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11163");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3, periodType4);
        org.joda.time.Period period8 = period6.withSeconds(0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime14 = dateTime12.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTime dateTime20 = timeOfDay19.toDateTimeToday();
        boolean boolean21 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getWeekyear();
        org.joda.time.DateTime dateTime24 = dateTime20.plusHours(4);
        org.joda.time.Duration duration25 = period6.toDurationFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod28.copy();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.yearOfCentury();
        org.joda.time.Duration duration33 = mutablePeriod29.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight31);
        boolean boolean34 = duration25.isEqual((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTime dateTime35 = dateTime0.minus((org.joda.time.ReadableDuration) duration33);
        int int36 = dateTime0.getDayOfYear();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
    }

    @Test
    public void test11164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11164");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("years");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"years\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11165");
        java.util.Date date3 = new java.util.Date(1439, (int) (byte) -1, 292269054);
        int int4 = date3.getMonth();
        date3.setYear(53984007);
        org.joda.time.YearMonth yearMonth7 = org.joda.time.YearMonth.fromDateFields(date3);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone10);
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.lang.String str15 = dateTimeZone10.getName((long) (-1), locale13);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.year();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime26 = property23.add(799L);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone29);
        org.joda.time.DateTime dateTime31 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime31.toMutableDateTime();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.TimeOfDay timeOfDay35 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = timeOfDay37.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay37.plusHours((-1));
        org.joda.time.Chronology chronology41 = timeOfDay40.getChronology();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.TimeOfDay timeOfDay44 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay44.withChronologyRetainFields(chronology45);
        long long48 = chronology41.set((org.joda.time.ReadablePartial) timeOfDay44, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(chronology41);
        org.joda.time.DateTime dateTime50 = dateTime31.toDateTime(chronology41);
        org.joda.time.DateTimeField dateTimeField51 = chronology41.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = dateTimeField51.getType();
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime26.property(dateTimeFieldType52);
        int int54 = localTime16.get(dateTimeFieldType52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth56 = yearMonth7.withField(dateTimeFieldType52, 86399);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue May 28 00:00:00 GMT+00:00 53985907");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-86399999L) + "'", long48 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 53706402 + "'", int54 == 53706402);
    }

    @Test
    public void test11166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11166");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType11 = periodType10.withWeeksRemoved();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9, periodType10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.era();
        java.lang.String str16 = dateMidnight14.toString();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, (org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight14.withFieldAdded(durationFieldType18, (-1));
        org.joda.time.Interval interval21 = dateMidnight20.toInterval();
        long long22 = interval21.getEndMillis();
        org.joda.time.Interval interval24 = interval21.withStartMillis((long) 39);
        boolean boolean26 = interval24.isAfter(909L);
        org.joda.time.Chronology chronology27 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(2014, 53613597, 0, 52012138, 2869, 10, 2508705, chronology27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52012138 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str16, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645401600000L + "'", long22 == 1645401600000L);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test11167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11167");
        org.joda.time.Period period4 = new org.joda.time.Period(753, 1976, 53, 0);
        org.joda.time.Period period6 = period4.plusMonths(889);
        org.joda.time.Period period8 = period4.minusMinutes(2134);
        int int9 = period8.getSeconds();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
    }

    @Test
    public void test11168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11168");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime7 = dateTime5.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.plusHours((-1));
        org.joda.time.Chronology chronology17 = timeOfDay16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.centuryOfEra();
        org.joda.time.DurationField durationField20 = chronology17.weekyears();
        org.joda.time.DateTime dateTime21 = dateTime5.toDateTime(chronology17);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.secondOfDay();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(311L, 411L, chronology17);
        org.joda.time.DateTimeField dateTimeField24 = chronology17.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test11169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11169");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(49);
        org.joda.time.Period period3 = period1.withMillis(896);
        org.joda.time.Seconds seconds4 = period3.toStandardSeconds();
        org.joda.time.Duration duration5 = period3.toStandardDuration();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(duration5);
    }

    @Test
    public void test11170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11170");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        org.joda.time.YearMonthDay yearMonthDay4 = property3.withMinimumValue();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = property3.getAsText(locale5);
        org.joda.time.DurationField durationField7 = property3.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay8 = property3.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField9 = property3.getField();
        long long12 = dateTimeField9.add(225L, 829L);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 26160710400225L + "'", long12 == 26160710400225L);
    }

    @Test
    public void test11171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11171");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) 0, 887, 10, (-1898), 53251426, 2032, 11, 2023);
        int int9 = period8.getMonths();
        org.joda.time.Period period11 = period8.minusMinutes(753);
        int int12 = period11.size();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.LocalDate localDate15 = dateMidnight14.toLocalDate();
        org.joda.time.Duration duration16 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime20 = yearMonthDay17.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval21 = yearMonthDay17.toInterval();
        org.joda.time.Period period23 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period25 = period23.plusHours((int) '#');
        org.joda.time.Period period26 = period23.toPeriod();
        org.joda.time.Interval interval27 = interval21.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Interval interval29 = interval27.toInterval();
        org.joda.time.MutableInterval mutableInterval30 = interval27.toMutableInterval();
        long long31 = interval27.getStartMillis();
        org.joda.time.Interval interval32 = interval27.toInterval();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = dateTime33.minusYears((int) ' ');
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime33.toMutableDateTime();
        mutableDateTime36.setMillisOfSecond(2);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod41.copy();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.yearOfCentury();
        org.joda.time.Duration duration46 = mutablePeriod42.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod50 = mutablePeriod49.copy();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(chronology51);
        org.joda.time.DateMidnight.Property property53 = dateMidnight52.yearOfCentury();
        org.joda.time.Duration duration54 = mutablePeriod50.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight52);
        boolean boolean55 = duration46.isEqual((org.joda.time.ReadableDuration) duration54);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod59 = mutablePeriod58.copy();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(chronology60);
        org.joda.time.DateMidnight.Property property62 = dateMidnight61.yearOfCentury();
        org.joda.time.Duration duration63 = mutablePeriod59.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight61);
        boolean boolean64 = duration54.isShorterThan((org.joda.time.ReadableDuration) duration63);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType66 = periodType65.withWeeksRemoved();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime36, (org.joda.time.ReadableDuration) duration63, periodType66);
        org.joda.time.Interval interval68 = interval27.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration63);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight14.plus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight14.plusDays(969);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 887 + "'", int9 == 887);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645487999948L + "'", long31 == 1645487999948L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(mutablePeriod59);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight71);
    }

    @Test
    public void test11172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11172");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(dateTimeZone1);
        int int3 = yearMonth2.getYear();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period7 = period5.plusHours((int) '#');
        org.joda.time.Period period8 = period5.toPeriod();
        org.joda.time.YearMonth yearMonth9 = yearMonth2.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears(887);
        org.joda.time.YearMonth.Property property12 = yearMonth9.monthOfYear();
        int int13 = property12.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        org.joda.time.DateTimeField dateTimeField15 = property12.getField();
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("45");
        int int18 = property12.getMaximumTextLength(locale17);
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category20, locale21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) -1, chronology24);
        org.joda.time.LocalDate localDate27 = localDate25.minusYears(1);
        org.joda.time.LocalDate.Property property28 = localDate25.year();
        org.joda.time.LocalDate localDate29 = property28.withMaximumValue();
        org.joda.time.LocalDate localDate31 = property28.addToCopy((int) 'u');
        org.joda.time.LocalDate.Property property32 = localDate31.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int36 = dateTimeZone34.getOffset(0L);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.DateTime.Property property38 = dateTime37.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean41 = dateTimeZone40.isFixed();
        org.joda.time.DateTime dateTime42 = dateTime37.toDateTime(dateTimeZone40);
        boolean boolean43 = localDate31.equals((java.lang.Object) dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(dateTimeZone40);
        java.util.Locale.Builder builder46 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder48 = builder46.addUnicodeLocaleAttribute("PT10S");
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone51);
        org.joda.time.DateTime dateTime53 = dateTime52.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime53.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime54.year();
        org.joda.time.DateTimeField dateTimeField56 = property55.getField();
        java.util.Locale locale57 = java.util.Locale.PRC;
        java.lang.String str58 = locale57.getDisplayScript();
        java.util.Locale.setDefault(locale57);
        java.lang.String str60 = locale57.getISO3Language();
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.lang.String str62 = locale57.getDisplayScript(locale61);
        int int63 = dateTimeField56.getMaximumShortTextLength(locale61);
        long long66 = dateTimeField56.getDifferenceAsLong(525L, (long) (short) -1);
        java.util.Locale locale68 = java.util.Locale.JAPANESE;
        java.lang.String str69 = dateTimeField56.getAsText(525L, locale68);
        java.util.Locale.Builder builder70 = builder46.setLocale(locale68);
        java.lang.String str71 = dateTimeZone40.getShortName(893L, locale68);
        java.util.Locale.setDefault(category20, locale68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth73 = property12.setCopy("DateTimeField[hourOfHalfday]", locale68);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DateTimeField[hourOfHalfday]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "zho" + "'", str60, "zho");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1970" + "'", str69, "1970");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
    }

    @Test
    public void test11173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11173");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType10 = periodType9.withWeeksRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, readableDuration8, periodType9);
        org.joda.time.Period period13 = period11.withSeconds(0);
        org.joda.time.Period period15 = period13.plusMinutes((int) (byte) 1);
        org.joda.time.Period period17 = period13.withSeconds((int) (byte) 10);
        org.joda.time.Period period18 = period13.toPeriod();
        org.joda.time.LocalDate localDate19 = localDate2.minus((org.joda.time.ReadablePeriod) period18);
        int int20 = localDate19.getDayOfWeek();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        org.joda.time.LocalDate localDate23 = localDate19.withYear(896);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((java.lang.Object) 896);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test11174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11174");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.plusDays(2022);
        int int3 = yearMonthDay2.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay2.plusDays(2023);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        int int7 = mutableDateTime6.getDayOfMonth();
        org.joda.time.Instant instant8 = mutableDateTime6.toInstant();
        boolean boolean10 = mutableDateTime6.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime6.setZone(dateTimeZone12);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime6.toMutableDateTime(dateTimeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone20);
        java.lang.String str24 = dateTimeZone20.getNameKey(0L);
        org.joda.time.DateMidnight dateMidnight25 = yearMonthDay5.toDateMidnight(dateTimeZone20);
        int int26 = yearMonthDay5.size();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
    }

    @Test
    public void test11175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11175");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime3 = property2.withMaximumValue();
        int int4 = property2.getLeapAmount();
        org.joda.time.LocalTime localTime6 = property2.setCopy(2022);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test11176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11176");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withFieldAdded(durationFieldType4, 2);
        java.lang.Object obj7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(obj7, dateTimeZone8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.secondOfMinute();
        long long11 = property10.remainder();
        org.joda.time.LocalDateTime localDateTime12 = property10.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusSeconds(11);
        int int15 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        java.lang.Object obj16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(obj16, dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withWeekyear((int) '4');
        java.lang.String str27 = localDateTime24.toString();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 52, 799L);
        mutablePeriod31.addHours(53377138);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.minus((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.yearOfCentury();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 725L + "'", long11 == 725L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-21T14:55:06.626" + "'", str27, "2022-02-21T14:55:06.626");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test11177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11177");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusYears((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime2.withWeekyear(32772);
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 0, 0L);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period9 = period7.withPeriodType(periodType8);
        org.joda.time.Period period11 = period7.withDays((int) (short) 100);
        int int12 = period7.size();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.standard();
        java.lang.String str14 = periodType13.getName();
        org.joda.time.PeriodType periodType15 = periodType13.withMillisRemoved();
        org.joda.time.Period period16 = period7.normalizedStandard(periodType13);
        org.joda.time.DateTime dateTime18 = dateTime4.withPeriodAdded((org.joda.time.ReadablePeriod) period16, 45);
        org.joda.time.DateTime.Property property19 = dateTime4.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Standard" + "'", str14, "Standard");
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test11178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11178");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(821L);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plus(41L);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfYear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.withDurationAdded((long) 17, 1);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight5.withEra((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight5.withWeekyear(2022);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableInstant) dateMidnight13);
        int int15 = dateMidnight1.getMillisOfSecond();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight1.minus((-86399999L));
        int int18 = dateMidnight17.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((-1), 3, 11);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = yearMonthDay22.getFieldType((int) (short) 0);
        org.joda.time.DateMidnight.Property property25 = dateMidnight17.property(dateTimeFieldType24);
        org.joda.time.DateMidnight dateMidnight26 = property25.withMaximumValue();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateMidnight26);
    }

    @Test
    public void test11179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11179");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime6.toMutableDateTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = timeOfDay12.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay12.plusHours((-1));
        org.joda.time.Chronology chronology16 = timeOfDay15.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.withChronologyRetainFields(chronology20);
        long long23 = chronology16.set((org.joda.time.ReadablePartial) timeOfDay19, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(chronology16);
        org.joda.time.DateTime dateTime25 = dateTime6.toDateTime(chronology16);
        org.joda.time.DateTimeField dateTimeField26 = chronology16.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology16.millisOfDay();
        org.joda.time.DurationField durationField28 = chronology16.centuries();
        org.joda.time.Period period29 = new org.joda.time.Period(818L, periodType1, chronology16);
        org.joda.time.DateTimeField dateTimeField30 = chronology16.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology16.getZone();
        long long35 = chronology16.add((long) 32770, 818L, 5);
        org.joda.time.DateTimeField dateTimeField36 = chronology16.monthOfYear();
        java.lang.String str38 = dateTimeField36.getAsShortText(1645455211934L);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-86399999L) + "'", long23 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 36860L + "'", long35 == 36860L);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u4e8c\u6708" + "'", str38, "\u4e8c\u6708");
    }

    @Test
    public void test11180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11180");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(6);
        mutableDateTime8.addDays((int) (byte) -1);
        int int11 = mutableDateTime8.getYear();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Instant instant13 = dateTime12.toInstant();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime8, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTime dateTime20 = timeOfDay19.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = timeOfDay22.toDateTimeToday();
        int int24 = dateTime23.getYearOfEra();
        boolean boolean25 = interval14.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime26 = dateTime23.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime28 = dateTime23.minusDays(1656);
        org.joda.time.DateTime dateTime30 = dateTime23.withYear(346);
        org.joda.time.DateTime dateTime32 = dateTime30.minus(519L);
        org.joda.time.TimeOfDay timeOfDay33 = dateTime30.toTimeOfDay();
        org.joda.time.DateTime dateTime35 = dateTime30.withYearOfEra(32769);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1975 + "'", int11 == 1975);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test11181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11181");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight1, readableDuration2, periodType3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = timeOfDay10.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusHours((-1));
        org.joda.time.Chronology chronology14 = timeOfDay13.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        long long21 = chronology14.set((org.joda.time.ReadablePartial) timeOfDay17, (long) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = chronology14.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight1.withChronology(chronology14);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight1.plusYears(1656);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight29 = property28.roundHalfEvenCopy();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime();
        int int31 = mutableDateTime30.getDayOfMonth();
        org.joda.time.Instant instant32 = mutableDateTime30.toInstant();
        boolean boolean34 = mutableDateTime30.isBefore((long) 2);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime30.monthOfYear();
        boolean boolean37 = mutableDateTime30.isBefore(909L);
        boolean boolean38 = dateMidnight29.isBefore((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.monthOfYear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime39, (org.joda.time.ReadableInstant) dateMidnight42);
        int int45 = dateMidnight42.getMinuteOfHour();
        org.joda.time.Instant instant46 = dateMidnight42.toInstant();
        org.joda.time.Period period47 = org.joda.time.Period.ZERO;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(chronology48);
        org.joda.time.DateMidnight.Property property50 = dateMidnight49.dayOfYear();
        org.joda.time.DateMidnight dateMidnight51 = property50.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight.Property property53 = dateMidnight51.property(dateTimeFieldType52);
        org.joda.time.DateMidnight.Property property54 = dateMidnight51.year();
        org.joda.time.Duration duration55 = period47.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight42, (org.joda.time.ReadableDuration) duration55);
        mutableDateTime30.add((org.joda.time.ReadableDuration) duration55);
        int int58 = mutableDateTime30.getCenturyOfEra();
        int int59 = mutableDateTime30.getWeekyear();
        boolean boolean60 = dateMidnight1.isBefore((org.joda.time.ReadableInstant) mutableDateTime30);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-86399999L) + "'", long21 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 21 + "'", int31 == 21);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 20 + "'", int58 == 20);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test11182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11182");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.weekOfWeekyear();
        boolean boolean4 = dateMidnight1.isEqualNow();
        org.joda.time.LocalDate localDate5 = dateMidnight1.toLocalDate();
        org.joda.time.Interval interval6 = localDate5.toInterval();
        org.joda.time.LocalDate localDate8 = localDate5.plusDays(22);
        org.joda.time.LocalDate localDate10 = localDate8.plusDays(53436);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate8.withMonthOfYear(134);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 134 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test11183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11183");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        int int3 = localDate2.getYearOfCentury();
        org.joda.time.LocalDate.Property property4 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate6 = property4.addWrapFieldToCopy(9);
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfEra();
        java.lang.String str8 = property7.getName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 69 + "'", int3 == 69);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "yearOfEra" + "'", str8, "yearOfEra");
    }

    @Test
    public void test11184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11184");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        int int3 = localDateTime2.getCenturyOfEra();
        int int4 = localDateTime2.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMinutes(887);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withWeekyear((int) ' ');
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundCeilingCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTime dateTime16 = timeOfDay15.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay15.minusHours((int) (byte) 1);
        int int19 = timeOfDay15.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.TimeOfDay.Property property21 = timeOfDay15.property(dateTimeFieldType20);
        int int22 = property21.get();
        org.joda.time.TimeOfDay timeOfDay24 = property21.addNoWrapToCopy(720001);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.minusHours(52);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = localDateTime10.isBefore((org.joda.time.ReadablePartial) timeOfDay24);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20 + "'", int3 == 20);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
    }

    @Test
    public void test11185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11185");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(chronology0);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay3 = property2.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay3.plusYears(0);
        int int6 = yearMonthDay3.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay3.withYear(52012138);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 28 + "'", int6 == 28);
        org.junit.Assert.assertNotNull(yearMonthDay8);
    }

    @Test
    public void test11186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11186");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod5.copy();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfCentury();
        org.joda.time.Duration duration10 = mutablePeriod6.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight8);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        int int12 = mutableDateTime11.getDayOfMonth();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate16 = localDate14.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int18 = localDate14.get(dateTimeFieldType17);
        mutableDateTime11.set(dateTimeFieldType17, 2);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime11.add(durationFieldType21, (int) '4');
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight8.withFieldAdded(durationFieldType21, 17);
        org.joda.time.Instant instant26 = dateMidnight25.toInstant();
        org.joda.time.LocalDate localDate27 = dateMidnight25.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateMidnight.Property property29 = dateMidnight25.property(dateTimeFieldType28);
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType28.getRangeDurationType();
        org.joda.time.LocalDate localDate32 = localDate2.withFieldAdded(durationFieldType30, 17);
        org.joda.time.LocalDate localDate34 = localDate2.plusMonths(10);
        org.joda.time.LocalDate.Property property35 = localDate34.dayOfYear();
        org.joda.time.LocalDate localDate36 = property35.withMaximumValue();
        org.joda.time.LocalDate localDate38 = property35.addWrapFieldToCopy(12719);
        org.joda.time.LocalDate.Property property39 = localDate38.yearOfEra();
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 21 + "'", int12 == 21);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test11187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11187");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(43200000L);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test11188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11188");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(49);
        org.joda.time.Period period3 = period1.withMillis(896);
        org.joda.time.Seconds seconds4 = period3.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType5 = null;
        boolean boolean6 = period3.isSupported(durationFieldType5);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11189");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = mutablePeriod2.copy();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.yearOfCentury();
        org.joda.time.Duration duration7 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        int int9 = mutableDateTime8.getDayOfMonth();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate13 = localDate11.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int15 = localDate11.get(dateTimeFieldType14);
        mutableDateTime8.set(dateTimeFieldType14, 2);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime8.add(durationFieldType18, (int) '4');
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.withFieldAdded(durationFieldType18, 17);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight5.minusWeeks(58);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight5.plus(270L);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) -1, chronology28);
        org.joda.time.LocalDate localDate31 = localDate29.minusYears(1);
        org.joda.time.LocalDate.Property property32 = localDate29.year();
        int int33 = localDate29.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = localDate29.isSupported(dateTimeFieldType34);
        org.joda.time.DateTime dateTime36 = localDate29.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateTime dateTime41 = dateTime36.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone45);
        org.joda.time.DateTime dateTime47 = dateTime46.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime48 = dateTime46.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime50 = dateTime48.plusSeconds((int) (short) 10);
        org.joda.time.DateTime dateTime51 = dateTime50.withEarlierOffsetAtOverlap();
        boolean boolean52 = dateTime42.isBefore((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = dateMidnight5.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1969 + "'", int33 == 1969);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test11190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11190");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test11191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11191");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight6 = property5.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateTime dateTime11 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime11.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.year();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        long long17 = dateTimeField14.add((long) 21, (long) ' ');
        org.joda.time.DurationField durationField18 = dateTimeField14.getRangeDurationField();
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        java.lang.String str22 = dateTimeField14.getAsText(21, locale20);
        java.lang.String str23 = locale20.getLanguage();
        int int24 = property5.getMaximumTextLength(locale20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withLocale(locale20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear((java.lang.Integer) 1975);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateTime dateTime32 = dateTime31.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime32.toMutableDateTime();
        org.joda.time.DateTime.Property property34 = dateTime32.year();
        org.joda.time.DateTime dateTime36 = dateTime32.withYear(1970);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime32.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter27.withZone(dateTimeZone37);
        org.joda.time.format.DateTimePrinter dateTimePrinter39 = dateTimeFormatter27.getPrinter();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1009843200021L + "'", long17 == 1009843200021L);
        org.junit.Assert.assertNull(durationField18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "21" + "'", str22, "21");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "fr" + "'", str23, "fr");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNull(dateTimePrinter39);
    }

    @Test
    public void test11192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11192");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval4 = yearMonthDay0.toInterval();
        org.joda.time.Period period5 = interval4.toPeriod();
        org.joda.time.Interval interval6 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = interval4.toMutableInterval();
        org.joda.time.Period period8 = interval4.toPeriod();
        java.lang.String str9 = interval4.toString();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval14 = yearMonthDay10.toInterval();
        org.joda.time.Period period15 = interval14.toPeriod();
        org.joda.time.Interval interval16 = interval14.toInterval();
        org.joda.time.MutableInterval mutableInterval17 = interval14.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int21 = dateTimeZone19.getOffset(0L);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.withSecondOfMinute(23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getRangeDurationType();
        org.joda.time.DateTime.Property property28 = dateTime22.property(dateTimeFieldType26);
        org.joda.time.DateTime dateTime29 = property28.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime33 = yearMonthDay30.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval34 = yearMonthDay30.toInterval();
        org.joda.time.MutableInterval mutableInterval35 = interval34.toMutableInterval();
        boolean boolean36 = dateTime29.equals((java.lang.Object) mutableInterval35);
        boolean boolean37 = interval14.overlaps((org.joda.time.ReadableInterval) mutableInterval35);
        boolean boolean38 = interval4.contains((org.joda.time.ReadableInterval) mutableInterval35);
        long long39 = interval4.getEndMillis();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay40.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay40.year();
        org.joda.time.YearMonthDay yearMonthDay45 = property43.addToCopy(0);
        org.joda.time.YearMonthDay yearMonthDay47 = property43.setCopy((int) 'u');
        org.joda.time.YearMonthDay yearMonthDay48 = property43.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay49 = property43.getYearMonthDay();
        java.lang.String str50 = property43.getAsString();
        org.joda.time.DateTimeField dateTimeField51 = property43.getField();
        boolean boolean52 = interval4.equals((java.lang.Object) dateTimeField51);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T00:00:00.000Z/2022-02-22T00:00:00.000Z" + "'", str9, "2022-02-21T00:00:00.000Z/2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645488000000L + "'", long39 == 1645488000000L);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022" + "'", str50, "2022");
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test11193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11193");
        java.io.IOException iOException2 = new java.io.IOException();
        java.io.IOException iOException3 = new java.io.IOException("1970", (java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException("13", (java.lang.Throwable) iOException2);
        java.lang.String str5 = iOException2.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.io.IOException" + "'", str5, "java.io.IOException");
    }

    @Test
    public void test11194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11194");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(9);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '4');
        org.joda.time.LocalDate localDate6 = localDate3.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        boolean boolean8 = localDate6.isSupported(durationFieldType7);
        org.joda.time.LocalDate.Property property9 = localDate6.yearOfCentury();
        org.joda.time.Chronology chronology10 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.halfdayOfDay();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test11195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11195");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Interval interval1 = yearMonth0.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = yearMonth0.getFieldTypes();
        int int3 = yearMonth0.getMonthOfYear();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test11196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11196");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTime dateTime5 = timeOfDay4.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay7.toDateTimeToday();
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds(292278993);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property12 = dateTime10.property(dateTimeFieldType11);
        org.joda.time.DateTime.Property property13 = dateTime10.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = property13.setCopy("14:47:59.005");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"14:47:59.005\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test11197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11197");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology3 = localDate2.getChronology();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = dateTime4.getZone();
        java.lang.String str6 = dateTimeZone5.toString();
        int int8 = dateTimeZone5.getStandardOffset(886L);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(3796416000000L, dateTimeZone5);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withMonthOfYear(5);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay13.monthOfYear();
        java.lang.Class<?> wildcardClass15 = property14.getClass();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test11198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11198");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.LocalDateTime localDateTime5 = property3.getLocalDateTime();
        boolean boolean7 = property3.equals((java.lang.Object) 1.0f);
        org.joda.time.LocalDateTime localDateTime9 = property3.setCopy((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears((int) 'u');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusMonths(53);
        org.joda.time.Period period17 = org.joda.time.Period.seconds(907);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plus((org.joda.time.ReadablePeriod) period17);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 420L + "'", long4 == 420L);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test11199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11199");
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.parse("22");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int7 = dateTimeZone5.getOffset(0L);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.DateTime dateTime13 = dateTime8.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime3.withZone(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int16 = mutableDateTime15.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType23 = periodType22.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime15, (org.joda.time.ReadableInstant) dateTime20, periodType23);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod28 = mutablePeriod27.copy();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.yearOfCentury();
        org.joda.time.Duration duration32 = mutablePeriod28.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight30);
        mutablePeriod24.setPeriod((org.joda.time.ReadableDuration) duration32);
        mutablePeriod24.setHours(1975);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone38);
        org.joda.time.DateTime dateTime40 = dateTime39.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime40.toMutableDateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod24, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone45);
        org.joda.time.DateTime dateTime47 = dateTime46.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime47.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime48.year();
        org.joda.time.MutableDateTime mutableDateTime51 = property49.addWrapField(6);
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        org.joda.time.MutableDateTime mutableDateTime54 = property49.set("1", locale53);
        org.joda.time.Interval interval55 = interval42.withStart((org.joda.time.ReadableInstant) mutableDateTime54);
        org.joda.time.Instant instant56 = mutableDateTime54.toInstant();
        int int57 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) instant56);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(411L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) 152, dateTimeZone11);
        java.lang.String str61 = dateTimeZone11.getName(674L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21 + "'", int16 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
    }

    @Test
    public void test11200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11200");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime7 = dateTime5.plusSeconds((int) (short) 10);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        java.util.Date date9 = dateTime7.toDate();
        int int10 = date9.getHours();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:10 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test11201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11201");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate.Property property2 = localDate1.era();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate1.toDateTimeAtCurrentTime(dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone4);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(dateTimeZone4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = localDate8.withDayOfWeek(46799949);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 46799949 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test11202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11202");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("dayOfWeek");
        java.util.Calendar.Builder builder2 = new java.util.Calendar.Builder();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(readableDuration6, (org.joda.time.ReadableInstant) mutableDateTime7);
        int[] intArray10 = chronology5.get((org.joda.time.ReadablePeriod) mutablePeriod8, (long) 100);
        java.util.Calendar.Builder builder11 = builder2.setFields(intArray10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime16.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.year();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.lang.String str21 = locale20.getDisplayScript();
        java.util.Locale.setDefault(locale20);
        java.lang.String str23 = locale20.getISO3Language();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = locale20.getDisplayScript(locale24);
        int int26 = dateTimeField19.getMaximumShortTextLength(locale24);
        java.util.Calendar.Builder builder27 = builder2.setLocale(locale24);
        java.lang.String str28 = locale1.getDisplayName(locale24);
        java.lang.Object obj29 = locale1.clone();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zho" + "'", str23, "zho");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "");
    }

    @Test
    public void test11203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11203");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(9);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '4');
        org.joda.time.LocalDate localDate6 = localDate3.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDate.Property property7 = localDate3.centuryOfEra();
        org.joda.time.LocalDate localDate9 = property7.setCopy(58);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test11204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11204");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.LocalDateTime localDateTime5 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = property3.withMaximumValue();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusSeconds(32772);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = localDateTime9.getValue((-59));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -59");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 643L + "'", long4 == 643L);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test11205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11205");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) mutableDateTime1);
        mutablePeriod2.addMonths(999);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfYear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.minusWeeks(21);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType14 = periodType13.withWeeksRemoved();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight11, readableDuration12, periodType13);
        org.joda.time.Period period17 = period15.withSeconds(0);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime23 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTime dateTime29 = timeOfDay28.toDateTimeToday();
        boolean boolean30 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime29);
        int int31 = dateTime29.getWeekyear();
        org.joda.time.DateTime dateTime33 = dateTime29.plusHours(4);
        org.joda.time.Duration duration34 = period15.toDurationFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod37.copy();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.yearOfCentury();
        org.joda.time.Duration duration42 = mutablePeriod38.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight40);
        boolean boolean43 = duration34.isEqual((org.joda.time.ReadableDuration) duration42);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod50 = mutablePeriod49.copy();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.TimeOfDay timeOfDay55 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay55.withChronologyRetainFields(chronology56);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = timeOfDay57.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay57.plusHours((-1));
        org.joda.time.Chronology chronology61 = timeOfDay60.getChronology();
        mutablePeriod49.setPeriod((long) (byte) 1, 845L, chronology61);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime(41L, chronology61);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) '4', periodType45, chronology61);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadableDuration) duration34, periodType45);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight9.withDurationAdded((long) 184, 0);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone71);
        org.joda.time.DateTime dateTime73 = dateTime72.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime74 = dateTime73.toMutableDateTime();
        org.joda.time.DateTime.Property property75 = dateTime73.year();
        org.joda.time.DateTime dateTime77 = property75.setCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime78 = dateTime77.toLocalTime();
        mutablePeriod2.setPeriod((org.joda.time.ReadableInstant) dateMidnight68, (org.joda.time.ReadableInstant) dateTime77);
        mutablePeriod2.setYears(2048);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(localTime78);
    }

    @Test
    public void test11206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11206");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.adjustOffset((long) ' ', true);
        java.lang.Object obj4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(obj4, dateTimeZone5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.secondOfMinute();
        long long8 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property7.getLocalDateTime();
        boolean boolean11 = property7.equals((java.lang.Object) 1.0f);
        org.joda.time.LocalDateTime localDateTime13 = property7.setCopy((int) (short) 1);
        boolean boolean14 = dateTimeZone0.isLocalDateTimeGap(localDateTime13);
        org.joda.time.Chronology chronology15 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusMonths(366);
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime20 = property18.setCopy(381);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 726L + "'", long8 == 726L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test11207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11207");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTime dateTime5 = timeOfDay4.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay7.toDateTimeToday();
        int int9 = dateTime8.getYearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime8.withDurationAdded((-1L), 1);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime12.getZone();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withPeriodAdded(readablePeriod15, 1373);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plusYears(52012138);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
    }

    @Test
    public void test11208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11208");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.weekOfWeekyear();
        int int4 = dateMidnight1.getMinuteOfDay();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod8 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = timeOfDay15.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay15.plusHours((-1));
        org.joda.time.Chronology chronology19 = timeOfDay18.getChronology();
        mutablePeriod7.setPeriod((long) (byte) 1, 845L, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.era();
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight1.toMutableDateTime(chronology19);
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.Chronology chronology27 = chronology19.withZone(dateTimeZone26);
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(dateTimeZone26);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localTime28);
    }

    @Test
    public void test11209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11209");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int3 = dateTimeZone1.getOffset(0L);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property5 = dateTime4.minuteOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute(23);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType8.getRangeDurationType();
        org.joda.time.DateTime.Property property10 = dateTime4.property(dateTimeFieldType8);
        org.joda.time.DateTime dateTime11 = property10.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval16 = yearMonthDay12.toInterval();
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        boolean boolean18 = dateTime11.equals((java.lang.Object) mutableInterval17);
        org.joda.time.DateTime.Property property19 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime20 = property19.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test11210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11210");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) 9);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType6 = periodType5.withWeeksRemoved();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4, periodType5);
        org.joda.time.Period period9 = period7.withSeconds(0);
        org.joda.time.Period period11 = period9.plusMinutes((int) (byte) 1);
        org.joda.time.Period period13 = period9.withSeconds((int) (byte) 10);
        org.joda.time.Period period14 = period9.toPeriod();
        org.joda.time.Period period16 = period9.plusHours(58);
        org.joda.time.Period period18 = period16.plusHours(69);
        org.joda.time.Period period20 = period16.minusSeconds((int) (byte) -1);
        org.joda.time.Period period22 = period16.minusYears(8);
        org.joda.time.YearMonth yearMonth23 = yearMonth1.minus((org.joda.time.ReadablePeriod) period22);
        int int24 = yearMonth1.size();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
    }

    @Test
    public void test11211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11211");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(845L);
        java.util.TimeZone timeZone3 = null;
        calendar0.setTimeZone(timeZone3);
        int int5 = calendar0.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229");
        calendar0.setTimeZone(timeZone7);
        long long9 = calendar0.getTimeInMillis();
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=845,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=845,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 845L + "'", long9 == 845L);
        org.junit.Assert.assertNotNull(timeOfDay10);
    }

    @Test
    public void test11212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11212");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = timeOfDay10.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusHours((-1));
        org.joda.time.Chronology chronology14 = timeOfDay13.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        long long21 = chronology14.set((org.joda.time.ReadablePartial) timeOfDay17, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(chronology14);
        org.joda.time.DateTime dateTime23 = dateTime4.toDateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField24 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = chronology14.yearOfCentury();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType30 = periodType29.withWeeksRemoved();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight27, readableDuration28, periodType29);
        org.joda.time.Period period33 = period31.withSeconds(0);
        org.joda.time.Period period35 = period33.plusMinutes((int) (byte) 1);
        org.joda.time.Period period37 = period33.withSeconds((int) (byte) 10);
        org.joda.time.Period period38 = period33.toPeriod();
        org.joda.time.Period period40 = period33.plusHours(58);
        org.joda.time.Period period42 = period40.plusHours(69);
        int[] intArray45 = chronology14.get((org.joda.time.ReadablePeriod) period40, 3155695200000L, (long) (byte) 100);
        long long49 = chronology14.add((long) 1975, 837L, 1970);
        java.lang.String str50 = chronology14.toString();
        org.joda.time.DateTimeZone dateTimeZone51 = chronology14.getZone();
        org.joda.time.DurationField durationField52 = chronology14.eras();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-86399999L) + "'", long21 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-99, -11, -30, -5, -59, -59, -900]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1650865L + "'", long49 == 1650865L);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISOChronology[UTC]" + "'", str50, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test11213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11213");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 'u');
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime6 = dateTime4.withHourOfDay((int) (short) 10);
        org.joda.time.DateTime dateTime8 = dateTime4.minusMillis((int) (byte) -1);
        org.joda.time.DateTime.Property property9 = dateTime4.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime4.withField(dateTimeFieldType10, 54);
        org.joda.time.DateTime dateTime14 = dateTime12.minus((long) 53305126);
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        boolean boolean18 = dateTimeFormatter17.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter17.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateTime dateTime24 = dateTime23.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime24.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.year();
        org.joda.time.DateTimeField dateTimeField27 = property26.getField();
        java.util.Locale locale28 = java.util.Locale.PRC;
        java.lang.String str29 = locale28.getDisplayScript();
        java.util.Locale.setDefault(locale28);
        java.lang.String str31 = locale28.getISO3Language();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.lang.String str33 = locale28.getDisplayScript(locale32);
        int int34 = dateTimeField27.getMaximumShortTextLength(locale32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter19.withLocale(locale32);
        org.joda.time.Period period41 = new org.joda.time.Period((long) (byte) 0, 0L);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period43 = period41.withPeriodType(periodType42);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateTime dateTime48 = dateTime47.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime48.toMutableDateTime();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.TimeOfDay timeOfDay52 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay52.withChronologyRetainFields(chronology53);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = timeOfDay54.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay54.plusHours((-1));
        org.joda.time.Chronology chronology58 = timeOfDay57.getChronology();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.TimeOfDay timeOfDay61 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.TimeOfDay timeOfDay63 = timeOfDay61.withChronologyRetainFields(chronology62);
        long long65 = chronology58.set((org.joda.time.ReadablePartial) timeOfDay61, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay66 = new org.joda.time.TimeOfDay(chronology58);
        org.joda.time.DateTime dateTime67 = dateTime48.toDateTime(chronology58);
        org.joda.time.DateTimeField dateTimeField68 = chronology58.yearOfCentury();
        org.joda.time.DurationField durationField69 = chronology58.centuries();
        org.joda.time.DateTimeField dateTimeField70 = chronology58.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) 'a', (long) 7, periodType42, chronology58);
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime((long) '4', chronology58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter19.withChronology(chronology58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter73.withOffsetParsed();
        int int75 = dateTimeFormatter74.getDefaultYear();
        java.util.Locale locale76 = dateTimeFormatter74.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = dateTime14.toString(dateTimeFormatter74);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zho" + "'", str31, "zho");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-86399999L) + "'", long65 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2000 + "'", int75 == 2000);
        org.junit.Assert.assertNull(locale76);
    }

    @Test
    public void test11214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11214");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        boolean boolean10 = localDateTime8.equals((java.lang.Object) 14);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusSeconds(100);
        java.util.Locale locale17 = new java.util.Locale("", "Property[monthOfYear]", "hi!");
        java.lang.String str18 = localDateTime12.toString("12:01:00.000", locale17);
        java.lang.String str19 = locale17.toLanguageTag();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertEquals(locale17.toString(), "_PROPERTY[MONTHOFYEAR]_hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "12:01:00.000" + "'", str18, "12:01:00.000");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "und" + "'", str19, "und");
    }

    @Test
    public void test11215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11215");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = property3.addToCopy((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property3.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = timeOfDay19.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.plusHours((-1));
        org.joda.time.Chronology chronology23 = timeOfDay22.getChronology();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.withChronologyRetainFields(chronology27);
        long long30 = chronology23.set((org.joda.time.ReadablePartial) timeOfDay26, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(chronology23);
        org.joda.time.DateTime dateTime32 = dateTime13.toDateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField33 = chronology23.weekyearOfCentury();
        java.util.Locale locale37 = new java.util.Locale("2022-02-21T14:47:24.813", "zho");
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        java.lang.String str39 = dateTimeField33.getAsText(29L, locale37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime40 = property3.setCopy("Thu Jan 12 10:21:00 GMT 1967", locale37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Thu Jan 12 10:21:00 GMT 1967\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-86399999L) + "'", long30 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals(locale37.toString(), "2022-02-21t14:47:24.813_ZHO");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "70" + "'", str39, "70");
    }

    @Test
    public void test11216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11216");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = mutablePeriod2.copy();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.yearOfCentury();
        org.joda.time.Duration duration7 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight5.withZoneRetainFields(dateTimeZone9);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod13.copy();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.yearOfCentury();
        org.joda.time.Duration duration18 = mutablePeriod14.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod21.copy();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight.Property property25 = dateMidnight24.yearOfCentury();
        org.joda.time.Duration duration26 = mutablePeriod22.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight24);
        boolean boolean27 = duration18.isEqual((org.joda.time.ReadableDuration) duration26);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod31 = mutablePeriod30.copy();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.yearOfCentury();
        org.joda.time.Duration duration35 = mutablePeriod31.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        boolean boolean36 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod40 = mutablePeriod39.copy();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.yearOfCentury();
        org.joda.time.Duration duration44 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod51 = mutablePeriod50.copy();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.TimeOfDay timeOfDay56 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.TimeOfDay timeOfDay58 = timeOfDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = timeOfDay58.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay61 = timeOfDay58.plusHours((-1));
        org.joda.time.Chronology chronology62 = timeOfDay61.getChronology();
        mutablePeriod50.setPeriod((long) (byte) 1, 845L, chronology62);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime(41L, chronology62);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) '4', periodType46, chronology62);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateMidnight42, periodType46);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight10.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.minusMonths(28);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.minusYears(535);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight69.minusMonths(53699);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateMidnight73);
    }

    @Test
    public void test11217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11217");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2025-04-21");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2025-04-21");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11218");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str3 = locale0.getUnicodeLocaleType("22");
        java.lang.String str4 = locale0.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u4e2d\u6587" + "'", str1, "\u4e2d\u6587");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test11219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11219");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '#');
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 32770);
        long long10 = dateTime7.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime7.plusSeconds(97);
        org.joda.time.DateTime.Property property13 = dateTime7.dayOfMonth();
        org.joda.time.DateTime dateTime14 = property13.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 92016000001L + "'", long10 == 92016000001L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test11220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11220");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType8 = periodType7.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime5, periodType8);
        java.lang.Object obj11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(obj11, dateTimeZone12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.secondOfMinute();
        long long15 = property14.remainder();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        int int17 = property14.getMaximumShortTextLength(locale16);
        java.lang.String str18 = dateTime5.toString("\u683c\u6797\u5a01\u6cbb\u65f6\u95f4", locale16);
        java.lang.Object obj19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(obj19, dateTimeZone20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        int int23 = localDateTime21.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.minus(readableDuration26);
        boolean boolean28 = localDateTime21.equals((java.lang.Object) dateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime21.withYear(2);
        boolean boolean31 = dateTime5.equals((java.lang.Object) 2);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        int int33 = mutableDateTime32.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int37 = dateTimeZone35.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime32.toMutableDateTime(dateTimeZone35);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        int int40 = mutableDateTime39.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone43);
        org.joda.time.DateTime dateTime45 = dateTime44.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType47 = periodType46.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime39, (org.joda.time.ReadableInstant) dateTime44, periodType47);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod52 = mutablePeriod51.copy();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(chronology53);
        org.joda.time.DateMidnight.Property property55 = dateMidnight54.yearOfCentury();
        org.joda.time.Duration duration56 = mutablePeriod52.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight54);
        mutablePeriod48.setPeriod((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime32, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateTime dateTime60 = dateTime5.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) (byte) 1);
        org.joda.time.Instant instant61 = new org.joda.time.Instant((java.lang.Object) dateTime5);
        int int62 = dateTime5.getCenturyOfEra();
        org.joda.time.DateTime.Property property63 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime64 = property63.roundCeilingCopy();
        org.joda.time.DateTime dateTime65 = property63.roundFloorCopy();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 128L + "'", long15 == 128L);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4" + "'", str18, "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 21 + "'", int33 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 21 + "'", int40 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(mutablePeriod52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 19 + "'", int62 == 19);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test11221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11221");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.minusYears((int) ' ');
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        int int6 = mutableDateTime5.getDayOfMonth();
        org.joda.time.Instant instant7 = mutableDateTime5.toInstant();
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTime();
        boolean boolean9 = dateTime2.isEqual((org.joda.time.ReadableInstant) instant7);
        org.joda.time.Instant instant11 = instant7.plus((long) 15);
        org.joda.time.Instant instant12 = instant7.toInstant();
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.millis();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(0L, 1587201L, chronology13);
        java.lang.Object obj16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(obj16, dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        boolean boolean26 = localDateTime24.equals((java.lang.Object) 14);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plusDays(10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime24.withFieldAdded(durationFieldType29, (int) (short) -1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusMillis(999);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.minusMillis(67);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.monthOfYear();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology38);
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime36, (org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight39.minusYears(52);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight39.withYear(2084);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(chronology46);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType50 = periodType49.withWeeksRemoved();
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight47, readableDuration48, periodType49);
        org.joda.time.Period period53 = period51.withSeconds(0);
        org.joda.time.Period period55 = period53.plusMinutes((int) (byte) 1);
        org.joda.time.Period period57 = period53.withSeconds((int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Duration duration59 = period53.toDurationTo(readableInstant58);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight39.minus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime35.plus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Interval interval62 = interval15.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration59);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21 + "'", int6 == 21);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(interval62);
    }

    @Test
    public void test11222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11222");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        long long1 = instant0.getMillis();
        org.joda.time.DateTime dateTime2 = instant0.toDateTimeISO();
        org.joda.time.DateTime dateTime4 = dateTime2.plusMonths((int) (short) 10);
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1645455308264L + "'", long1 == 1645455308264L);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
    }

    @Test
    public void test11223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11223");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.LocalDateTime localDateTime5 = property3.getLocalDateTime();
        boolean boolean7 = property3.equals((java.lang.Object) 1.0f);
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category8, locale9);
        int int11 = property3.getMaximumTextLength(locale9);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale9);
        calendar12.set((int) (short) 100, (int) (short) 0, 0);
        calendar12.clear();
        boolean boolean18 = calendar12.isLenient();
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 282L + "'", long4 == 282L);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Standard\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test11224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11224");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-21T14:47:24.813", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-21t14:47:24.813");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11225");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval4 = yearMonthDay0.toInterval();
        org.joda.time.Period period5 = interval4.toPeriod();
        org.joda.time.Interval interval6 = interval4.toInterval();
        org.joda.time.Interval interval8 = interval6.withEndMillis(1645401600000L);
        org.joda.time.Period period9 = interval6.toPeriod();
        org.joda.time.Period period11 = period9.plusDays(3);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
    }

    @Test
    public void test11226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11226");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime5.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime7 = dateTime5.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.centuryOfEra();
        boolean boolean11 = dateTimeZone0.isLocalDateTimeGap(localDateTime7);
        long long14 = dateTimeZone0.adjustOffset(943L, false);
        int int16 = dateTimeZone0.getOffset((long) 999);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 943L + "'", long14 == 943L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test11227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11227");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType10 = periodType9.withWeeksRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, readableDuration8, periodType9);
        org.joda.time.Period period13 = period11.withSeconds(0);
        org.joda.time.Period period15 = period13.plusMinutes((int) (byte) 1);
        org.joda.time.Period period17 = period13.withSeconds((int) (byte) 10);
        org.joda.time.Period period18 = period13.toPeriod();
        org.joda.time.LocalDate localDate19 = localDate2.minus((org.joda.time.ReadablePeriod) period18);
        int int20 = localDate19.getDayOfWeek();
        org.joda.time.LocalDate localDate22 = localDate19.plusWeeks(32769);
        org.joda.time.LocalDate localDate24 = localDate22.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.LocalDate localDate26 = localDate22.withYear((int) 'x');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) -1, chronology28);
        int int30 = localDate29.getYearOfCentury();
        org.joda.time.LocalDate.Property property31 = localDate29.centuryOfEra();
        org.joda.time.LocalDate localDate33 = property31.addWrapFieldToCopy(9);
        org.joda.time.LocalDate localDate35 = property31.addWrapFieldToCopy(17);
        org.joda.time.LocalDate localDate36 = property31.roundFloorCopy();
        org.joda.time.LocalDate localDate37 = property31.roundFloorCopy();
        int int38 = localDate26.compareTo((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property40 = localDate26.property(dateTimeFieldType39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 69 + "'", int30 == 69);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test11228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11228");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) '4');
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withDayOfMonth(8);
        int int14 = localDateTime8.size();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
    }

    @Test
    public void test11229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11229");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        boolean boolean5 = mutableDateTime0.isBefore((org.joda.time.ReadableInstant) mutableDateTime4);
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar7 = mutableDateTime4.toCalendar(locale6);
        calendar7.add((int) (byte) 10, (int) 'u');
        calendar7.setLenient(false);
        int int13 = calendar7.getFirstDayOfWeek();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645876508603,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=26,DAY_OF_YEAR=57,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=55,SECOND=8,MILLISECOND=603,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test11230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11230");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.LocalDate localDate6 = property5.withMaximumValue();
        org.joda.time.LocalDate localDate8 = property5.addToCopy((int) 'u');
        org.joda.time.LocalDate localDate10 = localDate8.plusWeeks(292278993);
        int int11 = localDate8.getCenturyOfEra();
        int int12 = localDate8.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.plusDays(2022);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.plusMonths(15);
        int int18 = yearMonthDay17.getYear();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate.Property property21 = localDate20.era();
        org.joda.time.LocalDate localDate22 = property21.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = property21.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int28 = dateTimeZone26.getOffset(0L);
        int int30 = dateTimeZone26.getOffset(0L);
        org.joda.time.Chronology chronology31 = chronology24.withZone(dateTimeZone26);
        org.joda.time.Interval interval32 = yearMonthDay17.toInterval(dateTimeZone26);
        java.lang.String str33 = dateTimeZone26.getID();
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.now(dateTimeZone26);
        org.joda.time.DateTime dateTime35 = localDate8.toDateTimeAtCurrentTime(dateTimeZone26);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2023 + "'", int18 == 2023);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test11231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11231");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int5 = dateTimeZone3.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime0.toMutableDateTime(dateTimeZone3);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType15 = periodType14.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime7, (org.joda.time.ReadableInstant) dateTime12, periodType15);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod19.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.yearOfCentury();
        org.joda.time.Duration duration24 = mutablePeriod20.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        mutablePeriod16.setPeriod((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = duration24.toDuration();
        long long28 = duration24.getMillis();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 99L + "'", long28 == 99L);
    }

    @Test
    public void test11232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11232");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 'u');
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        int int6 = mutableDateTime5.getDayOfMonth();
        int int7 = mutableDateTime5.getMinuteOfHour();
        int int8 = mutableDateTime5.getWeekOfWeekyear();
        java.util.Date date9 = mutableDateTime5.toDate();
        int int10 = mutableDateTime5.getHourOfDay();
        boolean boolean11 = dateTime4.isAfter((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        long long13 = instant12.getMillis();
        org.joda.time.DateTime dateTime14 = instant12.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime14.getZone();
        org.joda.time.DateTime dateTime18 = dateTime4.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTime();
        org.joda.time.DateTime.Property property25 = dateTime23.year();
        org.joda.time.DateTime dateTime27 = property25.setCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime28 = dateTime27.toLocalTime();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        int int30 = mutableDateTime29.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int34 = dateTimeZone32.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime29.toMutableDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime();
        int int37 = mutableDateTime36.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone40);
        org.joda.time.DateTime dateTime42 = dateTime41.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType44 = periodType43.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime36, (org.joda.time.ReadableInstant) dateTime41, periodType44);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod49 = mutablePeriod48.copy();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(chronology50);
        org.joda.time.DateMidnight.Property property52 = dateMidnight51.yearOfCentury();
        org.joda.time.Duration duration53 = mutablePeriod49.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight51);
        mutablePeriod45.setPeriod((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime29, (org.joda.time.ReadableDuration) duration53);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime29.weekOfWeekyear();
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.standard();
        java.lang.String str58 = periodType57.toString();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) mutableDateTime29, periodType57);
        org.joda.time.DateTime dateTime61 = dateTime27.minusHours(0);
        int int62 = dateTime27.getMinuteOfHour();
        int int63 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime27);
        long long65 = dateTimeZone17.previousTransition((-62135596799065L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21 + "'", int6 == 21);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 55 + "'", int7 == 55);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Feb 21 14:55:08 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 14 + "'", int10 == 14);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455308741L + "'", long13 == 1645455308741L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 21 + "'", int30 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 21 + "'", int37 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(mutablePeriod49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PeriodType[Standard]" + "'", str58, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-62135596799065L) + "'", long65 == (-62135596799065L));
    }

    @Test
    public void test11233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11233");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        int int6 = localDateTime2.getValue(2);
        int int7 = localDateTime2.getHourOfDay();
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withMillisOfSecond((int) (short) 100);
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 0, 0L);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period15 = period13.withPeriodType(periodType14);
        org.joda.time.Period period17 = period13.withDays((int) (short) 100);
        int int18 = period13.size();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.standard();
        java.lang.String str20 = periodType19.getName();
        org.joda.time.PeriodType periodType21 = periodType19.withMillisRemoved();
        org.joda.time.Period period22 = period13.normalizedStandard(periodType19);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType26 = null;
        boolean boolean27 = periodType25.isSupported(durationFieldType26);
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 1, 0L, periodType25);
        org.joda.time.Period period30 = period28.minusMinutes((int) ' ');
        org.joda.time.Period period31 = period28.toPeriod();
        int int32 = period31.getSeconds();
        org.joda.time.Period period33 = period22.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime10.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime10.plusSeconds(53354664);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21 + "'", int6 == 21);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 14 + "'", int7 == 14);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Standard" + "'", str20, "Standard");
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test11234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11234");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(dateTimeZone1);
        int int3 = yearMonth2.getYear();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period7 = period5.plusHours((int) '#');
        org.joda.time.Period period8 = period5.toPeriod();
        org.joda.time.YearMonth yearMonth9 = yearMonth2.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears(887);
        org.joda.time.YearMonth.Property property12 = yearMonth9.monthOfYear();
        org.joda.time.YearMonth.Property property13 = yearMonth9.year();
        org.joda.time.YearMonth yearMonth15 = property13.addToCopy(29);
        org.joda.time.YearMonth yearMonth17 = yearMonth15.plusMonths(53385982);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth17);
    }

    @Test
    public void test11235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11235");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.standard();
        java.lang.String str4 = periodType3.getName();
        org.joda.time.PeriodType periodType5 = periodType3.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(periodType5);
        org.joda.time.Period period7 = new org.joda.time.Period((long) (short) 1, (long) 69, periodType5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = timeOfDay19.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.plusHours((-1));
        org.joda.time.Chronology chronology23 = timeOfDay22.getChronology();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.withChronologyRetainFields(chronology27);
        long long30 = chronology23.set((org.joda.time.ReadablePartial) timeOfDay26, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(chronology23);
        org.joda.time.DateTime dateTime32 = dateTime13.toDateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField33 = chronology23.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 1, chronology23);
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(chronology23);
        org.joda.time.Period period36 = new org.joda.time.Period(176083201900L, periodType5, chronology23);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime();
        int int38 = mutableDateTime37.getDayOfMonth();
        org.joda.time.Instant instant39 = mutableDateTime37.toInstant();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime37.yearOfEra();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property43 = localTime42.millisOfDay();
        org.joda.time.Chronology chronology44 = localTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.halfdayOfDay();
        mutableDateTime37.setChronology(chronology44);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property49 = localTime48.millisOfDay();
        org.joda.time.LocalTime localTime51 = localTime48.minusSeconds(17);
        int[] intArray53 = chronology44.get((org.joda.time.ReadablePartial) localTime51, (long) 60000);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime56 = localTime51.withFieldAdded(durationFieldType54, (-6));
        int int57 = periodType5.indexOf(durationFieldType54);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Standard" + "'", str4, "Standard");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-86399999L) + "'", long30 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 21 + "'", int38 == 21);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
    }

    @Test
    public void test11236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11236");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) '#', 47, (-6), 213, (-1898), 818, 86399999, (int) ' ');
        int int9 = mutablePeriod8.getMillis();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
    }

    @Test
    public void test11237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11237");
        org.joda.time.Period period2 = new org.joda.time.Period(1645455238955L, 40L);
    }

    @Test
    public void test11238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11238");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology3 = localDate2.getChronology();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableDuration4, (org.joda.time.ReadableInstant) mutableDateTime5);
        int[] intArray8 = chronology3.get((org.joda.time.ReadablePeriod) mutablePeriod6, (long) 100);
        java.util.Calendar.Builder builder9 = builder0.setFields(intArray8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.year();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.lang.String str19 = locale18.getDisplayScript();
        java.util.Locale.setDefault(locale18);
        java.lang.String str21 = locale18.getISO3Language();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = locale18.getDisplayScript(locale22);
        int int24 = dateTimeField17.getMaximumShortTextLength(locale22);
        java.util.Calendar.Builder builder25 = builder0.setLocale(locale22);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229");
        java.util.Calendar.Builder builder28 = builder0.setTimeZone(timeZone27);
        java.util.Calendar.Builder builder33 = builder0.setTimeOfDay(366, (int) (short) 1, (-1), 81869);
        java.util.Calendar.Builder builder37 = builder33.setTimeOfDay(14, 1975, (int) '4');
        java.util.Calendar.Builder builder42 = builder33.setTimeOfDay(20, 857, 2072, 11);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getTimeZone("00:00:00.001");
        java.util.Calendar.Builder builder45 = builder42.setTimeZone(timeZone44);
        java.util.Calendar.Builder builder49 = builder45.setWeekDate(907, 105, 11);
        java.util.Calendar.Builder builder54 = builder49.setTimeOfDay(292278174, 896, 0, 96);
        java.util.Calendar.Builder builder58 = builder49.setDate(720001, 1373, 1970);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zho" + "'", str21, "zho");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test11239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11239");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone7.adjustOffset((long) ' ', true);
        java.lang.Object obj11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(obj11, dateTimeZone12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.secondOfMinute();
        long long15 = property14.remainder();
        org.joda.time.LocalDateTime localDateTime16 = property14.getLocalDateTime();
        boolean boolean18 = property14.equals((java.lang.Object) 1.0f);
        org.joda.time.LocalDateTime localDateTime20 = property14.setCopy((int) (short) 1);
        boolean boolean21 = dateTimeZone7.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = localDateTime20.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(14410001, 20, 8607001, 30, 3000, 53588848, 40, chronology22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 30 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 32L + "'", long10 == 32L);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 37L + "'", long15 == 37L);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test11240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11240");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(6);
        mutableDateTime8.addDays((int) (byte) -1);
        int int11 = mutableDateTime8.getYear();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Instant instant13 = dateTime12.toInstant();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime8, (org.joda.time.ReadableInstant) dateTime12);
        int int15 = dateTime12.getMinuteOfDay();
        org.joda.time.DateTime.Property property16 = dateTime12.monthOfYear();
        org.joda.time.DateTime.Property property17 = dateTime12.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime12.toDateTime(dateTimeZone18);
        java.util.GregorianCalendar gregorianCalendar20 = dateTime19.toGregorianCalendar();
        gregorianCalendar20.set(2032, 53345483, 32, 117, 22, 292269054);
        java.util.Date date34 = new java.util.Date(496, 45, 1, 1970, 50, (int) 'x');
        date34.setMonth((int) (short) 10);
        java.time.Instant instant37 = date34.toInstant();
        gregorianCalendar20.setTime(date34);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1975 + "'", int11 == 1975);
        org.junit.Assert.assertNotNull(instant13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 895 + "'", int15 == 895);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Mon Nov 22 02:52:00 GMT+00:00 2399");
        org.junit.Assert.assertNotNull(instant37);
    }

    @Test
    public void test11241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11241");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(972L);
    }

    @Test
    public void test11242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11242");
        java.util.Date date3 = new java.util.Date(70, 60000, 2100001);
        java.util.Date date9 = new java.util.Date(58, 52, 2022, (int) (byte) 10, 21);
        java.lang.String str10 = date9.toLocaleString();
        date9.setYear(0);
        java.lang.String str13 = date9.toGMTString();
        date9.setYear(11);
        boolean boolean16 = date3.before(date9);
        org.joda.time.YearMonthDay yearMonthDay17 = org.joda.time.YearMonthDay.fromDateFields(date3);
        date3.setMonth(53514000);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Jan 11 00:00:00 GMT+00:00 4472219");
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sun Nov 12 10:21:00 GMT+00:00 1911");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1967-11-12 10:21:00" + "'", str10, "1967-11-12 10:21:00");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "12 Nov 1900 10:21:00 GMT" + "'", str13, "12 Nov 1900 10:21:00 GMT");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(yearMonthDay17);
    }

    @Test
    public void test11243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11243");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        int int3 = yearMonthDay0.getDayOfMonth();
        int int4 = yearMonthDay0.getDayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod8 = mutablePeriod7.copy();
        org.joda.time.format.PeriodFormatter periodFormatter9 = null;
        java.lang.String str10 = mutablePeriod8.toString(periodFormatter9);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay0.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod8, (-1));
        org.joda.time.YearMonthDay.Property property13 = yearMonthDay12.year();
        java.lang.String str14 = property13.getName();
        org.joda.time.YearMonthDay yearMonthDay16 = property13.setCopy("19");
        org.joda.time.Period period18 = org.joda.time.Period.seconds(272);
        org.joda.time.Duration duration19 = period18.toStandardDuration();
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay16.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.minusMonths(1070);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 21 + "'", int3 == 21);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0.099S" + "'", str10, "PT0.099S");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "year" + "'", str14, "year");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
    }

    @Test
    public void test11244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11244");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(dateTimeZone1);
        org.joda.time.YearMonth yearMonth4 = yearMonth2.minusMonths((int) (byte) 100);
        org.joda.time.YearMonth yearMonth6 = yearMonth2.plusYears(100);
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 0, 0L);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period11 = period9.withPeriodType(periodType10);
        org.joda.time.Period period13 = period9.minusMinutes((int) 'x');
        org.joda.time.YearMonth yearMonth14 = yearMonth2.plus((org.joda.time.ReadablePeriod) period13);
        int int15 = yearMonth14.getMonthOfYear();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = yearMonth14.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int20 = dateTimeZone18.getOffset(0L);
        org.joda.time.Interval interval21 = yearMonth14.toInterval(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(yearMonth4);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(interval21);
    }

    @Test
    public void test11245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11245");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(896L);
    }

    @Test
    public void test11246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11246");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("2022-02-21T14:52:00.015Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:52:00.015Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11247");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("0000-02-21T14:48:04.965");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0000-02-21T14:48:04.965\" is malformed at \"00-02-21T14:48:04.965\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11248");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int5 = dateTimeZone3.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime0.toMutableDateTime(dateTimeZone3);
        mutableDateTime6.add(803L);
        java.lang.String str9 = mutableDateTime6.toString();
        java.util.GregorianCalendar gregorianCalendar10 = mutableDateTime6.toGregorianCalendar();
        gregorianCalendar10.setTimeInMillis(1645714073870L);
        gregorianCalendar10.set(47, 53377138, 51);
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime20 = yearMonthDay17.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval21 = yearMonthDay17.toInterval();
        org.joda.time.Period period22 = interval21.toPeriod();
        org.joda.time.Interval interval23 = interval21.toInterval();
        org.joda.time.MutableInterval mutableInterval24 = interval21.toMutableInterval();
        org.joda.time.Period period25 = interval21.toPeriod();
        java.lang.String str26 = interval21.toString();
        long long27 = interval21.getEndMillis();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime31 = yearMonthDay28.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval32 = yearMonthDay28.toInterval();
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.Interval interval34 = interval32.toInterval();
        org.joda.time.MutableInterval mutableInterval35 = interval32.toMutableInterval();
        org.joda.time.Period period36 = interval32.toPeriod();
        org.joda.time.MutableInterval mutableInterval37 = interval32.toMutableInterval();
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay38.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime41 = yearMonthDay38.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval42 = yearMonthDay38.toInterval();
        org.joda.time.Period period43 = interval42.toPeriod();
        org.joda.time.Interval interval44 = interval42.toInterval();
        boolean boolean45 = mutableInterval37.isAfter((org.joda.time.ReadableInterval) interval44);
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet47 = locale46.getExtensionKeys();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone50);
        org.joda.time.DateTime dateTime52 = dateTime51.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime52.toMutableDateTime();
        org.joda.time.DateTime.Property property54 = dateTime52.year();
        org.joda.time.DateTime dateTime56 = dateTime52.withYear(1970);
        boolean boolean57 = charSet47.equals((java.lang.Object) dateTime56);
        boolean boolean58 = interval44.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime();
        int int60 = mutableDateTime59.getDayOfMonth();
        org.joda.time.Instant instant61 = mutableDateTime59.toInstant();
        boolean boolean63 = mutableDateTime59.isBefore((long) 2);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime59.monthOfYear();
        boolean boolean66 = mutableDateTime59.isBefore(909L);
        org.joda.time.Interval interval67 = interval44.withEnd((org.joda.time.ReadableInstant) mutableDateTime59);
        org.joda.time.Interval interval68 = interval21.gap((org.joda.time.ReadableInterval) interval67);
        boolean boolean69 = gregorianCalendar10.before((java.lang.Object) interval67);
        java.time.Instant instant70 = gregorianCalendar10.toInstant();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:55:10.081Z" + "'", str9, "2022-02-21T14:55:10.081Z");
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-21T00:00:00.000Z/2022-02-22T00:00:00.000Z" + "'", str26, "2022-02-21T00:00:00.000Z/2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645488000000L + "'", long27 == 1645488000000L);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 21 + "'", int60 == 21);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(instant70);
    }

    @Test
    public void test11249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11249");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 58);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay0.minus((org.joda.time.ReadablePeriod) mutablePeriod2);
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays(2022);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay6.withMonthOfYear(4);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int10 = yearMonthDay6.get(dateTimeFieldType9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay6.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime12.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        int int17 = mutableDateTime16.getDayOfMonth();
        org.joda.time.Instant instant18 = mutableDateTime16.toInstant();
        boolean boolean20 = mutableDateTime16.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int24 = dateTimeZone22.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime16.setZone(dateTimeZone22);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology28 = localDate27.getChronology();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime29.getZone();
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime16.toMutableDateTime(dateTimeZone30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(dateTimeZone30);
        mutableDateTime15.setZone(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = yearMonthDay0.toDateMidnight(dateTimeZone30);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay0.minusDays(156);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType38 = yearMonthDay0.getFieldType(878);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 878");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2027 + "'", int14 == 2027);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 21 + "'", int17 == 21);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
    }

    @Test
    public void test11250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11250");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusMinutes((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((java.lang.Object) localDateTime12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test11251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11251");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(9);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '4');
        org.joda.time.LocalDate localDate6 = localDate3.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDate.Property property7 = localDate3.centuryOfEra();
        org.joda.time.LocalDate localDate9 = property7.addToCopy(10);
        org.joda.time.LocalDate.Property property10 = localDate9.era();
        java.util.Date date11 = localDate9.toDate();
        date11.setDate(1967);
        java.lang.Object obj14 = date11.clone();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Wed Jul 19 00:00:00 GMT+00:00 2975");
        org.junit.Assert.assertNotNull(obj14);
// flaky:         org.junit.Assert.assertEquals(obj14.toString(), "Wed Jul 19 00:00:00 GMT+00:00 2975");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "Wed Jul 19 00:00:00 GMT+00:00 2975");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "Wed Jul 19 00:00:00 GMT+00:00 2975");
    }

    @Test
    public void test11252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11252");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int3 = dateTimeZone1.getOffset(0L);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds((int) (short) 10);
        int int13 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime10);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.add(11, (int) ' ');
        java.util.Date date23 = new java.util.Date(58, 52, 2022, (int) (byte) 10, 21);
        date23.setMonth(0);
        calendar14.setTime(date23);
        boolean boolean27 = dateTime4.equals((java.lang.Object) calendar14);
        org.joda.time.DateTime dateTime29 = dateTime4.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property30 = dateTime4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField31 = property30.getField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-93706740000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Standard\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1967,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=12,DAY_OF_YEAR=12,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=21,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 12 10:21:00 GMT+00:00 1967");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test11253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11253");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        int int6 = localDateTime2.getValue(2);
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra(841);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.millisOfDay();
        long long13 = property12.remainder();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21 + "'", int6 == 21);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test11254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11254");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.LocalDate localDate6 = property5.withMaximumValue();
        org.joda.time.LocalDate localDate8 = property5.addToCopy((int) 'u');
        org.joda.time.LocalDate localDate10 = localDate8.plusWeeks(292278993);
        int int11 = localDate10.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
    }

    @Test
    public void test11255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11255");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(dateTimeZone1);
        int int3 = yearMonth2.getYear();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period7 = period5.plusHours((int) '#');
        org.joda.time.Period period8 = period5.toPeriod();
        org.joda.time.YearMonth yearMonth9 = yearMonth2.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears(887);
        org.joda.time.YearMonth.Property property12 = yearMonth9.monthOfYear();
        int int13 = property12.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        org.joda.time.DateTimeField dateTimeField15 = property12.getField();
        int int16 = property12.get();
        org.joda.time.DateTimeField dateTimeField17 = property12.getField();
        org.joda.time.YearMonth yearMonth18 = property12.getYearMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth20 = property12.setCopy("Property[era]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[era]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(yearMonth18);
    }

    @Test
    public void test11256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11256");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight1, readableDuration2, periodType3);
        org.joda.time.Period period7 = period5.withSeconds(0);
        org.joda.time.Period period9 = period7.plusMinutes((int) (byte) 1);
        org.joda.time.Period period11 = period7.withSeconds((int) (byte) 10);
        org.joda.time.Period period12 = period7.toPeriod();
        org.joda.time.Period period14 = period7.plusHours(58);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int16 = mutableDateTime15.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType23 = periodType22.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime15, (org.joda.time.ReadableInstant) dateTime20, periodType23);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod28 = mutablePeriod27.copy();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.yearOfCentury();
        org.joda.time.Duration duration32 = mutablePeriod28.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod36 = mutablePeriod35.copy();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.yearOfCentury();
        org.joda.time.Duration duration40 = mutablePeriod36.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight38);
        boolean boolean41 = duration32.isEqual((org.joda.time.ReadableDuration) duration40);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod45 = mutablePeriod44.copy();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(chronology46);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.yearOfCentury();
        org.joda.time.Duration duration49 = mutablePeriod45.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight47);
        boolean boolean50 = duration40.isShorterThan((org.joda.time.ReadableDuration) duration49);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime();
        int int52 = mutableDateTime51.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone55);
        org.joda.time.DateTime dateTime57 = dateTime56.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType59 = periodType58.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime51, (org.joda.time.ReadableInstant) dateTime56, periodType59);
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod64 = mutablePeriod63.copy();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(chronology65);
        org.joda.time.DateMidnight.Property property67 = dateMidnight66.yearOfCentury();
        org.joda.time.Duration duration68 = mutablePeriod64.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight66);
        mutablePeriod60.setPeriod((org.joda.time.ReadableDuration) duration68);
        int int70 = duration40.compareTo((org.joda.time.ReadableDuration) duration68);
        mutableDateTime15.add((org.joda.time.ReadableDuration) duration40, (int) (byte) 1);
        mutableDateTime15.setTime(184L);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period7, (org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType79 = null;
        boolean boolean80 = periodType78.isSupported(durationFieldType79);
        org.joda.time.Period period81 = new org.joda.time.Period((long) (byte) 1, 0L, periodType78);
        org.joda.time.Period period83 = period81.minusMinutes((int) ' ');
        org.joda.time.Period period85 = period81.minusDays((int) (short) 1);
        int int86 = period85.size();
        boolean boolean87 = interval75.equals((java.lang.Object) int86);
        org.joda.time.Duration duration88 = interval75.toDuration();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21 + "'", int16 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 21 + "'", int52 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(mutablePeriod64);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 7 + "'", int86 == 7);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(duration88);
    }

    @Test
    public void test11257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11257");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        int int3 = localDateTime2.getCenturyOfEra();
        int int4 = localDateTime2.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMinutes(887);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusHours((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withYearOfCentury((int) '4');
        org.joda.time.LocalDateTime.Property property11 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime.Property property12 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime6.withCenturyOfEra((int) '4');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20 + "'", int3 == 20);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test11258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11258");
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod4 = mutablePeriod3.copy();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusHours((-1));
        org.joda.time.Chronology chronology15 = timeOfDay14.getChronology();
        mutablePeriod3.setPeriod((long) (byte) 1, 845L, chronology15);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(41L, chronology15);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.now();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType23 = periodType22.withWeeksRemoved();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21, periodType22);
        org.joda.time.Period period26 = period24.withSeconds(0);
        org.joda.time.LocalTime localTime28 = localTime18.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.yearOfCentury();
        java.lang.String str32 = property31.getAsShortText();
        boolean boolean33 = localTime28.equals((java.lang.Object) str32);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.hours();
        boolean boolean35 = localTime28.isSupported(durationFieldType34);
        java.lang.String str36 = localTime28.toString();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod40 = mutablePeriod39.copy();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.TimeOfDay timeOfDay45 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = timeOfDay47.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay47.plusHours((-1));
        org.joda.time.Chronology chronology51 = timeOfDay50.getChronology();
        mutablePeriod39.setPeriod((long) (byte) 1, 845L, chronology51);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.weeks();
        mutablePeriod39.set(durationFieldType53, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone60);
        org.joda.time.DateTime dateTime62 = dateTime61.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime62.toMutableDateTime();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.TimeOfDay timeOfDay66 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.TimeOfDay timeOfDay68 = timeOfDay66.withChronologyRetainFields(chronology67);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = timeOfDay68.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay71 = timeOfDay68.plusHours((-1));
        org.joda.time.Chronology chronology72 = timeOfDay71.getChronology();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.TimeOfDay timeOfDay75 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.TimeOfDay timeOfDay77 = timeOfDay75.withChronologyRetainFields(chronology76);
        long long79 = chronology72.set((org.joda.time.ReadablePartial) timeOfDay75, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay80 = new org.joda.time.TimeOfDay(chronology72);
        org.joda.time.DateTime dateTime81 = dateTime62.toDateTime(chronology72);
        org.joda.time.DateTimeField dateTimeField82 = chronology72.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime83 = new org.joda.time.MutableDateTime((long) 1, chronology72);
        mutablePeriod39.setPeriod((long) 1969, chronology72);
        org.joda.time.DurationFieldType durationFieldType85 = org.joda.time.DurationFieldType.millis();
        int int86 = mutablePeriod39.get(durationFieldType85);
        org.joda.time.LocalTime localTime87 = localTime28.plus((org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = localTime87.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType90 = dateTimeFieldType89.getDurationType();
        int int91 = localTime17.get(dateTimeFieldType89);
        org.joda.time.DurationFieldType durationFieldType92 = dateTimeFieldType89.getRangeDurationType();
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "22" + "'", str32, "22");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "14:55:09.659" + "'", str36, "14:55:09.659");
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(timeOfDay71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(timeOfDay75);
        org.junit.Assert.assertNotNull(timeOfDay77);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-86399999L) + "'", long79 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 969 + "'", int86 == 969);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(durationFieldType90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(durationFieldType92);
    }

    @Test
    public void test11259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11259");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withFieldAdded(durationFieldType4, 2);
        java.lang.Object obj7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(obj7, dateTimeZone8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.secondOfMinute();
        long long11 = property10.remainder();
        org.joda.time.LocalDateTime localDateTime12 = property10.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusSeconds(11);
        int int15 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime6.withMillisOfDay(15);
        org.joda.time.LocalDateTime.Property property18 = localDateTime6.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime6.withWeekyear((int) '4');
        org.joda.time.Period period22 = new org.joda.time.Period((long) 'u');
        int int23 = period22.size();
        int int24 = period22.getMonths();
        java.lang.Object obj25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(obj25, dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.minus((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod37 = mutablePeriod36.copy();
        mutablePeriod32.add((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType43 = periodType42.withWeeksRemoved();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight40, readableDuration41, periodType42);
        org.joda.time.Period period46 = period44.withSeconds(0);
        boolean boolean47 = mutablePeriod37.equals((java.lang.Object) period44);
        org.joda.time.Duration duration48 = period44.toStandardDuration();
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime();
        int int50 = mutableDateTime49.getDayOfMonth();
        org.joda.time.Instant instant51 = mutableDateTime49.toInstant();
        boolean boolean53 = mutableDateTime49.isBefore((long) 2);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime49.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone57);
        org.joda.time.DateTime dateTime59 = dateTime58.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime59.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.year();
        org.joda.time.DateTimeField dateTimeField62 = property61.getField();
        java.util.Locale locale63 = java.util.Locale.PRC;
        java.lang.String str64 = locale63.getDisplayScript();
        java.util.Locale.setDefault(locale63);
        java.lang.String str66 = locale63.getISO3Language();
        java.util.Locale locale67 = java.util.Locale.ENGLISH;
        java.lang.String str68 = locale63.getDisplayScript(locale67);
        int int69 = dateTimeField62.getMaximumShortTextLength(locale67);
        mutableDateTime49.setRounding(dateTimeField62);
        int int71 = mutableDateTime49.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime49.dayOfYear();
        mutableDateTime49.setMinuteOfDay(19);
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.standard();
        java.lang.String str76 = periodType75.getName();
        org.joda.time.PeriodType periodType77 = periodType75.withMillisRemoved();
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) mutableDateTime49, periodType77);
        org.joda.time.Period period79 = period22.minus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.Duration duration80 = period78.toStandardDuration();
        int int81 = period78.getMinutes();
        org.joda.time.Period period83 = period78.withMinutes(32770);
        boolean boolean84 = localDateTime20.equals((java.lang.Object) period83);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 711L + "'", long11 == 711L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 21 + "'", int50 == 21);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "zho" + "'", str66, "zho");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 9 + "'", int69 == 9);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Standard" + "'", str76, "Standard");
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test11260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11260");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay5.plusDays(2022);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.withMonthOfYear(4);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight11 = yearMonthDay9.toDateMidnight(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime();
        int int13 = mutableDateTime12.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType20 = periodType19.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableInstant) dateTime17, periodType20);
        int int22 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Interval interval23 = localDate4.toInterval(dateTimeZone10);
        int int24 = localDate4.getDayOfMonth();
        org.joda.time.LocalDate localDate26 = localDate4.withYearOfEra(49);
        org.joda.time.DateMidnight dateMidnight27 = localDate26.toDateMidnight();
        org.joda.time.LocalDate.Property property28 = localDate26.dayOfYear();
        org.joda.time.LocalDate localDate29 = property28.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks(50400000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21 + "'", int13 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 31 + "'", int24 == 31);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
    }

    @Test
    public void test11261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11261");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.standard();
        java.lang.String str1 = periodType0.getName();
        org.joda.time.PeriodType periodType2 = periodType0.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(periodType2);
        mutablePeriod3.addMonths(0);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.addDays(931);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'days'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Standard" + "'", str1, "Standard");
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test11262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11262");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        mutableDateTime5.addMonths(1970);
        mutableDateTime5.addHours((int) 'a');
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = null;
        org.joda.time.format.DateTimeParser dateTimeParser12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight17 = property16.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime22.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.year();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        long long28 = dateTimeField25.add((long) 21, (long) ' ');
        org.joda.time.DurationField durationField29 = dateTimeField25.getRangeDurationField();
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet32 = locale31.getExtensionKeys();
        java.lang.String str33 = dateTimeField25.getAsText(21, locale31);
        java.lang.String str34 = locale31.getLanguage();
        int int35 = property16.getMaximumTextLength(locale31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter13.withLocale(locale31);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime();
        int int38 = mutableDateTime37.getDayOfMonth();
        org.joda.time.Instant instant39 = mutableDateTime37.toInstant();
        boolean boolean41 = mutableDateTime37.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int45 = dateTimeZone43.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime37.setZone(dateTimeZone43);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology49 = localDate48.getChronology();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime50.getZone();
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime37.toMutableDateTime(dateTimeZone51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(dateTimeZone51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter13.withZone(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int58 = dateTimeZone56.getOffsetFromLocal((long) (byte) 1);
        int int60 = dateTimeZone56.getOffset((long) 14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter54.withZone(dateTimeZone56);
        mutableDateTime5.setZone(dateTimeZone56);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime5.yearOfEra();
        org.joda.time.Chronology chronology64 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.era();
        org.joda.time.DurationField durationField66 = chronology64.months();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1009843200021L + "'", long28 == 1009843200021L);
        org.junit.Assert.assertNull(durationField29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "21" + "'", str33, "21");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fr" + "'", str34, "fr");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 21 + "'", int38 == 21);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
    }

    @Test
    public void test11263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11263");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        org.joda.time.YearMonthDay yearMonthDay5 = property3.addToCopy(0);
        org.joda.time.YearMonthDay yearMonthDay7 = property3.setCopy((int) 'u');
        org.joda.time.YearMonthDay yearMonthDay8 = property3.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay9 = property3.getYearMonthDay();
        java.lang.String str10 = property3.getAsString();
        org.joda.time.Instant instant11 = new org.joda.time.Instant((java.lang.Object) str10);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022" + "'", str10, "2022");
    }

    @Test
    public void test11264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11264");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        int int3 = localDate2.getYearOfCentury();
        org.joda.time.LocalDate.Property property4 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate6 = property4.addWrapFieldToCopy(9);
        org.joda.time.LocalDate localDate8 = localDate6.withCenturyOfEra(818);
        org.joda.time.DateMidnight dateMidnight9 = localDate8.toDateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(100L);
        boolean boolean12 = dateMidnight9.isEqual((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime();
        int int14 = mutableDateTime13.getDayOfMonth();
        mutableDateTime13.setDayOfMonth((int) (short) 10);
        int int17 = mutableDateTime13.getRoundingMode();
        int int18 = mutableDateTime13.getEra();
        boolean boolean20 = mutableDateTime13.isBefore(1587201L);
        boolean boolean21 = dateMidnight9.isEqual((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime13.minuteOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) -1, chronology24);
        org.joda.time.LocalDate localDate27 = localDate25.minusYears(1);
        org.joda.time.LocalDate.Property property28 = localDate25.year();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType33 = periodType32.withWeeksRemoved();
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight30, readableDuration31, periodType32);
        org.joda.time.Period period36 = period34.withSeconds(0);
        org.joda.time.Period period38 = period36.plusMinutes((int) (byte) 1);
        org.joda.time.Period period40 = period36.withSeconds((int) (byte) 10);
        org.joda.time.Period period41 = period36.toPeriod();
        org.joda.time.LocalDate localDate42 = localDate25.minus((org.joda.time.ReadablePeriod) period41);
        int int43 = localDate42.getDayOfWeek();
        org.joda.time.Chronology chronology44 = localDate42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.yearOfCentury();
        long long49 = dateTimeField46.add(1645454954819L, 319);
        boolean boolean50 = property22.equals((java.lang.Object) 1645454954819L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 69 + "'", int3 == 69);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 21 + "'", int14 == 21);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 11712091754819L + "'", long49 == 11712091754819L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test11265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11265");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (-36221));
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property5 = localTime4.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addCopy((long) 100);
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime9 = property5.withMinimumValue();
        int int10 = property2.compareTo((org.joda.time.ReadablePartial) localTime9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = property2.addNoWrapToCopy(53251426);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test11266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11266");
        org.joda.time.Period period8 = new org.joda.time.Period(999, (-52), 105, 2000, (int) '4', 53489623, 120, (-292275054));
    }

    @Test
    public void test11267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11267");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval4 = yearMonthDay0.toInterval();
        org.joda.time.Period period6 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period8 = period6.plusHours((int) '#');
        org.joda.time.Period period9 = period6.toPeriod();
        org.joda.time.Interval interval10 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Interval interval12 = interval10.toInterval();
        org.joda.time.Interval interval13 = interval12.toInterval();
        org.joda.time.MutableInterval mutableInterval14 = interval12.toMutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.Chronology chronology16 = mutableInterval14.getChronology();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test11268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11268");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale10 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray15 = new java.util.Locale[] { locale10, locale11, locale14 };
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.Locale.FilteringMode filteringMode18 = null;
        java.util.List<java.util.Locale> localeList19 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList16, filteringMode18);
        java.lang.String[] strArray30 = new java.lang.String[] { "1", "12 Nov 1900 10:21:00 GMT", "PeriodType[Standard]", "", "", "1967-11-12 10:21:00", "2022-02-21T00:00:00.000Z", "PeriodType[Standard]", "\u4e2d\u6587", "PeriodType[Standard]" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList31);
        java.util.Locale.FilteringMode filteringMode34 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList33, filteringMode34);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone38);
        java.util.Locale locale41 = java.util.Locale.CHINA;
        java.util.Locale locale42 = locale41.stripExtensions();
        java.lang.String str43 = dateTimeZone38.getName((long) (-1), locale41);
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("2022-02-21T14:47:33.612");
        java.lang.String str46 = locale41.getDisplayScript(locale45);
        java.util.Set<java.lang.String> strSet47 = locale45.getUnicodeLocaleKeys();
        java.lang.String str48 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet47);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap49 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList50 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap49);
        org.joda.time.Period period52 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period54 = period52.plusHours((int) '#');
        org.joda.time.Period period55 = period52.toPeriod();
        org.joda.time.Period period57 = period52.plusWeeks(100);
        org.joda.time.tz.Provider provider58 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet59 = provider58.getAvailableIDs();
        java.util.Set<java.lang.String> strSet60 = provider58.getAvailableIDs();
        boolean boolean61 = period57.equals((java.lang.Object) provider58);
        java.util.Set<java.lang.String> strSet62 = provider58.getAvailableIDs();
        java.util.Set<java.lang.String> strSet63 = provider58.getAvailableIDs();
        java.lang.String str64 = java.util.Locale.lookupTag(languageRangeList50, (java.util.Collection<java.lang.String>) strSet63);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(locale10.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localeList19);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + filteringMode34 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode34.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(languageRangeList50);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(provider58);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test11269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11269");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval4 = yearMonthDay0.toInterval();
        org.joda.time.Period period5 = interval4.toPeriod();
        long long6 = interval4.toDurationMillis();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Interval interval8 = interval4.withStart(readableInstant7);
        org.joda.time.ReadableInterval readableInterval9 = null;
        boolean boolean10 = interval4.contains(readableInterval9);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 86400000L + "'", long6 == 86400000L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test11270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11270");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("YearDay");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.Object obj3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(obj3, dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusYears((int) (short) 0);
        int int9 = localDateTime5.getValue(2);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusWeeks(47);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.plusHours(81);
        boolean boolean14 = languageRange1.equals((java.lang.Object) 81);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "yearday" + "'", str2, "yearday");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11271");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test11272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11272");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(9);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '4');
        org.joda.time.LocalDate localDate6 = localDate3.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDate.Property property7 = localDate3.centuryOfEra();
        org.joda.time.LocalDate localDate9 = property7.setCopy(58);
        org.joda.time.LocalDate localDate11 = localDate9.minusDays(0);
        org.joda.time.LocalDate localDate13 = localDate9.plusDays((int) '4');
        int int14 = localDate13.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
    }

    @Test
    public void test11273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11273");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.add(818);
        mutableDateTime3.addDays(6);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        int int7 = mutableDateTime6.getDayOfMonth();
        org.joda.time.Instant instant8 = mutableDateTime6.toInstant();
        boolean boolean10 = mutableDateTime6.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime6.setZone(dateTimeZone12);
        mutableDateTime6.addMillis(0);
        int int18 = mutableDateTime6.getMinuteOfHour();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime3.year();
        mutableDateTime3.addDays(2134);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 55 + "'", int18 == 55);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test11274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11274");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight7 = property6.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateTime dateTime12 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.year();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        long long18 = dateTimeField15.add((long) 21, (long) ' ');
        org.joda.time.DurationField durationField19 = dateTimeField15.getRangeDurationField();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        java.lang.String str23 = dateTimeField15.getAsText(21, locale21);
        java.lang.String str24 = locale21.getLanguage();
        int int25 = property6.getMaximumTextLength(locale21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter3.withLocale(locale21);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        int int28 = mutableDateTime27.getDayOfMonth();
        org.joda.time.Instant instant29 = mutableDateTime27.toInstant();
        boolean boolean31 = mutableDateTime27.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int35 = dateTimeZone33.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime27.setZone(dateTimeZone33);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime40.getZone();
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime27.toMutableDateTime(dateTimeZone41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(dateTimeZone41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter3.withZone(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int48 = dateTimeZone46.getOffsetFromLocal((long) (byte) 1);
        int int50 = dateTimeZone46.getOffset((long) 14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter44.withZone(dateTimeZone46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter51.withPivotYear(53354664);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.parse("12 Nov 1900 10:21:00 GMT", dateTimeFormatter51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1009843200021L + "'", long18 == 1009843200021L);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "21" + "'", str23, "21");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fr" + "'", str24, "fr");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 21 + "'", int28 == 21);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
    }

    @Test
    public void test11275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11275");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.ReadableInterval readableInterval3 = null;
        mutablePeriod2.add(readableInterval3);
        org.joda.time.PeriodType periodType5 = mutablePeriod2.getPeriodType();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.parse("21");
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod2, (org.joda.time.ReadableInstant) dateTime7);
        mutablePeriod2.addMillis(22);
        mutablePeriod2.addSeconds((int) 'a');
        org.joda.time.PeriodType periodType13 = mutablePeriod2.getPeriodType();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType13);
    }

    @Test
    public void test11276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11276");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("PT10S");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder0.addUnicodeLocaleAttribute("2022-02-21T14:49:39.767");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-21T14:49:39.767 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test11277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11277");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) (byte) 10);
        org.joda.time.Period period3 = period1.minusMonths(2);
        org.joda.time.Period period5 = new org.joda.time.Period((long) 'u');
        org.joda.time.Period period6 = period1.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DurationFieldType durationFieldType8 = period5.getFieldType(0);
        java.lang.String str9 = durationFieldType8.getName();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.minutes();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay16.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay16.plusHours((-1));
        org.joda.time.Chronology chronology20 = timeOfDay19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.centuryOfEra();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(582L, periodType11, chronology20);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology20);
        boolean boolean25 = durationFieldType8.isSupported(chronology20);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "years" + "'", str9, "years");
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test11278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11278");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 250);
        int int2 = yearMonthDay1.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
    }

    @Test
    public void test11279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11279");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(895, 52, 55, 190087, (-31), 794, 533823, 109);
    }

    @Test
    public void test11280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11280");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = mutablePeriod2.copy();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.yearOfCentury();
        org.joda.time.Duration duration7 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        int int9 = mutableDateTime8.getDayOfMonth();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate13 = localDate11.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int15 = localDate11.get(dateTimeFieldType14);
        mutableDateTime8.set(dateTimeFieldType14, 2);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime8.add(durationFieldType18, (int) '4');
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.withFieldAdded(durationFieldType18, 17);
        org.joda.time.Instant instant23 = dateMidnight22.toInstant();
        org.joda.time.DateMidnight.Property property24 = dateMidnight22.weekyear();
        org.joda.time.DateMidnight dateMidnight25 = property24.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight26 = property24.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight27 = property24.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays(496);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime();
        int int32 = mutableDateTime31.getDayOfMonth();
        mutableDateTime31.setDayOfMonth((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(821L);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.plus(41L);
        boolean boolean39 = mutableDateTime31.isBefore((org.joda.time.ReadableInstant) dateMidnight36);
        int int40 = property30.getDifference((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight36.withWeekyear((-1970));
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 21 + "'", int32 == 21);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 18499 + "'", int40 == 18499);
        org.junit.Assert.assertNotNull(dateMidnight42);
    }

    @Test
    public void test11281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11281");
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        int int4 = mutableDateTime3.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType11 = periodType10.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime3, (org.joda.time.ReadableInstant) dateTime8, periodType11);
        org.joda.time.PeriodType periodType13 = periodType11.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod17 = mutablePeriod16.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = timeOfDay24.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay24.plusHours((-1));
        org.joda.time.Chronology chronology28 = timeOfDay27.getChronology();
        mutablePeriod16.setPeriod((long) (byte) 1, 845L, chronology28);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1009843200021L, periodType11, chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.millisOfSecond();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(353L, 880L, chronology28);
        java.lang.String str34 = mutablePeriod33.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0.527S" + "'", str34, "PT0.527S");
    }

    @Test
    public void test11282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11282");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfCeilingCopy();
        java.lang.Object obj6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj6, dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.minus((org.joda.time.ReadablePeriod) mutablePeriod13);
        boolean boolean16 = localDateTime14.equals((java.lang.Object) 14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusDays(10);
        java.lang.String str19 = localDateTime14.toString();
        int int20 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.withCenturyOfEra(891);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-21T14:55:10.402" + "'", str19, "2022-02-21T14:55:10.402");
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test11283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11283");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.DateTime.Property property6 = dateTime4.year();
        org.joda.time.DateTime dateTime7 = property6.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        int int9 = dateTime7.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test11284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11284");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(9);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '4');
        org.joda.time.LocalDate localDate6 = localDate3.plus((org.joda.time.ReadablePeriod) period5);
        int int7 = localDate6.getYearOfEra();
        org.joda.time.LocalDate.Property property8 = localDate6.weekyear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test11285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11285");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime5 = property2.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property6 = localTime5.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property6.roundFloorCopy();
        org.joda.time.LocalTime localTime9 = localTime7.withMinuteOfHour(55);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test11286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11286");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = property3.addWrapFieldToCopy(2);
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = locale11.getDisplayScript();
        java.util.Locale.setDefault(locale11);
        java.lang.String str14 = locale11.getISO3Language();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.lang.String str16 = locale11.getDisplayScript(locale15);
        java.lang.String str17 = locale10.getDisplayCountry(locale11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = property3.setCopy("2022-02-21T14:47:52.820Z", locale10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:47:52.820Z\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zho" + "'", str14, "zho");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u56fd" + "'", str17, "\u4e2d\u56fd");
    }

    @Test
    public void test11287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11287");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 999);
    }

    @Test
    public void test11288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11288");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.LocalDateTime localDateTime5 = property3.getLocalDateTime();
        boolean boolean7 = property3.equals((java.lang.Object) 1.0f);
        org.joda.time.LocalDateTime localDateTime9 = property3.setCopy((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears((int) 'u');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusSeconds(53);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusMinutes((-292275054));
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 675L + "'", long4 == 675L);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test11289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11289");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        int int6 = localDateTime2.getValue(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minusWeeks(47);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays(2022);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withCenturyOfEra(32769);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.minusSeconds(54241822);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21 + "'", int6 == 21);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test11290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11290");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType1 = periodType0.withWeeksRemoved();
        org.joda.time.DurationFieldType durationFieldType3 = periodType1.getFieldType(0);
        org.joda.time.PeriodType periodType4 = periodType1.withWeeksRemoved();
        org.joda.time.PeriodType periodType5 = periodType4.withMillisRemoved();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateTime dateTime11 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime11.toMutableDateTime();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = timeOfDay17.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay17.plusHours((-1));
        org.joda.time.Chronology chronology21 = timeOfDay20.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.withChronologyRetainFields(chronology25);
        long long28 = chronology21.set((org.joda.time.ReadablePartial) timeOfDay24, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(chronology21);
        org.joda.time.DateTime dateTime30 = dateTime11.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField31 = chronology21.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = chronology21.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(152L, chronology21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) periodType5, chronology21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-86399999L) + "'", long28 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test11291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11291");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType6 = periodType5.withWeeksRemoved();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4, periodType5);
        org.joda.time.Period period9 = period7.withSeconds(0);
        org.joda.time.Period period11 = period9.plusMinutes((int) (byte) 1);
        org.joda.time.Period period13 = period9.withSeconds((int) (byte) 10);
        org.joda.time.Period period14 = period9.toPeriod();
        org.joda.time.Period period16 = period9.plusHours(58);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.standard();
        java.lang.String str18 = periodType17.toString();
        org.joda.time.Period period19 = period9.normalizedStandard(periodType17);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        org.joda.time.Period period24 = new org.joda.time.Period(0L, periodType17, chronology22);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(obj0, periodType17);
        mutablePeriod25.setMillis(896);
        org.joda.time.MutablePeriod mutablePeriod28 = mutablePeriod25.toMutablePeriod();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.dayOfYear();
        org.joda.time.DateMidnight dateMidnight33 = property32.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight.Property property35 = dateMidnight33.property(dateTimeFieldType34);
        org.joda.time.DateMidnight.Property property36 = dateMidnight33.year();
        mutablePeriod28.setPeriod(readableInstant29, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight33.minusDays((-23));
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PeriodType[Standard]" + "'", str18, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateMidnight39);
    }

    @Test
    public void test11292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11292");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int4 = dateTimeZone2.getOffsetFromLocal((long) (byte) 1);
        int int6 = dateTimeZone2.getOffset((long) 14);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(120L, dateTimeZone2);
        int int8 = dateTime7.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test11293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11293");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = dateTimeZone2.getName((long) (-1), locale5);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone2);
        long long11 = dateTimeZone2.adjustOffset((long) 32772, false);
        long long13 = dateTimeZone2.previousTransition((long) 838);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32772L + "'", long11 == 32772L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 838L + "'", long13 == 838L);
    }

    @Test
    public void test11294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11294");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.year();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add(2869);
        org.joda.time.MutableDateTime mutableDateTime12 = property9.roundCeiling();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test11295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11295");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusYears((int) ' ');
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        int int4 = mutableDateTime3.getDayOfMonth();
        org.joda.time.Instant instant5 = mutableDateTime3.toInstant();
        org.joda.time.MutableDateTime mutableDateTime6 = instant5.toMutableDateTime();
        boolean boolean7 = dateTime0.isEqual((org.joda.time.ReadableInstant) instant5);
        long long8 = instant5.getMillis();
        org.joda.time.DateTime dateTime9 = instant5.toDateTimeISO();
        long long10 = instant5.getMillis();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645455310909L + "'", long8 == 1645455310909L);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645455310909L + "'", long10 == 1645455310909L);
    }

    @Test
    public void test11296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11296");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withZoneUTC();
        java.util.Locale locale9 = dateTimeFormatter8.getLocale();
        java.util.Date date11 = new java.util.Date(57L);
        org.joda.time.YearMonth yearMonth12 = org.joda.time.YearMonth.fromDateFields(date11);
        org.joda.time.YearMonth.Property property13 = yearMonth12.year();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(dateTimeZone16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusMonths((int) (byte) 100);
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getDisplayCountry();
        java.lang.String str23 = locale21.getDisplayLanguage();
        java.lang.String str24 = yearMonth19.toString("\u5fb7\u56fd", locale21);
        java.lang.String str25 = yearMonth12.toString("58", locale21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter8.withLocale(locale21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant27 = org.joda.time.Instant.parse("\u5354\u8abf\u4e16\u754c\u6642\u9593", dateTimeFormatter8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u610f\u5927\u5229" + "'", str22, "\u610f\u5927\u5229");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str23, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u5fb7\u56fd" + "'", str24, "\u5fb7\u56fd");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "58" + "'", str25, "58");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
    }

    @Test
    public void test11297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11297");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) timeOfDay11, (long) (byte) -1);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay11.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay18 = property16.addWrapFieldToCopy(14);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        int int20 = property16.getMaximumShortTextLength(locale19);
        int int21 = property16.get();
        java.lang.String str22 = property16.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay24 = property16.addToCopy(2269);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86399999L) + "'", long15 == (-86399999L));
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(timeOfDay24);
    }

    @Test
    public void test11298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11298");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229");
        int int2 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test11299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11299");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTime dateTime11 = timeOfDay10.toDateTimeToday();
        boolean boolean12 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime5.plus(62055709000L);
        org.joda.time.DateTime dateTime16 = dateTime14.withCenturyOfEra(50);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime16.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
    }

    @Test
    public void test11300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11300");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight1, readableDuration2, periodType3);
        org.joda.time.Period period7 = period5.withSeconds(0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateTime dateTime12 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTime dateTime19 = timeOfDay18.toDateTimeToday();
        boolean boolean20 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime19.getWeekyear();
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours(4);
        org.joda.time.Duration duration24 = period5.toDurationFrom((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod28 = mutablePeriod27.copy();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.yearOfCentury();
        org.joda.time.Duration duration32 = mutablePeriod28.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight30);
        boolean boolean33 = duration24.isEqual((org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone36);
        int int38 = dateTime37.getDayOfMonth();
        org.joda.time.DateTime dateTime40 = dateTime37.withWeekOfWeekyear(1);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime40);
        mutablePeriod41.addDays(36);
        mutablePeriod41.setMonths(601);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test11301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11301");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(441L);
    }

    @Test
    public void test11302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11302");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        org.joda.time.YearMonthDay yearMonthDay4 = property3.withMinimumValue();
        int int5 = property3.getMaximumValueOverall();
        int int6 = property3.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField7 = property3.getField();
        org.joda.time.YearMonthDay yearMonthDay9 = property3.addToCopy(53345483);
        java.lang.String str10 = property3.getAsString();
        org.joda.time.YearMonthDay yearMonthDay11 = property3.withMaximumValue();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-292275054) + "'", int6 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022" + "'", str10, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay11);
    }

    @Test
    public void test11303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11303");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.plusDays(2022);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.withMonthOfYear(4);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.minusYears(2002);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = yearMonthDay2.toString("2022-02-21T14:55:06.626");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
    }

    @Test
    public void test11304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11304");
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod4 = mutablePeriod3.copy();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusHours((-1));
        org.joda.time.Chronology chronology15 = timeOfDay14.getChronology();
        mutablePeriod3.setPeriod((long) (byte) 1, 845L, chronology15);
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 1, chronology15);
        org.joda.time.Period period19 = period17.withMinutes((int) ' ');
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Period period21 = period17.normalizedStandard(periodType20);
        java.lang.String str22 = periodType20.getName();
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Years" + "'", str22, "Years");
    }

    @Test
    public void test11305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11305");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.LocalDate localDate2 = dateMidnight1.toLocalDate();
        org.joda.time.LocalDate.Property property3 = localDate2.yearOfCentury();
        org.joda.time.LocalDate localDate4 = property3.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test11306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11306");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime3 = property2.withMaximumValue();
        int int4 = property2.getMaximumValue();
        org.joda.time.LocalTime localTime5 = property2.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.getSecondOfMinute();
        org.joda.time.LocalTime localTime9 = localTime5.plusSeconds(12);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        org.joda.time.DateTime.Property property16 = dateTime14.year();
        org.joda.time.DateTime dateTime17 = property16.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight18 = dateTime17.toDateMidnight();
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight21 = property19.setCopy(1975);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusDays(15);
        org.joda.time.LocalDate localDate24 = dateMidnight23.toLocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod28.copy();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.yearOfCentury();
        org.joda.time.Duration duration33 = mutablePeriod29.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime();
        int int35 = mutableDateTime34.getDayOfMonth();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate39 = localDate37.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int41 = localDate37.get(dateTimeFieldType40);
        mutableDateTime34.set(dateTimeFieldType40, 2);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime34.add(durationFieldType44, (int) '4');
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight31.withFieldAdded(durationFieldType44, 17);
        org.joda.time.Instant instant49 = dateMidnight48.toInstant();
        org.joda.time.LocalDate localDate50 = dateMidnight48.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateMidnight.Property property52 = dateMidnight48.property(dateTimeFieldType51);
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType51.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType51.getDurationType();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType51.getDurationType();
        int int56 = localDate24.get(dateTimeFieldType51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property57 = localTime5.property(dateTimeFieldType51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 86399999 + "'", int4 == 86399999);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 21 + "'", int35 == 21);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 12 + "'", int56 == 12);
    }

    @Test
    public void test11307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11307");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("22");
        org.joda.time.DateTime dateTime4 = dateTime1.withDurationAdded((long) (byte) 1, 11);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.year();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.addWrapField(6);
        mutableDateTime13.addDays((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth(dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime19.toMutableDateTime(dateTimeZone21);
        mutableDateTime13.setZone(dateTimeZone21);
        java.lang.Object obj25 = mutableDateTime13.clone();
        boolean boolean26 = dateTime1.equals(obj25);
        org.joda.time.DateTime.Property property27 = dateTime1.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property27.getFieldType();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1975-12-31T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1975-12-31T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1975-12-31T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
    }

    @Test
    public void test11308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11308");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight5 = org.joda.time.DateMidnight.parse("59", dateTimeFormatter4);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
    }

    @Test
    public void test11309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11309");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        int int6 = localDateTime2.getValue(2);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone9);
        int int11 = dateTime10.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTime(dateTimeZone13);
        org.joda.time.DateTime.Property property16 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime17 = property16.roundHalfEvenCopy();
        boolean boolean18 = localDateTime2.equals((java.lang.Object) property16);
        int int19 = localDateTime2.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime2.withHourOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusHours(0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMinutes(625);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusHours(496);
        java.lang.String str30 = localDateTime28.toString("\u4e0a\u5348 10:21:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21 + "'", int6 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u4e0a\u5348 10:21:00" + "'", str30, "\u4e0a\u5348 10:21:00");
    }

    @Test
    public void test11310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11310");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.DateTime.Property property6 = dateTime4.year();
        org.joda.time.DateTime dateTime7 = property6.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight11 = property9.setCopy(1975);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusDays(15);
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        org.joda.time.Period period16 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod17 = period16.toMutablePeriod();
        mutableDateTime14.add((org.joda.time.ReadablePeriod) period16, 39);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(mutablePeriod17);
    }

    @Test
    public void test11311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11311");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusYears((int) ' ');
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        int int4 = mutableDateTime3.getDayOfMonth();
        org.joda.time.Instant instant5 = mutableDateTime3.toInstant();
        org.joda.time.MutableDateTime mutableDateTime6 = instant5.toMutableDateTime();
        boolean boolean7 = dateTime0.isEqual((org.joda.time.ReadableInstant) instant5);
        int int8 = dateTime0.getDayOfYear();
        long long9 = dateTime0.getMillis();
        org.joda.time.DateTime dateTime11 = dateTime0.withMillisOfDay(100);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMillis(248);
        java.lang.Object obj14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(obj14, dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.minuteOfHour();
        int int18 = localDateTime16.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.minus(readableDuration21);
        boolean boolean23 = localDateTime16.equals((java.lang.Object) dateTime22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime16.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateTime dateTime29 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime29.toMutableDateTime();
        org.joda.time.DateTime.Property property31 = dateTime29.year();
        org.joda.time.DateTime dateTime32 = property31.roundFloorCopy();
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfMonth();
        org.joda.time.DateTime dateTime35 = property33.addWrapFieldToCopy(2);
        java.lang.Object obj36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(obj36, dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime38.minus((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod48 = mutablePeriod47.copy();
        mutablePeriod43.add((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(chronology50);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType54 = periodType53.withWeeksRemoved();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight51, readableDuration52, periodType53);
        org.joda.time.Period period57 = period55.withSeconds(0);
        boolean boolean58 = mutablePeriod48.equals((java.lang.Object) period55);
        org.joda.time.Duration duration59 = period55.toStandardDuration();
        org.joda.time.DateTime dateTime60 = dateTime35.minus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime16.minus((org.joda.time.ReadableDuration) duration59);
        java.lang.String str62 = duration59.toString();
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) 1967);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(chronology65);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType69 = periodType68.withWeeksRemoved();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight66, readableDuration67, periodType68);
        org.joda.time.Period period72 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period74 = period72.plusHours((int) '#');
        org.joda.time.Period period75 = period70.minus((org.joda.time.ReadablePeriod) period72);
        org.joda.time.Period period76 = period70.toPeriod();
        int int77 = period70.size();
        org.joda.time.format.PeriodFormatter periodFormatter78 = null;
        java.lang.String str79 = period70.toString(periodFormatter78);
        mutableDateTime64.add((org.joda.time.ReadablePeriod) period70, (-325));
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType83 = null;
        boolean boolean84 = periodType82.isSupported(durationFieldType83);
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod(periodType82);
        java.lang.String str86 = periodType82.toString();
        org.joda.time.PeriodType periodType87 = periodType82.withDaysRemoved();
        org.joda.time.Period period88 = period70.withPeriodType(periodType87);
        org.joda.time.Period period89 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration59, periodType87);
        org.joda.time.DateTime.Property property90 = dateTime11.secondOfDay();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645455311324L + "'", long9 == 1645455311324L);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PT0S" + "'", str62, "PT0S");
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 7 + "'", int77 == 7);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "PT0S" + "'", str79, "PT0S");
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "PeriodType[YearMonthDayTime]" + "'", str86, "PeriodType[YearMonthDayTime]");
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(property90);
    }

    @Test
    public void test11312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11312");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime5 = property3.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime6 = property3.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property7 = localTime6.minuteOfHour();
        org.joda.time.LocalTime localTime9 = localTime6.plusHours(5);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime13 = property12.withMaximumValue();
        int int14 = property12.getMaximumValue();
        org.joda.time.LocalTime localTime15 = property12.getLocalTime();
        org.joda.time.LocalTime localTime16 = localTime9.withFields((org.joda.time.ReadablePartial) localTime15);
        org.joda.time.Chronology chronology17 = localTime15.getChronology();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(368L, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekyear();
        org.joda.time.Period period22 = org.joda.time.Period.weeks(357);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = chronology17.add((org.joda.time.ReadablePeriod) period22, 275L, 86399999);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 30844799643 * 604800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 86399999 + "'", int14 == 86399999);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(period22);
    }

    @Test
    public void test11313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11313");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.ReadableInterval readableInterval3 = null;
        mutablePeriod2.add(readableInterval3);
        org.joda.time.PeriodType periodType5 = mutablePeriod2.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weeks();
        int int7 = periodType5.indexOf(durationFieldType6);
        org.joda.time.PeriodType periodType8 = periodType5.withHoursRemoved();
        java.lang.String str9 = periodType5.getName();
        org.joda.time.PeriodType periodType10 = periodType5.withDaysRemoved();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Standard" + "'", str9, "Standard");
        org.junit.Assert.assertNotNull(periodType10);
    }

    @Test
    public void test11314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11314");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.standard();
        java.lang.String str4 = periodType3.getName();
        org.joda.time.PeriodType periodType5 = periodType3.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(periodType5);
        org.joda.time.Period period7 = new org.joda.time.Period((long) (short) 1, (long) 69, periodType5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = timeOfDay19.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.plusHours((-1));
        org.joda.time.Chronology chronology23 = timeOfDay22.getChronology();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.withChronologyRetainFields(chronology27);
        long long30 = chronology23.set((org.joda.time.ReadablePartial) timeOfDay26, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(chronology23);
        org.joda.time.DateTime dateTime32 = dateTime13.toDateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField33 = chronology23.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 1, chronology23);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime localTime38 = localTime36.plusHours((int) (short) 10);
        org.joda.time.LocalTime localTime40 = localTime36.minusMinutes((int) '4');
        long long42 = chronology23.set((org.joda.time.ReadablePartial) localTime40, 0L);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((-62166787199340L), periodType5, chronology23);
        org.joda.time.DateTimeField dateTimeField44 = chronology23.yearOfEra();
        org.joda.time.DateTimeField dateTimeField45 = chronology23.secondOfMinute();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Standard" + "'", str4, "Standard");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-86399999L) + "'", long30 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 83280001L + "'", long42 == 83280001L);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test11315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11315");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.LocalDateTime localDateTime5 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = property3.withMaximumValue();
        java.util.Date date7 = localDateTime6.toDate();
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 607L + "'", long4 == 607L);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Mon Feb 21 14:55:59 GMT+00:00 2022");
    }

    @Test
    public void test11316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11316");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(16L);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test11317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11317");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int4 = dateTimeZone2.getOffset(0L);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.DateTime dateTime10 = dateTime5.toDateTime(dateTimeZone8);
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Period period13 = new org.joda.time.Period((long) 'u');
        int int14 = period13.size();
        int int15 = period13.getMonths();
        java.lang.Object obj16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(obj16, dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod28 = mutablePeriod27.copy();
        mutablePeriod23.add((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType34 = periodType33.withWeeksRemoved();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight31, readableDuration32, periodType33);
        org.joda.time.Period period37 = period35.withSeconds(0);
        boolean boolean38 = mutablePeriod28.equals((java.lang.Object) period35);
        org.joda.time.Duration duration39 = period35.toStandardDuration();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime();
        int int41 = mutableDateTime40.getDayOfMonth();
        org.joda.time.Instant instant42 = mutableDateTime40.toInstant();
        boolean boolean44 = mutableDateTime40.isBefore((long) 2);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime40.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone48);
        org.joda.time.DateTime dateTime50 = dateTime49.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime50.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime51.year();
        org.joda.time.DateTimeField dateTimeField53 = property52.getField();
        java.util.Locale locale54 = java.util.Locale.PRC;
        java.lang.String str55 = locale54.getDisplayScript();
        java.util.Locale.setDefault(locale54);
        java.lang.String str57 = locale54.getISO3Language();
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.lang.String str59 = locale54.getDisplayScript(locale58);
        int int60 = dateTimeField53.getMaximumShortTextLength(locale58);
        mutableDateTime40.setRounding(dateTimeField53);
        int int62 = mutableDateTime40.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime40.dayOfYear();
        mutableDateTime40.setMinuteOfDay(19);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.standard();
        java.lang.String str67 = periodType66.getName();
        org.joda.time.PeriodType periodType68 = periodType66.withMillisRemoved();
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) mutableDateTime40, periodType68);
        org.joda.time.Period period70 = period13.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.Duration duration71 = period69.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration71, readableInstant72);
        org.joda.time.DateTime dateTime74 = dateTime10.minus((org.joda.time.ReadableDuration) duration71);
        int int75 = dateTime74.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 21 + "'", int41 == 21);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "zho" + "'", str57, "zho");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Standard" + "'", str67, "Standard");
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(dateTime74);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 53711645 + "'", int75 == 53711645);
    }

    @Test
    public void test11318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11318");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        int int3 = localDateTime2.getCenturyOfEra();
        int int4 = localDateTime2.getCenturyOfEra();
        java.lang.Object obj5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(obj5, dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusYears((int) (short) 0);
        int int11 = localDateTime7.getValue(2);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone14);
        int int16 = dateTime15.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTime(dateTimeZone18);
        org.joda.time.DateTime.Property property21 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime22 = property21.roundHalfEvenCopy();
        boolean boolean23 = localDateTime7.equals((java.lang.Object) property21);
        int int24 = localDateTime7.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime7.withHourOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusHours(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.property(dateTimeFieldType29);
        int int31 = localDateTime2.indexOf(dateTimeFieldType29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime2.minusDays(999);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229");
        java.time.ZoneId zoneId36 = timeZone35.toZoneId();
        int int38 = timeZone35.getOffset(0L);
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone35, locale39);
        org.joda.time.YearMonth yearMonth41 = org.joda.time.YearMonth.fromCalendarFields(calendar40);
        org.joda.time.YearMonth yearMonth42 = org.joda.time.YearMonth.fromCalendarFields(calendar40);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean43 = localDateTime2.isAfter((org.joda.time.ReadablePartial) yearMonth42);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20 + "'", int3 == 20);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(zoneId36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1645455311692,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=55,SECOND=11,MILLISECOND=692,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(yearMonth42);
    }

    @Test
    public void test11319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11319");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        int int6 = localDateTime2.getValue(2);
        int int7 = localDateTime2.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withEra(53324166);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53324166 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21 + "'", int6 == 21);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
    }

    @Test
    public void test11320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11320");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        int int3 = localDate2.getYearOfCentury();
        org.joda.time.LocalDate.Property property4 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate6 = property4.addWrapFieldToCopy(9);
        org.joda.time.LocalDate localDate8 = property4.addWrapFieldToCopy(17);
        org.joda.time.LocalDate localDate9 = property4.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property4.roundFloorCopy();
        org.joda.time.LocalDate.Property property11 = localDate10.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = localDate10.withDayOfWeek(35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 69 + "'", int3 == 69);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test11321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11321");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval4 = yearMonthDay0.toInterval();
        org.joda.time.DateTime dateTime5 = interval4.getStart();
        org.joda.time.Duration duration6 = interval4.toDuration();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(duration6);
    }

    @Test
    public void test11322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11322");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addCopy((long) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = timeOfDay15.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay15.plusHours((-1));
        org.joda.time.Chronology chronology19 = timeOfDay18.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.withChronologyRetainFields(chronology23);
        long long26 = chronology19.set((org.joda.time.ReadablePartial) timeOfDay22, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(chronology19);
        org.joda.time.DateTime dateTime28 = dateTime9.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField29 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology19.centuries();
        org.joda.time.DateTimeField dateTimeField31 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField32 = chronology19.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = chronology19.year();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property37 = localTime36.millisOfDay();
        org.joda.time.LocalTime localTime39 = property37.addNoWrapToCopy(11);
        java.util.Locale locale40 = java.util.Locale.PRC;
        java.lang.String str41 = locale40.getDisplayScript();
        java.lang.String str42 = property37.getAsShortText(locale40);
        java.lang.String str43 = locale40.getDisplayName();
        java.util.Locale locale44 = locale40.stripExtensions();
        java.lang.String str45 = dateTimeField33.getAsText(1645454903557L, locale44);
        int int46 = property2.getMaximumTextLength(locale44);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-86399999L) + "'", long26 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str43, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022" + "'", str45, "2022");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
    }

    @Test
    public void test11323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11323");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight1.plusMonths((int) (short) 10);
        org.joda.time.DateMidnight.Property property6 = dateMidnight1.year();
        org.joda.time.DateMidnight dateMidnight8 = property6.addToCopy(715L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
    }

    @Test
    public void test11324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11324");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime localTime3 = localTime1.plusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalTime.Property property5 = localTime3.property(dateTimeFieldType4);
        org.joda.time.LocalTime localTime7 = localTime3.withMinuteOfHour(16);
        org.joda.time.LocalTime localTime9 = localTime7.plusMillis(292278174);
        java.lang.String str11 = localTime7.toString("21");
        org.joda.time.LocalTime localTime13 = localTime7.plusMinutes(48);
        int int14 = localTime7.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "21" + "'", str11, "21");
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test11325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11325");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        long long1 = instant0.getMillis();
        org.joda.time.MutableDateTime mutableDateTime2 = instant0.toMutableDateTime();
        org.joda.time.DateTime dateTime3 = instant0.toDateTimeISO();
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1645455311862L + "'", long1 == 1645455311862L);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test11326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11326");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime9 = property6.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime11 = property6.add((long) 1);
        org.joda.time.MutableDateTime mutableDateTime12 = property6.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime13 = property6.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime14 = property6.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime16 = property6.set(0);
        org.joda.time.MutableDateTime mutableDateTime18 = property6.set(292269054);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime18, readableInstant19);
        java.util.GregorianCalendar gregorianCalendar21 = mutableDateTime18.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = gregorianCalendar21.getMaximum((-1510304491));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1510304491");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
    }

    @Test
    public void test11327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11327");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.era();
        org.joda.time.DateMidnight dateMidnight3 = property2.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = timeOfDay9.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay9.plusHours((-1));
        org.joda.time.Chronology chronology13 = timeOfDay12.getChronology();
        int int14 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay12);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay12.minusMillis(69);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTime();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.TimeOfDay timeOfDay27 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = timeOfDay29.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay29.plusHours((-1));
        org.joda.time.Chronology chronology33 = timeOfDay32.getChronology();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.TimeOfDay timeOfDay36 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.withChronologyRetainFields(chronology37);
        long long40 = chronology33.set((org.joda.time.ReadablePartial) timeOfDay36, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(chronology33);
        org.joda.time.DateTime dateTime42 = dateTime23.toDateTime(chronology33);
        org.joda.time.DateTimeField dateTimeField43 = chronology33.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) 1, chronology33);
        org.joda.time.DateTimeZone dateTimeZone45 = chronology33.getZone();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(845L, chronology33);
        org.joda.time.DateTimeField dateTimeField47 = chronology33.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone48 = chronology33.getZone();
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = timeOfDay16.toDateTimeToday(dateTimeZone48);
        long long52 = dateTimeZone48.nextTransition(568L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-86399999L) + "'", long40 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 568L + "'", long52 == 568L);
    }

    @Test
    public void test11328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11328");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int5 = dateTimeZone3.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime0.toMutableDateTime(dateTimeZone3);
        mutableDateTime6.add(803L);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime6.copy();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.secondOfDay();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.minuteOfDay();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime6.dayOfYear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test11329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11329");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(845L);
        java.util.TimeZone timeZone3 = null;
        calendar0.setTimeZone(timeZone3);
        int int6 = calendar0.getGreatestMinimum(9);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229");
        calendar0.setTimeZone(timeZone8);
        boolean boolean10 = calendar0.isWeekDateSupported();
        java.util.Date date16 = new java.util.Date(58, 52, 2022, (int) (byte) 10, 21);
        java.lang.String str17 = date16.toLocaleString();
        date16.setYear(0);
        java.lang.String str20 = date16.toGMTString();
        int int21 = date16.getSeconds();
        int int22 = date16.getMonth();
        calendar0.setTime(date16);
        calendar0.set(2, 14);
        calendar0.setTimeInMillis(1587201L);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = calendar0.getMaximum(143);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 143");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1587201,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=26,SECOND=27,MILLISECOND=201,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Mon Nov 12 10:21:00 GMT+00:00 1900");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1967-11-12 10:21:00" + "'", str17, "1967-11-12 10:21:00");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "12 Nov 1900 10:21:00 GMT" + "'", str20, "12 Nov 1900 10:21:00 GMT");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
    }

    @Test
    public void test11330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11330");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTime dateTime5 = timeOfDay4.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.minusHours((int) (byte) 1);
        int int8 = timeOfDay4.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.TimeOfDay.Property property10 = timeOfDay4.property(dateTimeFieldType9);
        java.util.Locale locale13 = new java.util.Locale("2022-02-21T14:47:24.813", "zho");
        int int14 = property10.getMaximumTextLength(locale13);
        org.joda.time.TimeOfDay timeOfDay15 = property10.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay17 = property10.addNoWrapToCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay19 = property10.setCopy("France");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"France\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals(locale13.toString(), "2022-02-21t14:47:24.813_ZHO");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
    }

    @Test
    public void test11331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11331");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate.Property property2 = localDate1.era();
        org.joda.time.LocalDate localDate3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate4 = property2.getLocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.plusYears(60000);
        java.lang.Object obj7 = null;
        boolean boolean8 = localDate6.equals(obj7);
        int int9 = localDate6.getEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test11332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11332");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withFieldAdded(durationFieldType4, 2);
        java.lang.Object obj7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(obj7, dateTimeZone8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.secondOfMinute();
        long long11 = property10.remainder();
        org.joda.time.LocalDateTime localDateTime12 = property10.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusSeconds(11);
        int int15 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime6.withMillisOfDay(15);
        java.lang.Object obj18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(obj18, dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.minus((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod30 = mutablePeriod29.copy();
        mutablePeriod25.add((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.MutablePeriod mutablePeriod32 = mutablePeriod30.toMutablePeriod();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime17.plus((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.minuteOfHour();
        int int35 = localDateTime33.getMillisOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 114 + "'", int35 == 114);
    }

    @Test
    public void test11333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11333");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval4 = yearMonthDay0.toInterval();
        org.joda.time.Period period5 = interval4.toPeriod();
        org.joda.time.Interval interval6 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = interval4.toMutableInterval();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval12 = yearMonthDay8.toInterval();
        org.joda.time.Period period14 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period16 = period14.plusHours((int) '#');
        org.joda.time.Period period17 = period14.toPeriod();
        org.joda.time.Interval interval18 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.Interval interval20 = interval4.gap((org.joda.time.ReadableInterval) interval18);
        boolean boolean21 = interval18.containsNow();
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime23 = instant22.toMutableDateTimeISO();
        boolean boolean24 = interval18.isBefore((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime23.centuryOfEra();
        int int26 = mutableDateTime23.getHourOfDay();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 14 + "'", int26 == 14);
    }

    @Test
    public void test11334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11334");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        int int6 = localDateTime2.getValue(2);
        int int7 = localDateTime2.getHourOfDay();
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withMillisOfSecond((int) (short) 100);
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 0, 0L);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period15 = period13.withPeriodType(periodType14);
        org.joda.time.Period period17 = period13.withDays((int) (short) 100);
        int int18 = period13.size();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.standard();
        java.lang.String str20 = periodType19.getName();
        org.joda.time.PeriodType periodType21 = periodType19.withMillisRemoved();
        org.joda.time.Period period22 = period13.normalizedStandard(periodType19);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType26 = null;
        boolean boolean27 = periodType25.isSupported(durationFieldType26);
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 1, 0L, periodType25);
        org.joda.time.Period period30 = period28.minusMinutes((int) ' ');
        org.joda.time.Period period31 = period28.toPeriod();
        int int32 = period31.getSeconds();
        org.joda.time.Period period33 = period22.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime10.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21 + "'", int6 == 21);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 14 + "'", int7 == 14);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Standard" + "'", str20, "Standard");
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test11335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11335");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight1, readableDuration2, periodType3);
        org.joda.time.Period period7 = period5.withSeconds(0);
        org.joda.time.Period period9 = period7.plusMinutes((int) (byte) 1);
        org.joda.time.Period period11 = period7.withSeconds((int) (byte) 10);
        org.joda.time.Period period13 = period11.withMillis((int) 'x');
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period16 = period11.minusMinutes(52);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT10S" + "'", str14, "PT10S");
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test11336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11336");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int5 = dateTimeZone3.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime0.toMutableDateTime(dateTimeZone3);
        mutableDateTime6.add(803L);
        java.lang.String str9 = mutableDateTime6.toString();
        java.util.GregorianCalendar gregorianCalendar10 = mutableDateTime6.toGregorianCalendar();
        gregorianCalendar10.setTimeInMillis(1645714073870L);
        java.lang.Object obj13 = null;
        boolean boolean14 = gregorianCalendar10.equals(obj13);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:55:13.060Z" + "'", str9, "2022-02-21T14:55:13.060Z");
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11337");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime11 = property9.addToCopy(886L);
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusDays(53436);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withDayOfYear(53527715);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53527715 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 70 + "'", int12 == 70);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test11338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11338");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("0021-01-01T00:00:00.000Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0021-01-01T00:00:00.000Z\" is malformed at \"21-01-01T00:00:00.000Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11339");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        org.joda.time.YearMonthDay yearMonthDay5 = property3.addToCopy(0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = yearMonthDay5.getFieldTypes();
        org.joda.time.Period period8 = org.joda.time.Period.months(292278174);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay5.plus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period11 = period8.plusMinutes((int) (short) 100);
        org.joda.time.Period period13 = period11.withDays(53527715);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test11340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11340");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.minuteOfHour();
        int int4 = localDateTime2.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.minuteOfHour();
        java.lang.String str8 = property7.getAsShortText();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "55" + "'", str8, "55");
    }

    @Test
    public void test11341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11341");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.lang.String str9 = locale8.getDisplayScript();
        java.util.Locale.setDefault(locale8);
        java.lang.String str11 = locale8.getISO3Language();
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.lang.String str13 = locale8.getDisplayScript(locale12);
        int int14 = dateTimeField7.getMaximumShortTextLength(locale12);
        long long17 = dateTimeField7.getDifferenceAsLong(525L, (long) (short) -1);
        long long20 = dateTimeField7.addWrapField(230L, 2014);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zho" + "'", str11, "zho");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 63555667200230L + "'", long20 == 63555667200230L);
    }

    @Test
    public void test11342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11342");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2027, 1645454849969L);
        long long3 = interval2.getEndMillis();
        boolean boolean4 = interval2.isAfterNow();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645454849969L + "'", long3 == 1645454849969L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test11343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11343");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType8 = periodType7.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime5, periodType8);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod12.copy();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.yearOfCentury();
        org.joda.time.Duration duration17 = mutablePeriod13.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight15);
        mutablePeriod9.setPeriod((org.joda.time.ReadableDuration) duration17);
        mutablePeriod9.setHours(1975);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateTime dateTime25 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime25.toMutableDateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod9, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateTime dateTime32 = dateTime31.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime32.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.year();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.addWrapField(6);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        org.joda.time.MutableDateTime mutableDateTime39 = property34.set("1", locale38);
        org.joda.time.Interval interval40 = interval27.withStart((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.Instant instant41 = mutableDateTime39.toInstant();
        org.joda.time.Instant instant43 = instant41.plus(935L);
        org.joda.time.Instant instant45 = instant41.plus(435L);
        org.joda.time.MutableDateTime mutableDateTime46 = instant41.toMutableDateTime();
        mutableDateTime46.setMillisOfDay(53593846);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
    }

    @Test
    public void test11344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11344");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int6 = dateTimeZone4.getOffset(0L);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone4);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.DateTime dateTime12 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.Interval interval13 = yearMonth2.toInterval(dateTimeZone10);
        java.lang.String str14 = dateTimeZone10.toString();
        java.lang.String str15 = dateTimeZone10.getID();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(33L, dateTimeZone10);
        org.joda.time.DateTime.Property property17 = dateTime16.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test11345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11345");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-59), 53305126);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -59 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11346");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        int int6 = localDateTime2.getValue(2);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone9);
        int int11 = dateTime10.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTime(dateTimeZone13);
        org.joda.time.DateTime.Property property16 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime17 = property16.roundHalfEvenCopy();
        boolean boolean18 = localDateTime2.equals((java.lang.Object) property16);
        int int19 = localDateTime2.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime2.plusDays(14);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        int int23 = mutableDateTime22.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateTime dateTime28 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType30 = periodType29.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime22, (org.joda.time.ReadableInstant) dateTime27, periodType30);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod35 = mutablePeriod34.copy();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(chronology36);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.yearOfCentury();
        org.joda.time.Duration duration39 = mutablePeriod35.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        mutablePeriod31.setPeriod((org.joda.time.ReadableDuration) duration39);
        long long41 = duration39.getMillis();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration39, readableInstant42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime21.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 100);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.standard();
        java.lang.String str49 = periodType48.getName();
        org.joda.time.PeriodType periodType50 = periodType48.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(periodType50);
        org.joda.time.Period period52 = new org.joda.time.Period((long) (short) 1, (long) 69, periodType50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime45.minus((org.joda.time.ReadablePeriod) period52);
        int int54 = localDateTime45.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime45.plusMinutes(33);
        org.joda.time.LocalDateTime.Property property57 = localDateTime45.year();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21 + "'", int6 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 21 + "'", int23 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 99L + "'", long41 == 99L);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Standard" + "'", str49, "Standard");
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(localDateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 14 + "'", int54 == 14);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test11347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11347");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime5.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.year();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.addWrapField(6);
        mutableDateTime9.addDays((int) (byte) -1);
        int int12 = mutableDateTime9.getYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfYear();
        org.joda.time.DateMidnight dateMidnight16 = property15.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.property(dateTimeFieldType17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime9.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology20 = mutableDateTime9.getChronology();
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromMillisOfDay(9031340980000L, chronology20);
        int int22 = timeOfDay21.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        long long28 = dateTimeZone24.convertLocalToUTC((-1L), false, 10L);
        org.joda.time.DateTime dateTime29 = timeOfDay21.toDateTimeToday(dateTimeZone24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime29.withEra((-6));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -6 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1975 + "'", int12 == 1975);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 49 + "'", int22 == 49);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test11348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11348");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.set("22");
        org.joda.time.MutableDateTime mutableDateTime10 = property6.addWrapField(5);
        org.joda.time.Chronology chronology11 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.yearOfEra();
        org.joda.time.DurationField durationField14 = chronology11.millis();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test11349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11349");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.DateTime.Property property6 = dateTime4.year();
        org.joda.time.DateTime dateTime7 = property6.roundFloorCopy();
        org.joda.time.DateTime dateTime9 = property6.setCopy(6);
        org.joda.time.TimeOfDay timeOfDay10 = dateTime9.toTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.plusMillis((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.withMillisOfSecond(27);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
    }

    @Test
    public void test11350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11350");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        int int6 = localDateTime2.getValue(2);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone9);
        int int11 = dateTime10.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTime(dateTimeZone13);
        org.joda.time.DateTime.Property property16 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime17 = property16.roundHalfEvenCopy();
        boolean boolean18 = localDateTime2.equals((java.lang.Object) property16);
        int int19 = localDateTime2.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime2.plusDays(14);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        int int23 = mutableDateTime22.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateTime dateTime28 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType30 = periodType29.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime22, (org.joda.time.ReadableInstant) dateTime27, periodType30);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod35 = mutablePeriod34.copy();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(chronology36);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.yearOfCentury();
        org.joda.time.Duration duration39 = mutablePeriod35.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        mutablePeriod31.setPeriod((org.joda.time.ReadableDuration) duration39);
        long long41 = duration39.getMillis();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration39, readableInstant42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime21.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime21.minusYears(53251426);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 1, 100L);
        java.lang.Object obj51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(obj51, dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime53.minus((org.joda.time.ReadablePeriod) mutablePeriod58);
        mutablePeriod58.setHours((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod65 = mutablePeriod64.copy();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(chronology66);
        org.joda.time.DateMidnight.Property property68 = dateMidnight67.yearOfCentury();
        org.joda.time.Duration duration69 = mutablePeriod65.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(chronology70);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType74 = periodType73.withWeeksRemoved();
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight71, readableDuration72, periodType73);
        org.joda.time.Period period77 = period75.withSeconds(0);
        org.joda.time.Period period79 = period77.plusMinutes((int) (byte) 1);
        org.joda.time.Period period81 = period77.withSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType82 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period84 = period77.withField(durationFieldType82, 14);
        mutablePeriod65.set(durationFieldType82, 5);
        mutablePeriod58.add(durationFieldType82, 1);
        int int90 = mutablePeriod58.getValue((int) (short) 0);
        mutablePeriod50.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.MutablePeriod mutablePeriod92 = mutablePeriod50.copy();
        org.joda.time.LocalDateTime localDateTime94 = localDateTime47.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod92, 891);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21 + "'", int6 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 21 + "'", int23 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 99L + "'", long41 == 99L);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(mutablePeriod65);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod92);
        org.junit.Assert.assertNotNull(localDateTime94);
    }

    @Test
    public void test11351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11351");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval4 = yearMonthDay0.toInterval();
        org.joda.time.Chronology chronology5 = interval4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.weekyearOfCentury();
        boolean boolean8 = dateTimeField7.isSupported();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.year();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        long long20 = dateTimeField17.add((long) 21, (long) ' ');
        org.joda.time.DurationField durationField21 = dateTimeField17.getRangeDurationField();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet24 = locale23.getExtensionKeys();
        java.lang.String str25 = dateTimeField17.getAsText(21, locale23);
        java.lang.String str26 = dateTimeField7.getAsShortText((long) 1969, locale23);
        java.util.Set<java.lang.String> strSet27 = locale23.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1009843200021L + "'", long20 == 1009843200021L);
        org.junit.Assert.assertNull(durationField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "21" + "'", str25, "21");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "70" + "'", str26, "70");
        org.junit.Assert.assertNotNull(strSet27);
    }

    @Test
    public void test11352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11352");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime5.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.year();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.addWrapField(6);
        mutableDateTime9.addDays((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime15.toMutableDateTime(dateTimeZone17);
        mutableDateTime9.setZone(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(896L, dateTimeZone17);
        int int23 = dateTimeZone17.getOffsetFromLocal(539L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test11353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11353");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight1.withYear(12);
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 0, 0L);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period12 = period10.withPeriodType(periodType11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime17.toMutableDateTime();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = timeOfDay23.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay23.plusHours((-1));
        org.joda.time.Chronology chronology27 = timeOfDay26.getChronology();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.TimeOfDay timeOfDay30 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.withChronologyRetainFields(chronology31);
        long long34 = chronology27.set((org.joda.time.ReadablePartial) timeOfDay30, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(chronology27);
        org.joda.time.DateTime dateTime36 = dateTime17.toDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField37 = chronology27.yearOfCentury();
        org.joda.time.DurationField durationField38 = chronology27.centuries();
        org.joda.time.DateTimeField dateTimeField39 = chronology27.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 'a', (long) 7, periodType11, chronology27);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight1.minus((org.joda.time.ReadablePeriod) mutablePeriod40);
        int int42 = dateMidnight41.getDayOfWeek();
        int int43 = dateMidnight41.getMillisOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-86399999L) + "'", long34 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test11354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11354");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.LocalDateTime localDateTime5 = property3.getLocalDateTime();
        boolean boolean7 = property3.equals((java.lang.Object) 1.0f);
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category8, locale9);
        int int11 = property3.getMaximumTextLength(locale9);
        java.lang.String str12 = property3.getName();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight16 = property15.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.year();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        long long27 = dateTimeField24.add((long) 21, (long) ' ');
        org.joda.time.DurationField durationField28 = dateTimeField24.getRangeDurationField();
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet31 = locale30.getExtensionKeys();
        java.lang.String str32 = dateTimeField24.getAsText(21, locale30);
        java.lang.String str33 = locale30.getLanguage();
        int int34 = property15.getMaximumTextLength(locale30);
        java.lang.String str35 = property3.getAsText(locale30);
        org.joda.time.LocalDateTime localDateTime36 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = property37.setCopy(18499);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18499 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 747L + "'", long4 == 747L);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondOfMinute" + "'", str12, "secondOfMinute");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1009843200021L + "'", long27 == 1009843200021L);
        org.junit.Assert.assertNull(durationField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "21" + "'", str32, "21");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fr" + "'", str33, "fr");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "12" + "'", str35, "12");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test11355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11355");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) (byte) 0);
        org.joda.time.YearMonth yearMonth3 = yearMonth1.plusMonths(21);
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Locale locale9 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray14 = new java.util.Locale[] { locale9, locale10, locale13 };
        java.util.ArrayList<java.util.Locale> localeList15 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList15, localeArray14);
        java.util.Locale.FilteringMode filteringMode17 = null;
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.util.Locale>) localeList15, filteringMode17);
        org.joda.time.tz.Provider provider19 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet20 = provider19.getAvailableIDs();
        java.lang.String str21 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strSet20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime25.toMutableDateTime(dateTimeZone27);
        long long32 = dateTimeZone27.adjustOffset((long) 184, false);
        long long34 = dateTimeZone27.convertUTCToLocal(582L);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((java.lang.Object) str21, dateTimeZone27);
        long long37 = dateTimeZone27.convertUTCToLocal(83280001L);
        org.joda.time.Interval interval38 = yearMonth1.toInterval(dateTimeZone27);
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(provider19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 184L + "'", long32 == 184L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 582L + "'", long34 == 582L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 83280001L + "'", long37 == 83280001L);
        org.junit.Assert.assertNotNull(interval38);
    }

    @Test
    public void test11356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11356");
        org.joda.time.Period period8 = new org.joda.time.Period(32770, 972, 911, 316, 2598, (-893), 307, 594);
    }

    @Test
    public void test11357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11357");
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = timeOfDay20.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay20.plusHours((-1));
        org.joda.time.Chronology chronology24 = timeOfDay23.getChronology();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.TimeOfDay timeOfDay27 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.withChronologyRetainFields(chronology28);
        long long31 = chronology24.set((org.joda.time.ReadablePartial) timeOfDay27, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(chronology24);
        org.joda.time.DateTime dateTime33 = dateTime14.toDateTime(chronology24);
        org.joda.time.DateTimeField dateTimeField34 = chronology24.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField35 = chronology24.weekOfWeekyear();
        long long39 = chronology24.add(0L, (long) 12, 117);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 2100001, chronology24);
        org.joda.time.DurationField durationField41 = chronology24.halfdays();
        boolean boolean42 = durationFieldType8.isSupported(chronology24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(339, 294, 152, 53607000, 1070, 12719, 911, chronology24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53607000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-86399999L) + "'", long31 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1404L + "'", long39 == 1404L);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test11358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11358");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime5 = property2.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property6 = localTime5.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property6.roundFloorCopy();
        org.joda.time.LocalTime localTime8 = property6.roundCeilingCopy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTime dateTime14 = timeOfDay13.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.minusHours((int) (byte) 1);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.lang.String str19 = timeOfDay13.toString("1", locale18);
        int int20 = localTime8.compareTo((org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.TimeOfDay.Property property21 = timeOfDay13.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay23 = property21.addToCopy((int) ' ');
        int int24 = timeOfDay23.size();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
    }

    @Test
    public void test11359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11359");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        java.lang.String str5 = property2.getAsShortText();
        org.joda.time.LocalTime localTime6 = property2.roundFloorCopy();
        org.joda.time.LocalTime localTime8 = localTime6.withHourOfDay((int) (byte) 10);
        java.util.Date date11 = new java.util.Date(57L);
        org.joda.time.YearMonth yearMonth12 = org.joda.time.YearMonth.fromDateFields(date11);
        org.joda.time.YearMonth.Property property13 = yearMonth12.year();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(dateTimeZone16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusMonths((int) (byte) 100);
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getDisplayCountry();
        java.lang.String str23 = locale21.getDisplayLanguage();
        java.lang.String str24 = yearMonth19.toString("\u5fb7\u56fd", locale21);
        java.lang.String str25 = yearMonth12.toString("58", locale21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = localTime6.toString("2022-02-21T14:50:10.121", locale21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u610f\u5927\u5229" + "'", str22, "\u610f\u5927\u5229");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str23, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u5fb7\u56fd" + "'", str24, "\u5fb7\u56fd");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "58" + "'", str25, "58");
    }

    @Test
    public void test11360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11360");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        int int6 = dateTime4.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property7 = dateTime4.yearOfEra();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime15 = dateTime13.toLocalDateTime();
        java.util.Date date16 = dateTime13.toDate();
        int int17 = property7.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime13.plus(readableDuration18);
        int int20 = dateTime13.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test11361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11361");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight5 = property3.addToCopy(53436);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        java.lang.String str10 = dateTimeZone8.getName(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) property3, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateMidnight$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
    }

    @Test
    public void test11362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11362");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime9 = property6.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime10 = property6.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime11 = property6.roundFloor();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.weekOfWeekyear();
        mutableDateTime11.addWeeks((int) (byte) -1);
        mutableDateTime11.setMillis(837L);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTime();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.TimeOfDay timeOfDay25 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = timeOfDay27.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay27.plusHours((-1));
        org.joda.time.Chronology chronology31 = timeOfDay30.getChronology();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.TimeOfDay timeOfDay34 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.withChronologyRetainFields(chronology35);
        long long38 = chronology31.set((org.joda.time.ReadablePartial) timeOfDay34, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay(chronology31);
        org.joda.time.DateTime dateTime40 = dateTime21.toDateTime(chronology31);
        org.joda.time.DateTimeField dateTimeField41 = chronology31.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology31.weekOfWeekyear();
        mutableDateTime11.setChronology(chronology31);
        mutableDateTime11.setMillis((long) 910);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-86399999L) + "'", long38 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test11363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11363");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight1, readableDuration2, periodType3);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period9 = period7.plusHours((int) '#');
        org.joda.time.Period period10 = period5.minus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period11 = period5.toPeriod();
        org.joda.time.Period period12 = period5.normalizedStandard();
        org.joda.time.Period period14 = period12.withWeeks(15);
        int int15 = period12.getSeconds();
        org.joda.time.Hours hours16 = period12.toStandardHours();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(hours16);
    }

    @Test
    public void test11364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11364");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3, periodType4);
        org.joda.time.Period period8 = period6.withSeconds(0);
        org.joda.time.LocalTime localTime10 = localTime0.withPeriodAdded((org.joda.time.ReadablePeriod) period8, 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.yearOfCentury();
        java.lang.String str14 = property13.getAsShortText();
        boolean boolean15 = localTime10.equals((java.lang.Object) str14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.hours();
        boolean boolean17 = localTime10.isSupported(durationFieldType16);
        java.lang.String str18 = localTime10.toString();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.year();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.addWrapField(6);
        mutableDateTime27.addDays((int) (byte) -1);
        int int30 = mutableDateTime27.getYear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.dayOfYear();
        org.joda.time.DateMidnight dateMidnight34 = property33.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight.Property property36 = dateMidnight34.property(dateTimeFieldType35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime27.property(dateTimeFieldType35);
        boolean boolean38 = localTime10.isSupported(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "22" + "'", str14, "22");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "14:55:13.100" + "'", str18, "14:55:13.100");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1975 + "'", int30 == 1975);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test11365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11365");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval4 = yearMonthDay0.toInterval();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod8 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.yearOfCentury();
        org.joda.time.Duration duration12 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod16 = mutablePeriod15.copy();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.yearOfCentury();
        org.joda.time.Duration duration20 = mutablePeriod16.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        boolean boolean21 = duration12.isEqual((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Interval interval22 = interval4.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Interval interval24 = interval4.withStartMillis(59L);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readableDuration27);
        org.joda.time.LocalDate localDate29 = dateTime28.toLocalDate();
        org.joda.time.DateTime.Property property30 = dateTime28.weekyear();
        boolean boolean31 = interval4.isAfter((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean32 = interval4.isBeforeNow();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test11366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11366");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight1, readableDuration2, periodType3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.era();
        java.lang.String str9 = dateMidnight7.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableInstant) dateMidnight7);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight7.withFieldAdded(durationFieldType11, (-1));
        org.joda.time.Interval interval14 = dateMidnight13.toInterval();
        long long15 = interval14.getEndMillis();
        org.joda.time.Interval interval17 = interval14.withStartMillis((long) 39);
        boolean boolean19 = interval17.isAfter(909L);
        org.joda.time.Chronology chronology20 = interval17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateTime dateTime25 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime25.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.year();
        org.joda.time.MutableDateTime mutableDateTime29 = property27.set("22");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.dayOfYear();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight31.withDurationAdded((long) 17, 1);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight31.withEra((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime();
        int int39 = mutableDateTime38.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int43 = dateTimeZone41.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime38.toMutableDateTime(dateTimeZone41);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime();
        int int46 = mutableDateTime45.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone49);
        org.joda.time.DateTime dateTime51 = dateTime50.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType53 = periodType52.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime45, (org.joda.time.ReadableInstant) dateTime50, periodType53);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod58 = mutablePeriod57.copy();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(chronology59);
        org.joda.time.DateMidnight.Property property61 = dateMidnight60.yearOfCentury();
        org.joda.time.Duration duration62 = mutablePeriod58.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight60);
        mutablePeriod54.setPeriod((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime38, (org.joda.time.ReadableDuration) duration62);
        org.joda.time.Duration duration65 = duration62.toDuration();
        org.joda.time.Period period66 = duration62.toPeriod();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight31.minus((org.joda.time.ReadableDuration) duration62);
        mutableDateTime29.add((org.joda.time.ReadableDuration) duration62, 53376419);
        org.joda.time.Interval interval70 = interval17.withDurationAfterStart((org.joda.time.ReadableDuration) duration62);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str9, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645401600000L + "'", long15 == 1645401600000L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 21 + "'", int39 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 21 + "'", int46 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(interval70);
    }

    @Test
    public void test11367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11367");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight1.withDurationAdded((long) 17, 1);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight1.withEra((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.withWeekyear(2022);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.year();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withWeekOfWeekyear((int) '4');
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.dayOfWeek();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test11368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11368");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime6 = property3.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.hourOfDay();
        int int8 = localDateTime6.size();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
    }

    @Test
    public void test11369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11369");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        boolean boolean4 = mutableDateTime0.isBefore((long) 2);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = property5.set(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test11370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11370");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        org.joda.time.Instant instant4 = instant2.plus((long) (byte) 100);
        org.joda.time.Instant instant6 = instant2.minus(58665600000L);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateTime dateTime11 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime11.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.year();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.addWrapField(6);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        org.joda.time.MutableDateTime mutableDateTime18 = property13.set("1", locale17);
        org.joda.time.MutableDateTime mutableDateTime20 = property13.set(23);
        mutableDateTime20.setTime(10L);
        mutableDateTime20.setSecondOfMinute(10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.era();
        org.joda.time.DateMidnight dateMidnight28 = property27.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight29 = property27.getDateMidnight();
        int int30 = dateMidnight29.getSecondOfDay();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.monthOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime31, (org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime();
        int int38 = mutableDateTime37.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone41);
        org.joda.time.DateTime dateTime43 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType45 = periodType44.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime37, (org.joda.time.ReadableInstant) dateTime42, periodType45);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod50 = mutablePeriod49.copy();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(chronology51);
        org.joda.time.DateMidnight.Property property53 = dateMidnight52.yearOfCentury();
        org.joda.time.Duration duration54 = mutablePeriod50.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight52);
        mutablePeriod46.setPeriod((org.joda.time.ReadableDuration) duration54);
        long long56 = duration54.getMillis();
        mutableDateTime31.add((org.joda.time.ReadableDuration) duration54);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight29.plus((org.joda.time.ReadableDuration) duration54);
        mutableDateTime20.add((org.joda.time.ReadableDuration) duration54, 53305126);
        org.joda.time.Instant instant61 = instant2.minus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Chronology chronology62 = instant2.getChronology();
        org.joda.time.Chronology chronology63 = chronology62.withUTC();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.yearOfCentury();
        long long67 = dateTimeField64.addWrapField(790L, 802);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 21 + "'", int38 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 99L + "'", long56 == 99L);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 63072000790L + "'", long67 == 63072000790L);
    }

    @Test
    public void test11371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11371");
        long long6 = java.util.Date.UTC(999, 64, 0, 53253395, 53385982, (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 224399899320000L + "'", long6 == 224399899320000L);
    }

    @Test
    public void test11372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11372");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate.Property property2 = localDate1.era();
        org.joda.time.LocalDate localDate3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate4 = property2.getLocalDate();
        int int5 = localDate4.getDayOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test11373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11373");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(818);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withChronology(chronology8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter7.getParser();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter7.withZone(dateTimeZone12);
        java.lang.Appendable appendable16 = null;
        org.joda.time.ReadablePartial readablePartial17 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter15.printTo(appendable16, readablePartial17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeParser11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
    }

    @Test
    public void test11374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11374");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType8 = periodType7.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime5, periodType8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType14 = periodType13.withWeeksRemoved();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight11, readableDuration12, periodType13);
        org.joda.time.Period period17 = period15.withSeconds(0);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime23 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTime dateTime29 = timeOfDay28.toDateTimeToday();
        boolean boolean30 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime29);
        int int31 = dateTime29.getWeekyear();
        org.joda.time.DateTime dateTime33 = dateTime29.plusHours(4);
        org.joda.time.Duration duration34 = period15.toDurationFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod37.copy();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.yearOfCentury();
        org.joda.time.Duration duration42 = mutablePeriod38.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight40);
        boolean boolean43 = duration34.isEqual((org.joda.time.ReadableDuration) duration42);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration42, periodType44);
        org.joda.time.DateTime dateTime47 = dateTime5.minusDays(2021);
        org.joda.time.DateTime dateTime49 = dateTime47.plusMillis(53984007);
        org.joda.time.DateTime dateTime51 = dateTime49.plusYears(30);
        org.joda.time.DateTime dateTime53 = dateTime49.withMillis(363L);
        int int54 = dateTime49.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 25 + "'", int54 == 25);
    }

    @Test
    public void test11375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11375");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.monthOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateMidnight3);
        mutablePeriod5.addYears(1900);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(864L);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.addWeeks(27);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test11376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11376");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfYear();
        org.joda.time.DateMidnight.Property property4 = dateMidnight1.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property4.getFieldType();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfDay();
        org.joda.time.Chronology chronology12 = localTime10.getChronology();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1645454846663L, 0L, chronology12);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) ' ');
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime();
        int int19 = mutableDateTime18.getDayOfMonth();
        org.joda.time.Instant instant20 = mutableDateTime18.toInstant();
        org.joda.time.MutableDateTime mutableDateTime21 = instant20.toMutableDateTime();
        boolean boolean22 = dateTime15.isEqual((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Instant instant24 = instant20.plus((long) 15);
        org.joda.time.Instant instant25 = instant20.toInstant();
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.millis();
        long long31 = chronology26.add(473L, 803L, 1976);
        org.joda.time.DurationField durationField32 = chronology26.halfdays();
        mutablePeriod13.setPeriod((long) 272, chronology26);
        org.joda.time.DurationField durationField34 = chronology26.years();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime(3155760000017L, chronology26);
        boolean boolean36 = dateTimeFieldType5.isSupported(chronology26);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 21 + "'", int19 == 21);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1587201L + "'", long31 == 1587201L);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test11377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11377");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTime dateTime11 = timeOfDay10.toDateTimeToday();
        boolean boolean12 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime11.getWeekyear();
        org.joda.time.DateTime.Property property14 = dateTime11.year();
        org.joda.time.DateTime dateTime16 = dateTime11.plusDays(272);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod21 = mutablePeriod20.copy();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = timeOfDay28.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay28.plusHours((-1));
        org.joda.time.Chronology chronology32 = timeOfDay31.getChronology();
        mutablePeriod20.setPeriod((long) (byte) 1, 845L, chronology32);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(41L, chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.millisOfSecond();
        int int36 = dateTime16.get(dateTimeField35);
        org.joda.time.DateTime dateTime38 = dateTime16.withYearOfEra(51);
        org.joda.time.DateTime.Property property39 = dateTime38.minuteOfDay();
        java.lang.Character[] charArray46 = new java.lang.Character[] { '#', 'x', '#', 'u', ' ', '#' };
        java.util.LinkedHashSet<java.lang.Character> charSet47 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet47, charArray46);
        java.lang.Object[] objArray49 = charSet47.toArray();
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.minutes();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone54);
        org.joda.time.DateTime dateTime56 = dateTime55.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime56.toMutableDateTime();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.TimeOfDay timeOfDay60 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.TimeOfDay timeOfDay62 = timeOfDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = timeOfDay62.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay65 = timeOfDay62.plusHours((-1));
        org.joda.time.Chronology chronology66 = timeOfDay65.getChronology();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.TimeOfDay timeOfDay69 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.TimeOfDay timeOfDay71 = timeOfDay69.withChronologyRetainFields(chronology70);
        long long73 = chronology66.set((org.joda.time.ReadablePartial) timeOfDay69, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay74 = new org.joda.time.TimeOfDay(chronology66);
        org.joda.time.DateTime dateTime75 = dateTime56.toDateTime(chronology66);
        org.joda.time.DateTimeField dateTimeField76 = chronology66.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField77 = chronology66.millisOfDay();
        org.joda.time.DurationField durationField78 = chronology66.centuries();
        org.joda.time.Period period79 = new org.joda.time.Period(818L, periodType51, chronology66);
        org.joda.time.DateTimeField dateTimeField80 = chronology66.secondOfDay();
        boolean boolean81 = charSet47.remove((java.lang.Object) chronology66);
        org.joda.time.DurationField durationField82 = chronology66.years();
        org.joda.time.DateTimeField dateTimeField83 = chronology66.weekyear();
        boolean boolean84 = dateTime38.equals((java.lang.Object) dateTimeField83);
        org.joda.time.DateTime dateTime86 = dateTime38.plusHours(686);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[#, x, u,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[#, x, u,  ]");
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertNotNull(timeOfDay71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-86399999L) + "'", long73 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test11378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11378");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        boolean boolean4 = mutableDateTime0.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime0.setZone(dateTimeZone6);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone6);
        org.joda.time.LocalDate.Property property12 = localDate11.era();
        int int13 = localDate11.getWeekyear();
        org.joda.time.LocalDate localDate15 = localDate11.plusYears(15);
        org.joda.time.LocalDate localDate17 = localDate11.withDayOfYear(357);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test11379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11379");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval4 = yearMonthDay0.toInterval();
        org.joda.time.Period period5 = interval4.toPeriod();
        org.joda.time.Interval interval6 = interval4.toInterval();
        org.joda.time.Interval interval8 = interval4.withStartMillis(673L);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval8);
    }

    @Test
    public void test11380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11380");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.adjustOffset((long) ' ', true);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(11);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229");
        java.time.ZoneId zoneId9 = timeZone8.toZoneId();
        int int11 = timeZone8.getOffset(0L);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale12);
        java.lang.String str14 = dateTimeZone5.getShortName((-39378647550031L), locale12);
        long long16 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (-1601791393000L));
        org.joda.time.YearMonth yearMonth17 = org.joda.time.YearMonth.now(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(zoneId9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645455313684,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=55,SECOND=13,MILLISECOND=684,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.011" + "'", str14, "+00:00:00.011");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1601791393011L) + "'", long16 == (-1601791393011L));
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
    }

    @Test
    public void test11381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11381");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = timeOfDay10.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusHours((-1));
        org.joda.time.Chronology chronology14 = timeOfDay13.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        long long21 = chronology14.set((org.joda.time.ReadablePartial) timeOfDay17, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(chronology14);
        org.joda.time.DateTime dateTime23 = dateTime4.toDateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField24 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField25 = chronology14.centuries();
        int int28 = durationField25.getDifference((long) 3, 330L);
        boolean boolean29 = durationField25.isPrecise();
        java.lang.String str30 = durationField25.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-86399999L) + "'", long21 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "DurationField[centuries]" + "'", str30, "DurationField[centuries]");
    }

    @Test
    public void test11382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11382");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval4 = yearMonthDay0.toInterval();
        org.joda.time.Period period5 = interval4.toPeriod();
        org.joda.time.Interval interval6 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = interval4.toMutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        org.joda.time.DateTime dateTime9 = mutableInterval7.getEnd();
        org.joda.time.DateTime dateTime11 = dateTime9.plusWeeks(53382349);
        int int12 = dateTime9.getEra();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test11383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11383");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        org.joda.time.DurationFieldType durationFieldType7 = periodType5.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = timeOfDay19.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.plusHours((-1));
        org.joda.time.Chronology chronology23 = timeOfDay22.getChronology();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.withChronologyRetainFields(chronology27);
        long long30 = chronology23.set((org.joda.time.ReadablePartial) timeOfDay26, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(chronology23);
        org.joda.time.DateTime dateTime32 = dateTime13.toDateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField33 = chronology23.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = chronology23.millisOfDay();
        org.joda.time.DurationField durationField35 = chronology23.centuries();
        org.joda.time.DurationField durationField36 = durationFieldType8.getField(chronology23);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((-86399999L), 311L, periodType5, chronology23);
        org.joda.time.DateTimeField dateTimeField38 = chronology23.dayOfMonth();
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay(726364800069L, chronology23);
        org.joda.time.DateTimeField dateTimeField40 = chronology23.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay41 = org.joda.time.TimeOfDay.fromMillisOfDay(805L, chronology23);
        org.joda.time.TimeOfDay.Property property42 = timeOfDay41.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay41.plusMinutes((-1970));
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-86399999L) + "'", long30 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(timeOfDay44);
    }

    @Test
    public void test11384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11384");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        mutableDateTime5.addMonths(1970);
        mutableDateTime5.addHours((int) 'a');
        mutableDateTime5.setWeekyear(51);
        mutableDateTime5.setMillis((long) 1645454970);
        int int15 = mutableDateTime5.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime5.setTime(53458195, 39, 156, 292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53458195 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test11385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11385");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.plusYears(4);
        org.joda.time.Interval interval5 = yearMonthDay2.toInterval();
        long long6 = interval5.getEndMillis();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1619049600000L + "'", long6 == 1619049600000L);
    }

    @Test
    public void test11386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11386");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        java.lang.String str5 = property2.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateTime dateTime10 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime10.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.year();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.addWrapField(6);
        mutableDateTime14.addDays((int) (byte) -1);
        int int17 = mutableDateTime14.getYear();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Instant instant19 = dateTime18.toInstant();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime14, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTime dateTime26 = timeOfDay25.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay25.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime29 = timeOfDay28.toDateTimeToday();
        int int30 = dateTime29.getYearOfEra();
        boolean boolean31 = interval20.isAfter((org.joda.time.ReadableInstant) dateTime29);
        int int32 = dateTime29.getDayOfYear();
        org.joda.time.DateTime dateTime33 = dateTime29.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime35 = dateTime33.minusWeeks(22);
        long long36 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod40 = mutablePeriod39.copy();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.yearOfCentury();
        org.joda.time.Duration duration44 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(readableDuration45, (org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType49 = periodType48.withWeeksRemoved();
        org.joda.time.DurationFieldType durationFieldType51 = periodType49.getFieldType(0);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) mutableDateTime46, periodType49);
        int int53 = mutableDateTime46.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone56);
        org.joda.time.DateTime dateTime58 = dateTime57.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime59 = dateTime57.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.TimeOfDay timeOfDay62 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTime dateTime65 = timeOfDay64.toDateTimeToday();
        boolean boolean66 = dateTime59.isEqual((org.joda.time.ReadableInstant) dateTime65);
        int int67 = dateTime65.getWeekyear();
        org.joda.time.DateTime dateTime69 = dateTime65.plusHours(4);
        mutableDateTime46.setMillis((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime46.millisOfSecond();
        mutableDateTime46.add(270L);
        long long74 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime46);
        int int75 = mutableDateTime46.getMillisOfSecond();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1975 + "'", int17 == 1975);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1632095999999L) + "'", long36 == (-1632095999999L));
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2022 + "'", int67 == 2022);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1645416000270L) + "'", long74 == (-1645416000270L));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 271 + "'", int75 == 271);
    }

    @Test
    public void test11387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11387");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        org.joda.time.YearMonthDay yearMonthDay4 = property3.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay6 = property3.setCopy(20);
        int int7 = property3.getMinimumValueOverall();
        int int8 = property3.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay9 = property3.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField10 = property3.getField();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-292275054) + "'", int7 == (-292275054));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 292278993 + "'", int8 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test11388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11388");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.minusSeconds(11);
        int int8 = timeOfDay4.size();
        org.joda.time.TimeOfDay.Property property9 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay11 = property9.addWrapFieldToCopy(2922789);
        org.joda.time.DateTime dateTime12 = timeOfDay11.toDateTimeToday();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test11389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11389");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(9);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '4');
        org.joda.time.LocalDate localDate6 = localDate3.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDate.Property property7 = localDate3.centuryOfEra();
        org.joda.time.LocalDate localDate9 = property7.setCopy(58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = localDate9.withYearOfCentury(5870);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5870 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test11390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11390");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        int int3 = yearMonthDay0.getDayOfMonth();
        int int4 = yearMonthDay0.getDayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod8 = mutablePeriod7.copy();
        org.joda.time.format.PeriodFormatter periodFormatter9 = null;
        java.lang.String str10 = mutablePeriod8.toString(periodFormatter9);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay0.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod8, (-1));
        org.joda.time.YearMonthDay.Property property13 = yearMonthDay12.year();
        java.lang.String str14 = property13.getName();
        org.joda.time.YearMonthDay yearMonthDay15 = property13.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.plusMonths(2023);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 21 + "'", int3 == 21);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0.099S" + "'", str10, "PT0.099S");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "year" + "'", str14, "year");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
    }

    @Test
    public void test11391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11391");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval4 = yearMonthDay0.toInterval();
        org.joda.time.Period period5 = interval4.toPeriod();
        org.joda.time.Interval interval6 = interval4.toInterval();
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.Duration duration8 = interval7.toDuration();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        int int10 = mutableDateTime9.getDayOfMonth();
        int int11 = mutableDateTime9.getMinuteOfHour();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType13 = periodType12.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) mutableDateTime9, periodType12);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod17.copy();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.yearOfCentury();
        org.joda.time.Duration duration22 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableDuration23, (org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType27 = periodType26.withWeeksRemoved();
        org.joda.time.DurationFieldType durationFieldType29 = periodType27.getFieldType(0);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) mutableDateTime24, periodType27);
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration22);
        int int32 = mutablePeriod14.getWeeks();
        java.lang.Object obj33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(obj33);
        org.joda.time.Period period36 = period34.withWeeks(0);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) -1, chronology38);
        int int40 = localDate39.getYearOfCentury();
        org.joda.time.LocalDate.Property property41 = localDate39.centuryOfEra();
        org.joda.time.LocalDate localDate42 = property41.roundFloorCopy();
        int int43 = localDate42.getYearOfEra();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDate localDate46 = localDate42.withFieldAdded(durationFieldType44, (-52));
        boolean boolean47 = period34.isSupported(durationFieldType44);
        int int48 = mutablePeriod14.get(durationFieldType44);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21 + "'", int10 == 21);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 55 + "'", int11 == 55);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 69 + "'", int40 == 69);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1900 + "'", int43 == 1900);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test11392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11392");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.LocalDateTime localDateTime5 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfSecond(907);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMillisOfSecond(888);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 52L + "'", long4 == 52L);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test11393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11393");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withLocale(locale3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withDefaultYear(1);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateTime dateTime12 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = timeOfDay18.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay18.plusHours((-1));
        org.joda.time.Chronology chronology22 = timeOfDay21.getChronology();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.TimeOfDay timeOfDay25 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay25.withChronologyRetainFields(chronology26);
        long long29 = chronology22.set((org.joda.time.ReadablePartial) timeOfDay25, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(chronology22);
        org.joda.time.DateTime dateTime31 = dateTime12.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField32 = chronology22.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology22.millisOfDay();
        org.joda.time.DurationField durationField34 = chronology22.centuries();
        org.joda.time.DurationField durationField35 = durationFieldType7.getField(chronology22);
        org.joda.time.Chronology chronology36 = chronology22.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter6.withChronology(chronology36);
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatter6.getPrinter();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.TimeOfDay timeOfDay41 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTime dateTime44 = timeOfDay43.toDateTimeToday();
        org.joda.time.DateTime dateTime46 = dateTime44.plusYears((int) 'u');
        org.joda.time.DateTime dateTime48 = dateTime44.minusHours(2027);
        org.joda.time.DateTime dateTime50 = dateTime48.minus(1645714073622L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = dateTimeFormatter6.print((org.joda.time.ReadableInstant) dateTime48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-86399999L) + "'", long29 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNull(dateTimePrinter38);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test11394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11394");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        boolean boolean10 = localDateTime8.equals((java.lang.Object) 14);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusDays(10);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.withFieldAdded(durationFieldType13, (int) (short) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMillis(999);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusMillis(67);
        int int20 = localDateTime15.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
    }

    @Test
    public void test11395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11395");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.minus((long) 4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateTime dateTime11 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime11.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.year();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.MutableDateTime mutableDateTime16 = property13.set(33);
        int int17 = mutableDateTime6.compareTo((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime6.addSeconds(292278994);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test11396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11396");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        int int3 = localDateTime2.getCenturyOfEra();
        int int4 = localDateTime2.getCenturyOfEra();
        java.lang.Object obj5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(obj5, dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusYears((int) (short) 0);
        int int11 = localDateTime7.getValue(2);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone14);
        int int16 = dateTime15.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTime(dateTimeZone18);
        org.joda.time.DateTime.Property property21 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime22 = property21.roundHalfEvenCopy();
        boolean boolean23 = localDateTime7.equals((java.lang.Object) property21);
        int int24 = localDateTime7.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime7.withHourOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusHours(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.property(dateTimeFieldType29);
        int int31 = localDateTime2.indexOf(dateTimeFieldType29);
        org.joda.time.LocalDateTime.Property property32 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime34 = property32.addWrapFieldToCopy(100);
        org.joda.time.LocalDateTime localDateTime35 = property32.roundCeilingCopy();
        java.util.Date date36 = localDateTime35.toDate();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.millisOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20 + "'", int3 == 20);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Mon Jan 02 00:00:00 GMT+00:00 2023");
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test11397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11397");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.YearMonth yearMonth2 = yearMonth0.withMonthOfYear(8);
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 58);
        org.joda.time.YearMonth yearMonth5 = yearMonth0.minus((org.joda.time.ReadablePeriod) mutablePeriod4);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale11 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.Locale locale15 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray16 = new java.util.Locale[] { locale11, locale12, locale15 };
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.Locale.FilteringMode filteringMode19 = null;
        java.util.List<java.util.Locale> localeList20 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList17, filteringMode19);
        org.joda.time.tz.Provider provider21 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet22 = provider21.getAvailableIDs();
        java.lang.String str23 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth(dateTimeZone29);
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime27.toMutableDateTime(dateTimeZone29);
        long long34 = dateTimeZone29.adjustOffset((long) 184, false);
        long long36 = dateTimeZone29.convertUTCToLocal(582L);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((java.lang.Object) str23, dateTimeZone29);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod4, (org.joda.time.ReadableInstant) mutableDateTime37);
        org.junit.Assert.assertNotNull(yearMonth2);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale15.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localeList20);
        org.junit.Assert.assertNotNull(provider21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 184L + "'", long34 == 184L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 582L + "'", long36 == 582L);
    }

    @Test
    public void test11398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11398");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
        int int2 = mutableDateTime0.getMonthOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
    }

    @Test
    public void test11399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11399");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.YearMonth yearMonth2 = yearMonth0.withMonthOfYear(8);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone5);
        org.joda.time.DateTime dateTime7 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime7.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.year();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime12 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime();
        int int14 = mutableDateTime13.getDayOfMonth();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate18 = localDate16.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int20 = localDate16.get(dateTimeFieldType19);
        mutableDateTime13.set(dateTimeFieldType19, 2);
        boolean boolean23 = mutableDateTime12.isSupported(dateTimeFieldType19);
        java.lang.String str24 = dateTimeFieldType19.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth.Property property25 = yearMonth2.property(dateTimeFieldType19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 21 + "'", int14 == 21);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "dayOfMonth" + "'", str24, "dayOfMonth");
    }

    @Test
    public void test11400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11400");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval4 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay0.plusYears(1970);
        org.joda.time.DateTime dateTime7 = yearMonthDay6.toDateTimeAtCurrentTime();
        boolean boolean9 = dateTime7.isAfter((-783L));
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        boolean boolean13 = dateTimeFormatter12.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateTime dateTime19 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime19.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.year();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        java.util.Locale locale23 = java.util.Locale.PRC;
        java.lang.String str24 = locale23.getDisplayScript();
        java.util.Locale.setDefault(locale23);
        java.lang.String str26 = locale23.getISO3Language();
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.lang.String str28 = locale23.getDisplayScript(locale27);
        int int29 = dateTimeField22.getMaximumShortTextLength(locale27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter14.withLocale(locale27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter30.withPivotYear((java.lang.Integer) 51);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime();
        int int34 = mutableDateTime33.getDayOfMonth();
        org.joda.time.Instant instant35 = mutableDateTime33.toInstant();
        boolean boolean37 = mutableDateTime33.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int41 = dateTimeZone39.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime33.setZone(dateTimeZone39);
        long long44 = dateTimeZone39.previousTransition((long) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter30.withZone(dateTimeZone39);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone39);
        org.joda.time.DateTime dateTime47 = dateTime7.withZone(dateTimeZone39);
        org.joda.time.Period period49 = org.joda.time.Period.weeks((int) (byte) 10);
        org.joda.time.Period period51 = period49.minusMonths(2);
        org.joda.time.DateTime dateTime52 = dateTime47.minus((org.joda.time.ReadablePeriod) period51);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zho" + "'", str26, "zho");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 21 + "'", int34 == 21);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test11401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11401");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight6 = property5.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateTime dateTime11 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime11.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.year();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        long long17 = dateTimeField14.add((long) 21, (long) ' ');
        org.joda.time.DurationField durationField18 = dateTimeField14.getRangeDurationField();
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        java.lang.String str22 = dateTimeField14.getAsText(21, locale20);
        java.lang.String str23 = locale20.getLanguage();
        int int24 = property5.getMaximumTextLength(locale20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withLocale(locale20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear((java.lang.Integer) 1975);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateTime dateTime32 = dateTime31.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime32.toMutableDateTime();
        org.joda.time.DateTime.Property property34 = dateTime32.year();
        org.joda.time.DateTime dateTime36 = dateTime32.withYear(1970);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime32.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter27.withZone(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone42);
        org.joda.time.DateTime dateTime44 = dateTime43.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime44.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.year();
        org.joda.time.DateTimeField dateTimeField47 = property46.getField();
        java.util.Locale locale49 = java.util.Locale.PRC;
        java.lang.String str50 = dateTimeField47.getAsText(58, locale49);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int54 = dateTimeZone52.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now(dateTimeZone52);
        java.util.Locale locale57 = java.util.Locale.PRC;
        java.lang.String str58 = locale57.getDisplayScript();
        java.lang.String str59 = dateTimeZone52.getName(845L, locale57);
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property62 = localTime61.millisOfDay();
        org.joda.time.LocalTime localTime64 = property62.addNoWrapToCopy(11);
        java.lang.String str65 = property62.getAsShortText();
        java.util.Locale locale66 = java.util.Locale.PRC;
        java.lang.String str67 = property62.getAsText(locale66);
        java.lang.String str68 = locale57.getDisplayScript(locale66);
        java.lang.String str69 = locale57.getLanguage();
        java.lang.String str70 = locale49.getDisplayVariant(locale57);
        java.lang.String str71 = dateTimeZone37.getName((-23989L), locale49);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1009843200021L + "'", long17 == 1009843200021L);
        org.junit.Assert.assertNull(durationField18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "21" + "'", str22, "21");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "fr" + "'", str23, "fr");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "58" + "'", str50, "58");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1" + "'", str65, "1");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1" + "'", str67, "1");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "zh" + "'", str69, "zh");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
    }

    @Test
    public void test11402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11402");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.monthOfYear();
        mutableDateTime0.setSecondOfMinute(0);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime();
        int int5 = mutableDateTime4.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateTime dateTime10 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType12 = periodType11.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadableInstant) dateTime9, periodType12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.era();
        int int15 = mutableDateTime4.get(dateTimeFieldType14);
        int int16 = mutableDateTime0.get(dateTimeFieldType14);
        mutableDateTime0.addHours(292278993);
        mutableDateTime0.setSecondOfMinute((int) ' ');
        int int21 = mutableDateTime0.getYearOfEra();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21 + "'", int5 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35365 + "'", int21 == 35365);
    }

    @Test
    public void test11403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11403");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(dateTimeZone1);
        int int3 = yearMonth2.getYear();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period7 = period5.plusHours((int) '#');
        org.joda.time.Period period8 = period5.toPeriod();
        org.joda.time.YearMonth yearMonth9 = yearMonth2.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears(887);
        org.joda.time.YearMonth.Property property12 = yearMonth9.monthOfYear();
        int int13 = property12.getMinimumValueOverall();
        int int14 = property12.getMaximumValue();
        org.joda.time.YearMonth yearMonth16 = property12.addWrapFieldToCopy((int) (short) 1);
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.lang.String str18 = locale17.getISO3Language();
        int int19 = property12.getMaximumShortTextLength(locale17);
        org.joda.time.DateTimeField dateTimeField20 = property12.getField();
        int int21 = property12.get();
        org.joda.time.DateTimeField dateTimeField22 = property12.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth24 = property12.setCopy(213);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 213 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zho" + "'", str18, "zho");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test11404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11404");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.LocalDate localDate6 = property5.withMaximumValue();
        org.joda.time.LocalDate localDate8 = property5.addToCopy((int) 'u');
        int int9 = localDate8.getDayOfMonth();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology12 = localDate11.getChronology();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime13.getZone();
        org.joda.time.DateTime dateTime15 = localDate8.toDateTimeAtMidnight(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime15.withLaterOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime16.withSecondOfMinute(121);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 121 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test11405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11405");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(11, (int) ' ');
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        int int5 = localDate4.getYearOfCentury();
        org.joda.time.LocalDate.Property property6 = localDate4.year();
        org.joda.time.LocalDate localDate8 = localDate4.minusYears(17);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusMonths((int) (byte) 10);
        int int12 = yearMonthDay9.getDayOfMonth();
        int int13 = yearMonthDay9.getDayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod17 = mutablePeriod16.copy();
        org.joda.time.format.PeriodFormatter periodFormatter18 = null;
        java.lang.String str19 = mutablePeriod17.toString(periodFormatter18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay9.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod17, (-1));
        org.joda.time.YearMonthDay.Property property22 = yearMonthDay21.year();
        java.lang.String str23 = property22.getName();
        org.joda.time.YearMonthDay yearMonthDay25 = property22.setCopy("19");
        org.joda.time.Period period27 = org.joda.time.Period.seconds(272);
        org.joda.time.Duration duration28 = period27.toStandardDuration();
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay25.minus((org.joda.time.ReadablePeriod) period27);
        int int30 = yearMonthDay29.getYear();
        int int31 = localDate8.compareTo((org.joda.time.ReadablePartial) yearMonthDay29);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645570514464,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"centuries\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=55,SECOND=14,MILLISECOND=464,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 21 + "'", int12 == 21);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21 + "'", int13 == 21);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0.099S" + "'", str19, "PT0.099S");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "year" + "'", str23, "year");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 19 + "'", int30 == 19);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test11406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11406");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        int int3 = yearMonthDay0.getDayOfMonth();
        int int4 = yearMonthDay0.getDayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod8 = mutablePeriod7.copy();
        org.joda.time.format.PeriodFormatter periodFormatter9 = null;
        java.lang.String str10 = mutablePeriod8.toString(periodFormatter9);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay0.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod8, (-1));
        org.joda.time.YearMonthDay.Property property13 = yearMonthDay12.year();
        java.lang.String str14 = property13.getName();
        org.joda.time.YearMonthDay yearMonthDay16 = property13.setCopy("19");
        org.joda.time.Period period18 = org.joda.time.Period.seconds(272);
        org.joda.time.Duration duration19 = period18.toStandardDuration();
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay16.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay16.minusYears(53459623);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 21 + "'", int3 == 21);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0.099S" + "'", str10, "PT0.099S");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "year" + "'", str14, "year");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
    }

    @Test
    public void test11407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11407");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay2.year();
        org.joda.time.YearMonthDay yearMonthDay5 = property3.setCopy(1900);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.yearOfCentury();
        org.joda.time.DateMidnight.Property property9 = dateMidnight7.dayOfYear();
        org.joda.time.DurationField durationField10 = property9.getDurationField();
        org.joda.time.DurationFieldType durationFieldType11 = durationField10.getType();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay5.withFieldAdded(durationFieldType11, 2);
        int int14 = yearMonthDay13.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay13.plusMonths(100);
        org.joda.time.Interval interval17 = yearMonthDay16.toInterval();
        boolean boolean19 = interval17.isAfter(917L);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test11408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11408");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(6);
        mutableDateTime8.addDays((int) (byte) -1);
        int int11 = mutableDateTime8.getYear();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Instant instant13 = dateTime12.toInstant();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime8, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTime dateTime20 = timeOfDay19.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = timeOfDay22.toDateTimeToday();
        int int24 = dateTime23.getYearOfEra();
        boolean boolean25 = interval14.isAfter((org.joda.time.ReadableInstant) dateTime23);
        int int26 = dateTime23.getDayOfYear();
        org.joda.time.DateTime dateTime27 = dateTime23.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateTime dateTime32 = dateTime31.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime32.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.year();
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        java.util.Locale locale37 = java.util.Locale.PRC;
        java.lang.String str38 = dateTimeField35.getAsText(58, locale37);
        boolean boolean39 = dateTime27.equals((java.lang.Object) 58);
        org.joda.time.DateTime dateTime40 = dateTime27.toDateTime();
        org.joda.time.DateTime dateTime41 = dateTime40.toDateTimeISO();
        org.joda.time.DateTime dateTime43 = dateTime41.minusSeconds(53305126);
        org.joda.time.DateTime.Property property44 = dateTime43.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField45 = property44.getField();
        long long47 = dateTimeField45.roundHalfEven(160940476800821L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1975 + "'", int11 == 1975);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "58" + "'", str38, "58");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 160940476800000L + "'", long47 == 160940476800000L);
    }

    @Test
    public void test11409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11409");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 969);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withDefaultYear(878);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = dateTimeFormatter10.print((long) 891);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test11410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11410");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(117448L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks(533823);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withCenturyOfEra(272);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test11411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11411");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval4 = yearMonthDay0.toInterval();
        org.joda.time.Period period5 = interval4.toPeriod();
        org.joda.time.Interval interval6 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = interval4.toMutableInterval();
        org.joda.time.Period period8 = interval4.toPeriod();
        org.joda.time.MutableInterval mutableInterval9 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology10 = interval4.getChronology();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        int int12 = mutableDateTime11.getDayOfMonth();
        org.joda.time.Instant instant13 = mutableDateTime11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        boolean boolean16 = mutableDateTime11.isBefore((org.joda.time.ReadableInstant) mutableDateTime15);
        boolean boolean17 = interval4.contains((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(821L);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus(41L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.dayOfYear();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight23.withDurationAdded((long) 17, 1);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight23.withEra((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight23.withWeekyear(2022);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, (org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime11, (org.joda.time.ReadablePeriod) period32);
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.plusDays(2022);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.dayOfYear();
        org.joda.time.DateMidnight dateMidnight40 = property39.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight.Property property42 = dateMidnight40.property(dateTimeFieldType41);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight40.withDurationAdded((long) 10, 5);
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime();
        int int47 = mutableDateTime46.getDayOfMonth();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate51 = localDate49.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int53 = localDate49.get(dateTimeFieldType52);
        mutableDateTime46.set(dateTimeFieldType52, 2);
        int int56 = dateMidnight40.get(dateTimeFieldType52);
        org.joda.time.YearMonthDay.Property property57 = yearMonthDay34.property(dateTimeFieldType52);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime11.property(dateTimeFieldType52);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        long long62 = dateTimeZone59.adjustOffset((long) ' ', true);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(11);
        java.util.TimeZone timeZone67 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229");
        java.time.ZoneId zoneId68 = timeZone67.toZoneId();
        int int70 = timeZone67.getOffset(0L);
        java.util.Locale locale71 = java.util.Locale.CANADA;
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone67, locale71);
        java.lang.String str73 = dateTimeZone64.getShortName((-39378647550031L), locale71);
        long long75 = dateTimeZone59.getMillisKeepLocal(dateTimeZone64, (-1601791393000L));
        mutableDateTime11.setZone(dateTimeZone64);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 21 + "'", int12 == 21);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 21 + "'", int47 == 21);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 21 + "'", int56 == 21);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 32L + "'", long62 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(zoneId68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=1645455314666,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=55,SECOND=14,MILLISECOND=666,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00:00.011" + "'", str73, "+00:00:00.011");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1601791393011L) + "'", long75 == (-1601791393011L));
    }

    @Test
    public void test11412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11412");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury(5);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.millisOfSecond();
        int int6 = localDateTime3.getYear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455314721,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"centuries\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=55,SECOND=14,MILLISECOND=721,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2005 + "'", int6 == 2005);
    }

    @Test
    public void test11413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11413");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = timeOfDay10.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusHours((-1));
        org.joda.time.Chronology chronology14 = timeOfDay13.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        long long21 = chronology14.set((org.joda.time.ReadablePartial) timeOfDay17, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(chronology14);
        org.joda.time.DateTime dateTime23 = dateTime4.toDateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField24 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField25 = chronology14.centuries();
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField27 = chronology14.hourOfDay();
        long long29 = dateTimeField27.roundHalfFloor(251L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-86399999L) + "'", long21 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test11414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11414");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("PT10S");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setScript("");
        java.util.Locale locale7 = builder4.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
    }

    @Test
    public void test11415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11415");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.adjustOffset((long) ' ', true);
        java.lang.Object obj4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(obj4, dateTimeZone5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.secondOfMinute();
        long long8 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property7.getLocalDateTime();
        boolean boolean11 = property7.equals((java.lang.Object) 1.0f);
        org.joda.time.LocalDateTime localDateTime13 = property7.setCopy((int) (short) 1);
        boolean boolean14 = dateTimeZone0.isLocalDateTimeGap(localDateTime13);
        org.joda.time.Chronology chronology15 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.halfdays();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.minuteOfDay();
        int int18 = dateTimeField17.getMaximumValue();
        org.joda.time.DurationField durationField19 = dateTimeField17.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 847L + "'", long8 == 847L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1439 + "'", int18 == 1439);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test11416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11416");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        mutableDateTime0.setDayOfMonth((int) (short) 10);
        mutableDateTime0.setMillis(0L);
        mutableDateTime0.setDayOfYear((int) (byte) 10);
        java.lang.Object obj8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(obj8, dateTimeZone9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.secondOfMinute();
        long long12 = property11.remainder();
        org.joda.time.LocalDateTime localDateTime13 = property11.getLocalDateTime();
        boolean boolean15 = property11.equals((java.lang.Object) 1.0f);
        org.joda.time.LocalDateTime localDateTime17 = property11.setCopy((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusYears((int) 'u');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYear(69);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = dateTime22.minusYears((int) ' ');
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime();
        int int26 = mutableDateTime25.getDayOfMonth();
        org.joda.time.Instant instant27 = mutableDateTime25.toInstant();
        org.joda.time.MutableDateTime mutableDateTime28 = instant27.toMutableDateTime();
        boolean boolean29 = dateTime22.isEqual((org.joda.time.ReadableInstant) instant27);
        int int30 = dateTime22.getDayOfYear();
        long long31 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime22.withMillisOfDay(100);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = dateTime34.minusYears((int) ' ');
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime34.toMutableDateTime();
        mutableDateTime37.setMillisOfSecond(2);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod43 = mutablePeriod42.copy();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.yearOfCentury();
        org.joda.time.Duration duration47 = mutablePeriod43.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod51 = mutablePeriod50.copy();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight.Property property54 = dateMidnight53.yearOfCentury();
        org.joda.time.Duration duration55 = mutablePeriod51.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight53);
        boolean boolean56 = duration47.isEqual((org.joda.time.ReadableDuration) duration55);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod60 = mutablePeriod59.copy();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(chronology61);
        org.joda.time.DateMidnight.Property property63 = dateMidnight62.yearOfCentury();
        org.joda.time.Duration duration64 = mutablePeriod60.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight62);
        boolean boolean65 = duration55.isShorterThan((org.joda.time.ReadableDuration) duration64);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType67 = periodType66.withWeeksRemoved();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime37, (org.joda.time.ReadableDuration) duration64, periodType67);
        org.joda.time.DateTime dateTime69 = dateTime22.plus((org.joda.time.ReadableDuration) duration64);
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime();
        int int71 = mutableDateTime70.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone74);
        org.joda.time.DateTime dateTime76 = dateTime75.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType78 = periodType77.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime70, (org.joda.time.ReadableInstant) dateTime75, periodType78);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod83 = mutablePeriod82.copy();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.DateMidnight dateMidnight85 = new org.joda.time.DateMidnight(chronology84);
        org.joda.time.DateMidnight.Property property86 = dateMidnight85.yearOfCentury();
        org.joda.time.Duration duration87 = mutablePeriod83.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight85);
        mutablePeriod79.setPeriod((org.joda.time.ReadableDuration) duration87);
        boolean boolean89 = duration64.isEqual((org.joda.time.ReadableDuration) duration87);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime21.plus((org.joda.time.ReadableDuration) duration64);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration64);
        mutableDateTime0.add((long) 878);
        org.joda.time.MutableDateTime.Property property94 = mutableDateTime0.millisOfSecond();
        int int95 = mutableDateTime0.getEra();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 873L + "'", long12 == 873L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 21 + "'", int26 == 21);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645455314873L + "'", long31 == 1645455314873L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(mutablePeriod60);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 21 + "'", int71 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(mutablePeriod83);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test11417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11417");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime3.getZone();
        org.joda.time.DateTime dateTime7 = dateTime3.withEarlierOffsetAtOverlap();
        int int8 = dateTime3.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test11418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11418");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 1967);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusSeconds(15);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay1.minusMinutes(625);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.plusMinutes(17);
        org.joda.time.DateTime dateTime8 = timeOfDay1.toDateTimeToday();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test11419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11419");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime9 = property6.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime11 = property6.add((long) 1);
        mutableDateTime11.addWeekyears(24);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test11420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11420");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = timeOfDay10.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusHours((-1));
        org.joda.time.Chronology chronology14 = timeOfDay13.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        long long21 = chronology14.set((org.joda.time.ReadablePartial) timeOfDay17, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(chronology14);
        org.joda.time.DateTime dateTime23 = dateTime4.toDateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField24 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = chronology14.millisOfDay();
        org.joda.time.DurationField durationField26 = chronology14.centuries();
        org.joda.time.DateTimeField dateTimeField27 = chronology14.millisOfSecond();
        org.joda.time.DurationField durationField28 = chronology14.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-86399999L) + "'", long21 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test11421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11421");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.property(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime6 = property4.addWrapFieldToCopy(2022);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.DateTime dateTime8 = localDateTime6.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 14 + "'", int7 == 14);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test11422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11422");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) timeOfDay11, (long) (byte) -1);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay11.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay11.withMillisOfSecond(17);
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.millisOfSecond();
        org.joda.time.DurationField durationField20 = property19.getRangeDurationField();
        int int21 = property19.get();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86399999L) + "'", long15 == (-86399999L));
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 17 + "'", int21 == 17);
    }

    @Test
    public void test11423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11423");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.era();
        java.lang.String str3 = dateMidnight1.toString();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withDurationAdded((-1L), 20);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.monthOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime7, (org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight6.plus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod17 = mutablePeriod16.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = timeOfDay24.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay24.plusHours((-1));
        org.joda.time.Chronology chronology28 = timeOfDay27.getChronology();
        mutablePeriod16.setPeriod((long) (byte) 1, 845L, chronology28);
        mutablePeriod16.setDays((int) 'a');
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight13.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone35);
        org.joda.time.DateTime dateTime37 = dateTime36.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime37.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.year();
        org.joda.time.MutableDateTime mutableDateTime40 = property39.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime42 = property39.add(799L);
        org.joda.time.MutableDateTime mutableDateTime44 = property39.set("58");
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone47);
        org.joda.time.DateTime dateTime49 = dateTime48.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime49.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime50.year();
        org.joda.time.MutableDateTime mutableDateTime53 = property51.addWrapField(6);
        mutableDateTime53.addDays((int) (byte) -1);
        int int56 = mutableDateTime53.getYear();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone59);
        org.joda.time.DateTime dateTime61 = dateTime60.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime61.toMutableDateTime();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.TimeOfDay timeOfDay65 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.TimeOfDay timeOfDay67 = timeOfDay65.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = timeOfDay67.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay70 = timeOfDay67.plusHours((-1));
        org.joda.time.Chronology chronology71 = timeOfDay70.getChronology();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.TimeOfDay timeOfDay74 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.TimeOfDay timeOfDay76 = timeOfDay74.withChronologyRetainFields(chronology75);
        long long78 = chronology71.set((org.joda.time.ReadablePartial) timeOfDay74, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay79 = new org.joda.time.TimeOfDay(chronology71);
        org.joda.time.DateTime dateTime80 = dateTime61.toDateTime(chronology71);
        org.joda.time.DateTimeField dateTimeField81 = chronology71.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = dateTimeField81.getType();
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime53.property(dateTimeFieldType82);
        int int84 = mutableDateTime44.get(dateTimeFieldType82);
        org.joda.time.DateMidnight.Property property85 = dateMidnight32.property(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str3, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1975 + "'", int56 == 1975);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(timeOfDay74);
        org.junit.Assert.assertNotNull(timeOfDay76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-86399999L) + "'", long78 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(property85);
    }

    @Test
    public void test11424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11424");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        org.joda.time.YearMonthDay yearMonthDay4 = property3.withMinimumValue();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = property3.getAsText(locale5);
        org.joda.time.YearMonthDay yearMonthDay7 = property3.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay8 = property3.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay10 = property3.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusMonths(0);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
    }

    @Test
    public void test11425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11425");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int5 = dateTimeZone3.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime0.toMutableDateTime(dateTimeZone3);
        mutableDateTime6.add(803L);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime6.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setDateTime(2955, 3000, 794, 319, 53251426, 75, 31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 319 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test11426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11426");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime5 = property2.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property6 = localTime5.minuteOfHour();
        org.joda.time.LocalTime localTime8 = localTime5.plusHours(5);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfDay();
        org.joda.time.LocalTime localTime12 = property11.withMaximumValue();
        int int13 = property11.getMaximumValue();
        org.joda.time.LocalTime localTime14 = property11.getLocalTime();
        org.joda.time.LocalTime localTime15 = localTime8.withFields((org.joda.time.ReadablePartial) localTime14);
        org.joda.time.LocalTime.Property property16 = localTime14.millisOfDay();
        org.joda.time.LocalTime localTime17 = property16.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 86399999 + "'", int13 == 86399999);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test11427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11427");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(9);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '4');
        org.joda.time.LocalDate localDate6 = localDate3.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDate.Property property7 = localDate3.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.withMaximumValue();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test11428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11428");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod8 = mutablePeriod7.copy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = timeOfDay15.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay15.plusHours((-1));
        org.joda.time.Chronology chronology19 = timeOfDay18.getChronology();
        mutablePeriod7.setPeriod((long) (byte) 1, 845L, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DurationField durationField22 = chronology19.weekyears();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((-1L), (long) 20, periodType4, chronology19);
        int int24 = periodType4.size();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.yearOfCentury();
        org.joda.time.DateMidnight.Property property28 = dateMidnight26.dayOfYear();
        org.joda.time.DurationField durationField29 = property28.getDurationField();
        org.joda.time.DurationFieldType durationFieldType30 = durationField29.getType();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone34);
        org.joda.time.DateTime dateTime36 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime36.toMutableDateTime();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.TimeOfDay timeOfDay40 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay40.withChronologyRetainFields(chronology41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = timeOfDay42.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay42.plusHours((-1));
        org.joda.time.Chronology chronology46 = timeOfDay45.getChronology();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.TimeOfDay timeOfDay49 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay49.withChronologyRetainFields(chronology50);
        long long53 = chronology46.set((org.joda.time.ReadablePartial) timeOfDay49, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay54 = new org.joda.time.TimeOfDay(chronology46);
        org.joda.time.DateTime dateTime55 = dateTime36.toDateTime(chronology46);
        org.joda.time.DateTimeField dateTimeField56 = chronology46.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) 1, chronology46);
        boolean boolean58 = durationFieldType30.isSupported(chronology46);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(628L, 1645455311862L, periodType4, chronology46);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-86399999L) + "'", long53 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test11429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11429");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 40);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType4 = localDateTime2.getFieldType(2122);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2122");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
    }

    @Test
    public void test11430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11430");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        int int6 = localDateTime2.getValue(2);
        int int7 = localDateTime2.getHourOfDay();
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy(0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21 + "'", int6 == 21);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 14 + "'", int7 == 14);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test11431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11431");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod12 = mutablePeriod11.copy();
        mutablePeriod7.add((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType18 = periodType17.withWeeksRemoved();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight15, readableDuration16, periodType17);
        org.joda.time.Period period21 = period19.withSeconds(0);
        boolean boolean22 = mutablePeriod12.equals((java.lang.Object) period19);
        org.joda.time.Duration duration23 = period19.toStandardDuration();
        org.joda.time.DurationFieldType[] durationFieldTypeArray24 = period19.getFieldTypes();
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.forFields(durationFieldTypeArray24);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(durationFieldTypeArray24);
        org.junit.Assert.assertNotNull(periodType25);
    }

    @Test
    public void test11432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11432");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        int int3 = localDate2.getYearOfCentury();
        org.joda.time.LocalDate.Property property4 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate5 = property4.roundFloorCopy();
        org.joda.time.LocalDate localDate7 = property4.setCopy(22);
        int int8 = localDate7.getYearOfCentury();
        org.joda.time.LocalDate localDate10 = localDate7.plusDays(1900);
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(892);
        int int13 = localDate7.size();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 69 + "'", int3 == 69);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test11433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11433");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = mutablePeriod2.copy();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.yearOfCentury();
        org.joda.time.Duration duration7 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight5);
        mutablePeriod3.setPeriod((-1), 0, (int) 'a', (int) '4', 14, (int) 'x', (int) (short) 0, (int) (byte) -1);
        int int17 = mutablePeriod3.getDays();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateTime dateTime24 = dateTime23.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime24.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.year();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.addWrapField(6);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        org.joda.time.MutableDateTime mutableDateTime31 = property26.set("1", locale30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime31.set(dateTimeFieldType32, 23);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        int int36 = mutableDateTime35.getDayOfMonth();
        org.joda.time.Instant instant37 = mutableDateTime35.toInstant();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime35.yearOfEra();
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property41 = localTime40.millisOfDay();
        org.joda.time.Chronology chronology42 = localTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.halfdayOfDay();
        mutableDateTime35.setChronology(chronology42);
        mutableDateTime31.setChronology(chronology42);
        org.joda.time.DateTimeField dateTimeField46 = chronology42.centuryOfEra();
        mutablePeriod3.setPeriod((long) 39, 45L, chronology42);
        mutablePeriod3.addDays(0);
        int int50 = mutablePeriod3.getDays();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 21 + "'", int36 == 21);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test11434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11434");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        mutableDateTime0.setDayOfMonth((int) (short) 10);
        mutableDateTime0.setMillis(0L);
        int int6 = mutableDateTime0.getEra();
        mutableDateTime0.addHours(19);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test11435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11435");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.DateTime.Property property6 = dateTime4.year();
        org.joda.time.DateTime dateTime8 = property6.setCopy((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = property6.roundFloorCopy();
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime12 = property10.addToCopy(3L);
        org.joda.time.DateTime dateTime14 = dateTime12.plus(951091200000L);
        org.joda.time.DateTime.Property property15 = dateTime12.era();
        org.joda.time.DateTime dateTime16 = property15.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test11436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11436");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.era();
        org.joda.time.DateMidnight dateMidnight3 = property2.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight4 = property2.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight5 = property2.roundHalfCeilingCopy();
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.era();
        java.util.Locale locale8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight9 = property6.setCopy("", locale8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test11437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11437");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(dateTimeZone1);
        int int3 = yearMonth2.getYear();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period7 = period5.plusHours((int) '#');
        org.joda.time.Period period8 = period5.toPeriod();
        org.joda.time.YearMonth yearMonth9 = yearMonth2.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears(887);
        org.joda.time.YearMonth.Property property12 = yearMonth9.monthOfYear();
        int int13 = property12.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        org.joda.time.DateTimeField dateTimeField15 = property12.getField();
        int int16 = property12.get();
        org.joda.time.DateTimeField dateTimeField17 = property12.getField();
        java.util.Locale locale21 = new java.util.Locale("2022-02-21T14:50:52.409Z", "");
        java.lang.String str22 = dateTimeField17.getAsShortText(1645455050708L, locale21);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals(locale21.toString(), "2022-02-21t14:50:52.409z");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Feb" + "'", str22, "Feb");
    }

    @Test
    public void test11438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11438");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType1 = null;
        boolean boolean2 = periodType0.isSupported(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.Period period4 = mutablePeriod3.toPeriod();
        mutablePeriod3.setMinutes(213);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test11439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11439");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(9);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '4');
        org.joda.time.LocalDate localDate6 = localDate3.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDate.Property property7 = localDate3.centuryOfEra();
        org.joda.time.LocalDate localDate9 = property7.setCopy(58);
        org.joda.time.LocalDate localDate11 = localDate9.minusDays(0);
        int int12 = localDate11.getDayOfMonth();
        org.joda.time.LocalDate.Property property13 = localDate11.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Interval interval15 = localDate11.toInterval(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate.Property property18 = localDate17.era();
        int int19 = localDate11.compareTo((org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate localDate21 = localDate11.plusMonths((int) '#');
        org.joda.time.DateTime dateTime22 = localDate21.toDateTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = dateTime22.withDayOfYear(417);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 417 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test11440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11440");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(11, (int) ' ');
        java.util.Date date9 = new java.util.Date(58, 52, 2022, (int) (byte) 10, 21);
        date9.setMonth(0);
        calendar0.setTime(date9);
        org.joda.time.YearMonthDay yearMonthDay13 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        int int14 = calendar0.getFirstDayOfWeek();
        calendar0.setTimeInMillis(1645454846663L);
        int int18 = calendar0.getMinimum(6);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = calendar0.getActualMinimum(2869);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2869");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645454846663,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Standard\",offset=7,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=26,MILLISECOND=670,ZONE_OFFSET=7,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 12 10:21:00 GMT+00:00 1967");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test11441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11441");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((-325), (-31), 90);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -325 for hourOfDay must not be smaller than 0");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11442");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(117448L, periodType2);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 0, 0L);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period13 = period11.withPeriodType(periodType12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime18.toMutableDateTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = timeOfDay24.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay24.plusHours((-1));
        org.joda.time.Chronology chronology28 = timeOfDay27.getChronology();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.TimeOfDay timeOfDay31 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay31.withChronologyRetainFields(chronology32);
        long long35 = chronology28.set((org.joda.time.ReadablePartial) timeOfDay31, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(chronology28);
        org.joda.time.DateTime dateTime37 = dateTime18.toDateTime(chronology28);
        org.joda.time.DateTimeField dateTimeField38 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField39 = chronology28.centuries();
        org.joda.time.DateTimeField dateTimeField40 = chronology28.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 'a', (long) 7, periodType12, chronology28);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) '4', chronology28);
        org.joda.time.Period period43 = new org.joda.time.Period(58L, periodType5, chronology28);
        org.joda.time.Period period44 = new org.joda.time.Period(1645487999901L, periodType2, chronology28);
        org.joda.time.Weeks weeks45 = period44.toStandardWeeks();
        org.joda.time.Duration duration46 = period44.toStandardDuration();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-86399999L) + "'", long35 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(weeks45);
        org.junit.Assert.assertNotNull(duration46);
    }

    @Test
    public void test11443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11443");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.standard();
        java.lang.String str1 = periodType0.getName();
        org.joda.time.PeriodType periodType2 = periodType0.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(periodType2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.millis();
        boolean boolean5 = mutablePeriod3.isSupported(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod8.copy();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay16.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay16.plusHours((-1));
        org.joda.time.Chronology chronology20 = timeOfDay19.getChronology();
        mutablePeriod8.setPeriod((long) (byte) 1, 845L, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.dayOfYear();
        org.joda.time.DurationField durationField23 = chronology20.weekyears();
        org.joda.time.DurationField durationField24 = chronology20.hours();
        org.joda.time.DurationField durationField25 = durationFieldType4.getField(chronology20);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(184L);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.weekyears();
        int int29 = mutablePeriod27.get(durationFieldType28);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime();
        int int31 = mutableDateTime30.getDayOfMonth();
        org.joda.time.Instant instant32 = mutableDateTime30.toInstant();
        org.joda.time.MutableDateTime mutableDateTime33 = instant32.toMutableDateTime();
        org.joda.time.Chronology chronology34 = mutableDateTime33.getChronology();
        org.joda.time.DurationField durationField35 = durationFieldType28.getField(chronology34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((java.lang.Object) chronology20, chronology34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Standard" + "'", str1, "Standard");
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 21 + "'", int31 == 21);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test11444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11444");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.add(818);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.parse("21");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int9 = dateTimeZone7.getOffset(0L);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime16 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime18 = dateTime16.plusSeconds((int) (short) 10);
        int int19 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime16);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance();
        calendar20.add(11, (int) ' ');
        java.util.Date date29 = new java.util.Date(58, 52, 2022, (int) (byte) 10, 21);
        date29.setMonth(0);
        calendar20.setTime(date29);
        boolean boolean33 = dateTime10.equals((java.lang.Object) calendar20);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime10.getZone();
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime5, dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime5.minusMillis(0);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone40);
        int int42 = dateTime41.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = dateTime41.toDateTime(dateTimeZone44);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(chronology49);
        org.joda.time.DateMidnight.Property property51 = dateMidnight50.dayOfYear();
        org.joda.time.DateMidnight dateMidnight52 = property51.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight.Property property54 = dateMidnight52.property(dateTimeFieldType53);
        org.joda.time.DateTime.Property property55 = dateTime48.property(dateTimeFieldType53);
        int int56 = dateTime5.get(dateTimeFieldType53);
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType53.getRangeDurationType();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime3.property(dateTimeFieldType53);
        org.joda.time.MutableDateTime mutableDateTime59 = property58.roundCeiling();
        java.lang.Object obj61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(obj61, dateTimeZone62);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.secondOfMinute();
        long long65 = property64.remainder();
        java.util.Locale locale66 = java.util.Locale.ENGLISH;
        int int67 = property64.getMaximumShortTextLength(locale66);
        java.util.Locale locale68 = locale66.stripExtensions();
        java.lang.String str69 = locale66.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime70 = property58.set("", locale66);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-93706740007,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Standard\",offset=7,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1967,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=12,DAY_OF_YEAR=12,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=21,SECOND=0,MILLISECOND=0,ZONE_OFFSET=7,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 12 10:21:00 GMT+00:00 1967");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 21 + "'", int56 == 21);
        org.junit.Assert.assertNull(durationFieldType57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(property64);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 828L + "'", long65 == 828L);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
    }

    @Test
    public void test11445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11445");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.era();
        org.joda.time.DateMidnight dateMidnight3 = property2.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight4 = property2.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight5 = property2.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusDays(1);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.minusDays(896);
        java.util.GregorianCalendar gregorianCalendar10 = dateMidnight9.toGregorianCalendar();
        org.joda.time.YearMonth yearMonth11 = org.joda.time.YearMonth.fromCalendarFields((java.util.Calendar) gregorianCalendar10);
        gregorianCalendar10.set(0, 294, 47, 2023, 2598, 2023);
        java.util.Date date19 = gregorianCalendar10.getTime();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Sat Nov 10 02:51:43 GMT+00:00 25");
    }

    @Test
    public void test11446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11446");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.LocalDateTime localDateTime5 = property3.getLocalDateTime();
        boolean boolean7 = property3.equals((java.lang.Object) 1.0f);
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category8, locale9);
        int int11 = property3.getMaximumTextLength(locale9);
        java.lang.String str12 = locale9.getVariant();
        java.lang.String str13 = locale9.getCountry();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone16);
        int int18 = dateTime17.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime17.toDateTime(dateTimeZone20);
        org.joda.time.DateTime.Property property23 = dateTime17.weekyear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateTime dateTime28 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTime();
        org.joda.time.DateTime.Property property30 = dateTime28.year();
        org.joda.time.DateTime dateTime31 = property30.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight32 = dateTime31.toDateMidnight();
        int int33 = property23.compareTo((org.joda.time.ReadableInstant) dateMidnight32);
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.lang.Object obj35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(obj35, dateTimeZone36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.secondOfMinute();
        long long39 = property38.remainder();
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        int int41 = property38.getMaximumShortTextLength(locale40);
        java.util.Locale locale44 = new java.util.Locale("hi!", "hi!");
        java.lang.String str45 = locale44.getCountry();
        java.lang.String str46 = locale40.getDisplayVariant(locale44);
        java.lang.String str47 = locale34.getDisplayLanguage(locale40);
        java.lang.String str48 = property23.getAsText(locale40);
        java.lang.String str49 = locale9.getDisplayVariant(locale40);
        java.lang.String str50 = locale9.getDisplayLanguage();
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 920L + "'", long4 == 920L);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CN" + "'", str13, "CN");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(property38);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 920L + "'", long39 == 920L);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertEquals(locale44.toString(), "hi!_HI!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "HI!" + "'", str45, "HI!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Chinese" + "'", str47, "Chinese");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970" + "'", str48, "1970");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u4e2d\u6587" + "'", str50, "\u4e2d\u6587");
    }

    @Test
    public void test11447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11447");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.DateTime.Property property6 = dateTime4.year();
        org.joda.time.DateTime dateTime8 = property6.setCopy((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = property6.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = property6.addToCopy(53251426);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime15.toMutableDateTime(dateTimeZone17);
        long long22 = dateTimeZone17.adjustOffset((long) 184, false);
        org.joda.time.DateTime dateTime23 = dateTime11.toDateTime(dateTimeZone17);
        int int24 = dateTime11.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 184L + "'", long22 == 184L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 53253396 + "'", int24 == 53253396);
    }

    @Test
    public void test11448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11448");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("21", (double) 214L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=214.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11449");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minusMinutes(10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = timeOfDay4.getFieldTypes();
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period10 = period8.minusHours(969);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay4.withPeriodAdded((org.joda.time.ReadablePeriod) period10, 2022);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = timeOfDay4.getFieldTypes();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
    }

    @Test
    public void test11450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11450");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(2022, 7, 5, 4);
        java.util.Calendar.Builder builder6 = new java.util.Calendar.Builder();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableDuration10, (org.joda.time.ReadableInstant) mutableDateTime11);
        int[] intArray14 = chronology9.get((org.joda.time.ReadablePeriod) mutablePeriod12, (long) 100);
        java.util.Calendar.Builder builder15 = builder6.setFields(intArray14);
        java.util.Calendar.Builder builder16 = builder0.setFields(intArray14);
        java.util.Calendar.Builder builder18 = builder0.setLenient(true);
        java.util.Calendar.Builder builder21 = builder0.set((int) (short) 0, 9);
        java.util.Calendar.Builder builder25 = builder0.setTimeOfDay(53683789, 2100, 3000);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test11451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11451");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        java.lang.Object obj5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(obj5, dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.secondOfMinute();
        org.joda.time.DateTime dateTime9 = dateTime3.withFields((org.joda.time.ReadablePartial) localDateTime7);
        java.lang.Object obj10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(obj10, dateTimeZone11);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod16 = mutablePeriod15.copy();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.yearOfCentury();
        org.joda.time.Duration duration20 = mutablePeriod16.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod24 = mutablePeriod23.copy();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.yearOfCentury();
        org.joda.time.Duration duration28 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight26);
        boolean boolean29 = duration20.isEqual((org.joda.time.ReadableDuration) duration28);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime12.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime7.plus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.dayOfYear();
        org.joda.time.DateMidnight dateMidnight35 = property34.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight.Property property37 = dateMidnight35.property(dateTimeFieldType36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime31.property(dateTimeFieldType36);
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = property38.getAsText(locale39);
        org.joda.time.LocalDateTime localDateTime41 = property38.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withWeekOfWeekyear(12719);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 12719 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022" + "'", str40, "2022");
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test11452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11452");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("ja");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale locale7 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.util.Locale locale11 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray12 = new java.util.Locale[] { locale7, locale8, locale11 };
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.Locale.FilteringMode filteringMode15 = null;
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList13, filteringMode15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale22 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.util.Locale locale26 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray27 = new java.util.Locale[] { locale22, locale23, locale26 };
        java.util.ArrayList<java.util.Locale> localeList28 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList28, localeArray27);
        java.util.Locale.FilteringMode filteringMode30 = null;
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList28, filteringMode30);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.lang.Character[] charArray41 = new java.lang.Character[] { '#', 'x', '#', 'u', ' ', '#' };
        java.util.LinkedHashSet<java.lang.Character> charSet42 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet42, charArray41);
        java.lang.Object[] objArray44 = charSet42.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale locale50 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.util.Locale locale54 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale50, locale51, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = null;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.lang.String[] strArray70 = new java.lang.String[] { "1", "12 Nov 1900 10:21:00 GMT", "PeriodType[Standard]", "", "", "1967-11-12 10:21:00", "2022-02-21T00:00:00.000Z", "PeriodType[Standard]", "\u4e2d\u6587", "PeriodType[Standard]" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strList71);
        java.util.Locale.LanguageRange[] languageRangeArray74 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList75 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList75, languageRangeArray74);
        java.util.Locale locale79 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale80 = java.util.Locale.FRANCE;
        java.util.Locale locale83 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray84 = new java.util.Locale[] { locale79, locale80, locale83 };
        java.util.ArrayList<java.util.Locale> localeList85 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList85, localeArray84);
        java.util.Locale.FilteringMode filteringMode87 = null;
        java.util.List<java.util.Locale> localeList88 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList75, (java.util.Collection<java.util.Locale>) localeList85, filteringMode87);
        java.util.Locale.FilteringMode filteringMode89 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList90 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList88, filteringMode89);
        boolean boolean91 = charSet42.containsAll((java.util.Collection<java.util.Locale>) localeList88);
        java.util.Locale.FilteringMode filteringMode92 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList93 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList88, filteringMode92);
        java.util.List<java.util.Locale> localeList94 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList31, filteringMode92);
        java.util.Locale locale95 = java.util.Locale.lookup(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList94);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale11.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[#, x, u,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[#, x, u,  ]");
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals(locale50.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(languageRangeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals(locale79.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale83.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(localeList88);
        org.junit.Assert.assertTrue("'" + filteringMode89 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode89.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + filteringMode92 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode92.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList93);
        org.junit.Assert.assertNotNull(localeList94);
        org.junit.Assert.assertNull(locale95);
    }

    @Test
    public void test11453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11453");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(300);
        org.joda.time.Period period3 = period1.minusSeconds(2032);
        org.joda.time.Period period5 = period1.minusMonths(22);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test11454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11454");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(dateTimeZone1);
        org.joda.time.YearMonth yearMonth4 = yearMonth2.minusMonths((int) (byte) 100);
        org.joda.time.YearMonth yearMonth6 = yearMonth2.plusYears(100);
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 0, 0L);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period11 = period9.withPeriodType(periodType10);
        org.joda.time.Period period13 = period9.minusMinutes((int) 'x');
        org.joda.time.YearMonth yearMonth14 = yearMonth2.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.YearMonth yearMonth16 = yearMonth2.withYear(6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = yearMonth16.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(yearMonth4);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
    }

    @Test
    public void test11455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11455");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(0, 53419337);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53419337 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11456");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = mutablePeriod2.copy();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.yearOfCentury();
        org.joda.time.Duration duration7 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        int int9 = mutableDateTime8.getDayOfMonth();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate13 = localDate11.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int15 = localDate11.get(dateTimeFieldType14);
        mutableDateTime8.set(dateTimeFieldType14, 2);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime8.add(durationFieldType18, (int) '4');
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.withFieldAdded(durationFieldType18, 17);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime23, (org.joda.time.ReadableInstant) dateMidnight26);
        int int29 = dateMidnight26.getMinuteOfHour();
        org.joda.time.Instant instant30 = dateMidnight26.toInstant();
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.dayOfYear();
        org.joda.time.DateMidnight dateMidnight35 = property34.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight.Property property37 = dateMidnight35.property(dateTimeFieldType36);
        org.joda.time.DateMidnight.Property property38 = dateMidnight35.year();
        org.joda.time.Duration duration39 = period31.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight26, (org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateMidnight.Property property41 = dateMidnight26.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight26.plus(514L);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight26.minus((long) 2022);
        boolean boolean46 = dateMidnight5.isEqual((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight5.withWeekyear(2084);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight5.withCenturyOfEra((int) (short) 1);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight50);
    }

    @Test
    public void test11457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11457");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate5 = localDate3.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int7 = localDate3.get(dateTimeFieldType6);
        mutableDateTime0.set(dateTimeFieldType6, 2);
        int int10 = mutableDateTime0.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime0.millisOfDay();
        int int12 = mutableDateTime0.getCenturyOfEra();
        mutableDateTime0.add(259200300L);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
    }

    @Test
    public void test11458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11458");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval4 = yearMonthDay0.toInterval();
        org.joda.time.Period period5 = interval4.toPeriod();
        org.joda.time.Interval interval6 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = interval4.toMutableInterval();
        org.joda.time.Period period8 = interval4.toPeriod();
        org.joda.time.MutableInterval mutableInterval9 = interval4.toMutableInterval();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval14 = yearMonthDay10.toInterval();
        org.joda.time.Period period15 = interval14.toPeriod();
        org.joda.time.Interval interval16 = interval14.toInterval();
        boolean boolean17 = mutableInterval9.isAfter((org.joda.time.ReadableInterval) interval16);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateTime dateTime24 = dateTime23.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime24.toMutableDateTime();
        org.joda.time.DateTime.Property property26 = dateTime24.year();
        org.joda.time.DateTime dateTime28 = dateTime24.withYear(1970);
        boolean boolean29 = charSet19.equals((java.lang.Object) dateTime28);
        boolean boolean30 = interval16.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime();
        int int32 = mutableDateTime31.getDayOfMonth();
        org.joda.time.Instant instant33 = mutableDateTime31.toInstant();
        boolean boolean35 = mutableDateTime31.isBefore((long) 2);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime31.monthOfYear();
        boolean boolean38 = mutableDateTime31.isBefore(909L);
        org.joda.time.Interval interval39 = interval16.withEnd((org.joda.time.ReadableInstant) mutableDateTime31);
        long long40 = interval16.toDurationMillis();
        boolean boolean42 = interval16.contains(1645454971118L);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 21 + "'", int32 == 21);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 86400000L + "'", long40 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test11459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11459");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 969);
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = dateTimeFormatter2.parseDateTime("DateTimeField[secondOfDay]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11460");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        int int6 = dateTime4.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property7 = dateTime4.yearOfEra();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = property7.setCopy("GMT+00:52");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"GMT+00:52\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test11461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11461");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(9);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '4');
        org.joda.time.LocalDate localDate6 = localDate3.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType15 = periodType14.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime7, (org.joda.time.ReadableInstant) dateTime12, periodType15);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod19.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.yearOfCentury();
        org.joda.time.Duration duration24 = mutablePeriod20.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        mutablePeriod16.setPeriod((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = period5.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Period period27 = period5.toPeriod();
        org.joda.time.Period period28 = period27.normalizedStandard();
        java.util.Date date34 = new java.util.Date(58, 52, 2022, (int) (byte) 10, 21);
        java.lang.String str35 = date34.toLocaleString();
        date34.setMinutes(0);
        boolean boolean38 = period27.equals((java.lang.Object) date34);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Sun Nov 12 10:00:00 GMT+00:00 1967");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1967-11-12 10:21:00" + "'", str35, "1967-11-12 10:21:00");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test11462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11462");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(845L);
        long long3 = calendar0.getTimeInMillis();
        boolean boolean5 = calendar0.after((java.lang.Object) 818L);
        java.time.Instant instant6 = calendar0.toInstant();
        java.lang.Object obj7 = null;
        boolean boolean8 = calendar0.before(obj7);
        java.util.Date date12 = new java.util.Date(0, (int) '4', 1);
        calendar0.setTime(date12);
        org.joda.time.YearMonthDay yearMonthDay14 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        calendar0.set(818, 8, 2598);
        calendar0.roll((int) (short) 10, false);
        calendar0.set(45, 6, 37, 768, (-55), 36);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Standard\",offset=7,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=45,MONTH=6,WEEK_OF_YEAR=41,WEEK_OF_MONTH=2,DAY_OF_MONTH=37,DAY_OF_YEAR=284,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=11,HOUR_OF_DAY=768,MINUTE=-55,SECOND=36,MILLISECOND=0,ZONE_OFFSET=7,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 845L + "'", long3 == 845L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Sun May 01 00:00:00 GMT+00:00 1904");
        org.junit.Assert.assertNotNull(yearMonthDay14);
    }

    @Test
    public void test11463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11463");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay0.withDayOfMonth(23);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay5.withYear(53305126);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay5.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay5.minusDays(818);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
    }

    @Test
    public void test11464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11464");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusYears((int) ' ');
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        int int4 = mutableDateTime3.getDayOfMonth();
        org.joda.time.Instant instant5 = mutableDateTime3.toInstant();
        org.joda.time.MutableDateTime mutableDateTime6 = instant5.toMutableDateTime();
        boolean boolean7 = dateTime0.isEqual((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Instant instant9 = instant5.plus((long) 15);
        org.joda.time.DateTime dateTime10 = instant5.toDateTime();
        int int11 = dateTime10.getMonthOfYear();
        int int12 = dateTime10.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
    }

    @Test
    public void test11465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11465");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfDay();
        org.joda.time.Chronology chronology9 = localTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.halfdayOfDay();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) (-292275054), 943L, periodType4, chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth(931, 53686415, chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53686415 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test11466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11466");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight1, readableDuration2, periodType3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.era();
        java.lang.String str9 = dateMidnight7.toString();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableInstant) dateMidnight7);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight7.withFieldAdded(durationFieldType11, (-1));
        org.joda.time.DateMidnight.Property property14 = dateMidnight7.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int16 = mutableDateTime15.getDayOfMonth();
        int int17 = mutableDateTime15.getMinuteOfHour();
        int int18 = mutableDateTime15.getWeekOfWeekyear();
        java.util.Date date19 = mutableDateTime15.toDate();
        int int20 = mutableDateTime15.getHourOfDay();
        boolean boolean21 = dateMidnight7.isEqual((org.joda.time.ReadableInstant) mutableDateTime15);
        java.lang.Object obj22 = mutableDateTime15.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.TimeOfDay timeOfDay25 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = timeOfDay27.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay27.plusHours((-1));
        org.joda.time.Chronology chronology31 = timeOfDay30.getChronology();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.TimeOfDay timeOfDay34 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.withChronologyRetainFields(chronology35);
        long long38 = chronology31.set((org.joda.time.ReadablePartial) timeOfDay34, (long) (byte) -1);
        org.joda.time.TimeOfDay.Property property39 = timeOfDay34.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay41 = property39.addWrapFieldToCopy(14);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        int int43 = property39.getMaximumShortTextLength(locale42);
        java.lang.String str44 = property39.getAsString();
        org.joda.time.TimeOfDay timeOfDay46 = property39.addNoWrapToCopy(48);
        org.joda.time.TimeOfDay timeOfDay47 = property39.withMaximumValue();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.TimeOfDay timeOfDay50 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = timeOfDay52.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay52.plusHours((-1));
        org.joda.time.Chronology chronology56 = timeOfDay55.getChronology();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.TimeOfDay timeOfDay59 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.TimeOfDay timeOfDay61 = timeOfDay59.withChronologyRetainFields(chronology60);
        long long63 = chronology56.set((org.joda.time.ReadablePartial) timeOfDay59, (long) (byte) -1);
        org.joda.time.TimeOfDay.Property property64 = timeOfDay59.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay66 = property64.addToCopy(23);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property64.getFieldType();
        org.joda.time.TimeOfDay.Property property68 = timeOfDay47.property(dateTimeFieldType67);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime15.property(dateTimeFieldType67);
        org.joda.time.DurationField durationField70 = property69.getLeapDurationField();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str9, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21 + "'", int16 == 21);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 55 + "'", int17 == 55);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Mon Feb 21 14:55:16 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 14 + "'", int20 == 14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj22);
// flaky:         org.junit.Assert.assertEquals(obj22.toString(), "2022-02-21T14:55:16.685Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "2022-02-21T14:55:16.685Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "2022-02-21T14:55:16.685Z");
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-86399999L) + "'", long38 == (-86399999L));
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-86399999L) + "'", long63 == (-86399999L));
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNull(durationField70);
    }

    @Test
    public void test11467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11467");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.setCopy((int) (short) 10);
        org.joda.time.LocalTime localTime5 = property2.getLocalTime();
        org.joda.time.LocalTime localTime7 = localTime5.minusSeconds(53251426);
        org.joda.time.LocalTime.Property property8 = localTime7.hourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.LocalTime localTime10 = property8.roundCeilingCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test11468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11468");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.add(11, (int) ' ');
        java.util.Date date9 = new java.util.Date(58, 52, 2022, (int) (byte) 10, 21);
        date9.setMonth(0);
        calendar0.setTime(date9);
        org.joda.time.YearMonthDay yearMonthDay13 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        int int14 = calendar0.getFirstDayOfWeek();
        calendar0.setTimeInMillis(1645454846663L);
        int int17 = calendar0.getWeekYear();
        int int19 = calendar0.getMaximum(14);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645454846663,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Standard\",offset=7,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=26,MILLISECOND=670,ZONE_OFFSET=7,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 12 10:21:00 GMT+00:00 1967");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 999 + "'", int19 == 999);
    }

    @Test
    public void test11469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11469");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1645455097611L, (-62135596800000L), periodType2);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = mutablePeriod3.getValue(271);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 271");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test11470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11470");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds(11);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.monthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 788L + "'", long4 == 788L);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test11471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11471");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime5 = property2.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime6 = property2.withMaximumValue();
        org.joda.time.LocalTime localTime7 = property2.roundCeilingCopy();
        org.joda.time.LocalTime localTime9 = localTime7.withMinuteOfHour(7);
        org.joda.time.LocalTime localTime11 = localTime9.minusSeconds(31);
        int int12 = localTime9.getHourOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test11472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11472");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTime dateTime5 = timeOfDay4.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay7.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.plusHours(21);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.plusMillis(3);
        org.joda.time.TimeOfDay.Property property13 = timeOfDay12.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.ReadableInterval readableInterval18 = null;
        mutablePeriod17.add(readableInterval18);
        org.joda.time.PeriodType periodType20 = mutablePeriod17.getPeriodType();
        org.joda.time.PeriodType periodType21 = periodType20.withWeeksRemoved();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = timeOfDay26.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay26.plusHours((-1));
        org.joda.time.TimeOfDay.Property property30 = timeOfDay26.millisOfSecond();
        org.joda.time.DurationField durationField31 = property30.getDurationField();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod35 = mutablePeriod34.copy();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.TimeOfDay timeOfDay40 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay40.withChronologyRetainFields(chronology41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = timeOfDay42.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay42.plusHours((-1));
        org.joda.time.Chronology chronology46 = timeOfDay45.getChronology();
        mutablePeriod34.setPeriod((long) (byte) 1, 845L, chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.dayOfYear();
        org.joda.time.DurationField durationField49 = chronology46.weekyears();
        long long52 = durationField49.add((long) 69, 23);
        int int53 = durationField31.compareTo(durationField49);
        boolean boolean54 = periodType20.equals((java.lang.Object) durationField49);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(2700000L, periodType20);
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay12.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod55, 2084);
        int int58 = timeOfDay12.getSecondOfMinute();
        int int59 = timeOfDay12.getMillisOfSecond();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 726364800069L + "'", long52 == 726364800069L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
    }

    @Test
    public void test11473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11473");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0, 615, (int) (byte) 10, 33);
    }

    @Test
    public void test11474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11474");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        mutableDateTime0.addMinutes(23);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod7 = mutablePeriod6.copy();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = timeOfDay14.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay14.plusHours((-1));
        org.joda.time.Chronology chronology18 = timeOfDay17.getChronology();
        mutablePeriod6.setPeriod((long) (byte) 1, 845L, chronology18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.weeks();
        mutablePeriod6.set(durationFieldType20, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateTime dateTime29 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime29.toMutableDateTime();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.TimeOfDay timeOfDay33 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = timeOfDay35.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay35.plusHours((-1));
        org.joda.time.Chronology chronology39 = timeOfDay38.getChronology();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.TimeOfDay timeOfDay42 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay42.withChronologyRetainFields(chronology43);
        long long46 = chronology39.set((org.joda.time.ReadablePartial) timeOfDay42, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay47 = new org.joda.time.TimeOfDay(chronology39);
        org.joda.time.DateTime dateTime48 = dateTime29.toDateTime(chronology39);
        org.joda.time.DateTimeField dateTimeField49 = chronology39.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) 1, chronology39);
        mutablePeriod6.setPeriod((long) 1969, chronology39);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.millis();
        int int53 = mutablePeriod6.get(durationFieldType52);
        mutablePeriod6.setPeriod(870, 58, 0, 100, 272, 7, 51, 52);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) mutablePeriod6, 6);
        int int65 = mutablePeriod6.getMinutes();
        mutablePeriod6.addHours(50400000);
        java.lang.Object obj68 = mutablePeriod6.clone();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-86399999L) + "'", long46 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 969 + "'", int53 == 969);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 7 + "'", int65 == 7);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "P870Y58M100DT50400272H7M51.052S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "P870Y58M100DT50400272H7M51.052S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "P870Y58M100DT50400272H7M51.052S");
    }

    @Test
    public void test11475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11475");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime5.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.year();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.addWrapField(6);
        mutableDateTime9.addDays((int) (byte) -1);
        int int12 = mutableDateTime9.getYear();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Instant instant14 = dateTime13.toInstant();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime9, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTime dateTime21 = timeOfDay20.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay20.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = timeOfDay23.toDateTimeToday();
        int int25 = dateTime24.getYearOfEra();
        boolean boolean26 = interval15.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = interval15.getStart();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean31 = dateTimeZone29.isStandardOffset((long) 'u');
        org.joda.time.DateTime dateTime32 = dateTime27.withZoneRetainFields(dateTimeZone29);
        org.joda.time.Chronology chronology33 = dateTime27.getChronology();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1975 + "'", int12 == 1975);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
    }

    @Test
    public void test11476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11476");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTime dateTime5 = timeOfDay4.toDateTimeToday();
        org.joda.time.DateTime dateTime7 = dateTime5.plusYears((int) 'u');
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.TimeOfDay timeOfDay9 = dateTime5.toTimeOfDay();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test11477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11477");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate.Property property3 = localDate2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.LocalDate localDate5 = property3.getLocalDate();
        org.joda.time.LocalDate localDate7 = property3.addToCopy(6);
        org.joda.time.LocalDate.Property property8 = localDate7.monthOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test11478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11478");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.minus((long) 4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateTime dateTime11 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime11.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.year();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.MutableDateTime mutableDateTime16 = property13.set(33);
        int int17 = mutableDateTime6.compareTo((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.era();
        org.joda.time.DateMidnight dateMidnight21 = property20.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight22 = property20.getDateMidnight();
        int int23 = dateMidnight22.getSecondOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime24, (org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime();
        int int31 = mutableDateTime30.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone34);
        org.joda.time.DateTime dateTime36 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType38 = periodType37.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime30, (org.joda.time.ReadableInstant) dateTime35, periodType38);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod43 = mutablePeriod42.copy();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.yearOfCentury();
        org.joda.time.Duration duration47 = mutablePeriod43.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight45);
        mutablePeriod39.setPeriod((org.joda.time.ReadableDuration) duration47);
        long long49 = duration47.getMillis();
        mutableDateTime24.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight22.plus((org.joda.time.ReadableDuration) duration47);
        mutableDateTime16.add((org.joda.time.ReadableDuration) duration47);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 21 + "'", int31 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 99L + "'", long49 == 99L);
        org.junit.Assert.assertNotNull(dateMidnight51);
    }

    @Test
    public void test11479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11479");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        org.joda.time.YearMonthDay yearMonthDay5 = property3.addToCopy(0);
        org.joda.time.YearMonthDay yearMonthDay7 = property3.setCopy((int) 'u');
        org.joda.time.YearMonthDay yearMonthDay8 = property3.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay9 = property3.getYearMonthDay();
        org.joda.time.Chronology chronology10 = yearMonthDay9.getChronology();
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime12 = dateTime11.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test11480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11480");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(845L);
        java.util.TimeZone timeZone3 = null;
        calendar0.setTimeZone(timeZone3);
        int int5 = calendar0.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229");
        calendar0.setTimeZone(timeZone7);
        java.time.Instant instant9 = calendar0.toInstant();
        calendar0.roll(11, (int) '4');
        int int13 = calendar0.getWeekYear();
        int int14 = calendar0.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=14400845,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=0,SECOND=0,MILLISECOND=845,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test11481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11481");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        org.joda.time.YearMonthDay yearMonthDay4 = property3.withMinimumValue();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = property3.getAsText(locale5);
        org.joda.time.DurationField durationField7 = property3.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay8 = property3.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField9 = property3.getField();
        int int12 = dateTimeField9.getDifference((long) 899, (long) (-325));
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test11482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11482");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.clear();
    }

    @Test
    public void test11483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11483");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime10 = property6.addWrapField(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Instant instant12 = dateTime11.toInstant();
        int int13 = dateTime11.getDayOfMonth();
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime11.minus((long) 59);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime22.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.year();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.addWrapField(6);
        mutableDateTime26.addDays((int) (byte) -1);
        int int29 = mutableDateTime26.getYear();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Instant instant31 = dateTime30.toInstant();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime26, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime26.copy();
        mutableDateTime33.addWeekyears(1969);
        int int36 = mutableDateTime33.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime33.era();
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        long long39 = instant38.getMillis();
        org.joda.time.DateTime dateTime40 = instant38.toDateTimeISO();
        org.joda.time.DateTime dateTime42 = dateTime40.plusMonths((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime40.getZone();
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        int int45 = mutableDateTime44.getDayOfMonth();
        org.joda.time.Instant instant46 = mutableDateTime44.toInstant();
        boolean boolean48 = mutableDateTime44.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int52 = dateTimeZone50.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime44.setZone(dateTimeZone50);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology56 = localDate55.getChronology();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime57.getZone();
        org.joda.time.MutableDateTime mutableDateTime59 = mutableDateTime44.toMutableDateTime(dateTimeZone58);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(dateTimeZone58);
        long long62 = dateTimeZone43.getMillisKeepLocal(dateTimeZone58, (long) 1969);
        mutableDateTime33.setZone(dateTimeZone58);
        org.joda.time.DateTime dateTime64 = dateTime11.toDateTime(dateTimeZone58);
        mutableDateTime10.setZone(dateTimeZone58);
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime(dateTimeZone58);
        int int67 = mutableDateTime66.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21 + "'", int13 == 21);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1975 + "'", int29 == 1975);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(property37);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645455317240L + "'", long39 == 1645455317240L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 21 + "'", int45 == 21);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1969L + "'", long62 == 1969L);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 21 + "'", int67 == 21);
    }

    @Test
    public void test11484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11484");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        boolean boolean10 = localDateTime8.equals((java.lang.Object) 14);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusDays(10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.centuryOfEra();
        org.joda.time.LocalDateTime.Property property14 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test11485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11485");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property5 = localTime4.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime8 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.LocalTime localTime10 = property9.roundFloorCopy();
        org.joda.time.LocalTime localTime11 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime13 = localTime11.withMinuteOfHour(17);
        org.joda.time.LocalTime localTime15 = localTime11.minusMillis(0);
        org.joda.time.LocalTime localTime17 = localTime15.minusHours(32769);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale23 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Locale locale27 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale23, locale24, locale27 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.Locale.FilteringMode filteringMode31 = null;
        java.util.List<java.util.Locale> localeList32 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList29, filteringMode31);
        java.lang.String[] strArray43 = new java.lang.String[] { "1", "12 Nov 1900 10:21:00 GMT", "PeriodType[Standard]", "", "", "1967-11-12 10:21:00", "2022-02-21T00:00:00.000Z", "PeriodType[Standard]", "\u4e2d\u6587", "PeriodType[Standard]" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale52 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.util.Locale locale56 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray57 = new java.util.Locale[] { locale52, locale53, locale56 };
        java.util.ArrayList<java.util.Locale> localeList58 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList58, localeArray57);
        java.util.Locale.FilteringMode filteringMode60 = null;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList58, filteringMode60);
        java.util.Locale.FilteringMode filteringMode62 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList63 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList61, filteringMode62);
        java.util.stream.Stream<java.util.Locale> localeStream64 = localeList63.stream();
        boolean boolean65 = localTime17.equals((java.lang.Object) localeList63);
        boolean boolean66 = charSet2.retainAll((java.util.Collection<java.util.Locale>) localeList63);
        java.lang.Object[] objArray67 = charSet2.toArray();
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime();
        int int69 = mutableDateTime68.getDayOfMonth();
        org.joda.time.Instant instant70 = mutableDateTime68.toInstant();
        boolean boolean72 = mutableDateTime68.isBefore((long) 2);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime68.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone76);
        org.joda.time.DateTime dateTime78 = dateTime77.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime79 = dateTime78.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime79.year();
        org.joda.time.DateTimeField dateTimeField81 = property80.getField();
        java.util.Locale locale82 = java.util.Locale.PRC;
        java.lang.String str83 = locale82.getDisplayScript();
        java.util.Locale.setDefault(locale82);
        java.lang.String str85 = locale82.getISO3Language();
        java.util.Locale locale86 = java.util.Locale.ENGLISH;
        java.lang.String str87 = locale82.getDisplayScript(locale86);
        int int88 = dateTimeField81.getMaximumShortTextLength(locale86);
        mutableDateTime68.setRounding(dateTimeField81);
        int int90 = mutableDateTime68.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property91 = mutableDateTime68.dayOfYear();
        boolean boolean92 = charSet2.equals((java.lang.Object) property91);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale27.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localeList32);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals(locale52.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale56.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertTrue("'" + filteringMode62 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode62.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList63);
        org.junit.Assert.assertNotNull(localeStream64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 21 + "'", int69 == 21);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "zho" + "'", str85, "zho");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "en");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 9 + "'", int88 == 9);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test11486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11486");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        java.lang.Integer int5 = dateTimeFormatter3.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter6.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant10 = org.joda.time.Instant.parse("540", dateTimeFormatter9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test11487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11487");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229");
        timeZone1.setID("Standard");
        boolean boolean4 = timeZone1.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone1);
        java.util.TimeZone timeZone6 = null;
        boolean boolean7 = timeZone1.hasSameRules(timeZone6);
        java.lang.String str8 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GMT+00:00" + "'", str8, "GMT+00:00");
    }

    @Test
    public void test11488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11488");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        org.joda.time.YearMonthDay yearMonthDay5 = property3.addToCopy(0);
        org.joda.time.YearMonthDay yearMonthDay7 = property3.setCopy((int) 'u');
        org.joda.time.YearMonthDay yearMonthDay8 = property3.getYearMonthDay();
        org.joda.time.DurationField durationField9 = property3.getDurationField();
        long long12 = durationField9.subtract(1932768000949L, 0);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1932768000949L + "'", long12 == 1932768000949L);
    }

    @Test
    public void test11489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11489");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTime dateTime11 = timeOfDay10.toDateTimeToday();
        boolean boolean12 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime5.plus(62055709000L);
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("dayOfWeek");
        java.lang.String str18 = locale17.getISO3Language();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = dateTime5.toString("2022-02-21T14:53:44.740Z", locale17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test11490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11490");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Chronology chronology3 = localDate2.getChronology();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableDuration4, (org.joda.time.ReadableInstant) mutableDateTime5);
        int[] intArray8 = chronology3.get((org.joda.time.ReadablePeriod) mutablePeriod6, (long) 100);
        java.util.Calendar.Builder builder9 = builder0.setFields(intArray8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.year();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.lang.String str19 = locale18.getDisplayScript();
        java.util.Locale.setDefault(locale18);
        java.lang.String str21 = locale18.getISO3Language();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = locale18.getDisplayScript(locale22);
        int int24 = dateTimeField17.getMaximumShortTextLength(locale22);
        java.util.Calendar.Builder builder25 = builder0.setLocale(locale22);
        java.util.Calendar.Builder builder27 = builder25.setLenient(false);
        java.util.Calendar.Builder builder32 = builder25.setTimeOfDay(365, 50400000, 49, (int) 'a');
        java.util.Calendar.Builder builder36 = builder32.setTimeOfDay(2134, 969, 53430301);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zho" + "'", str21, "zho");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test11491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11491");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2027, 1645454849969L);
        org.joda.time.Chronology chronology3 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.halfdayOfDay();
        int int6 = dateTimeField4.getMinimumValue((long) 53692166);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test11492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11492");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        boolean boolean4 = mutableDateTime0.isBefore((long) 2);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateTime dateTime10 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime10.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.year();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        java.util.Locale locale14 = java.util.Locale.PRC;
        java.lang.String str15 = locale14.getDisplayScript();
        java.util.Locale.setDefault(locale14);
        java.lang.String str17 = locale14.getISO3Language();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.lang.String str19 = locale14.getDisplayScript(locale18);
        int int20 = dateTimeField13.getMaximumShortTextLength(locale18);
        mutableDateTime0.setRounding(dateTimeField13);
        int int22 = mutableDateTime0.getSecondOfMinute();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime0.minuteOfDay();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime0.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundHalfEven();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone28);
        int int30 = dateTime29.getDayOfMonth();
        boolean boolean32 = dateTime29.isEqual(463L);
        mutableDateTime25.setMillis((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime37.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime38.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.year();
        org.joda.time.MutableDateTime mutableDateTime42 = property40.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime43 = property40.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime45 = property40.add((long) 1);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.weekyear();
        mutableDateTime45.addMillis(7);
        org.joda.time.Period period50 = org.joda.time.Period.weeks((int) (byte) 10);
        org.joda.time.Period period52 = period50.minusMonths(2);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.TimeOfDay timeOfDay55 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay55.withChronologyRetainFields(chronology56);
        org.joda.time.DateTime dateTime58 = timeOfDay57.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay57.minusHours((int) (byte) 1);
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.lang.String str63 = timeOfDay57.toString("1", locale62);
        org.joda.time.DateTime dateTime64 = timeOfDay57.toDateTimeToday();
        int int65 = dateTime64.getYear();
        org.joda.time.Duration duration66 = period50.toDurationFrom((org.joda.time.ReadableInstant) dateTime64);
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration66);
        org.joda.time.DateTime dateTime69 = dateTime29.withDurationAdded((org.joda.time.ReadableDuration) duration66, 156);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime71 = dateTime69.withSecondOfMinute(85500001);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 85500001 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zho" + "'", str17, "zho");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test11493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11493");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval4 = yearMonthDay0.toInterval();
        org.joda.time.Period period5 = interval4.toPeriod();
        org.joda.time.Interval interval6 = interval4.toInterval();
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.Duration duration8 = interval7.toDuration();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        int int10 = mutableDateTime9.getDayOfMonth();
        int int11 = mutableDateTime9.getMinuteOfHour();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType13 = periodType12.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) mutableDateTime9, periodType12);
        int int15 = mutablePeriod14.getYears();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21 + "'", int10 == 21);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 55 + "'", int11 == 55);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test11494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11494");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.LocalDate localDate6 = property5.withMaximumValue();
        org.joda.time.LocalDate localDate8 = property5.addToCopy((int) 'u');
        int int9 = localDate8.getDayOfMonth();
        org.joda.time.LocalDate localDate11 = localDate8.withCenturyOfEra(1900);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableDateTime13.add(readablePeriod14, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.year();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        long long27 = dateTimeField24.add((long) 21, (long) ' ');
        mutableDateTime13.setRounding(dateTimeField24);
        java.util.Locale.Category category29 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale30 = java.util.Locale.getDefault(category29);
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder31.addUnicodeLocaleAttribute("PT10S");
        java.util.Locale.Builder builder34 = builder31.clearExtensions();
        java.util.Locale.Builder builder35 = builder31.clearExtensions();
        java.util.Locale.Builder builder37 = builder35.removeUnicodeLocaleAttribute("2000");
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str39 = locale38.getDisplayLanguage();
        java.lang.String str40 = locale38.toLanguageTag();
        java.lang.String str41 = locale38.getISO3Language();
        java.util.Locale.Builder builder42 = builder35.setLocale(locale38);
        java.util.Locale.setDefault(category29, locale38);
        int int44 = dateTimeField24.getMaximumShortTextLength(locale38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = localDate11.toString("year", locale38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: r");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1009843200021L + "'", long27 == 1009843200021L);
        org.junit.Assert.assertTrue("'" + category29 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category29.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u4e2d\u6587" + "'", str39, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "zh-TW" + "'", str40, "zh-TW");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zho" + "'", str41, "zho");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
    }

    @Test
    public void test11495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11495");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        int int6 = localDateTime2.getValue(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minusWeeks(47);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays(2022);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withWeekyear(156);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21 + "'", int6 == 21);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test11496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11496");
        org.joda.time.Period period1 = org.joda.time.Period.hours((int) '4');
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test11497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11497");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField11 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.yearOfEra();
        int int14 = dateTimeField12.getMaximumValue(27929362000L);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(1, 36, 0);
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.lang.String str21 = locale20.getDisplayScript();
        java.lang.String str22 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localTime18, 143, locale20);
        int int23 = localTime18.size();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "143" + "'", str22, "143");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
    }

    @Test
    public void test11498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11498");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        int int3 = localDate2.getYearOfCentury();
        org.joda.time.LocalDate.Property property4 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate5 = property4.roundFloorCopy();
        org.joda.time.LocalDate localDate6 = property4.getLocalDate();
        org.joda.time.LocalDate localDate7 = property4.withMinimumValue();
        org.joda.time.LocalDate localDate9 = property4.addToCopy(53);
        org.joda.time.LocalDate localDate10 = property4.roundHalfCeilingCopy();
        java.lang.String str11 = property4.getAsText();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 69 + "'", int3 == 69);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "19" + "'", str11, "19");
    }

    @Test
    public void test11499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11499");
        java.lang.Character[] charArray2 = new java.lang.Character[] { '4', 'a' };
        java.util.LinkedHashSet<java.lang.Character> charSet3 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet3, charArray2);
        java.util.Spliterator<java.lang.Character> charSpliterator5 = charSet3.spliterator();
        int int6 = charSet3.size();
        java.util.Spliterator<java.lang.Character> charSpliterator7 = charSet3.spliterator();
        java.lang.Object[] objArray8 = charSet3.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.lang.Character[] charArray21 = new java.lang.Character[] { '#', 'x', '#', 'u', ' ', '#' };
        java.util.LinkedHashSet<java.lang.Character> charSet22 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet22, charArray21);
        java.lang.Object[] objArray24 = charSet22.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale30 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale30, locale31, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale.FilteringMode filteringMode38 = null;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList36, filteringMode38);
        java.lang.String[] strArray50 = new java.lang.String[] { "1", "12 Nov 1900 10:21:00 GMT", "PeriodType[Standard]", "", "", "1967-11-12 10:21:00", "2022-02-21T00:00:00.000Z", "PeriodType[Standard]", "\u4e2d\u6587", "PeriodType[Standard]" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strList51);
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.util.Locale locale59 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.util.Locale locale63 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray64 = new java.util.Locale[] { locale59, locale60, locale63 };
        java.util.ArrayList<java.util.Locale> localeList65 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList65, localeArray64);
        java.util.Locale.FilteringMode filteringMode67 = null;
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.util.Locale>) localeList65, filteringMode67);
        java.util.Locale.FilteringMode filteringMode69 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList70 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList68, filteringMode69);
        boolean boolean71 = charSet22.containsAll((java.util.Collection<java.util.Locale>) localeList68);
        java.util.Locale.FilteringMode filteringMode72 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList68, filteringMode72);
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList68);
        boolean boolean75 = charSet3.containsAll((java.util.Collection<java.util.Locale>) localeList68);
        java.util.stream.Stream<java.util.Locale> localeStream76 = localeList68.parallelStream();
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSpliterator5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(charSpliterator7);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[4, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[4, a]");
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[#, x, u,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[#, x, u,  ]");
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals(locale59.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale63.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertTrue("'" + filteringMode69 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode69.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + filteringMode72 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode72.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertNotNull(localeList74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(localeStream76);
    }

    @Test
    public void test11500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11500");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        org.joda.time.MutableDateTime mutableDateTime3 = instant2.toMutableDateTime();
        org.joda.time.Chronology chronology4 = instant2.getChronology();
        org.joda.time.Instant instant5 = instant2.toInstant();
        org.joda.time.MutableDateTime mutableDateTime6 = instant2.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime7 = instant2.toMutableDateTime();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
    }
}

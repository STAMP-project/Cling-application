import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test05001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05001");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfDay();
        long long39 = zonedChronology28.getDateTimeMillis(0, 1, (int) (byte) 1, 20);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology28.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology28.hourOfDay();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology28.clockhourOfHalfday();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-62167219199980L) + "'", long39 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test05002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05002");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long39 = zonedChronology28.getDateTimeMillis(8, (int) (byte) 0, 365, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test05003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05003");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.minuteOfHour();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        java.util.Locale locale8 = java.util.Locale.US;
        boolean boolean9 = localDateTime7.equals((java.lang.Object) locale8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withEra((int) (short) 0);
        int int22 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime.Property property24 = localDateTime19.millisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(0L, chronology26);
        int int28 = localDateTime27.getWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withMillisOfSecond(100);
        org.joda.time.Chronology chronology31 = localDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        org.joda.time.DurationField durationField33 = chronology31.days();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        long long36 = dateTimeZone34.previousTransition(100L);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withMillisOfSecond((int) (byte) 0);
        int[] intArray42 = chronology31.get((org.joda.time.ReadablePartial) localDateTime38, (long) (-1));
        org.joda.time.DateTimeField dateTimeField43 = chronology31.millisOfDay();
        org.joda.time.DurationField durationField44 = chronology31.hours();
        org.joda.time.DurationField durationField45 = chronology31.weeks();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        long long52 = dateTimeZone48.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology53 = org.joda.time.chrono.ZonedChronology.getInstance(chronology31, dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology53.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology53.millisOfSecond();
        org.joda.time.DurationField durationField56 = zonedChronology53.weekyears();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(0L, chronology58);
        java.lang.String str61 = localDateTime59.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = localDateTime59.toString(dateTimeFormatter62);
        org.joda.time.LocalDateTime.Property property64 = localDateTime59.monthOfYear();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime59.withMillisOfDay(100);
        long long68 = zonedChronology53.set((org.joda.time.ReadablePartial) localDateTime66, (long) 59);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(0L, chronology70);
        int int72 = localDateTime71.getWeekyear();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withYearOfEra(1970);
        org.joda.time.DateTime dateTime75 = localDateTime74.toDateTime();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(0L, chronology77);
        int int79 = localDateTime78.getWeekyear();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.withYearOfEra(1970);
        org.joda.time.DateTime dateTime82 = localDateTime81.toDateTime();
        int int83 = dateTime75.compareTo((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime84 = localDateTime66.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        int int85 = property24.getDifference((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTimeZone dateTimeZone86 = dateTime84.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L + "'", long36 == 100L);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10L + "'", long52 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u65e5\u672c" + "'", str61, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1970-01-01T00:00:00.000" + "'", str63, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100L + "'", long68 == 100L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1970 + "'", int72 == 1970);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1970 + "'", int79 == 1970);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-100) + "'", int85 == (-100));
        org.junit.Assert.assertNotNull(dateTimeZone86);
    }

    @Test
    public void test05004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05004");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = timeZone1.getOffset((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone.setDefault(timeZone1);
        java.lang.String str7 = timeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str9 = timeZone1.getID();
        int int10 = timeZone1.getRawOffset();
        java.lang.Object obj11 = timeZone1.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT" + "'", str7, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GMT" + "'", str9, "GMT");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test05005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05005");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMonths(9);
        int int14 = localDateTime11.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.minusHours(42);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 70 + "'", int14 == 70);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test05006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05006");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.lang.String str2 = locale0.getExtension('x');
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test05007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05007");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfSecond();
        int int7 = property6.getMaximumValueOverall();
        int int8 = property6.getMaximumValueOverall();
        java.lang.String str9 = property6.getAsText();
        org.joda.time.LocalDateTime localDateTime10 = property6.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField11 = property6.getField();
        java.lang.String str12 = property6.getAsText();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 999 + "'", int7 == 999);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 999 + "'", int8 == 999);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
    }

    @Test
    public void test05008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05008");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(0L, chronology2);
        int int4 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMillisOfSecond(100);
        org.joda.time.Chronology chronology7 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.millis();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) '#', chronology7);
        org.joda.time.DurationField durationField12 = chronology7.millis();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = chronology7.getDateTimeMillis((long) 69, (-1), 0, 82022695, 1964);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test05009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05009");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getLanguage();
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        long long5 = dateTimeZone3.previousTransition(0L);
        long long7 = dateTimeZone3.convertUTCToLocal(1L);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        long long12 = dateTimeZone3.getMillisKeepLocal(dateTimeZone10, (long) (-1));
        int int14 = dateTimeZone3.getStandardOffset((long) '4');
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, chronology17);
        java.lang.String str20 = localDateTime18.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = localDateTime18.toString(dateTimeFormatter21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.monthOfYear();
        org.joda.time.Interval interval24 = property23.toInterval();
        long long25 = property23.remainder();
        org.joda.time.LocalDateTime localDateTime26 = property23.roundHalfFloorCopy();
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        int int28 = property23.getMaximumTextLength(locale27);
        java.util.Locale locale29 = java.util.Locale.CHINA;
        java.lang.String str30 = locale29.getCountry();
        int int31 = property23.getMaximumTextLength(locale29);
        java.lang.String str32 = dateTimeZone3.getShortName((-625L), locale29);
        java.util.Locale locale33 = locale29.stripExtensions();
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category2, locale33);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        long long39 = dateTimeZone36.convertLocalToUTC(100L, true);
        long long42 = dateTimeZone36.convertLocalToUTC((long) 1970, false);
        java.lang.String str44 = dateTimeZone36.getName((-2208873600000L));
        java.util.Locale locale46 = java.util.Locale.CHINA;
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale46.getDisplayName(locale47);
        java.util.Set<java.lang.String> strSet49 = locale46.getUnicodeLocaleAttributes();
        java.lang.String str50 = dateTimeZone36.getName(1644572694666L, locale46);
        java.util.Locale.setDefault(category2, locale46);
        java.util.Locale locale52 = java.util.Locale.getDefault(category2);
        java.lang.String str53 = locale0.getDisplayScript(locale52);
        boolean boolean54 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "de" + "'", str1, "de");
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u65e5\u672c" + "'", str20, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.000" + "'", str22, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "CN" + "'", str30, "CN");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1970L + "'", long42 == 1970L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str48, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test05010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05010");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology28.minutes();
        org.joda.time.DurationField durationField35 = zonedChronology28.halfdays();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray38 = zonedChronology28.get(readablePeriod36, (long) (-174585600));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test05011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05011");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("DEU");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"DEU\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05012");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.lang.String str11 = property7.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property7.getFieldType();
        org.joda.time.LocalDateTime localDateTime13 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = property14.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusYears(44);
        org.joda.time.LocalDateTime.Property property21 = localDateTime15.secondOfMinute();
        org.joda.time.LocalDateTime.Property property22 = localDateTime15.centuryOfEra();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e00\u6708" + "'", str11, "\u4e00\u6708");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test05013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05013");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DurationField durationField32 = zonedChronology28.minutes();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, chronology34);
        java.util.Locale locale36 = java.util.Locale.US;
        boolean boolean37 = localDateTime35.equals((java.lang.Object) locale36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(0L, chronology41);
        int int43 = localDateTime42.getWeekyear();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusMinutes(100);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(0L, chronology52);
        int int54 = localDateTime53.getWeekyear();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withMillisOfSecond(100);
        org.joda.time.Chronology chronology57 = localDateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfCentury();
        org.joda.time.DurationField durationField59 = chronology57.days();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        long long62 = dateTimeZone60.previousTransition(100L);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withMillisOfSecond((int) (byte) 0);
        int[] intArray68 = chronology57.get((org.joda.time.ReadablePartial) localDateTime64, (long) (-1));
        org.joda.time.DateTimeField dateTimeField69 = chronology57.millisOfDay();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(0L, chronology71);
        int int73 = localDateTime72.getWeekyear();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withMillisOfSecond(100);
        int[] intArray77 = chronology57.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        zonedChronology28.validate((org.joda.time.ReadablePartial) localDateTime49, intArray77);
        org.joda.time.DateTimeField dateTimeField79 = zonedChronology28.secondOfMinute();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime(0L, chronology81);
        java.lang.String str84 = localDateTime82.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = null;
        java.lang.String str86 = localDateTime82.toString(dateTimeFormatter85);
        org.joda.time.LocalDateTime.Property property87 = localDateTime82.monthOfYear();
        org.joda.time.Interval interval88 = property87.toInterval();
        long long89 = property87.remainder();
        org.joda.time.DurationField durationField90 = property87.getRangeDurationField();
        boolean boolean91 = zonedChronology28.equals((java.lang.Object) property87);
        org.joda.time.LocalDateTime localDateTime92 = property87.getLocalDateTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 100L + "'", long62 == 100L);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1970 + "'", int73 == 1970);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u65e5\u672c" + "'", str84, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "1970-01-01T00:00:00.000" + "'", str86, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(localDateTime92);
    }

    @Test
    public void test05014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05014");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.weekOfWeekyear();
        org.joda.time.Chronology chronology36 = zonedChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.hourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 4);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        long long43 = dateTimeZone41.previousTransition(100L);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withHourOfDay((int) (short) 0);
        int int48 = localDateTime47.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withCenturyOfEra(0);
        int int51 = localDateTime40.compareTo((org.joda.time.ReadablePartial) localDateTime50);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone54);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone54);
        int int58 = dateTimeZone54.getStandardOffset(999L);
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale60);
        java.util.Locale locale64 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale65 = java.util.Locale.ENGLISH;
        java.lang.String str66 = locale64.getDisplayLanguage(locale65);
        java.lang.String str67 = locale60.getDisplayName(locale64);
        java.lang.String str68 = dateTimeZone54.getName(35L, locale60);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime50, dateTimeZone54);
        org.joda.time.Chronology chronology70 = zonedChronology28.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField71 = zonedChronology28.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField72 = zonedChronology28.secondOfMinute();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(locale60);
// flaky:         org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale64.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u65e5\u672c" + "'", str66, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Chinese (China)" + "'", str67, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00" + "'", str68, "+00:00");
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
    }

    @Test
    public void test05015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05015");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.eras();
        org.joda.time.Chronology chronology9 = chronology6.withUTC();
        java.lang.String str10 = chronology9.toString();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        long long20 = dateTimeZone18.previousTransition(100L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withMillisOfSecond((int) (byte) 0);
        int int25 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        long long29 = dateTimeZone26.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = localDateTime14.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime32 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology33 = dateTime31.getChronology();
        org.joda.time.Instant instant34 = dateTime31.toInstant();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusHours((int) ' ');
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(0L, chronology44);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withMillisOfSecond(100);
        org.joda.time.Chronology chronology49 = localDateTime45.getChronology();
        java.lang.String str50 = localDateTime45.toString();
        int int51 = localDateTime45.getYearOfCentury();
        int int52 = localDateTime45.getCenturyOfEra();
        boolean boolean53 = localDateTime42.isEqual((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(0L, chronology55);
        int int57 = localDateTime56.getWeekyear();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withMillisOfSecond(100);
        org.joda.time.Chronology chronology60 = localDateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.UTC;
        long long64 = dateTimeZone62.previousTransition(0L);
        long long66 = dateTimeZone62.nextTransition((long) (-1));
        org.joda.time.Chronology chronology67 = chronology60.withZone(dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField68 = chronology60.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now(chronology60);
        org.joda.time.DateTimeZone dateTimeZone70 = chronology60.getZone();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.Chronology chronology73 = chronology60.withZone(dateTimeZone72);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime42, chronology73);
        org.joda.time.LocalDateTime.Property property75 = localDateTime42.secondOfMinute();
        boolean boolean76 = dateTime31.equals((java.lang.Object) localDateTime42);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime42.withMillisOfDay(59);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.yearOfCentury();
        boolean boolean80 = property79.isLeap();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[UTC]" + "'", str10, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L + "'", long29 == 100L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01T00:00:00.000" + "'", str50, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 70 + "'", int51 == 70);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 19 + "'", int52 == 19);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test05016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05016");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfMonth(10);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.secondOfMinute();
        int int11 = localDateTime9.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime12 = localDateTime9.toDateTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test05017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05017");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("1970");
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str7 = locale5.getExtension('a');
        java.util.Locale.Builder builder8 = builder2.setLocale(locale5);
        java.util.Locale.Builder builder10 = builder8.setLanguageTag("it-IT");
        java.util.Locale.Builder builder11 = builder8.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder8.setScript("janv.");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: janv. [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test05018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05018");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology28);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        java.lang.String str36 = localDateTime34.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = localDateTime34.toString(dateTimeFormatter37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime34.monthOfYear();
        org.joda.time.Interval interval40 = property39.toInterval();
        long long41 = property39.remainder();
        org.joda.time.LocalDateTime localDateTime42 = property39.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plus(readableDuration43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.dayOfMonth();
        int[] intArray47 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime42, 11L);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology28.yearOfCentury();
        org.joda.time.DurationField durationField49 = zonedChronology28.halfdays();
        org.joda.time.Chronology chronology50 = zonedChronology28.withUTC();
        org.joda.time.DurationField durationField51 = zonedChronology28.days();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.000" + "'", str38, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test05019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05019");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone32 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.centuryOfEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        java.util.Locale locale38 = java.util.Locale.US;
        boolean boolean39 = localDateTime37.equals((java.lang.Object) locale38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(0L, chronology43);
        int int45 = localDateTime44.getWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime37.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusMinutes(100);
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str54 = localDateTime49.toString("\u4e2d\u56fd\u8a9e", locale53);
        int[] intArray56 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime49, (long) 52100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = localDateTime49.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime49.plusWeeks(20);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.year();
        org.joda.time.LocalDateTime.Property property61 = localDateTime59.weekOfWeekyear();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(0L, chronology63);
        int int65 = localDateTime64.getWeekyear();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.withYearOfEra(1970);
        org.joda.time.DateTime dateTime68 = localDateTime67.toDateTime();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(0L, chronology70);
        int int72 = localDateTime71.getWeekyear();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withYearOfEra(1970);
        org.joda.time.DateTime dateTime75 = localDateTime74.toDateTime();
        int int76 = dateTime68.compareTo((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Chronology chronology77 = dateTime75.getChronology();
        org.joda.time.Instant instant78 = dateTime75.toInstant();
        int int79 = property61.getDifference((org.joda.time.ReadableInstant) instant78);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str54, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1970, 1, 1, 52100]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1970 + "'", int65 == 1970);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1970 + "'", int72 == 1970);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 20 + "'", int79 == 20);
    }

    @Test
    public void test05020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05020");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("ITA", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05021");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        int int12 = property7.getMaximumTextLength(locale11);
        org.joda.time.LocalDateTime localDateTime13 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime14 = property7.roundHalfEvenCopy();
        int int15 = localDateTime14.getCenturyOfEra();
        int int16 = localDateTime14.getDayOfWeek();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 19 + "'", int15 == 19);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
    }

    @Test
    public void test05022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05022");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Franz\366sisch");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=franzo?sisch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05023");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, chronology11);
        java.lang.String str14 = localDateTime12.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime12.toString(dateTimeFormatter15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.monthOfYear();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.LocalDateTime localDateTime20 = property17.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property17.getFieldType();
        org.joda.time.LocalDateTime.Property property22 = localDateTime9.property(dateTimeFieldType21);
        int int23 = localDateTime9.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime9.plusDays((int) '#');
        int int26 = localDateTime9.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime9.withMillisOfDay((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusYears((int) (short) 1);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.era();
        java.util.Locale.Category category32 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.util.Locale.setDefault(category32, locale33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        int int39 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withMillisOfSecond(100);
        org.joda.time.Chronology chronology42 = localDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfCentury();
        org.joda.time.DurationField durationField44 = chronology42.days();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        long long47 = dateTimeZone45.previousTransition(100L);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withMillisOfSecond((int) (byte) 0);
        int[] intArray53 = chronology42.get((org.joda.time.ReadablePartial) localDateTime49, (long) (-1));
        org.joda.time.DateTimeField dateTimeField54 = chronology42.millisOfDay();
        org.joda.time.DurationField durationField55 = chronology42.hours();
        org.joda.time.DurationField durationField56 = chronology42.weeks();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        long long63 = dateTimeZone59.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology64 = org.joda.time.chrono.ZonedChronology.getInstance(chronology42, dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology64.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology64.millisOfSecond();
        org.joda.time.DurationField durationField67 = zonedChronology64.months();
        org.joda.time.DateTimeField dateTimeField68 = zonedChronology64.minuteOfDay();
        org.joda.time.DurationField durationField69 = zonedChronology64.halfdays();
        org.joda.time.DurationField durationField70 = zonedChronology64.seconds();
        org.joda.time.DateTimeField dateTimeField71 = zonedChronology64.minuteOfHour();
        org.joda.time.Chronology chronology72 = zonedChronology64.withUTC();
        org.joda.time.tz.NameProvider nameProvider73 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale75 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str78 = nameProvider73.getShortName(locale75, "", "hi!");
        java.util.Locale locale79 = java.util.Locale.GERMAN;
        java.lang.String str82 = nameProvider73.getName(locale79, "CN", "\u65e5\u672c");
        java.lang.String str83 = locale79.getISO3Language();
        java.util.Locale locale87 = new java.util.Locale("GMT", "Jan", "2022-02-11T09:43:35.370");
        java.lang.String str88 = locale87.getDisplayLanguage();
        java.lang.String str89 = locale87.getVariant();
        java.lang.String str90 = locale87.getDisplayCountry();
        java.lang.String str91 = locale79.getDisplayScript(locale87);
        boolean boolean92 = zonedChronology64.equals((java.lang.Object) locale79);
        java.lang.String str93 = locale33.getDisplayVariant(locale79);
        int int94 = property31.getMaximumShortTextLength(locale33);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.000" + "'", str16, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category32.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str34, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10L + "'", long63 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(nameProvider73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "deu" + "'", str83, "deu");
        org.junit.Assert.assertEquals(locale87.toString(), "gmt_JAN_2022-02-11T09:43:35.370");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "gmt" + "'", str88, "gmt");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "2022-02-11T09:43:35.370" + "'", str89, "2022-02-11T09:43:35.370");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "JAN" + "'", str90, "JAN");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 3 + "'", int94 == 3);
    }

    @Test
    public void test05024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05024");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        int int9 = localDateTime8.getMonthOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, chronology11);
        int int13 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withYearOfEra(1970);
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(0L, chronology18);
        int int20 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYearOfEra(1970);
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        int int24 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(0L, chronology26);
        java.lang.String str29 = localDateTime27.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = localDateTime27.toString(dateTimeFormatter30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime27.monthOfYear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withSecondOfMinute((int) '4');
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        long long39 = dateTimeZone37.previousTransition(100L);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay((int) (short) 0);
        int int44 = localDateTime43.getEra();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(0L, chronology48);
        java.lang.String str51 = localDateTime49.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = localDateTime49.toString(dateTimeFormatter52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime49.monthOfYear();
        org.joda.time.Interval interval55 = property54.toInterval();
        org.joda.time.LocalDateTime localDateTime57 = property54.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property54.getFieldType();
        org.joda.time.LocalDateTime.Property property59 = localDateTime46.property(dateTimeFieldType58);
        int int60 = localDateTime34.indexOf(dateTimeFieldType58);
        boolean boolean61 = dateTime16.isSupported(dateTimeFieldType58);
        org.joda.time.LocalDateTime.Property property62 = localDateTime8.property(dateTimeFieldType58);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime8.withYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = null;
        java.lang.String str66 = localDateTime8.toString(dateTimeFormatter65);
        org.joda.time.DurationFieldType durationFieldType67 = null;
        boolean boolean68 = localDateTime8.isSupported(durationFieldType67);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u65e5\u672c" + "'", str29, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.000" + "'", str31, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u65e5\u672c" + "'", str51, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-01T00:00:00.000" + "'", str53, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01T00:00:00.000" + "'", str66, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test05025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05025");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int5 = timeZone3.getRawOffset();
        boolean boolean6 = timeZone1.hasSameRules(timeZone3);
        timeZone3.setID("giapponese");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test05026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05026");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfCentury((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) '#');
        int int13 = localDateTime10.getDayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(0L, chronology15);
        java.lang.String str18 = localDateTime16.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = localDateTime16.toString(dateTimeFormatter19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.monthOfYear();
        org.joda.time.Interval interval22 = property21.toInterval();
        long long23 = property21.remainder();
        org.joda.time.LocalDateTime localDateTime24 = property21.roundHalfFloorCopy();
        java.lang.String str25 = property21.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property21.getFieldType();
        org.joda.time.LocalDateTime localDateTime27 = property21.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.weekyear();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withPeriodAdded(readablePeriod29, 4);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withMinuteOfHour(4);
        int int34 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime.Property property35 = localDateTime10.weekyear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 0);
        boolean boolean39 = dateTimeZone38.isFixed();
        int int41 = dateTimeZone38.getOffsetFromLocal((long) 'u');
        java.lang.String str43 = dateTimeZone38.getName(4832097L);
        long long47 = dateTimeZone38.convertLocalToUTC((long) 'a', false, (long) (short) 1);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(0L, chronology50);
        java.util.Locale locale52 = java.util.Locale.US;
        boolean boolean53 = localDateTime51.equals((java.lang.Object) locale52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(0L, chronology57);
        int int59 = localDateTime58.getWeekyear();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime51.withFields((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusMinutes(100);
        java.util.Locale locale67 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str68 = localDateTime63.toString("\u4e2d\u56fd\u8a9e", locale67);
        java.lang.String str69 = locale67.getDisplayVariant();
        java.lang.String str70 = locale67.getCountry();
        java.lang.String str71 = dateTimeZone38.getName((long) 43, locale67);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime10, dateTimeZone38);
        long long77 = dateTimeZone38.convertLocalToUTC(0L, true, 1167851302L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c" + "'", str18, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T00:00:00.000" + "'", str20, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u4e00\u6708" + "'", str25, "\u4e00\u6708");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 97L + "'", long47 == 97L);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1970 + "'", int59 == 1970);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str68, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "TW" + "'", str70, "TW");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
    }

    @Test
    public void test05027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05027");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property8.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withPeriodAdded(readablePeriod10, (-1970));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test05028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05028");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(0L);
        long long4 = dateTimeZone0.nextTransition((long) (-1));
        boolean boolean6 = dateTimeZone0.isStandardOffset((long) ' ');
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        java.time.ZoneId zoneId8 = timeZone7.toZoneId();
        java.time.ZoneId zoneId9 = timeZone7.toZoneId();
        timeZone7.setRawOffset(35080732);
        boolean boolean12 = timeZone7.observesDaylightTime();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = timeZone14.getOffset((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.util.TimeZone.setDefault(timeZone14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(0L, chronology21);
        int int23 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withYearOfEra(1970);
        org.joda.time.DateTime dateTime26 = localDateTime25.toDateTime();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(0L, chronology28);
        int int30 = localDateTime29.getWeekyear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withYearOfEra(1970);
        org.joda.time.DateTime dateTime33 = localDateTime32.toDateTime();
        int int34 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime33);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean37 = dateTime33.equals((java.lang.Object) timeZone36);
        boolean boolean38 = timeZone14.hasSameRules(timeZone36);
        boolean boolean39 = timeZone7.hasSameRules(timeZone36);
        java.util.Locale locale42 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = timeZone36.getDisplayName(false, 48, locale42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 48");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNotNull(zoneId9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test05029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05029");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.millis();
        org.joda.time.DurationField durationField9 = chronology6.months();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusHours((int) '#');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusMillis((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField19 = localDateTime13.getField(422580000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 422580000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test05030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05030");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.weekyear();
        org.joda.time.DurationField durationField35 = zonedChronology28.days();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test05031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05031");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYear();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withMinuteOfHour((int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.dayOfMonth();
        org.joda.time.tz.NameProvider nameProvider5 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str10 = nameProvider5.getShortName(locale7, "", "hi!");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, chronology12);
        java.lang.String str15 = localDateTime13.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = localDateTime13.toString(dateTimeFormatter16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.monthOfYear();
        org.joda.time.Interval interval19 = property18.toInterval();
        org.joda.time.LocalDateTime localDateTime21 = property18.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property18.getFieldType();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(0L, chronology24);
        java.util.Locale locale26 = java.util.Locale.US;
        boolean boolean27 = localDateTime25.equals((java.lang.Object) locale26);
        java.lang.String str28 = locale26.toLanguageTag();
        int int29 = property18.getMaximumTextLength(locale26);
        java.lang.String str30 = locale7.getDisplayCountry(locale26);
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale31);
        java.util.Locale locale35 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = locale35.getDisplayLanguage(locale36);
        java.lang.String str38 = locale31.getDisplayName(locale35);
        java.lang.String str39 = locale26.getDisplayScript(locale31);
        int int40 = property4.getMaximumTextLength(locale31);
        org.joda.time.DurationField durationField41 = property4.getRangeDurationField();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2022 + "'", int1 == 2022);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(nameProvider5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u672c" + "'", str15, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.000" + "'", str17, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "en-US" + "'", str28, "en-US");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale35.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u65e5\u672c" + "'", str37, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "English (Canada)" + "'", str38, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test05032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05032");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withMillisOfSecond(100);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(0L, chronology16);
        java.lang.String str19 = localDateTime17.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = localDateTime17.toString(dateTimeFormatter20);
        long long23 = chronology13.set((org.joda.time.ReadablePartial) localDateTime17, (long) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((-100), 3600000, (int) ' ', 24, 970, 12, 1969, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 24 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u65e5\u672c" + "'", str19, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:00.000" + "'", str21, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test05033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05033");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(locale0);
        java.lang.String str2 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale0.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ja-JP" + "'", str2, "ja-JP");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ja" + "'", str3, "ja");
    }

    @Test
    public void test05034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05034");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withSecondOfMinute((int) '4');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(999);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusHours(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMinutes(0);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        long long20 = dateTimeZone18.previousTransition(0L);
        long long22 = dateTimeZone18.nextTransition((long) (-1));
        boolean boolean24 = dateTimeZone18.isStandardOffset((long) ' ');
        long long27 = dateTimeZone18.adjustOffset(27236744L, true);
        org.joda.time.DateTime dateTime28 = localDateTime17.toDateTime(dateTimeZone18);
        int int29 = localDateTime17.getEra();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 27236744L + "'", long27 == 27236744L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test05035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05035");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.minuteOfHour();
        boolean boolean5 = property4.isLeap();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(0L, chronology7);
        java.lang.String str10 = localDateTime8.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = localDateTime8.toString(dateTimeFormatter11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.monthOfYear();
        org.joda.time.Interval interval14 = property13.toInterval();
        long long15 = property13.remainder();
        org.joda.time.LocalDateTime localDateTime16 = property13.roundHalfFloorCopy();
        java.lang.String str17 = property13.getAsShortText();
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        int int19 = property13.getMaximumTextLength(locale18);
        org.joda.time.LocalDateTime localDateTime21 = property13.addWrapFieldToCopy(100);
        int int22 = localDateTime21.size();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(0L, chronology24);
        int int26 = localDateTime25.getWeekyear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withMillisOfSecond(100);
        org.joda.time.Chronology chronology29 = localDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DurationField durationField31 = chronology29.days();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        long long34 = dateTimeZone32.previousTransition(100L);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withMillisOfSecond((int) (byte) 0);
        int[] intArray40 = chronology29.get((org.joda.time.ReadablePartial) localDateTime36, (long) (-1));
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        long long43 = dateTimeZone41.previousTransition(0L);
        long long45 = dateTimeZone41.convertUTCToLocal(1L);
        long long47 = dateTimeZone41.convertUTCToLocal((long) (byte) 10);
        org.joda.time.DateTime dateTime48 = localDateTime36.toDateTime(dateTimeZone41);
        long long51 = dateTimeZone41.adjustOffset(4363010L, false);
        org.joda.time.DateTime dateTime52 = localDateTime21.toDateTime(dateTimeZone41);
        int int53 = property4.getDifference((org.joda.time.ReadableInstant) dateTime52);
        int int54 = property4.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime55 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime56 = property4.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plusMillis((int) 'u');
        int int59 = localDateTime58.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u65e5\u672c" + "'", str10, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T00:00:00.000" + "'", str12, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100L + "'", long34 == 100L);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 4363010L + "'", long51 == 4363010L);
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 27236748 + "'", int53 == 27236748);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 22 + "'", int59 == 22);
    }

    @Test
    public void test05036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05036");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField32 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.secondOfMinute();
        org.joda.time.Chronology chronology34 = zonedChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.millisOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test05037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05037");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.eras();
        org.joda.time.Chronology chronology9 = chronology6.withUTC();
        java.lang.String str10 = chronology9.toString();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withSecondOfMinute(4);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        boolean boolean16 = dateTimeZone15.isFixed();
        long long19 = dateTimeZone15.adjustOffset((long) 'x', true);
        org.joda.time.DateTime dateTime20 = localDateTime11.toDateTime(dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime11.withPeriodAdded(readablePeriod21, (int) 'u');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime11.minusWeeks(30069);
        int int26 = localDateTime11.getEra();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[UTC]" + "'", str10, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 120L + "'", long19 == 120L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test05038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05038");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfCentury((int) (byte) 0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, chronology12);
        int int14 = localDateTime13.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withDayOfMonth(10);
        boolean boolean21 = localDateTime8.equals((java.lang.Object) localDateTime18);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime8.plus(readablePeriod22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(0L, chronology25);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withMillisOfSecond(100);
        org.joda.time.Chronology chronology30 = localDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.DurationField durationField32 = chronology30.days();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        long long35 = dateTimeZone33.previousTransition(100L);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withMillisOfSecond((int) (byte) 0);
        int[] intArray41 = chronology30.get((org.joda.time.ReadablePartial) localDateTime37, (long) (-1));
        org.joda.time.DateTimeField dateTimeField42 = chronology30.millisOfDay();
        org.joda.time.DurationField durationField43 = chronology30.hours();
        org.joda.time.DurationField durationField44 = chronology30.weeks();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        long long51 = dateTimeZone47.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology52 = org.joda.time.chrono.ZonedChronology.getInstance(chronology30, dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology52.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology52.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology52.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime8, (org.joda.time.Chronology) zonedChronology52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime58 = localDateTime8.withDayOfWeek(42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 42 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test05039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05039");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.lang.String str11 = property7.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property7.getFieldType();
        org.joda.time.LocalDateTime localDateTime13 = property7.roundFloorCopy();
        int int14 = property7.get();
        org.joda.time.LocalDateTime localDateTime15 = property7.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYearOfCentury(117);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test05040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05040");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setLanguageTag("2022-02-11T09:45:11.088");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test05041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05041");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        org.joda.time.Interval interval9 = property7.toInterval();
        org.joda.time.LocalDateTime localDateTime10 = property7.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        long long13 = dateTimeZone11.previousTransition(100L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay((int) (short) 0);
        int int18 = localDateTime17.getEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(0L, chronology22);
        java.lang.String str25 = localDateTime23.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = localDateTime23.toString(dateTimeFormatter26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime23.monthOfYear();
        org.joda.time.Interval interval29 = property28.toInterval();
        org.joda.time.LocalDateTime localDateTime31 = property28.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property28.getFieldType();
        org.joda.time.LocalDateTime.Property property33 = localDateTime20.property(dateTimeFieldType32);
        int int34 = property33.getMinimumValueOverall();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withYearOfEra(1970);
        org.joda.time.DateTime dateTime41 = localDateTime40.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        long long44 = dateTimeZone42.previousTransition(100L);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(0L, chronology48);
        int int50 = localDateTime49.getWeekyear();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withYearOfEra(1970);
        org.joda.time.DateTime dateTime53 = localDateTime52.toDateTime();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(0L, chronology55);
        int int57 = localDateTime56.getWeekyear();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withYearOfEra(1970);
        org.joda.time.DateTime dateTime60 = localDateTime59.toDateTime();
        int int61 = dateTime53.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime62 = localDateTime46.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean63 = dateTime41.isEqual((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Chronology chronology64 = dateTime41.getChronology();
        long long65 = property33.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone66 = dateTime41.getZone();
        int int67 = property7.getDifference((org.joda.time.ReadableInstant) dateTime41);
        int int68 = property7.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime69 = property7.getLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime71 = property7.setCopy("-1970-01-01T00:00:00.000");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"-1970-01-01T00:00:00.000\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u65e5\u672c" + "'", str25, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T00:00:00.000" + "'", str27, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L + "'", long44 == 100L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(localDateTime69);
    }

    @Test
    public void test05042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05042");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfEra(1970);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        int int19 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.plus(readableDuration21);
        int int23 = localDateTime4.size();
        org.joda.time.LocalDateTime.Property property24 = localDateTime4.millisOfSecond();
        org.joda.time.LocalDateTime.Property property25 = localDateTime4.centuryOfEra();
        int int26 = localDateTime4.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property27 = localDateTime4.dayOfWeek();
        org.joda.time.DurationField durationField28 = property27.getRangeDurationField();
        java.lang.String str29 = property27.getAsText();
        org.joda.time.LocalDateTime localDateTime30 = property27.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u6728\u66dc\u65e5" + "'", str29, "\u6728\u66dc\u65e5");
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test05043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05043");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str5 = nameProvider0.getShortName(locale2, "", "hi!");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale9 = new java.util.Locale("JP");
        java.lang.String str12 = nameProvider0.getName(locale9, "\u6708", "43");
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.lang.String str15 = locale13.getDisplayCountry(locale14);
        java.util.Locale locale16 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.lang.String str20 = nameProvider0.getShortName(locale16, "Italian", "2022-02-11T09:44:37.907Z");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals(locale9.toString(), "jp");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test05044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05044");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        boolean boolean11 = property7.isLeap();
        org.joda.time.ReadableInstant readableInstant12 = null;
        long long13 = property7.getDifferenceAsLong(readableInstant12);
        org.joda.time.DurationField durationField14 = property7.getDurationField();
        int int15 = property7.getLeapAmount();
        int int16 = property7.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property7.roundHalfCeilingCopy();
        int int18 = property7.getLeapAmount();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-625L) + "'", long13 == (-625L));
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test05045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05045");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone31.previousTransition(100L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        int int39 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYearOfEra(1970);
        org.joda.time.DateTime dateTime42 = localDateTime41.toDateTime();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(0L, chronology44);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withYearOfEra(1970);
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        int int50 = dateTime42.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = localDateTime35.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime35.plus(readableDuration52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(0L, chronology55);
        java.util.Locale locale57 = java.util.Locale.US;
        boolean boolean58 = localDateTime56.equals((java.lang.Object) locale57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.dayOfWeek();
        int int60 = localDateTime56.getDayOfWeek();
        int int61 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        int[] intArray63 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime56, (long) 12);
        java.lang.String str64 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DurationField durationField67 = zonedChronology28.hours();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L + "'", long33 == 100L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1970, 1, 1, 12]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str64, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
    }

    @Test
    public void test05046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05046");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"???????? ???????\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05047");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale6 = new java.util.Locale("UTC");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale locale8 = builder4.build();
        java.util.Locale.Builder builder10 = builder4.setScript("");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale14 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.util.Locale locale19 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.lang.String str20 = locale15.getDisplayScript(locale19);
        java.lang.String str21 = locale15.getScript();
        java.util.Locale.Builder builder22 = builder10.setLocale(locale15);
        java.util.Locale locale23 = builder10.build();
        java.util.Locale.Builder builder24 = builder10.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder26 = builder24.setScript("1970-05-01T00:00:00.000");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 1970-05-01T00:00:00.000 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals(locale6.toString(), "utc");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "utc");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals(locale14.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u65e5\u672c" + "'", str16, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale19.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test05048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05048");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.minuteOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology32.centuries();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.Chronology chronology37 = zonedChronology32.withZone(dateTimeZone35);
        java.lang.String str38 = zonedChronology32.toString();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology32.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology32.millisOfDay();
        org.joda.time.DurationField durationField41 = zonedChronology32.minutes();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology32.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str38, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test05049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05049");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property7.getFieldType();
        org.joda.time.Interval interval10 = property7.toInterval();
        java.lang.String str11 = property7.getAsString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(0L, chronology20);
        int int22 = localDateTime21.getWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYearOfEra(1970);
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        int int26 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime25);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean29 = dateTime25.equals((java.lang.Object) timeZone28);
        org.joda.time.Chronology chronology30 = dateTime25.getChronology();
        long long31 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        int int35 = localDateTime34.getWeekyear();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withMillisOfSecond(100);
        org.joda.time.Chronology chronology38 = localDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        long long42 = dateTimeZone40.previousTransition(0L);
        long long44 = dateTimeZone40.nextTransition((long) (-1));
        org.joda.time.Chronology chronology45 = chronology38.withZone(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone40);
        java.lang.String str48 = dateTimeZone40.getNameKey((long) 117);
        java.util.Locale.Category category50 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale51 = java.util.Locale.JAPAN;
        java.lang.String str52 = locale51.getDisplayName();
        java.util.Locale.setDefault(category50, locale51);
        org.joda.time.tz.NameProvider nameProvider54 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str59 = nameProvider54.getShortName(locale56, "", "hi!");
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.lang.String str63 = nameProvider54.getName(locale60, "CN", "\u65e5\u672c");
        java.util.Locale locale64 = java.util.Locale.US;
        java.lang.String str65 = locale64.getLanguage();
        java.lang.String str68 = nameProvider54.getName(locale64, "JP", "\u4e00\u6708");
        java.util.Set<java.lang.Character> charSet69 = locale64.getExtensionKeys();
        java.lang.String str70 = locale51.getDisplayCountry(locale64);
        java.util.Locale locale71 = java.util.Locale.JAPAN;
        boolean boolean72 = locale71.hasExtensions();
        java.lang.String str73 = locale71.getDisplayName();
        java.lang.String str74 = locale71.getVariant();
        java.lang.String str75 = locale71.getCountry();
        java.util.Locale locale76 = locale71.stripExtensions();
        java.lang.String str77 = locale51.getDisplayScript(locale76);
        java.lang.String str78 = dateTimeZone40.getName(35155686L, locale51);
        boolean boolean79 = property7.equals((java.lang.Object) 35155686L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertTrue("'" + category50 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category50.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str52, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(nameProvider54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "en" + "'", str65, "en");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(charSet69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Japan" + "'", str70, "Japan");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str73, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "JP" + "'", str75, "JP");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00" + "'", str78, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test05050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05050");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYear(1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfEra(70);
        int int11 = localDateTime10.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
    }

    @Test
    public void test05051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05051");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField32 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.secondOfMinute();
        org.joda.time.Chronology chronology34 = zonedChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.secondOfMinute();
        org.joda.time.DurationField durationField36 = zonedChronology28.days();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(0L, chronology38);
        int int40 = localDateTime39.getWeekyear();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withMillisOfSecond(100);
        org.joda.time.Chronology chronology43 = localDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.yearOfEra();
        org.joda.time.DurationField durationField46 = chronology43.days();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.yearOfEra();
        org.joda.time.DurationField durationField48 = chronology43.centuries();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((java.lang.Object) zonedChronology28, chronology43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ZonedChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
    }

    @Test
    public void test05052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05052");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.weekOfWeekyear();
        org.joda.time.Chronology chronology36 = zonedChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long46 = zonedChronology28.getDateTimeMillis(365, (int) ' ', 35080732, 27236744, 232, 0, 641);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27236744 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test05053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05053");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plus(readableDuration11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        boolean boolean15 = dateTimeZone13.isLocalDateTimeGap(localDateTime14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, chronology17);
        java.lang.String str20 = localDateTime18.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = localDateTime18.toString(dateTimeFormatter21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.monthOfYear();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundCeilingCopy();
        boolean boolean25 = dateTimeZone13.isLocalDateTimeGap(localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusMillis((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone28.previousTransition(100L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withHourOfDay((int) (short) 0);
        int int35 = localDateTime34.getEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(0L, chronology39);
        java.lang.String str42 = localDateTime40.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = localDateTime40.toString(dateTimeFormatter43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime40.monthOfYear();
        org.joda.time.Interval interval46 = property45.toInterval();
        org.joda.time.LocalDateTime localDateTime48 = property45.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property45.getFieldType();
        org.joda.time.LocalDateTime.Property property50 = localDateTime37.property(dateTimeFieldType49);
        boolean boolean51 = localDateTime27.isSupported(dateTimeFieldType49);
        org.joda.time.LocalDateTime.Property property52 = localDateTime10.property(dateTimeFieldType49);
        org.joda.time.LocalDateTime localDateTime53 = property52.roundHalfFloorCopy();
        java.util.Date date54 = localDateTime53.toDate();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.fromDateFields(date54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusMinutes(117);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withHourOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology60 = localDateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.clockhourOfDay();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u65e5\u672c" + "'", str20, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.000" + "'", str22, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u65e5\u672c" + "'", str42, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01T00:00:00.000" + "'", str44, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test05054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05054");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime4.getMinuteOfHour();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale11 = java.util.Locale.JAPAN;
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        java.lang.String str14 = locale11.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.lang.String str17 = locale15.getDisplayCountry(locale16);
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str19 = locale16.getDisplayName(locale18);
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.lang.String str23 = locale20.getDisplayName();
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.lang.String str26 = locale24.getDisplayCountry(locale25);
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.lang.String str31 = locale29.getDisplayCountry(locale30);
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.lang.String str35 = locale33.getDisplayCountry(locale34);
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale11, locale16, locale20, locale24, locale27, locale28, locale29, locale32, locale33 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList37);
        boolean boolean40 = localDateTime4.equals((java.lang.Object) localeList37);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime4.withMillisOfDay(1970);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(0L, chronology45);
        int int47 = localDateTime46.getWeekyear();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.millisOfSecond();
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.year();
        java.util.Locale locale52 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale52);
        java.util.Locale locale56 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.lang.String str58 = locale56.getDisplayLanguage(locale57);
        java.lang.String str59 = locale52.getDisplayName(locale56);
        java.lang.String str60 = property51.getAsShortText(locale56);
        java.util.Set<java.lang.String> strSet61 = locale56.getUnicodeLocaleKeys();
        java.util.Locale locale63 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.lang.String str64 = locale63.getCountry();
        java.lang.String str65 = locale56.getDisplayVariant(locale63);
        java.lang.String str66 = localDateTime4.toString("+10:01", locale56);
        java.util.Locale.Category category67 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale68 = java.util.Locale.getDefault(category67);
        java.util.Locale locale69 = java.util.Locale.getDefault(category67);
        java.util.Set<java.lang.String> strSet70 = locale69.getUnicodeLocaleAttributes();
        java.lang.String str71 = locale56.getDisplayLanguage(locale69);
        java.util.Locale.setDefault(locale56);
        java.util.Locale locale73 = java.util.Locale.GERMAN;
        java.lang.String str74 = locale73.getLanguage();
        java.lang.String str75 = locale56.getDisplayVariant(locale73);
        java.util.Set<java.lang.Character> charSet76 = locale73.getExtensionKeys();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u672c" + "'", str13, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str14, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u672c" + "'", str17, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str19, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u65e5\u672c" + "'", str22, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str23, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u65e5\u672c" + "'", str26, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u65e5\u672c" + "'", str31, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u65e5\u672c" + "'", str35, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale56.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u65e5\u672c" + "'", str58, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Japanese (Japan)" + "'", str59, "Japanese (Japan)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1970" + "'", str60, "1970");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+10:01" + "'", str66, "+10:01");
        org.junit.Assert.assertTrue("'" + category67 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category67.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u65e5\u672c" + "'", str71, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "de" + "'", str74, "de");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(charSet76);
    }

    @Test
    public void test05055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05055");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.weekyear();
        org.joda.time.Chronology chronology32 = zonedChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DurationField durationField35 = zonedChronology28.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long40 = zonedChronology28.getDateTimeMillis(1964, 1969, 1200000, 35142965);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test05056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05056");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfMonth(10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, chronology11);
        int int13 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfSecond(100);
        org.joda.time.Chronology chronology16 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfCentury();
        org.joda.time.DurationField durationField18 = chronology16.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        long long22 = dateTimeZone20.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone20);
        int[] intArray25 = chronology16.get((org.joda.time.ReadablePartial) localDateTime23, (long) 999);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.plusHours((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withDayOfYear(10);
        boolean boolean30 = localDateTime7.isEqual((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.withMinuteOfHour((int) '4');
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundCeilingCopy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1, 999]");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test05057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05057");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField33 = zonedChronology28.halfdays();
        org.joda.time.DurationField durationField34 = zonedChronology28.seconds();
        java.lang.String str35 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.minuteOfHour();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(0L, chronology38);
        int int40 = localDateTime39.getWeekyear();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withYearOfEra(1970);
        org.joda.time.DateTime dateTime43 = localDateTime42.toDateTime();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(0L, chronology45);
        int int47 = localDateTime46.getWeekyear();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withYearOfEra(1970);
        org.joda.time.DateTime dateTime50 = localDateTime49.toDateTime();
        int int51 = dateTime43.compareTo((org.joda.time.ReadableInstant) dateTime50);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean54 = dateTime50.equals((java.lang.Object) timeZone53);
        int int55 = timeZone53.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.Chronology chronology57 = zonedChronology28.withZone(dateTimeZone56);
        java.util.TimeZone timeZone59 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        int int62 = timeZone59.getOffset((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(dateTimeZone63);
        java.lang.String str66 = dateTimeZone63.getShortName(44L);
        long long68 = dateTimeZone56.getMillisKeepLocal(dateTimeZone63, (long) 1967);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str35, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1967L + "'", long68 == 1967L);
    }

    @Test
    public void test05058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05058");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder0.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder8.setExtension('u', "1964-06-20T08:00:00.000");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 20T08:00:00.000 [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test05059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05059");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.lang.String str11 = property7.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property7.getFieldType();
        org.joda.time.LocalDateTime localDateTime13 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekyear();
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        long long18 = dateTimeZone16.previousTransition(0L);
        long long20 = dateTimeZone16.convertUTCToLocal(1L);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long25 = dateTimeZone16.getMillisKeepLocal(dateTimeZone23, (long) (-1));
        int int27 = dateTimeZone16.getStandardOffset((long) '4');
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(0L, chronology30);
        java.lang.String str33 = localDateTime31.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = localDateTime31.toString(dateTimeFormatter34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime31.monthOfYear();
        org.joda.time.Interval interval37 = property36.toInterval();
        long long38 = property36.remainder();
        org.joda.time.LocalDateTime localDateTime39 = property36.roundHalfFloorCopy();
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        int int41 = property36.getMaximumTextLength(locale40);
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.lang.String str43 = locale42.getCountry();
        int int44 = property36.getMaximumTextLength(locale42);
        java.lang.String str45 = dateTimeZone16.getShortName((-625L), locale42);
        java.util.Locale locale46 = locale42.stripExtensions();
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category15, locale46);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        long long52 = dateTimeZone49.convertLocalToUTC(100L, true);
        long long55 = dateTimeZone49.convertLocalToUTC((long) 1970, false);
        java.lang.String str57 = dateTimeZone49.getName((-2208873600000L));
        java.util.Locale locale59 = java.util.Locale.CHINA;
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale59.getDisplayName(locale60);
        java.util.Set<java.lang.String> strSet62 = locale59.getUnicodeLocaleAttributes();
        java.lang.String str63 = dateTimeZone49.getName(1644572694666L, locale59);
        java.util.Locale.setDefault(category15, locale59);
        int int65 = property14.getMaximumShortTextLength(locale59);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u65e5\u672c" + "'", str33, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T00:00:00.000" + "'", str35, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "CN" + "'", str43, "CN");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L + "'", long52 == 100L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1970L + "'", long55 == 1970L);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str61, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
    }

    @Test
    public void test05060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05060");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours((int) ' ');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withMillisOfSecond(100);
        org.joda.time.Chronology chronology14 = localDateTime10.getChronology();
        java.lang.String str15 = localDateTime10.toString();
        int int16 = localDateTime10.getYearOfCentury();
        int int17 = localDateTime10.getCenturyOfEra();
        boolean boolean18 = localDateTime7.isEqual((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(0L, chronology20);
        int int22 = localDateTime21.getWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withMillisOfSecond(100);
        org.joda.time.Chronology chronology25 = localDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        long long29 = dateTimeZone27.previousTransition(0L);
        long long31 = dateTimeZone27.nextTransition((long) (-1));
        org.joda.time.Chronology chronology32 = chronology25.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField33 = chronology25.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology25);
        org.joda.time.DateTimeZone dateTimeZone35 = chronology25.getZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.Chronology chronology38 = chronology25.withZone(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime7, chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long46 = chronology38.getDateTimeMillis(115200000L, 51, 19, 0, 999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01T00:00:00.000" + "'", str15, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 70 + "'", int16 == 70);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 19 + "'", int17 == 19);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test05061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05061");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet0.clear();
        java.lang.Object[] objArray2 = strSet0.toArray();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
    }

    @Test
    public void test05062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05062");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        java.util.Date date7 = localDateTime6.toDate();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusWeeks(7);
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.year();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, chronology12);
        int int14 = localDateTime13.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withMillisOfSecond(100);
        org.joda.time.Chronology chronology17 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DurationField durationField19 = chronology17.millis();
        org.joda.time.DurationField durationField20 = chronology17.months();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDateTime21.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.minusHours((int) '#');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        long long29 = dateTimeZone27.previousTransition(100L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        int int35 = localDateTime34.getWeekyear();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withYearOfEra(1970);
        org.joda.time.DateTime dateTime38 = localDateTime37.toDateTime();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(0L, chronology40);
        int int42 = localDateTime41.getWeekyear();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withYearOfEra(1970);
        org.joda.time.DateTime dateTime45 = localDateTime44.toDateTime();
        int int46 = dateTime38.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = localDateTime31.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        java.lang.String str48 = dateTime38.toString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(0L, chronology50);
        java.lang.String str53 = localDateTime51.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = localDateTime51.toString(dateTimeFormatter54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime51.monthOfYear();
        org.joda.time.Interval interval57 = property56.toInterval();
        long long58 = property56.remainder();
        org.joda.time.LocalDateTime localDateTime59 = property56.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.plus(readableDuration60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(0L, chronology63);
        java.lang.String str66 = localDateTime64.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = null;
        java.lang.String str68 = localDateTime64.toString(dateTimeFormatter67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime64.monthOfYear();
        org.joda.time.Interval interval70 = property69.toInterval();
        long long71 = property69.remainder();
        org.joda.time.LocalDateTime localDateTime72 = property69.roundHalfFloorCopy();
        java.lang.String str73 = property69.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = property69.getFieldType();
        boolean boolean75 = localDateTime59.isSupported(dateTimeFieldType74);
        int int76 = dateTime38.get(dateTimeFieldType74);
        org.joda.time.DateTime dateTime77 = localDateTime26.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        int int78 = property10.compareTo((org.joda.time.ReadableInstant) dateTime77);
        java.util.Locale locale81 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale82 = java.util.Locale.ENGLISH;
        java.lang.String str83 = locale81.getDisplayLanguage(locale82);
        java.lang.String str84 = property10.getAsShortText(locale81);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L + "'", long29 == 100L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str48, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u65e5\u672c" + "'", str53, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01T00:00:00.000" + "'", str55, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u65e5\u672c" + "'", str66, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1970-01-01T00:00:00.000" + "'", str68, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Jan" + "'", str73, "Jan");
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertEquals(locale81.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u65e5\u672c" + "'", str83, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "1970" + "'", str84, "1970");
    }

    @Test
    public void test05063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05063");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.lang.String str4 = locale2.getDisplayCountry(locale3);
        java.util.Locale.Builder builder5 = builder1.setLocale(locale3);
        java.util.Locale locale6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setScript("en-US");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: en-US [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
    }

    @Test
    public void test05064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05064");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, chronology11);
        java.lang.String str14 = localDateTime12.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime12.toString(dateTimeFormatter15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.monthOfYear();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.LocalDateTime localDateTime20 = property17.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property17.getFieldType();
        org.joda.time.LocalDateTime.Property property22 = localDateTime9.property(dateTimeFieldType21);
        int int23 = property22.getMinimumValueOverall();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(0L, chronology25);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withYearOfEra(1970);
        org.joda.time.DateTime dateTime30 = localDateTime29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone31.previousTransition(100L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        int int39 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYearOfEra(1970);
        org.joda.time.DateTime dateTime42 = localDateTime41.toDateTime();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(0L, chronology44);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withYearOfEra(1970);
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        int int50 = dateTime42.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = localDateTime35.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean52 = dateTime30.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology53 = dateTime30.getChronology();
        long long54 = property22.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(0L, chronology56);
        int int58 = localDateTime57.getWeekyear();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.withYearOfEra(1970);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plus(readableDuration61);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(0L, chronology64);
        int int66 = localDateTime65.getWeekyear();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.withYearOfEra(1970);
        org.joda.time.DateTime dateTime69 = localDateTime68.toDateTime();
        org.joda.time.DateTime dateTime70 = localDateTime60.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(0L, chronology72);
        int int74 = localDateTime73.getWeekyear();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.withYearOfEra(1970);
        org.joda.time.DateTime dateTime77 = localDateTime76.toDateTime();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime(0L, chronology79);
        int int81 = localDateTime80.getWeekyear();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime80.withYearOfEra(1970);
        org.joda.time.DateTime dateTime84 = localDateTime83.toDateTime();
        int int85 = dateTime77.compareTo((org.joda.time.ReadableInstant) dateTime84);
        boolean boolean86 = dateTime70.isAfter((org.joda.time.ReadableInstant) dateTime84);
        boolean boolean87 = dateTime30.isEqual((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTimeZone dateTimeZone88 = dateTime30.getZone();
        long long90 = dateTimeZone88.previousTransition(1970L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.000" + "'", str16, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L + "'", long33 == 100L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1970 + "'", int58 == 1970);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1970 + "'", int66 == 1970);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1970 + "'", int74 == 1970);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1970 + "'", int81 == 1970);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1970L + "'", long90 == 1970L);
    }

    @Test
    public void test05065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05065");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Ora media di Greenwich");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.lang.String str3 = locale2.getVariant();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator5 = strSet4.spliterator();
        boolean boolean6 = strSet4.isEmpty();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSpliterator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test05066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05066");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(0L);
        long long4 = dateTimeZone0.nextTransition((long) (-1));
        boolean boolean6 = dateTimeZone0.isStandardOffset((long) ' ');
        long long8 = dateTimeZone0.nextTransition((long) 40);
        java.lang.String str9 = dateTimeZone0.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 40L + "'", long8 == 40L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
    }

    @Test
    public void test05067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05067");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(0L, chronology10);
        int int12 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withMillisOfSecond(100);
        org.joda.time.Chronology chronology15 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DurationField durationField17 = chronology15.days();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        long long20 = dateTimeZone18.previousTransition(100L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withMillisOfSecond((int) (byte) 0);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePartial) localDateTime22, (long) (-1));
        org.joda.time.DateTimeField dateTimeField27 = chronology15.millisOfDay();
        org.joda.time.DurationField durationField28 = chronology15.hours();
        org.joda.time.DurationField durationField29 = chronology15.weeks();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        long long36 = dateTimeZone32.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology37 = org.joda.time.chrono.ZonedChronology.getInstance(chronology15, dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology37.halfdayOfDay();
        org.joda.time.DurationField durationField39 = zonedChronology37.seconds();
        org.joda.time.DateTimeZone dateTimeZone40 = zonedChronology37.getZone();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology37.monthOfYear();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology37.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology37.weekOfWeekyear();
        org.joda.time.DurationField durationField44 = zonedChronology37.years();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology37.halfdayOfDay();
        boolean boolean46 = property7.equals((java.lang.Object) zonedChronology37);
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology37.hourOfDay();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology37.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long54 = zonedChronology37.getDateTimeMillis(2L, (int) (byte) -1, 48, 8, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test05068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05068");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone1.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusWeeks(2);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test05069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05069");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale6 = new java.util.Locale("UTC");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale locale8 = builder4.build();
        java.util.Locale.Builder builder10 = builder4.setScript("");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder11.build();
        java.util.Locale locale13 = builder11.build();
        java.util.Locale.Builder builder15 = builder11.setLanguage("");
        java.util.Locale locale18 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale19 = locale18.stripExtensions();
        java.util.Locale locale20 = locale18.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder15.setLocale(locale20);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals(locale6.toString(), "utc");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "utc");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "utc");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "utc");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals(locale18.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "\u65e5\u672c_HI!");
    }

    @Test
    public void test05070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05070");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.hourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyear();
        org.joda.time.DurationField durationField33 = zonedChronology28.centuries();
        org.joda.time.Chronology chronology34 = zonedChronology28.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long39 = zonedChronology28.getDateTimeMillis((int) 'x', (int) (byte) 100, 36060000, 36000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(chronology34);
    }

    @Test
    public void test05071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05071");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.dayOfYear();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, chronology34);
        int int36 = localDateTime35.getWeekyear();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withMillisOfSecond(100);
        org.joda.time.Chronology chronology39 = localDateTime35.getChronology();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.withDurationAdded(readableDuration40, (int) (short) 0);
        int[] intArray44 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime35, (long) 2);
        org.joda.time.DurationField durationField45 = zonedChronology28.years();
        org.joda.time.Chronology chronology46 = zonedChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology28.hourOfDay();
        org.joda.time.DurationField durationField48 = zonedChronology28.minutes();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology28.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1970, 1, 1, 2]");
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test05072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05072");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder0.setUnicodeLocaleKeyword("Japanese", "us-FR");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: Japanese [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test05073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05073");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        int int14 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime13);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean17 = dateTime13.equals((java.lang.Object) timeZone16);
        int int18 = timeZone16.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        long long21 = dateTimeZone19.nextTransition(0L);
        int int23 = dateTimeZone19.getOffsetFromLocal(1644572148897L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test05074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05074");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.hourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.millisOfSecond();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        java.lang.String str40 = localDateTime38.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = localDateTime38.toString(dateTimeFormatter41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime38.monthOfYear();
        org.joda.time.Interval interval44 = property43.toInterval();
        long long45 = property43.remainder();
        org.joda.time.LocalDateTime localDateTime46 = property43.roundHalfFloorCopy();
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        int int48 = property43.getMaximumTextLength(locale47);
        org.joda.time.LocalDateTime localDateTime49 = property43.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(0L, chronology53);
        int int55 = localDateTime54.getWeekyear();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withMillisOfSecond(100);
        org.joda.time.Chronology chronology58 = localDateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.yearOfCentury();
        org.joda.time.DurationField durationField60 = chronology58.eras();
        org.joda.time.Chronology chronology61 = chronology58.withUTC();
        java.lang.String str62 = chronology61.toString();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(chronology61);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 4);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withYear(100);
        int int68 = localDateTime63.compareTo((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = localDateTime63.toString(dateTimeFormatter69);
        boolean boolean71 = localDateTime49.isAfter((org.joda.time.ReadablePartial) localDateTime63);
        int[] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            zonedChronology28.validate((org.joda.time.ReadablePartial) localDateTime63, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u65e5\u672c" + "'", str40, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970-01-01T00:00:00.000" + "'", str42, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1970 + "'", int55 == 1970);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ISOChronology[UTC]" + "'", str62, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2022-02-11T09:48:18.619" + "'", str70, "2022-02-11T09:48:18.619");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test05075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05075");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusWeeks(35162287);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime6.withDate(1200000, 25, 45);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test05076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05076");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone8.previousTransition(0L);
        long long12 = dateTimeZone8.nextTransition((long) (-1));
        org.joda.time.Chronology chronology13 = chronology6.withZone(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.hourOfDay();
        int int16 = property15.get();
        org.joda.time.tz.NameProvider nameProvider18 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider18);
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.getDefault(category20);
        java.lang.String str24 = nameProvider18.getName(locale21, "0", "venerd\354");
        java.util.Locale locale25 = java.util.Locale.ITALY;
        boolean boolean26 = locale25.hasExtensions();
        java.lang.String str27 = locale25.toLanguageTag();
        java.lang.String str28 = locale25.getDisplayScript();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(0L, chronology30);
        int int32 = localDateTime31.getWeekyear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfSecond();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.year();
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale37);
        java.util.Locale locale41 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.lang.String str43 = locale41.getDisplayLanguage(locale42);
        java.lang.String str44 = locale37.getDisplayName(locale41);
        java.lang.String str45 = property36.getAsShortText(locale41);
        java.util.Set<java.lang.String> strSet46 = locale41.getUnicodeLocaleKeys();
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.lang.String str49 = locale48.getCountry();
        java.lang.String str50 = locale41.getDisplayVariant(locale48);
        java.util.Locale locale51 = java.util.Locale.ENGLISH;
        java.util.Locale locale52 = java.util.Locale.ITALY;
        java.lang.String str53 = locale51.getDisplayCountry(locale52);
        java.lang.String str54 = locale51.getDisplayScript();
        java.util.Locale locale56 = new java.util.Locale("UTC");
        java.lang.String str57 = locale51.getDisplayName(locale56);
        java.lang.String str58 = locale41.getDisplayCountry(locale56);
        java.lang.String str59 = locale25.getDisplayVariant(locale56);
        java.lang.String str62 = nameProvider18.getName(locale25, "+00:00:00.059", "1970-01-01T00:00:00.009");
        org.joda.time.LocalDateTime localDateTime63 = property15.setCopy("9", locale25);
        int int64 = localDateTime63.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(nameProvider18);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "it-IT" + "'", str27, "it-IT");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals(locale41.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u65e5\u672c" + "'", str43, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u65e5\u672c (HI!)" + "'", str44, "\u65e5\u672c (HI!)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970" + "'", str45, "1970");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals(locale56.toString(), "utc");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "English" + "'", str57, "English");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "HI!" + "'", str58, "HI!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
    }

    @Test
    public void test05077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05077");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.weekyear();
        org.joda.time.Chronology chronology32 = zonedChronology28.withUTC();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withYearOfCentury(11);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test05078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05078");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.millis();
        org.joda.time.DurationField durationField9 = chronology6.months();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusHours((int) '#');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusDays(3);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withDurationAdded(readableDuration20, 12);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plus(readableDuration23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime24.getFieldTypes();
        int int26 = localDateTime24.getWeekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
    }

    @Test
    public void test05079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05079");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        int int14 = localDateTime10.getDayOfYear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.dayOfYear();
        int int16 = property15.getMinimumValue();
        int int17 = property15.get();
        java.util.Locale locale18 = java.util.Locale.US;
        java.lang.String str19 = locale18.getLanguage();
        java.lang.String str20 = property15.getAsText(locale18);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "en" + "'", str19, "en");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
    }

    @Test
    public void test05080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05080");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((java.lang.Object) intArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: [I");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
    }

    @Test
    public void test05081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05081");
        java.lang.String[] strArray4 = new java.lang.String[] { "\u65e5\u6587\u65e5\u672c)", "CN", "\u4e2d\u6587", "\u65e5\u6587\u65e5\u672c)" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        boolean boolean7 = strSet5.isEmpty();
        boolean boolean8 = strSet5.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.String str15 = locale12.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str20 = locale17.getDisplayName(locale19);
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.lang.String str24 = locale21.getDisplayName();
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.util.Locale[] localeArray37 = new java.util.Locale[] { locale12, locale17, locale21, locale25, locale28, locale29, locale30, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList38);
        java.lang.String[] strArray42 = new java.lang.String[] { "1970-01-01T00:00:00.000" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.util.Locale.FilteringMode filteringMode45 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList43, filteringMode45);
        java.util.Locale locale47 = java.util.Locale.CHINA;
        java.util.Locale locale48 = java.util.Locale.CHINA;
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.util.Locale locale53 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale54 = locale53.stripExtensions();
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        java.util.Locale locale58 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale59 = locale58.stripExtensions();
        java.util.Locale locale62 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.lang.String str64 = locale62.getDisplayLanguage(locale63);
        java.util.Locale locale65 = java.util.Locale.JAPAN;
        java.util.Locale locale66 = java.util.Locale.JAPAN;
        java.lang.String str67 = locale65.getDisplayCountry(locale66);
        java.util.Locale locale70 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale71 = locale70.stripExtensions();
        java.util.Locale locale72 = java.util.Locale.getDefault();
        java.util.Locale locale74 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Locale locale75 = java.util.Locale.US;
        java.util.Locale locale76 = java.util.Locale.getDefault();
        java.util.Locale locale77 = java.util.Locale.CHINA;
        java.lang.String str78 = locale77.getCountry();
        java.util.Locale[] localeArray79 = new java.util.Locale[] { locale47, locale48, locale49, locale50, locale53, locale55, locale58, locale62, locale66, locale71, locale72, locale74, locale75, locale76, locale77 };
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.stream.Stream<java.util.Locale> localeStream83 = localeList82.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream84 = localeList82.stream();
        java.util.stream.Stream<java.util.Locale> localeStream85 = localeList82.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream86 = localeList82.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream87 = localeList82.parallelStream();
        boolean boolean88 = strSet5.retainAll((java.util.Collection<java.util.Locale>) localeList82);
        int int89 = strSet5.size();
        int int90 = strSet5.size();
        boolean boolean91 = strSet5.isEmpty();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Japanese (Japan)" + "'", str15, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c" + "'", str18, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str20, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Japanese (Japan)" + "'", str24, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u672c" + "'", str27, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u65e5\u672c" + "'", str32, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + filteringMode45 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode45.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale53.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertEquals(locale58.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals(locale62.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u65e5\u672c" + "'", str64, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u65e5\u672c" + "'", str67, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale70.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "CN" + "'", str78, "CN");
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(localeList82);
        org.junit.Assert.assertNotNull(localeStream83);
        org.junit.Assert.assertNotNull(localeStream84);
        org.junit.Assert.assertNotNull(localeStream85);
        org.junit.Assert.assertNotNull(localeStream86);
        org.junit.Assert.assertNotNull(localeStream87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test05082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05082");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str5 = nameProvider0.getShortName(locale2, "", "hi!");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        java.util.Locale locale11 = java.util.Locale.US;
        boolean boolean12 = localDateTime10.equals((java.lang.Object) locale11);
        java.lang.String str13 = locale11.toLanguageTag();
        java.lang.String str16 = nameProvider0.getShortName(locale11, "2022-02-11T09:44:17.426", "");
        java.util.Set<java.lang.String> strSet17 = locale11.getUnicodeLocaleKeys();
        int int18 = strSet17.size();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en-US" + "'", str13, "en-US");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test05083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05083");
        java.util.Locale locale2 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.lang.String str4 = locale2.getDisplayLanguage(locale3);
        java.util.Locale locale7 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.lang.String str8 = locale3.getDisplayScript(locale7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(0L, chronology10);
        java.lang.String str13 = localDateTime11.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = localDateTime11.toString(dateTimeFormatter14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime11.monthOfYear();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundCeilingCopy();
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.lang.String str24 = locale21.getDisplayName();
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str29 = locale26.getDisplayName(locale28);
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.lang.String str33 = locale30.getDisplayName();
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.util.Locale locale39 = java.util.Locale.JAPAN;
        java.util.Locale locale40 = java.util.Locale.JAPAN;
        java.lang.String str41 = locale39.getDisplayCountry(locale40);
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        java.util.Locale locale43 = java.util.Locale.JAPAN;
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.lang.String str45 = locale43.getDisplayCountry(locale44);
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale21, locale26, locale30, locale34, locale37, locale38, locale39, locale42, locale43 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList47);
        java.lang.String[] strArray51 = new java.lang.String[] { "1970-01-01T00:00:00.000" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.util.Locale.FilteringMode filteringMode54 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList52, filteringMode54);
        java.util.Locale locale56 = java.util.Locale.CHINA;
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        java.util.Locale locale62 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale63 = locale62.stripExtensions();
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        java.util.Locale locale67 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale68 = locale67.stripExtensions();
        java.util.Locale locale71 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale72 = java.util.Locale.ENGLISH;
        java.lang.String str73 = locale71.getDisplayLanguage(locale72);
        java.util.Locale locale74 = java.util.Locale.JAPAN;
        java.util.Locale locale75 = java.util.Locale.JAPAN;
        java.lang.String str76 = locale74.getDisplayCountry(locale75);
        java.util.Locale locale79 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale80 = locale79.stripExtensions();
        java.util.Locale locale81 = java.util.Locale.getDefault();
        java.util.Locale locale83 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Locale locale84 = java.util.Locale.US;
        java.util.Locale locale85 = java.util.Locale.getDefault();
        java.util.Locale locale86 = java.util.Locale.CHINA;
        java.lang.String str87 = locale86.getCountry();
        java.util.Locale[] localeArray88 = new java.util.Locale[] { locale56, locale57, locale58, locale59, locale62, locale64, locale67, locale71, locale75, locale80, locale81, locale83, locale84, locale85, locale86 };
        java.util.ArrayList<java.util.Locale> localeList89 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList89, localeArray88);
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList89);
        java.util.stream.Stream<java.util.Locale> localeStream92 = localeList91.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream93 = localeList91.stream();
        java.util.stream.Stream<java.util.Locale> localeStream94 = localeList91.parallelStream();
        boolean boolean95 = property16.equals((java.lang.Object) localeStream94);
        java.util.Locale locale96 = java.util.Locale.GERMAN;
        java.lang.String str97 = property16.getAsShortText(locale96);
        java.lang.String str98 = locale3.getDisplayLanguage(locale96);
        java.lang.String str99 = locale96.getDisplayName();
        org.junit.Assert.assertEquals(locale2.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale7.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u672c" + "'", str13, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01T00:00:00.000" + "'", str15, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Japanese (Japan)" + "'", str24, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u672c" + "'", str27, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str29, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u65e5\u672c" + "'", str32, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Japanese (Japan)" + "'", str33, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u65e5\u672c" + "'", str41, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u65e5\u672c" + "'", str45, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + filteringMode54 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode54.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale62.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it");
        org.junit.Assert.assertEquals(locale67.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals(locale71.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u65e5\u672c" + "'", str73, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u65e5\u672c" + "'", str76, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale79.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "CN" + "'", str87, "CN");
        org.junit.Assert.assertNotNull(localeArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertNotNull(localeStream92);
        org.junit.Assert.assertNotNull(localeStream93);
        org.junit.Assert.assertNotNull(localeStream94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(locale96);
        org.junit.Assert.assertEquals(locale96.toString(), "de");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "Jan" + "'", str97, "Jan");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "Englisch" + "'", str98, "Englisch");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "German" + "'", str99, "German");
    }

    @Test
    public void test05084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05084");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.lang.String str11 = property7.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property7.getFieldType();
        org.joda.time.LocalDateTime localDateTime13 = property7.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property7.getFieldType();
        org.joda.time.LocalDateTime localDateTime15 = property7.roundCeilingCopy();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, chronology17);
        int int19 = localDateTime18.getWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withDayOfMonth(10);
        int int26 = localDateTime23.getEra();
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime28 = property27.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime30 = property27.addToCopy(0);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withDurationAdded(readableDuration31, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusMonths(840);
        boolean boolean36 = localDateTime15.isEqual((org.joda.time.ReadablePartial) localDateTime33);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test05085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05085");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.millisOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology28.days();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test05086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05086");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone32 = zonedChronology28.getZone();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, chronology34);
        java.util.Locale locale36 = java.util.Locale.US;
        boolean boolean37 = localDateTime35.equals((java.lang.Object) locale36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.minus(readableDuration39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.minus(readableDuration41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(0L, chronology44);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withDayOfMonth(10);
        int int53 = localDateTime50.getEra();
        int[] intArray54 = localDateTime50.getValues();
        zonedChronology28.validate((org.joda.time.ReadablePartial) localDateTime42, intArray54);
        int int56 = localDateTime42.getYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1970, 1, 2, 28800000]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
    }

    @Test
    public void test05087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05087");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("centuryOfEra");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=centuryofera");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05088");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.weekOfWeekyear();
        org.joda.time.Chronology chronology36 = zonedChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.weekyear();
        org.joda.time.DurationField durationField38 = zonedChronology28.minutes();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.weekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test05089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05089");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plus(readableDuration11);
        int int13 = localDateTime12.getMillisOfDay();
        java.util.Date date14 = localDateTime12.toDate();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 GMT 1970");
    }

    @Test
    public void test05090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05090");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfEra(1970);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        int int19 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(0L, chronology23);
        int int25 = localDateTime24.getWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone28.previousTransition(100L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withMillisOfSecond((int) (byte) 0);
        int int35 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        int int36 = localDateTime32.getMinuteOfHour();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(0L, chronology38);
        int int40 = localDateTime39.getWeekyear();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withYearOfEra(1970);
        org.joda.time.DateTime dateTime43 = localDateTime42.toDateTime();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(0L, chronology45);
        int int47 = localDateTime46.getWeekyear();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withYearOfEra(1970);
        org.joda.time.DateTime dateTime50 = localDateTime49.toDateTime();
        int int51 = dateTime43.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(0L, chronology53);
        java.lang.String str56 = localDateTime54.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = null;
        java.lang.String str58 = localDateTime54.toString(dateTimeFormatter57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime54.monthOfYear();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime54.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withSecondOfMinute((int) '4');
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        long long66 = dateTimeZone64.previousTransition(100L);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.withHourOfDay((int) (short) 0);
        int int71 = localDateTime70.getEra();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(0L, chronology75);
        java.lang.String str78 = localDateTime76.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = null;
        java.lang.String str80 = localDateTime76.toString(dateTimeFormatter79);
        org.joda.time.LocalDateTime.Property property81 = localDateTime76.monthOfYear();
        org.joda.time.Interval interval82 = property81.toInterval();
        org.joda.time.LocalDateTime localDateTime84 = property81.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = property81.getFieldType();
        org.joda.time.LocalDateTime.Property property86 = localDateTime73.property(dateTimeFieldType85);
        int int87 = localDateTime61.indexOf(dateTimeFieldType85);
        boolean boolean88 = dateTime43.isSupported(dateTimeFieldType85);
        int int89 = localDateTime32.get(dateTimeFieldType85);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime21.withField(dateTimeFieldType85, 3);
        int int92 = localDateTime4.get(dateTimeFieldType85);
        java.lang.Object obj93 = null;
        boolean boolean94 = localDateTime4.equals(obj93);
        java.util.Date date95 = localDateTime4.toDate();
        org.joda.time.LocalDateTime localDateTime96 = org.joda.time.LocalDateTime.fromDateFields(date95);
        org.joda.time.LocalDateTime localDateTime97 = org.joda.time.LocalDateTime.fromDateFields(date95);
        int int98 = localDateTime97.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u65e5\u672c" + "'", str56, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970-01-01T00:00:00.000" + "'", str58, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u65e5\u672c" + "'", str78, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1970-01-01T00:00:00.000" + "'", str80, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(date95);
        org.junit.Assert.assertEquals(date95.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime96);
        org.junit.Assert.assertNotNull(localDateTime97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test05091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05091");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = timeZone1.getOffset((long) (byte) 10);
        int int5 = timeZone1.getRawOffset();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone1.hasSameRules(timeZone6);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("\u82f1\u8a9e");
        boolean boolean10 = timeZone6.hasSameRules(timeZone9);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale.Builder builder16 = builder13.setLanguage("");
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder19 = builder13.setLocale(locale17);
        java.util.Locale.Builder builder21 = builder19.setLanguageTag("UTC");
        java.util.Locale.Builder builder22 = builder21.clear();
        java.util.Locale locale23 = builder22.build();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = timeZone9.getDisplayName(false, (int) 'a', locale23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
    }

    @Test
    public void test05092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05092");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField33 = zonedChronology28.halfdays();
        org.joda.time.DurationField durationField34 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology28.year();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.minuteOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test05093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05093");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = timeZone1.getOffset((long) (byte) 10);
        boolean boolean5 = timeZone1.observesDaylightTime();
        timeZone1.setRawOffset(20);
        timeZone1.setID("\u4e2d\u6587");
        boolean boolean10 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test05094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05094");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, chronology11);
        java.lang.String str14 = localDateTime12.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime12.toString(dateTimeFormatter15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.monthOfYear();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.LocalDateTime localDateTime20 = property17.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property17.getFieldType();
        org.joda.time.LocalDateTime.Property property22 = localDateTime9.property(dateTimeFieldType21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime9.minusWeeks(1900);
        org.joda.time.DurationFieldType durationFieldType25 = null;
        boolean boolean26 = localDateTime24.isSupported(durationFieldType25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(0L, chronology28);
        java.lang.String str31 = localDateTime29.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = localDateTime29.toString(dateTimeFormatter32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime29.monthOfYear();
        org.joda.time.Interval interval35 = property34.toInterval();
        long long36 = property34.remainder();
        org.joda.time.LocalDateTime localDateTime37 = property34.roundHalfFloorCopy();
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        int int39 = property34.getMaximumTextLength(locale38);
        org.joda.time.LocalDateTime localDateTime40 = property34.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.yearOfCentury();
        java.lang.String str42 = property41.getAsShortText();
        org.joda.time.LocalDateTime localDateTime43 = property41.withMinimumValue();
        int int44 = localDateTime43.getYear();
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(0L, chronology47);
        java.lang.String str50 = localDateTime48.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = localDateTime48.toString(dateTimeFormatter51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime48.monthOfYear();
        org.joda.time.Interval interval54 = property53.toInterval();
        org.joda.time.LocalDateTime localDateTime56 = property53.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property53.getFieldType();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(0L, chronology59);
        java.util.Locale locale61 = java.util.Locale.US;
        boolean boolean62 = localDateTime60.equals((java.lang.Object) locale61);
        java.lang.String str63 = locale61.toLanguageTag();
        int int64 = property53.getMaximumTextLength(locale61);
        org.joda.time.LocalDateTime localDateTime65 = property53.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime66 = property53.roundFloorCopy();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(0L, chronology68);
        int int70 = localDateTime69.getWeekyear();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.UTC;
        long long75 = dateTimeZone73.previousTransition(100L);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology76);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.withMillisOfSecond((int) (byte) 0);
        int int80 = localDateTime69.compareTo((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.UTC;
        long long84 = dateTimeZone81.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime(dateTimeZone81);
        org.joda.time.DateTime dateTime86 = localDateTime69.toDateTime(dateTimeZone81);
        int int87 = property53.compareTo((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.LocalDateTime localDateTime88 = property53.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = property53.getFieldType();
        boolean boolean90 = dateTime45.isSupported(dateTimeFieldType89);
        boolean boolean91 = localDateTime24.isSupported(dateTimeFieldType89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime93 = localDateTime24.minusYears(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292277060 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.000" + "'", str16, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u65e5\u672c" + "'", str31, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01T00:00:00.000" + "'", str33, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "70" + "'", str42, "70");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1900 + "'", int44 == 1900);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u65e5\u672c" + "'", str50, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970-01-01T00:00:00.000" + "'", str52, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "en-US" + "'", str63, "en-US");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1970 + "'", int70 == 1970);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 100L + "'", long75 == 100L);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 100L + "'", long84 == 100L);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test05095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05095");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withSecondOfMinute((int) '4');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(999);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withDurationAdded(readableDuration14, 3);
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = localDateTime11.getFields();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime11.withHourOfDay(86399999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
    }

    @Test
    public void test05096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05096");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.minuteOfDay();
        java.lang.Object obj35 = null;
        boolean boolean36 = zonedChronology28.equals(obj35);
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.hourOfHalfday();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test05097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05097");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, chronology11);
        java.lang.String str14 = localDateTime12.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime12.toString(dateTimeFormatter15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.monthOfYear();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.LocalDateTime localDateTime20 = property17.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property17.getFieldType();
        org.joda.time.LocalDateTime.Property property22 = localDateTime9.property(dateTimeFieldType21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime9.minusWeeks(1900);
        org.joda.time.DurationFieldType durationFieldType25 = null;
        boolean boolean26 = localDateTime24.isSupported(durationFieldType25);
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder28.clearExtensions();
        java.util.Locale.Builder builder31 = builder28.setLanguage("");
        java.util.Locale.Builder builder32 = builder31.clearExtensions();
        java.util.Locale locale34 = new java.util.Locale("UTC");
        java.util.Locale.Builder builder35 = builder32.setLocale(locale34);
        java.util.Locale locale36 = builder32.build();
        java.util.Locale.Builder builder38 = builder32.setScript("");
        java.util.Locale.Builder builder39 = builder38.clearExtensions();
        java.util.Locale locale40 = builder39.build();
        java.lang.String str41 = locale40.toLanguageTag();
        java.lang.String str42 = localDateTime24.toString("\u65e5\u6587", locale40);
        java.lang.String str43 = locale40.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.000" + "'", str16, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals(locale34.toString(), "utc");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "utc");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "utc");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "utc" + "'", str41, "utc");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u65e5\u6587" + "'", str42, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "utc" + "'", str43, "utc");
    }

    @Test
    public void test05098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05098");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra((int) (short) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("Ora media di Greenwich");
        java.lang.String str20 = property17.getAsShortText(locale19);
        int int21 = property17.getLeapAmount();
        org.joda.time.DurationField durationField22 = property17.getLeapDurationField();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(durationField22);
    }

    @Test
    public void test05099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05099");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfDay();
        long long39 = zonedChronology28.getDateTimeMillis(0, 1, (int) (byte) 1, 20);
        org.joda.time.DurationField durationField40 = zonedChronology28.weekyears();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray43 = zonedChronology28.get(readablePeriod41, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-62167219199980L) + "'", long39 == (-62167219199980L));
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test05100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05100");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        boolean boolean11 = property7.isLeap();
        org.joda.time.ReadableInstant readableInstant12 = null;
        long long13 = property7.getDifferenceAsLong(readableInstant12);
        org.joda.time.DurationField durationField14 = property7.getDurationField();
        org.joda.time.DurationField durationField15 = property7.getLeapDurationField();
        long long16 = property7.remainder();
        int int17 = property7.getMinimumValue();
        java.lang.String str18 = property7.getName();
        java.lang.String str19 = property7.getAsString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-625L) + "'", long13 == (-625L));
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "monthOfYear" + "'", str18, "monthOfYear");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
    }

    @Test
    public void test05101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05101");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("45");
        boolean boolean2 = timeZone1.observesDaylightTime();
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(zoneId3);
    }

    @Test
    public void test05102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05102");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str5 = nameProvider0.getShortName(locale2, "", "hi!");
        java.lang.String str6 = locale2.getISO3Country();
        java.util.Set<java.lang.String> strSet7 = locale2.getUnicodeLocaleKeys();
        strSet7.clear();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test05103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05103");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        java.lang.String str8 = property7.getName();
        org.joda.time.DurationField durationField9 = property7.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime10 = property7.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekOfWeekyear(43);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withSecondOfMinute(43);
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.dayOfMonth();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test05104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05104");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("year", strMap1);
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        boolean boolean6 = strSet4.contains((java.lang.Object) "en_US");
        boolean boolean7 = strSet4.isEmpty();
        java.lang.Object[] objArray8 = strSet4.toArray();
        java.lang.String str9 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet4);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap13);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        java.lang.String str21 = locale18.getDisplayName();
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.lang.String str24 = locale22.getDisplayCountry(locale23);
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str26 = locale23.getDisplayName(locale25);
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.lang.String str29 = locale27.getDisplayCountry(locale28);
        java.lang.String str30 = locale27.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.util.Locale locale32 = java.util.Locale.JAPAN;
        java.lang.String str33 = locale31.getDisplayCountry(locale32);
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale36 = java.util.Locale.JAPAN;
        java.util.Locale locale37 = java.util.Locale.JAPAN;
        java.lang.String str38 = locale36.getDisplayCountry(locale37);
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.util.Locale locale40 = java.util.Locale.JAPAN;
        java.util.Locale locale41 = java.util.Locale.JAPAN;
        java.lang.String str42 = locale40.getDisplayCountry(locale41);
        java.util.Locale[] localeArray43 = new java.util.Locale[] { locale18, locale23, locale27, locale31, locale34, locale35, locale36, locale39, locale40 };
        java.util.ArrayList<java.util.Locale> localeList44 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList44, localeArray43);
        java.util.List<java.util.Locale> localeList46 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList44);
        java.lang.String[] strArray48 = new java.lang.String[] { "1970-01-01T00:00:00.000" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        java.util.Locale.FilteringMode filteringMode51 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList49, filteringMode51);
        java.util.Locale locale53 = java.util.Locale.CHINA;
        java.util.Locale locale54 = java.util.Locale.CHINA;
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.util.Locale locale59 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale60 = locale59.stripExtensions();
        java.util.Locale locale61 = java.util.Locale.ITALIAN;
        java.util.Locale locale64 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale65 = locale64.stripExtensions();
        java.util.Locale locale68 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.lang.String str70 = locale68.getDisplayLanguage(locale69);
        java.util.Locale locale71 = java.util.Locale.JAPAN;
        java.util.Locale locale72 = java.util.Locale.JAPAN;
        java.lang.String str73 = locale71.getDisplayCountry(locale72);
        java.util.Locale locale76 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale77 = locale76.stripExtensions();
        java.util.Locale locale78 = java.util.Locale.getDefault();
        java.util.Locale locale80 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Locale locale81 = java.util.Locale.US;
        java.util.Locale locale82 = java.util.Locale.getDefault();
        java.util.Locale locale83 = java.util.Locale.CHINA;
        java.lang.String str84 = locale83.getCountry();
        java.util.Locale[] localeArray85 = new java.util.Locale[] { locale53, locale54, locale55, locale56, locale59, locale61, locale64, locale68, locale72, locale77, locale78, locale80, locale81, locale82, locale83 };
        java.util.ArrayList<java.util.Locale> localeList86 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList86, localeArray85);
        java.util.List<java.util.Locale> localeList88 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList86);
        java.util.stream.Stream<java.util.Locale> localeStream89 = localeList88.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream90 = localeList88.stream();
        java.util.stream.Stream<java.util.Locale> localeStream91 = localeList88.parallelStream();
        java.util.List<java.util.Locale> localeList92 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList88);
        java.util.stream.Stream<java.util.Locale> localeStream93 = localeList92.stream();
        java.util.stream.Stream<java.util.Locale> localeStream94 = localeList92.stream();
        java.util.List<java.util.Locale> localeList95 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList92);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u65e5\u672c" + "'", str20, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Japanese (Japan)" + "'", str21, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u65e5\u672c" + "'", str24, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str26, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u65e5\u672c" + "'", str29, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Japanese (Japan)" + "'", str30, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u65e5\u672c" + "'", str33, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u65e5\u672c" + "'", str38, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u65e5\u672c" + "'", str42, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(localeList46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + filteringMode51 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode51.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale59.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it");
        org.junit.Assert.assertEquals(locale64.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals(locale68.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u65e5\u672c" + "'", str70, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u65e5\u672c" + "'", str73, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale76.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "CN" + "'", str84, "CN");
        org.junit.Assert.assertNotNull(localeArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(localeList88);
        org.junit.Assert.assertNotNull(localeStream89);
        org.junit.Assert.assertNotNull(localeStream90);
        org.junit.Assert.assertNotNull(localeStream91);
        org.junit.Assert.assertNotNull(localeList92);
        org.junit.Assert.assertNotNull(localeStream93);
        org.junit.Assert.assertNotNull(localeStream94);
        org.junit.Assert.assertNotNull(localeList95);
    }

    @Test
    public void test05105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05105");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        int int12 = property7.getMaximumTextLength(locale11);
        org.joda.time.LocalDateTime localDateTime13 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfCentury();
        java.lang.String str15 = property14.getAsShortText();
        org.joda.time.LocalDateTime localDateTime16 = property14.withMinimumValue();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withMillisOfSecond((int) 'a');
        int int20 = localDateTime16.getEra();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusDays(11);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime16.withYearOfEra(11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "70" + "'", str15, "70");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test05106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05106");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.minuteOfHour();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        java.util.Locale locale8 = java.util.Locale.US;
        boolean boolean9 = localDateTime7.equals((java.lang.Object) locale8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withEra((int) (short) 0);
        int int22 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime3.minusWeeks(2);
        org.joda.time.LocalDateTime.Property property25 = localDateTime3.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
    }

    @Test
    public void test05107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05107");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (short) 1);
        java.lang.String str41 = dateTimeZone39.getShortName(4832097L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone39);
        java.lang.String str44 = dateTimeZone39.getNameKey((long) 59);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(0L, chronology46);
        int int48 = localDateTime47.getWeekyear();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withYearOfEra(1970);
        org.joda.time.DateTime dateTime51 = localDateTime50.toDateTime();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(0L, chronology53);
        int int55 = localDateTime54.getWeekyear();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withYearOfEra(1970);
        org.joda.time.DateTime dateTime58 = localDateTime57.toDateTime();
        int int59 = dateTime51.compareTo((org.joda.time.ReadableInstant) dateTime58);
        java.util.TimeZone timeZone61 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean62 = dateTime58.equals((java.lang.Object) timeZone61);
        int int63 = timeZone61.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        long long66 = dateTimeZone64.nextTransition(0L);
        long long68 = dateTimeZone39.getMillisKeepLocal(dateTimeZone64, 43L);
        org.joda.time.chrono.ZonedChronology zonedChronology69 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology28, dateTimeZone64);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:01" + "'", str41, "+10:01");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1970 + "'", int55 == 1970);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 36060043L + "'", long68 == 36060043L);
        org.junit.Assert.assertNotNull(zonedChronology69);
    }

    @Test
    public void test05108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05108");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = timeZone1.getOffset((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone.setDefault(timeZone1);
        java.lang.String str7 = timeZone1.getID();
        int int9 = timeZone1.getOffset((-625L));
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, chronology11);
        int int13 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withYearOfEra(1970);
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(0L, chronology18);
        int int20 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYearOfEra(1970);
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        int int24 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime23);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean27 = dateTime23.equals((java.lang.Object) timeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        timeZone26.setRawOffset((int) (short) 0);
        java.time.ZoneId zoneId31 = timeZone26.toZoneId();
        boolean boolean32 = timeZone1.hasSameRules(timeZone26);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = timeZone1.getOffset((-8096924), 35199563, 27236745, 2000, 19, 54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT" + "'", str7, "GMT");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(zoneId31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test05109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05109");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\u6cd5\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=??");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05110");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        int int14 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime13);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean17 = dateTime13.equals((java.lang.Object) timeZone16);
        java.time.ZoneId zoneId18 = timeZone16.toZoneId();
        int int20 = timeZone16.getOffset((long) 170);
        timeZone16.setID("Japanisch (Japan)");
        int int24 = timeZone16.getOffset((long) 1899);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'Japanisch (Japan)' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(zoneId18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test05111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05111");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strMap35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strMap37);
        boolean boolean39 = zonedChronology28.equals((java.lang.Object) strMap37);
        org.joda.time.DateTimeZone dateTimeZone40 = zonedChronology28.getZone();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        long long44 = zonedChronology28.add(readablePeriod41, 120L, 86399999);
        org.joda.time.DurationField durationField45 = zonedChronology28.hours();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 120L + "'", long44 == 120L);
        org.junit.Assert.assertNotNull(durationField45);
    }

    @Test
    public void test05112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05112");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(4);
        long long3 = dateTimeZone1.convertUTCToLocal(1964L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 14401964L + "'", long3 == 14401964L);
    }

    @Test
    public void test05113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05113");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfDay();
        long long39 = zonedChronology28.getDateTimeMillis(0, 1, (int) (byte) 1, 20);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.centuryOfEra();
        org.joda.time.DurationField durationField41 = zonedChronology28.minutes();
        org.joda.time.DateTimeZone dateTimeZone42 = zonedChronology28.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long47 = zonedChronology28.getDateTimeMillis(25, 39, (int) '#', 641);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-62167219199980L) + "'", long39 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
    }

    @Test
    public void test05114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05114");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(0L);
        long long4 = dateTimeZone0.nextTransition((long) (-1));
        boolean boolean6 = dateTimeZone0.isStandardOffset((long) ' ');
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        java.time.ZoneId zoneId8 = timeZone7.toZoneId();
        java.time.ZoneId zoneId9 = timeZone7.toZoneId();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = timeZone7.getDisplayName(false, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 3");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNotNull(zoneId9);
    }

    @Test
    public void test05115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05115");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMonths(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays(19);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, chronology12);
        int int14 = localDateTime13.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        long long19 = dateTimeZone17.previousTransition(100L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMillisOfSecond((int) (byte) 0);
        int int24 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plus(readablePeriod25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(0L, chronology28);
        int int30 = localDateTime29.getWeekyear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusHours((int) ' ');
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMillisOfSecond(100);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        java.lang.String str42 = localDateTime37.toString();
        int int43 = localDateTime37.getYearOfCentury();
        int int44 = localDateTime37.getCenturyOfEra();
        boolean boolean45 = localDateTime34.isEqual((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(0L, chronology47);
        int int49 = localDateTime48.getWeekyear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withMillisOfSecond(100);
        org.joda.time.Chronology chronology52 = localDateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        long long56 = dateTimeZone54.previousTransition(0L);
        long long58 = dateTimeZone54.nextTransition((long) (-1));
        org.joda.time.Chronology chronology59 = chronology52.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField60 = chronology52.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now(chronology52);
        org.joda.time.DateTimeZone dateTimeZone62 = chronology52.getZone();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.Chronology chronology65 = chronology52.withZone(dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime34, chronology65);
        boolean boolean67 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(0L, chronology69);
        int int71 = localDateTime70.getWeekyear();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.withYearOfEra(1970);
        org.joda.time.DateTime dateTime74 = localDateTime73.toDateTime();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(0L, chronology76);
        java.lang.String str79 = localDateTime77.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = null;
        java.lang.String str81 = localDateTime77.toString(dateTimeFormatter80);
        org.joda.time.LocalDateTime.Property property82 = localDateTime77.monthOfYear();
        org.joda.time.Interval interval83 = property82.toInterval();
        org.joda.time.LocalDateTime localDateTime85 = property82.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = property82.getFieldType();
        boolean boolean87 = dateTime74.isSupported(dateTimeFieldType86);
        int int88 = localDateTime26.get(dateTimeFieldType86);
        org.joda.time.LocalDateTime.Property property89 = localDateTime8.property(dateTimeFieldType86);
        java.lang.String str90 = property89.getAsText();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970-01-01T00:00:00.000" + "'", str42, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 70 + "'", int43 == 70);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 19 + "'", int44 == 19);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1970 + "'", int71 == 1970);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u65e5\u672c" + "'", str79, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "1970-01-01T00:00:00.000" + "'", str81, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "January" + "'", str90, "January");
    }

    @Test
    public void test05116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05116");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = timeZone1.getOffset((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone.setDefault(timeZone1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(0L, chronology15);
        int int17 = localDateTime16.getWeekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withYearOfEra(1970);
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        int int21 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime20);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean24 = dateTime20.equals((java.lang.Object) timeZone23);
        boolean boolean25 = timeZone1.hasSameRules(timeZone23);
        timeZone23.setID("+09:52");
        java.util.TimeZone timeZone29 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        java.lang.String str30 = timeZone29.getID();
        java.util.TimeZone.setDefault(timeZone29);
        timeZone29.setRawOffset((int) 'u');
        int int35 = timeZone29.getOffset(35080732L);
        boolean boolean36 = timeZone23.hasSameRules(timeZone29);
        boolean boolean37 = timeZone29.observesDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GMT" + "'", str30, "GMT");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 117 + "'", int35 == 117);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test05117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05117");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-2184623999968L));
    }

    @Test
    public void test05118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05118");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(365);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test05119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05119");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.String str15 = locale12.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str20 = locale17.getDisplayName(locale19);
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.lang.String str24 = locale21.getDisplayName();
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.util.Locale[] localeArray37 = new java.util.Locale[] { locale12, locale17, locale21, locale25, locale28, locale29, locale30, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList38);
        java.lang.String[] strArray42 = new java.lang.String[] { "1970-01-01T00:00:00.000" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.util.Locale.FilteringMode filteringMode45 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList43, filteringMode45);
        java.util.Locale locale47 = java.util.Locale.CHINA;
        java.util.Locale locale48 = java.util.Locale.CHINA;
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.util.Locale locale53 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale54 = locale53.stripExtensions();
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        java.util.Locale locale58 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale59 = locale58.stripExtensions();
        java.util.Locale locale62 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.lang.String str64 = locale62.getDisplayLanguage(locale63);
        java.util.Locale locale65 = java.util.Locale.JAPAN;
        java.util.Locale locale66 = java.util.Locale.JAPAN;
        java.lang.String str67 = locale65.getDisplayCountry(locale66);
        java.util.Locale locale70 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale71 = locale70.stripExtensions();
        java.util.Locale locale72 = java.util.Locale.getDefault();
        java.util.Locale locale74 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Locale locale75 = java.util.Locale.US;
        java.util.Locale locale76 = java.util.Locale.getDefault();
        java.util.Locale locale77 = java.util.Locale.CHINA;
        java.lang.String str78 = locale77.getCountry();
        java.util.Locale[] localeArray79 = new java.util.Locale[] { locale47, locale48, locale49, locale50, locale53, locale55, locale58, locale62, locale66, locale71, locale72, locale74, locale75, locale76, locale77 };
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.stream.Stream<java.util.Locale> localeStream83 = localeList82.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream84 = localeList82.stream();
        java.util.stream.Stream<java.util.Locale> localeStream85 = localeList82.parallelStream();
        boolean boolean86 = property7.equals((java.lang.Object) localeStream85);
        java.util.Locale locale87 = java.util.Locale.JAPAN;
        boolean boolean88 = locale87.hasExtensions();
        java.lang.String str89 = locale87.getDisplayName();
        java.lang.String str90 = locale87.getVariant();
        java.lang.String str91 = locale87.getDisplayScript();
        java.lang.String str92 = property7.getAsShortText(locale87);
        boolean boolean93 = property7.isLeap();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str15, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c" + "'", str18, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str20, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str24, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u672c" + "'", str27, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u65e5\u672c" + "'", str32, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + filteringMode45 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode45.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale53.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertEquals(locale58.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals(locale62.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u65e5\u672c" + "'", str64, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u65e5\u672c" + "'", str67, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale70.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "CN" + "'", str78, "CN");
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(localeList82);
        org.junit.Assert.assertNotNull(localeStream83);
        org.junit.Assert.assertNotNull(localeStream84);
        org.junit.Assert.assertNotNull(localeStream85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str89, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "1" + "'", str92, "1");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test05120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05120");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        java.lang.String str2 = timeZone1.getID();
        int int3 = timeZone1.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.time.ZoneId zoneId5 = timeZone1.toZoneId();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone(zoneId5);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
    }

    @Test
    public void test05121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05121");
        java.util.Locale locale2 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale3.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for ??");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test05122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05122");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DurationFieldType durationFieldType7 = null;
        boolean boolean8 = localDateTime2.isSupported(durationFieldType7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withCenturyOfEra((int) '#');
        int int11 = localDateTime10.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusHours((int) (short) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test05123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05123");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.hourOfHalfday();
        org.joda.time.DurationField durationField35 = zonedChronology28.millis();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology28.hourOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test05124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05124");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMinutes(100);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.year();
        org.joda.time.LocalDateTime localDateTime19 = property17.addWrapFieldToCopy(2);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readablePeriod20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withWeekyear(201);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test05125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05125");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(71, 70, (int) '4', 27236746, 35116539, 1963, 52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27236746 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05126");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(35155654);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05127");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long39 = zonedChronology28.getDateTimeMillis(10457999999L, 100, (int) (short) 10, 52, 27236744);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test05128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05128");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        int int12 = property7.getMaximumTextLength(locale11);
        org.joda.time.LocalDateTime localDateTime13 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMillis(8);
        int int18 = localDateTime17.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusMinutes((-292275054));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test05129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05129");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime4.getMinuteOfHour();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale11 = java.util.Locale.JAPAN;
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        java.lang.String str14 = locale11.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.lang.String str17 = locale15.getDisplayCountry(locale16);
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str19 = locale16.getDisplayName(locale18);
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.lang.String str23 = locale20.getDisplayName();
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.lang.String str26 = locale24.getDisplayCountry(locale25);
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.lang.String str31 = locale29.getDisplayCountry(locale30);
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.lang.String str35 = locale33.getDisplayCountry(locale34);
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale11, locale16, locale20, locale24, locale27, locale28, locale29, locale32, locale33 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList37);
        boolean boolean40 = localDateTime4.equals((java.lang.Object) localeList37);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime4.withMillisOfDay(1970);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(0L, chronology45);
        int int47 = localDateTime46.getWeekyear();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.millisOfSecond();
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.year();
        java.util.Locale locale52 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale52);
        java.util.Locale locale56 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.lang.String str58 = locale56.getDisplayLanguage(locale57);
        java.lang.String str59 = locale52.getDisplayName(locale56);
        java.lang.String str60 = property51.getAsShortText(locale56);
        java.util.Set<java.lang.String> strSet61 = locale56.getUnicodeLocaleKeys();
        java.util.Locale locale63 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.lang.String str64 = locale63.getCountry();
        java.lang.String str65 = locale56.getDisplayVariant(locale63);
        java.lang.String str66 = localDateTime4.toString("+10:01", locale56);
        java.util.Locale.Category category67 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale68 = java.util.Locale.getDefault(category67);
        java.util.Locale locale69 = java.util.Locale.getDefault(category67);
        java.util.Set<java.lang.String> strSet70 = locale69.getUnicodeLocaleAttributes();
        java.lang.String str71 = locale56.getDisplayLanguage(locale69);
        java.util.Locale.setDefault(locale56);
        java.util.Locale locale73 = java.util.Locale.GERMAN;
        java.lang.String str74 = locale73.getLanguage();
        java.lang.String str75 = locale56.getDisplayVariant(locale73);
        java.util.Locale locale79 = new java.util.Locale("GMT", "Jan", "2022-02-11T09:43:35.370");
        java.lang.String str80 = locale56.getDisplayLanguage(locale79);
        java.lang.String str81 = locale56.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = locale56.getUnicodeLocaleType("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u672c" + "'", str13, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Japanese (Japan)" + "'", str14, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u672c" + "'", str17, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str19, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u65e5\u672c" + "'", str22, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Japanese (Japan)" + "'", str23, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u65e5\u672c" + "'", str26, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u65e5\u672c" + "'", str31, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u65e5\u672c" + "'", str35, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals(locale56.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u65e5\u672c" + "'", str58, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u65e5\u672c (HI!)" + "'", str59, "\u65e5\u672c (HI!)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1970" + "'", str60, "1970");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+10:01" + "'", str66, "+10:01");
        org.junit.Assert.assertTrue("'" + category67 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category67.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u65e5\u672c" + "'", str71, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "de" + "'", str74, "de");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals(locale79.toString(), "gmt_JAN_2022-02-11T09:43:35.370");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\u65e5\u672c" + "'", str80, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u65e5\u672c (HI!)" + "'", str81, "\u65e5\u672c (HI!)");
    }

    @Test
    public void test05130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05130");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(70);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(0L, chronology4);
        int int6 = localDateTime5.getWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withYearOfEra(1970);
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone10.previousTransition(100L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(0L, chronology16);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYearOfEra(1970);
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(0L, chronology23);
        int int25 = localDateTime24.getWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withYearOfEra(1970);
        org.joda.time.DateTime dateTime28 = localDateTime27.toDateTime();
        int int29 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime30 = localDateTime14.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        boolean boolean31 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime21);
        int int32 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        long long35 = dateTimeZone33.previousTransition(0L);
        long long37 = dateTimeZone33.nextTransition((long) (-1));
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime39 = localDateTime38.toDateTime();
        boolean boolean40 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology41 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfEra();
        org.joda.time.DurationField durationField43 = chronology41.seconds();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 70 + "'", int32 == 70);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test05131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05131");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.lang.String str11 = property7.getAsShortText();
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        int int13 = property7.getMaximumTextLength(locale12);
        org.joda.time.LocalDateTime localDateTime15 = property7.addWrapFieldToCopy(100);
        int int16 = localDateTime15.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(0L, chronology18);
        int int20 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withMillisOfSecond(100);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfCentury();
        org.joda.time.DurationField durationField25 = chronology23.days();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        long long28 = dateTimeZone26.previousTransition(100L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withMillisOfSecond((int) (byte) 0);
        int[] intArray34 = chronology23.get((org.joda.time.ReadablePartial) localDateTime30, (long) (-1));
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        long long37 = dateTimeZone35.previousTransition(0L);
        long long39 = dateTimeZone35.convertUTCToLocal(1L);
        long long41 = dateTimeZone35.convertUTCToLocal((long) (byte) 10);
        org.joda.time.DateTime dateTime42 = localDateTime30.toDateTime(dateTimeZone35);
        long long45 = dateTimeZone35.adjustOffset(4363010L, false);
        org.joda.time.DateTime dateTime46 = localDateTime15.toDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime.Property property47 = localDateTime15.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = property47.getLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withEra(82045684);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82045684 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.070" + "'", str6, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 70L + "'", long9 == 70L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 4363010L + "'", long45 == 4363010L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
    }

    @Test
    public void test05132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05132");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = zonedChronology28.getZone();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        int int35 = localDateTime34.getWeekyear();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withMillisOfSecond(100);
        org.joda.time.Chronology chronology38 = localDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DurationField durationField40 = chronology38.days();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        long long43 = dateTimeZone41.previousTransition(100L);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withMillisOfSecond((int) (byte) 0);
        int[] intArray49 = chronology38.get((org.joda.time.ReadablePartial) localDateTime45, (long) (-1));
        org.joda.time.DateTimeField dateTimeField50 = chronology38.millisOfDay();
        org.joda.time.DurationField durationField51 = chronology38.hours();
        org.joda.time.DurationField durationField52 = chronology38.weeks();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        long long59 = dateTimeZone55.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology60 = org.joda.time.chrono.ZonedChronology.getInstance(chronology38, dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField61 = zonedChronology60.yearOfEra();
        org.joda.time.DateTimeField dateTimeField62 = zonedChronology60.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 0);
        boolean boolean66 = dateTimeZone65.isFixed();
        org.joda.time.Chronology chronology67 = zonedChronology60.withZone(dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology60);
        org.joda.time.DateTimeField dateTimeField69 = zonedChronology60.minuteOfHour();
        boolean boolean70 = dateTimeZone31.equals((java.lang.Object) dateTimeField69);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10L + "'", long59 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test05133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05133");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.minuteOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology32.centuries();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.Chronology chronology37 = zonedChronology32.withZone(dateTimeZone35);
        org.joda.time.DurationField durationField38 = zonedChronology32.millis();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology32.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long48 = zonedChronology32.getDateTimeMillis(71, 24264, (-1970), 0, 42, 1900, 33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1900 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test05134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05134");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology28.centuries();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.dayOfWeek();
        java.lang.String str36 = zonedChronology28.toString();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        boolean boolean39 = dateTimeZone37.isLocalDateTimeGap(localDateTime38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(0L, chronology41);
        java.lang.String str44 = localDateTime42.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = localDateTime42.toString(dateTimeFormatter45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime42.monthOfYear();
        org.joda.time.LocalDateTime localDateTime48 = property47.roundCeilingCopy();
        boolean boolean49 = dateTimeZone37.isLocalDateTimeGap(localDateTime48);
        org.joda.time.Chronology chronology50 = zonedChronology28.withZone(dateTimeZone37);
        // The following exception was thrown during execution in test generation
        try {
            long long58 = chronology50.getDateTimeMillis(1200000, (-19), 33, (int) ' ', 201, 86399999, 1950);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str36, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u65e5\u672c" + "'", str44, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01T00:00:00.070" + "'", str46, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
    }

    @Test
    public void test05135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05135");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str5 = nameProvider0.getShortName(locale2, "", "hi!");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        java.util.Locale locale11 = java.util.Locale.US;
        boolean boolean12 = localDateTime10.equals((java.lang.Object) locale11);
        java.lang.String str13 = locale11.toLanguageTag();
        java.lang.String str16 = nameProvider0.getShortName(locale11, "2022-02-11T09:44:17.426", "");
        java.util.Locale.setDefault(locale11);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        int int24 = dateTimeZone20.getStandardOffset(999L);
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale26);
        java.util.Locale locale30 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.lang.String str32 = locale30.getDisplayLanguage(locale31);
        java.lang.String str33 = locale26.getDisplayName(locale30);
        java.lang.String str34 = dateTimeZone20.getName(35L, locale26);
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str37 = locale26.getDisplayLanguage(locale35);
        java.lang.String str38 = locale11.getDisplayVariant(locale26);
        java.util.Locale.setDefault(locale11);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en-US" + "'", str13, "en-US");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertEquals(locale30.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u65e5\u672c" + "'", str32, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "English (United States)" + "'", str33, "English (United States)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\uc601\uc5b4" + "'", str37, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test05136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05136");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-100));
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test05137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05137");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        long long9 = dateTimeZone7.previousTransition(100L);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(0L, chronology20);
        int int22 = localDateTime21.getWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYearOfEra(1970);
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        int int26 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        boolean boolean28 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology29 = dateTime6.getChronology();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(0L, chronology31);
        int int33 = localDateTime32.getWeekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withYearOfEra(1970);
        org.joda.time.DateTime dateTime36 = localDateTime35.toDateTime();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(0L, chronology38);
        int int40 = localDateTime39.getWeekyear();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withYearOfEra(1970);
        org.joda.time.DateTime dateTime43 = localDateTime42.toDateTime();
        int int44 = dateTime36.compareTo((org.joda.time.ReadableInstant) dateTime43);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean47 = dateTime43.equals((java.lang.Object) timeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime43.getZone();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(0L, chronology50);
        int int52 = localDateTime51.getWeekyear();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withYearOfEra(1970);
        org.joda.time.DateTime dateTime55 = localDateTime54.toDateTime();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(0L, chronology57);
        int int59 = localDateTime58.getWeekyear();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withYearOfEra(1970);
        org.joda.time.DateTime dateTime62 = localDateTime61.toDateTime();
        int int63 = dateTime55.compareTo((org.joda.time.ReadableInstant) dateTime62);
        boolean boolean64 = dateTime43.isAfter((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(0L, chronology66);
        java.lang.String str69 = localDateTime67.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = null;
        java.lang.String str71 = localDateTime67.toString(dateTimeFormatter70);
        org.joda.time.LocalDateTime.Property property72 = localDateTime67.monthOfYear();
        org.joda.time.Interval interval73 = property72.toInterval();
        long long74 = property72.remainder();
        org.joda.time.LocalDateTime localDateTime75 = property72.roundHalfFloorCopy();
        java.lang.String str76 = property72.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property72.getFieldType();
        int int78 = dateTime55.get(dateTimeFieldType77);
        int int79 = dateTime6.get(dateTimeFieldType77);
        org.joda.time.Chronology chronology80 = dateTime6.getChronology();
        org.joda.time.DurationField durationField81 = chronology80.halfdays();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1970 + "'", int59 == 1970);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u65e5\u672c" + "'", str69, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1970-01-01T00:00:00.000" + "'", str71, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Jan" + "'", str76, "Jan");
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(durationField81);
    }

    @Test
    public void test05138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05138");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, chronology11);
        java.lang.String str14 = localDateTime12.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime12.toString(dateTimeFormatter15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.monthOfYear();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.LocalDateTime localDateTime20 = property17.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property17.getFieldType();
        org.joda.time.LocalDateTime.Property property22 = localDateTime9.property(dateTimeFieldType21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime9.minusWeeks(1900);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfMonth(35116539);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35116539 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.000" + "'", str16, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test05139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05139");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((-292275054), 0, 43, 3, 81991403, 1964, 52100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 81991403 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05140");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfHalfday();
        java.lang.String str35 = zonedChronology28.toString();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        long long39 = dateTimeZone37.nextTransition(4363010L);
        org.joda.time.Chronology chronology40 = zonedChronology28.withZone(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone41 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology28.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology28.yearOfCentury();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str35, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 4363010L + "'", long39 == 4363010L);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test05141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05141");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 0);
        boolean boolean34 = dateTimeZone33.isFixed();
        org.joda.time.Chronology chronology35 = zonedChronology28.withZone(dateTimeZone33);
        org.joda.time.DurationField durationField36 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.monthOfYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test05142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05142");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        long long35 = dateTimeZone33.previousTransition(0L);
        long long37 = dateTimeZone33.nextTransition((long) (-1));
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone33);
        long long40 = dateTimeZone33.convertUTCToLocal((long) 20);
        org.joda.time.chrono.ZonedChronology zonedChronology41 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology28, dateTimeZone33);
        org.joda.time.DurationField durationField42 = zonedChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology28.minuteOfHour();
        java.lang.String str44 = zonedChronology28.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 20L + "'", long40 == 20L);
        org.junit.Assert.assertNotNull(zonedChronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str44, "ZonedChronology[ISOChronology[UTC], UTC]");
    }

    @Test
    public void test05143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05143");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("+00:00");
        int int3 = timeZone1.getOffset((long) 1970);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = timeZone1.getDisplayName(false, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 3");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test05144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05144");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale6 = new java.util.Locale("UTC");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale locale8 = builder4.build();
        java.util.Locale.Builder builder10 = builder4.setScript("");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder11.build();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(0L, chronology14);
        java.lang.String str17 = localDateTime15.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = localDateTime15.toString(dateTimeFormatter18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime15.monthOfYear();
        org.joda.time.Interval interval21 = property20.toInterval();
        long long22 = property20.remainder();
        org.joda.time.LocalDateTime localDateTime23 = property20.roundHalfFloorCopy();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        int int25 = property20.getMaximumTextLength(locale24);
        java.util.Locale.Builder builder26 = builder11.setLocale(locale24);
        java.util.Locale.Builder builder27 = builder11.clearExtensions();
        java.util.Locale.Builder builder29 = builder27.setVariant("chinese");
        java.util.Locale locale30 = builder29.build();
        java.lang.String str31 = locale30.getDisplayName();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals(locale6.toString(), "utc");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "utc");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "utc");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u672c" + "'", str17, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:00.000" + "'", str19, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en__chinese");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "English (chinese)" + "'", str31, "English (chinese)");
    }

    @Test
    public void test05145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05145");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfHalfday();
        java.lang.String str35 = zonedChronology28.toString();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        long long39 = dateTimeZone37.nextTransition(4363010L);
        org.joda.time.Chronology chronology40 = zonedChronology28.withZone(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone41 = zonedChronology28.getZone();
        org.joda.time.DurationField durationField42 = zonedChronology28.millis();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology28.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology28.secondOfMinute();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str35, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 4363010L + "'", long39 == 4363010L);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
    }

    @Test
    public void test05146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05146");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        long long38 = dateTimeZone36.previousTransition(100L);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withHourOfDay((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withDayOfMonth((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.withWeekyear(3);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusDays(2022);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withMillisOfSecond(5);
        int[] intArray52 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime50, 419L);
        int int53 = localDateTime50.getYear();
        int int54 = localDateTime50.getWeekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L + "'", long38 == 100L);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1970, 1, 1, 419]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
    }

    @Test
    public void test05147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05147");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(9, (int) '4');
        org.joda.time.DateTime dateTime9 = localDateTime2.toDateTime(dateTimeZone8);
        java.lang.String str10 = dateTimeZone8.toString();
        java.lang.String str12 = dateTimeZone8.getShortName(0L);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+09:52" + "'", str10, "+09:52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+09:52" + "'", str12, "+09:52");
    }

    @Test
    public void test05148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05148");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.weekyear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        java.lang.String str36 = localDateTime34.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = localDateTime34.toString(dateTimeFormatter37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime34.monthOfYear();
        org.joda.time.LocalDateTime localDateTime40 = property39.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withHourOfDay(0);
        java.util.Date date43 = null; // flaky: localDateTime40.toDate();
        org.joda.time.LocalDateTime localDateTime44 = null; // flaky: org.joda.time.LocalDateTime.fromDateFields(date43);
        long long46 = 0L; // flaky: zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime44, 100L);
        org.joda.time.LocalDateTime localDateTime48 = null; // flaky: localDateTime44.minusHours(1);
        org.joda.time.LocalDateTime.Property property49 = null; // flaky: localDateTime48.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime53 = null; // flaky: localDateTime48.withDate(1939, 900, 5);
// flaky:             org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 900 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.070" + "'", str38, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertNotNull(date43);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Sun Feb 01 00:00:00 GMT+00:20 1970");
// flaky:         org.junit.Assert.assertNotNull(localDateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 2678400000L + "'", long46 == 2678400000L);
// flaky:         org.junit.Assert.assertNotNull(localDateTime48);
// flaky:         org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test05149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05149");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.JAPAN;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.lang.String str3 = locale0.getDisplayName();
        java.lang.String str4 = locale0.getScript();
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Locale locale8 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.lang.String str9 = locale8.getDisplayVariant();
        java.lang.String str10 = locale8.getVariant();
        java.lang.String str11 = locale8.getDisplayLanguage();
        java.lang.String str12 = locale0.getDisplayScript(locale8);
        java.lang.Object obj13 = locale8.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u65e5\u672c" + "'", str2, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japanese (Japan)" + "'", str3, "Japanese (Japan)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ja-JP" + "'", str5, "ja-JP");
        org.junit.Assert.assertEquals(locale8.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c" + "'", str11, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "\u65e5\u672c_HI!");
    }

    @Test
    public void test05150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05150");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.weekyear();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        long long38 = zonedChronology28.add(readablePeriod35, 0L, 64);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test05151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05151");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone(zoneId2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(0L, chronology5);
        java.lang.String str8 = localDateTime6.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = localDateTime6.toString(dateTimeFormatter9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime6.monthOfYear();
        org.joda.time.Interval interval12 = property11.toInterval();
        long long13 = property11.remainder();
        org.joda.time.LocalDateTime localDateTime14 = property11.roundHalfFloorCopy();
        boolean boolean15 = property11.isLeap();
        org.joda.time.ReadableInstant readableInstant16 = null;
        long long17 = property11.getDifferenceAsLong(readableInstant16);
        org.joda.time.DurationField durationField18 = property11.getDurationField();
        org.joda.time.DurationField durationField19 = property11.getLeapDurationField();
        java.util.Locale locale22 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale23 = locale22.stripExtensions();
        int int24 = property11.getMaximumTextLength(locale22);
        boolean boolean25 = locale22.hasExtensions();
        java.lang.String str26 = timeZone3.getDisplayName(locale22);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c" + "'", str8, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.070" + "'", str10, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 70L + "'", long13 == 70L);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-625L) + "'", long17 == (-625L));
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertEquals(locale22.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Greenwich Mean Time" + "'", str26, "Greenwich Mean Time");
    }

    @Test
    public void test05152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05152");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale6 = new java.util.Locale("UTC");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale locale8 = builder4.build();
        java.util.Locale.Builder builder10 = builder4.setScript("");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale.Builder builder12 = builder10.clearExtensions();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(0L, chronology14);
        int int16 = localDateTime15.getWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withMillisOfSecond(100);
        org.joda.time.Chronology chronology19 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.nextTransition((long) (-1));
        org.joda.time.Chronology chronology26 = chronology19.withZone(dateTimeZone21);
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder28.clearExtensions();
        java.util.Locale.Builder builder31 = builder28.setLanguage("");
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder34 = builder28.setLocale(locale32);
        java.lang.String str35 = dateTimeZone21.getShortName(19L, locale32);
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.util.Locale locale38 = java.util.Locale.PRC;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleKeys();
        java.lang.String str40 = locale37.getDisplayScript(locale38);
        java.lang.String str41 = locale32.getDisplayScript(locale38);
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder44 = builder42.setScript("");
        java.util.Locale.Builder builder46 = builder44.removeUnicodeLocaleAttribute("1970");
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.lang.String str49 = locale47.getExtension('a');
        java.util.Locale.Builder builder50 = builder44.setLocale(locale47);
        java.lang.String str51 = locale38.getDisplayCountry(locale47);
        java.util.Locale.Builder builder52 = builder12.setLocale(locale47);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder54 = builder52.setRegion("1970-01-01T00:00:00.070");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 1970-01-01T00:00:00.070 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals(locale6.toString(), "utc");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "utc");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "China" + "'", str51, "China");
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test05153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05153");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(0L, chronology4);
        java.lang.String str7 = localDateTime5.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = localDateTime5.toString(dateTimeFormatter8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.monthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundCeilingCopy();
        boolean boolean12 = dateTimeZone0.isLocalDateTimeGap(localDateTime11);
        int int13 = localDateTime11.getEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusSeconds(2022);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.minusDays(91);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime11.withHourOfDay(3);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u65e5\u672c" + "'", str7, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.070" + "'", str9, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test05154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05154");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2021-12-30T09:48:05.428");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2021-12-30T09:48:05.428' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05155");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(0L);
        long long4 = dateTimeZone0.convertUTCToLocal(1L);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        long long9 = dateTimeZone0.getMillisKeepLocal(dateTimeZone7, (long) (-1));
        java.lang.String str11 = dateTimeZone7.getName((long) 70);
        int int13 = dateTimeZone7.getOffset((long) 4);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(0L, chronology15);
        int int17 = localDateTime16.getWeekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withMillisOfSecond(100);
        org.joda.time.Chronology chronology20 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.days();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        long long25 = dateTimeZone23.previousTransition(100L);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMillisOfSecond((int) (byte) 0);
        int[] intArray31 = chronology20.get((org.joda.time.ReadablePartial) localDateTime27, (long) (-1));
        org.joda.time.DateTimeField dateTimeField32 = chronology20.millisOfDay();
        org.joda.time.DurationField durationField33 = chronology20.hours();
        org.joda.time.DurationField durationField34 = chronology20.weeks();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        long long41 = dateTimeZone37.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology42 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology42.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology42.millisOfSecond();
        org.joda.time.DurationField durationField45 = zonedChronology42.months();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology42.minuteOfDay();
        org.joda.time.DurationField durationField47 = zonedChronology42.halfdays();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology42.centuryOfEra();
        java.lang.String str49 = zonedChronology42.toString();
        boolean boolean50 = dateTimeZone7.equals((java.lang.Object) zonedChronology42);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        long long55 = dateTimeZone52.convertLocalToUTC(100L, true);
        long long58 = dateTimeZone52.convertLocalToUTC((long) 1970, false);
        java.lang.String str60 = dateTimeZone52.getName((-2208873600000L));
        java.util.Locale locale62 = java.util.Locale.CHINA;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale62.getDisplayName(locale63);
        java.util.Set<java.lang.String> strSet65 = locale62.getUnicodeLocaleAttributes();
        java.lang.String str66 = dateTimeZone52.getName(1644572694666L, locale62);
        java.lang.String str67 = dateTimeZone7.getName(1644572123417L, locale62);
        java.lang.String str68 = locale62.getCountry();
        boolean boolean69 = locale62.hasExtensions();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str49, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L + "'", long55 == 100L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1970L + "'", long58 == 1970L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str64, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "CN" + "'", str68, "CN");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test05156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05156");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        int int14 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime13);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean17 = dateTime13.equals((java.lang.Object) timeZone16);
        int int18 = timeZone16.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        long long21 = dateTimeZone19.nextTransition(0L);
        java.lang.String str23 = dateTimeZone19.getShortName(1644572148236L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
    }

    @Test
    public void test05157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05157");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.secondOfDay();
        org.joda.time.DurationField durationField31 = zonedChronology28.hours();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test05158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05158");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withMillisOfSecond(100);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        org.joda.time.DurationField durationField15 = chronology13.days();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        long long18 = dateTimeZone16.previousTransition(100L);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfSecond((int) (byte) 0);
        int[] intArray24 = chronology13.get((org.joda.time.ReadablePartial) localDateTime20, (long) (-1));
        org.joda.time.DateTimeField dateTimeField25 = chronology13.millisOfDay();
        org.joda.time.DurationField durationField26 = chronology13.hours();
        org.joda.time.DurationField durationField27 = chronology13.weeks();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        long long34 = dateTimeZone30.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology35 = org.joda.time.chrono.ZonedChronology.getInstance(chronology13, dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology35.minuteOfDay();
        org.joda.time.DurationField durationField37 = zonedChronology35.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology35.hourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology35.weekyear();
        org.joda.time.DurationField durationField40 = zonedChronology35.centuries();
        java.lang.String str41 = zonedChronology35.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((int) 'u', 0, 278, (int) '#', 1970, 71, (int) (short) 0, (org.joda.time.Chronology) zonedChronology35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str41, "ZonedChronology[ISOChronology[UTC], UTC]");
    }

    @Test
    public void test05159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05159");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfSecond(0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone10.previousTransition(100L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(0L, chronology16);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYearOfEra(1970);
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(0L, chronology23);
        int int25 = localDateTime24.getWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withYearOfEra(1970);
        org.joda.time.DateTime dateTime28 = localDateTime27.toDateTime();
        int int29 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime30 = localDateTime14.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime14.plus(readableDuration31);
        boolean boolean33 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime14.plusMillis((int) '#');
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.dayOfMonth();
        java.util.Locale locale37 = java.util.Locale.JAPAN;
        boolean boolean38 = locale37.hasExtensions();
        java.lang.String str39 = locale37.getDisplayName();
        java.lang.String str40 = locale37.getVariant();
        java.util.Locale locale41 = java.util.Locale.CHINA;
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale41.getDisplayName(locale42);
        java.lang.String str44 = locale37.getDisplayLanguage(locale41);
        int int45 = property36.getMaximumTextLength(locale41);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(0L, chronology47);
        java.lang.String str50 = localDateTime48.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = localDateTime48.toString(dateTimeFormatter51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime48.monthOfYear();
        org.joda.time.Interval interval54 = property53.toInterval();
        org.joda.time.LocalDateTime localDateTime56 = property53.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property53.getFieldType();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(0L, chronology59);
        java.util.Locale locale61 = java.util.Locale.US;
        boolean boolean62 = localDateTime60.equals((java.lang.Object) locale61);
        java.lang.String str63 = locale61.toLanguageTag();
        int int64 = property53.getMaximumTextLength(locale61);
        org.joda.time.LocalDateTime localDateTime65 = property53.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime66 = property53.roundFloorCopy();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(0L, chronology68);
        int int70 = localDateTime69.getWeekyear();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.UTC;
        long long75 = dateTimeZone73.previousTransition(100L);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology76);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.withMillisOfSecond((int) (byte) 0);
        int int80 = localDateTime69.compareTo((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.UTC;
        long long84 = dateTimeZone81.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime(dateTimeZone81);
        org.joda.time.DateTime dateTime86 = localDateTime69.toDateTime(dateTimeZone81);
        int int87 = property53.compareTo((org.joda.time.ReadableInstant) dateTime86);
        int int88 = property36.getDifference((org.joda.time.ReadableInstant) dateTime86);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Japanese (Japan)" + "'", str39, "Japanese (Japan)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str43, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u65e5\u6587" + "'", str44, "\u65e5\u6587");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u65e5\u672c" + "'", str50, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970-01-01T00:00:00.070" + "'", str52, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "en-US" + "'", str63, "en-US");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1970 + "'", int70 == 1970);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 100L + "'", long75 == 100L);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 100L + "'", long84 == 100L);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test05160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05160");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfDay();
        long long38 = zonedChronology28.getDateTimeMillis((long) '4', (int) (byte) 1, 12, 43, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        int int40 = localDateTime39.getYear();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withMinuteOfHour((int) '#');
        long long44 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime42, (long) (byte) 10);
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField46 = zonedChronology28.weekyears();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 4363010L + "'", long38 == 4363010L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1644572122083L + "'", long44 == 1644572122083L);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test05161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05161");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property7.getFieldType();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        java.util.Locale locale15 = java.util.Locale.US;
        boolean boolean16 = localDateTime14.equals((java.lang.Object) locale15);
        java.lang.String str17 = locale15.toLanguageTag();
        int int18 = property7.getMaximumTextLength(locale15);
        org.joda.time.LocalDateTime localDateTime19 = property7.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime20 = property7.roundFloorCopy();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(0L, chronology22);
        int int24 = localDateTime23.getWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        long long29 = dateTimeZone27.previousTransition(100L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withMillisOfSecond((int) (byte) 0);
        int int34 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        long long38 = dateTimeZone35.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime40 = localDateTime23.toDateTime(dateTimeZone35);
        int int41 = property7.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime42 = property7.roundCeilingCopy();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(0L, chronology44);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withMillisOfSecond(100);
        org.joda.time.Chronology chronology49 = localDateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.yearOfCentury();
        org.joda.time.DurationField durationField51 = chronology49.eras();
        org.joda.time.Chronology chronology52 = chronology49.withUTC();
        java.lang.String str53 = chronology52.toString();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(chronology52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(0L, chronology56);
        int int58 = localDateTime57.getWeekyear();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        long long63 = dateTimeZone61.previousTransition(100L);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withMillisOfSecond((int) (byte) 0);
        int int68 = localDateTime57.compareTo((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.UTC;
        long long72 = dateTimeZone69.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(dateTimeZone69);
        org.joda.time.DateTime dateTime74 = localDateTime57.toDateTime(dateTimeZone69);
        org.joda.time.DateTime dateTime75 = localDateTime54.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(0L, chronology77);
        int int79 = localDateTime78.getWeekyear();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.withYearOfEra(1970);
        org.joda.time.DateTime dateTime82 = localDateTime81.toDateTime();
        org.joda.time.Instant instant83 = dateTime82.toInstant();
        boolean boolean84 = dateTime75.isEqual((org.joda.time.ReadableInstant) instant83);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime(0L, chronology86);
        java.lang.String str89 = localDateTime87.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter90 = null;
        java.lang.String str91 = localDateTime87.toString(dateTimeFormatter90);
        org.joda.time.LocalDateTime.Property property92 = localDateTime87.monthOfYear();
        org.joda.time.LocalDateTime localDateTime93 = property92.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = property92.getFieldType();
        boolean boolean95 = instant83.isSupported(dateTimeFieldType94);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime97 = localDateTime42.withField(dateTimeFieldType94, 59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.070" + "'", str6, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en-US" + "'", str17, "en-US");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L + "'", long29 == 100L);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L + "'", long38 == 100L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ISOChronology[UTC]" + "'", str53, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1970 + "'", int58 == 1970);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 100L + "'", long72 == 100L);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1970 + "'", int79 == 1970);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "\u65e5\u672c" + "'", str89, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "1970-01-01T00:00:00.070" + "'", str91, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(dateTimeFieldType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test05162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05162");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withSecondOfMinute((int) '4');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(999);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withDurationAdded(readableDuration14, 3);
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = localDateTime11.getFields();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime11.withDurationAdded(readableDuration18, 23);
        org.joda.time.LocalDateTime.Property property21 = localDateTime11.dayOfMonth();
        int int22 = property21.getLeapAmount();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.070" + "'", str6, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test05163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05163");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfCentury((int) (byte) 0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, chronology12);
        int int14 = localDateTime13.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withDayOfMonth(10);
        boolean boolean21 = localDateTime8.equals((java.lang.Object) localDateTime18);
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.minusSeconds(7);
        int int25 = localDateTime18.getEra();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.070" + "'", str6, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test05164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05164");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strMap35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strMap37);
        boolean boolean39 = zonedChronology28.equals((java.lang.Object) strMap37);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long45 = zonedChronology28.getDateTimeMillis(970, (-1970), 201, 64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1970 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test05165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05165");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("UTC");
        boolean boolean2 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test05166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05166");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.millisOfSecond();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(0L, chronology35);
        int int37 = localDateTime36.getWeekyear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withMillisOfSecond(100);
        org.joda.time.Chronology chronology40 = localDateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.DurationField durationField42 = chronology40.days();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        long long45 = dateTimeZone43.previousTransition(100L);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withMillisOfSecond((int) (byte) 0);
        int[] intArray51 = chronology40.get((org.joda.time.ReadablePartial) localDateTime47, (long) (-1));
        org.joda.time.DateTimeField dateTimeField52 = chronology40.millisOfDay();
        org.joda.time.DurationField durationField53 = chronology40.hours();
        org.joda.time.DurationField durationField54 = chronology40.weeks();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        long long61 = dateTimeZone57.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology62 = org.joda.time.chrono.ZonedChronology.getInstance(chronology40, dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField63 = zonedChronology62.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField64 = zonedChronology62.millisOfSecond();
        org.joda.time.DurationField durationField65 = zonedChronology62.months();
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap69 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList70 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, strMap69);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap71 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList72 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, strMap71);
        boolean boolean73 = zonedChronology62.equals((java.lang.Object) strMap71);
        org.joda.time.DateTimeZone dateTimeZone74 = zonedChronology62.getZone();
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        long long78 = zonedChronology62.add(readablePeriod75, 120L, 86399999);
        org.joda.time.DateTimeZone dateTimeZone79 = zonedChronology62.getZone();
        org.joda.time.Chronology chronology80 = zonedChronology28.withZone(dateTimeZone79);
        org.joda.time.DateTimeField dateTimeField81 = zonedChronology28.secondOfMinute();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 100L + "'", long45 == 100L);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10L + "'", long61 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(languageRangeList70);
        org.junit.Assert.assertNotNull(languageRangeList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 120L + "'", long78 == 120L);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
    }

    @Test
    public void test05167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05167");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        java.lang.String str8 = property7.getName();
        int int9 = property7.getLeapAmount();
        int int10 = property7.getMaximumValue();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.070" + "'", str6, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
    }

    @Test
    public void test05168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05168");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.halfdays();
        boolean boolean32 = zonedChronology28.equals((java.lang.Object) "1970-01-01T00:00:00.100");
        java.lang.String str33 = zonedChronology28.toString();
        long long37 = zonedChronology28.add(1900L, 36060000L, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        long long42 = zonedChronology28.add(readablePeriod39, 23L, 42);
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology28.clockhourOfHalfday();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 360601900L + "'", long37 == 360601900L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 23L + "'", long42 == 23L);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test05169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05169");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(8, (-1970), (int) 'u', 22, 81991403);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 81991403 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05170");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setUnicodeLocaleKeyword("\u30ab\u30ca\u30c0", "ja-JP");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: ???? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
    }

    @Test
    public void test05171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05171");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(1969);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test05172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05172");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours((int) ' ');
        int int8 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.weekyear();
        int int10 = localDateTime5.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime5.withTime((int) (byte) 1, 35282921, 1900, 641);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35282921 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
    }

    @Test
    public void test05173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05173");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours((int) ' ');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withMillisOfSecond(100);
        org.joda.time.Chronology chronology14 = localDateTime10.getChronology();
        java.lang.String str15 = localDateTime10.toString();
        int int16 = localDateTime10.getYearOfCentury();
        int int17 = localDateTime10.getCenturyOfEra();
        boolean boolean18 = localDateTime7.isEqual((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime10.era();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01T00:00:00.070" + "'", str15, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 70 + "'", int16 == 70);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 19 + "'", int17 == 19);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test05174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05174");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minus(readableDuration6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale9);
        java.util.Locale locale13 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale9.getDisplayName(locale13);
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.lang.String str18 = locale13.getDisplayScript(locale17);
        int int19 = property8.getMaximumTextLength(locale13);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(0L, chronology21);
        int int23 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withMillisOfSecond(100);
        org.joda.time.Chronology chronology26 = localDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DurationField durationField28 = chronology26.days();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone29.previousTransition(100L);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withMillisOfSecond((int) (byte) 0);
        int[] intArray37 = chronology26.get((org.joda.time.ReadablePartial) localDateTime33, (long) (-1));
        org.joda.time.DateTimeField dateTimeField38 = chronology26.millisOfDay();
        org.joda.time.DurationField durationField39 = chronology26.hours();
        org.joda.time.DurationField durationField40 = chronology26.weeks();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        long long47 = dateTimeZone43.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology48 = org.joda.time.chrono.ZonedChronology.getInstance(chronology26, dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology48.yearOfEra();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology48.monthOfYear();
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology48.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology48.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology48.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology48.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone56 = zonedChronology48.getZone();
        boolean boolean57 = property8.equals((java.lang.Object) zonedChronology48);
        org.joda.time.DurationField durationField58 = zonedChronology48.millis();
        long long62 = zonedChronology48.add(419L, (long) 52, 28);
        // The following exception was thrown during execution in test generation
        try {
            long long66 = zonedChronology48.add(35116539L, (-1247337920152114L), (-8096924));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -1247337920152114 * -8096924");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals(locale13.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u672c" + "'", str15, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English (United States)" + "'", str16, "English (United States)");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100L + "'", long31 == 100L);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1875L + "'", long62 == 1875L);
    }

    @Test
    public void test05175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05175");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.plus(readableDuration8);
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, chronology12);
        java.util.Locale locale14 = java.util.Locale.US;
        boolean boolean15 = localDateTime13.equals((java.lang.Object) locale14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(9, (int) '4');
        org.joda.time.DateTime dateTime20 = localDateTime13.toDateTime(dateTimeZone19);
        int int21 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(0L, chronology23);
        int int25 = localDateTime24.getWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone28.previousTransition(100L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withMillisOfSecond((int) (byte) 0);
        int int35 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        long long39 = dateTimeZone36.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = localDateTime24.toDateTime(dateTimeZone36);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(0L, chronology43);
        int int45 = localDateTime44.getWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withYearOfEra(1970);
        org.joda.time.DateTime dateTime48 = localDateTime47.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        long long51 = dateTimeZone49.previousTransition(100L);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(0L, chronology55);
        int int57 = localDateTime56.getWeekyear();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withYearOfEra(1970);
        org.joda.time.DateTime dateTime60 = localDateTime59.toDateTime();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(0L, chronology62);
        int int64 = localDateTime63.getWeekyear();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withYearOfEra(1970);
        org.joda.time.DateTime dateTime67 = localDateTime66.toDateTime();
        int int68 = dateTime60.compareTo((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime69 = localDateTime53.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean70 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology71 = dateTime60.getChronology();
        int int72 = dateTime41.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime(0L, chronology74);
        int int76 = localDateTime75.getWeekyear();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime75.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.millisOfSecond();
        org.joda.time.LocalDateTime.Property property80 = localDateTime78.year();
        java.util.Locale locale81 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale81);
        java.util.Locale locale85 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale86 = java.util.Locale.ENGLISH;
        java.lang.String str87 = locale85.getDisplayLanguage(locale86);
        java.lang.String str88 = locale81.getDisplayName(locale85);
        java.lang.String str89 = property80.getAsShortText(locale85);
        java.util.Set<java.lang.String> strSet90 = locale85.getUnicodeLocaleKeys();
        boolean boolean91 = dateTime41.equals((java.lang.Object) strSet90);
        boolean boolean92 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime41);
        long long93 = dateTime41.getMillis();
        long long94 = dateTime41.getMillis();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.070" + "'", str6, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L + "'", long51 == 100L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(chronology71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1970 + "'", int76 == 1970);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_US");
        org.junit.Assert.assertEquals(locale85.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "en");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\u65e5\u672c" + "'", str87, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "English (United States)" + "'", str88, "English (United States)");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1970" + "'", str89, "1970");
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long93 + "' != '" + 70L + "'", long93 == 70L);
// flaky:         org.junit.Assert.assertTrue("'" + long94 + "' != '" + 70L + "'", long94 == 70L);
    }

    @Test
    public void test05176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05176");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(0L, chronology21);
        int int23 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMillisOfSecond(0);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        long long32 = dateTimeZone30.previousTransition(100L);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withYearOfEra(1970);
        org.joda.time.DateTime dateTime41 = localDateTime40.toDateTime();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(0L, chronology43);
        int int45 = localDateTime44.getWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withYearOfEra(1970);
        org.joda.time.DateTime dateTime48 = localDateTime47.toDateTime();
        int int49 = dateTime41.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime50 = localDateTime34.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime34.plus(readableDuration51);
        boolean boolean53 = localDateTime27.isAfter((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime27.minusDays(2022);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.minusMonths((int) (short) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(0L, chronology61);
        int int63 = localDateTime62.getWeekyear();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.withDayOfMonth(10);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(0L, chronology71);
        java.lang.String str74 = localDateTime72.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = null;
        java.lang.String str76 = localDateTime72.toString(dateTimeFormatter75);
        org.joda.time.LocalDateTime.Property property77 = localDateTime72.monthOfYear();
        org.joda.time.Interval interval78 = property77.toInterval();
        org.joda.time.LocalDateTime localDateTime80 = property77.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = property77.getFieldType();
        org.joda.time.LocalDateTime.Property property82 = localDateTime69.property(dateTimeFieldType81);
        int int83 = localDateTime59.get(dateTimeFieldType81);
        boolean boolean84 = dateTime19.isSupported(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L + "'", long32 == 100L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1970 + "'", int63 == 1970);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u65e5\u672c" + "'", str74, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01T00:00:00.070" + "'", str76, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 8 + "'", int83 == 8);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test05177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05177");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(44, 422580000, 11, (-292275054), 9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05178");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(1964, (int) (byte) 10, 97, (int) (short) 100, 71, 4, 1900);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05179");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DurationField durationField32 = zonedChronology28.minutes();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, chronology34);
        java.util.Locale locale36 = java.util.Locale.US;
        boolean boolean37 = localDateTime35.equals((java.lang.Object) locale36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(0L, chronology41);
        int int43 = localDateTime42.getWeekyear();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusMinutes(100);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(0L, chronology52);
        int int54 = localDateTime53.getWeekyear();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withMillisOfSecond(100);
        org.joda.time.Chronology chronology57 = localDateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfCentury();
        org.joda.time.DurationField durationField59 = chronology57.days();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        long long62 = dateTimeZone60.previousTransition(100L);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withMillisOfSecond((int) (byte) 0);
        int[] intArray68 = chronology57.get((org.joda.time.ReadablePartial) localDateTime64, (long) (-1));
        org.joda.time.DateTimeField dateTimeField69 = chronology57.millisOfDay();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(0L, chronology71);
        int int73 = localDateTime72.getWeekyear();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withMillisOfSecond(100);
        int[] intArray77 = chronology57.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        zonedChronology28.validate((org.joda.time.ReadablePartial) localDateTime49, intArray77);
        org.joda.time.DateTimeField dateTimeField79 = zonedChronology28.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField80 = zonedChronology28.year();
        org.joda.time.DateTimeField dateTimeField81 = zonedChronology28.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray85 = zonedChronology28.get(readablePeriod82, 1974L, 1900L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 100L + "'", long62 == 100L);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1970 + "'", int73 == 1970);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
    }

    @Test
    public void test05180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05180");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withSecondOfMinute((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withWeekOfWeekyear(27236744);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27236744 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.070" + "'", str6, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test05181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05181");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale6 = new java.util.Locale("UTC");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale.Builder builder8 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("2022-02-09T22:47:11.378Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-09T22:47:11.378Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals(locale6.toString(), "utc");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test05182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05182");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        int int14 = localDateTime10.getDayOfYear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.dayOfYear();
        int int16 = localDateTime10.getYear();
        org.joda.time.LocalDateTime.Property property17 = localDateTime10.millisOfSecond();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test05183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05183");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        int int12 = property7.getMaximumTextLength(locale11);
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.lang.String str14 = locale13.getCountry();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, chronology17);
        int int19 = localDateTime18.getWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        long long24 = dateTimeZone22.previousTransition(100L);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withMillisOfSecond((int) (byte) 0);
        int int29 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone30.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime35 = localDateTime18.toDateTime(dateTimeZone30);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        java.lang.String str40 = localDateTime38.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = localDateTime38.toString(dateTimeFormatter41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(0L, chronology44);
        java.lang.String str47 = localDateTime45.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = localDateTime45.toString(dateTimeFormatter48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime45.monthOfYear();
        org.joda.time.Interval interval51 = property50.toInterval();
        long long52 = property50.remainder();
        org.joda.time.LocalDateTime localDateTime53 = property50.roundHalfFloorCopy();
        java.lang.String str54 = property50.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property50.getFieldType();
        int int56 = localDateTime38.get(dateTimeFieldType55);
        int int57 = dateTime35.get(dateTimeFieldType55);
        int int58 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime60 = property7.addToCopy(53);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = localDateTime60.getValue(36060000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 36060000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.070" + "'", str6, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 70L + "'", long9 == 70L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CN" + "'", str14, "CN");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L + "'", long33 == 100L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u65e5\u672c" + "'", str40, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970-01-01T00:00:00.070" + "'", str42, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u65e5\u672c" + "'", str47, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T00:00:00.070" + "'", str49, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(interval51);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 70L + "'", long52 == 70L);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Jan" + "'", str54, "Jan");
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(localDateTime60);
    }

    @Test
    public void test05184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05184");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology28.centuries();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.monthOfYear();
        org.joda.time.DurationField durationField36 = zonedChronology28.years();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) zonedChronology28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ZonedChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test05185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05185");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fr", (double) 1013507230927L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.013507230927E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05186");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("1900-10-07T23:59:59.965");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test05187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05187");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfCentury((int) (byte) 0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, chronology12);
        int int14 = localDateTime13.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withDayOfMonth(10);
        boolean boolean21 = localDateTime8.equals((java.lang.Object) localDateTime18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.minusMonths(575);
        int int24 = localDateTime23.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = localDateTime23.withDate(48, 51, (int) 'x');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.070" + "'", str6, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
    }

    @Test
    public void test05188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05188");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property7.getFieldType();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        java.util.Locale locale15 = java.util.Locale.US;
        boolean boolean16 = localDateTime14.equals((java.lang.Object) locale15);
        java.lang.String str17 = locale15.toLanguageTag();
        int int18 = property7.getMaximumTextLength(locale15);
        java.lang.String str19 = locale15.getISO3Language();
        java.lang.String str20 = locale15.getLanguage();
        java.util.Locale locale21 = locale15.stripExtensions();
        java.lang.String str22 = locale15.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.070" + "'", str6, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en-US" + "'", str17, "en-US");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "eng" + "'", str19, "eng");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en" + "'", str20, "en");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "en_US" + "'", str22, "en_US");
    }

    @Test
    public void test05189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05189");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("UTC");
        int int2 = timeZone1.getRawOffset();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test05190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05190");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.minuteOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology32.centuries();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.Chronology chronology37 = zonedChronology32.withZone(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology40 = zonedChronology32.withZone(dateTimeZone39);
        java.lang.String str41 = dateTimeZone39.getID();
        org.joda.time.LocalDateTime localDateTime42 = null;
        boolean boolean43 = dateTimeZone39.isLocalDateTimeGap(localDateTime42);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:00" + "'", str41, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test05191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05191");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        long long4 = dateTimeZone1.convertLocalToUTC((long) 48, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-49L) + "'", long4 == (-49L));
    }

    @Test
    public void test05192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05192");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        java.lang.String str12 = localDateTime10.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = localDateTime10.toString(dateTimeFormatter13);
        boolean boolean15 = localDateTime2.isAfter((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime.Property property16 = localDateTime10.secondOfMinute();
        boolean boolean17 = property16.isLeap();
        org.joda.time.DurationField durationField18 = property16.getRangeDurationField();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u672c" + "'", str12, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.000" + "'", str14, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test05193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05193");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder5 = builder2.setExtension('x', "it_IT");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setLanguageTag("\uc911\uad6d");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ?????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test05194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05194");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        int[] intArray7 = localDateTime5.getValues();
        int int8 = localDateTime5.getWeekyear();
        java.util.Date date9 = null; // flaky: localDateTime5.toDate();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1970, 1, 1, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
// flaky:         org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 GMT+00:20 1970");
    }

    @Test
    public void test05195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05195");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        java.lang.String str2 = timeZone1.getID();
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        java.lang.String str4 = timeZone1.getID();
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("2022-02-11T09:43:35.370");
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(locale9);
        java.lang.String str11 = locale8.getDisplayName(locale9);
        java.lang.String str12 = locale8.getCountry();
        java.lang.String str13 = timeZone1.getDisplayName(false, (int) (byte) 0, locale8);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GMT" + "'", str4, "GMT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GMT" + "'", str13, "GMT");
    }

    @Test
    public void test05196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05196");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfEra(1970);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        int int19 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.plus(readableDuration21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(0L, chronology24);
        java.util.Locale locale26 = java.util.Locale.US;
        boolean boolean27 = localDateTime25.equals((java.lang.Object) locale26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.dayOfWeek();
        int int29 = localDateTime25.getDayOfWeek();
        int int30 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime4.plusSeconds(43);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, chronology34);
        java.util.Locale locale36 = java.util.Locale.US;
        boolean boolean37 = localDateTime35.equals((java.lang.Object) locale36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(0L, chronology41);
        int int43 = localDateTime42.getWeekyear();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withEra((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withMillisOfSecond(70);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withMillisOfDay(59);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.secondOfMinute();
        int int56 = localDateTime54.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.yearOfEra();
        org.joda.time.LocalDateTime localDateTime59 = property57.addToCopy(232);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
    }

    @Test
    public void test05197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05197");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone31.previousTransition(100L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        int int39 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYearOfEra(1970);
        org.joda.time.DateTime dateTime42 = localDateTime41.toDateTime();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(0L, chronology44);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withYearOfEra(1970);
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        int int50 = dateTime42.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = localDateTime35.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime35.plus(readableDuration52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(0L, chronology55);
        java.util.Locale locale57 = java.util.Locale.US;
        boolean boolean58 = localDateTime56.equals((java.lang.Object) locale57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.dayOfWeek();
        int int60 = localDateTime56.getDayOfWeek();
        int int61 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        int[] intArray63 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime56, (long) 12);
        java.lang.String str64 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology28.weekyearOfCentury();
        long long70 = zonedChronology28.add((long) 35116539, (long) 422580000, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'u', 23);
        int int75 = dateTimeZone73.getStandardOffset(0L);
        long long77 = dateTimeZone73.nextTransition(360601900L);
        org.joda.time.Chronology chronology78 = zonedChronology28.withZone(dateTimeZone73);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(chronology78);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L + "'", long33 == 100L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1970, 1, 1, 12]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str64, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 42293116539L + "'", long70 == 42293116539L);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 422580000 + "'", int75 == 422580000);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 360601900L + "'", long77 == 360601900L);
        org.junit.Assert.assertNotNull(chronology78);
    }

    @Test
    public void test05198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05198");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.centuryOfEra();
        org.joda.time.DurationField durationField36 = zonedChronology28.centuries();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test05199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05199");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property8.withMinimumValue();
        int int10 = localDateTime9.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(422580000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 422580000 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
    }

    @Test
    public void test05200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05200");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMinutes(100);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.year();
        org.joda.time.LocalDateTime localDateTime19 = property17.addWrapFieldToCopy(2);
        org.joda.time.LocalDateTime localDateTime20 = property17.roundFloorCopy();
        org.joda.time.DurationFieldType durationFieldType21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withFieldAdded(durationFieldType21, (-2719));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test05201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05201");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("UTC");
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder8.setLanguage("2022-02-11T09:48:17.923");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-11T09:48:17.923 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test05202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05202");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        int int12 = property7.getMaximumTextLength(locale11);
        org.joda.time.LocalDateTime localDateTime13 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfCeilingCopy();
        boolean boolean16 = property14.isLeap();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(0L, chronology18);
        java.lang.String str21 = localDateTime19.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = localDateTime19.toString(dateTimeFormatter22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime19.monthOfYear();
        org.joda.time.Interval interval25 = property24.toInterval();
        long long26 = property24.remainder();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundHalfFloorCopy();
        java.lang.String str28 = property24.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property24.getFieldType();
        org.joda.time.LocalDateTime localDateTime30 = property24.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.weekyear();
        org.joda.time.LocalDateTime localDateTime32 = property31.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusYears(44);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.dayOfYear();
        boolean boolean39 = property14.equals((java.lang.Object) localDateTime37);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u65e5\u672c" + "'", str21, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.000" + "'", str23, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test05203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05203");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusSeconds(2022);
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property14 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy(1596097L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(0L, chronology18);
        int int20 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYearOfEra(1970);
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(0L, chronology25);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withYearOfEra(1970);
        org.joda.time.DateTime dateTime30 = localDateTime29.toDateTime();
        int int31 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        java.util.Locale locale35 = java.util.Locale.US;
        boolean boolean36 = localDateTime34.equals((java.lang.Object) locale35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withYearOfEra((int) (byte) 1);
        int int39 = localDateTime38.getEra();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.plusSeconds((int) '4');
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime38.minusDays(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = localDateTime45.getFieldType(0);
        boolean boolean48 = dateTime23.isSupported(dateTimeFieldType47);
        int int49 = localDateTime16.get(dateTimeFieldType47);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1598067 + "'", int49 == 1598067);
    }

    @Test
    public void test05204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05204");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology32.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology32.weekyear();
        long long39 = zonedChronology32.add((-3599883L), 3L, 97);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology32.dayOfWeek();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-3599592L) + "'", long39 == (-3599592L));
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test05205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05205");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) '4');
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readablePeriod11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(0L, chronology14);
        int int16 = localDateTime15.getWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withMillisOfSecond(100);
        org.joda.time.Chronology chronology19 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology19.days();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        long long24 = dateTimeZone22.previousTransition(100L);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withMillisOfSecond((int) (byte) 0);
        int[] intArray30 = chronology19.get((org.joda.time.ReadablePartial) localDateTime26, (long) (-1));
        org.joda.time.DateTimeField dateTimeField31 = chronology19.millisOfDay();
        org.joda.time.DurationField durationField32 = chronology19.hours();
        org.joda.time.DurationField durationField33 = chronology19.weeks();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        long long40 = dateTimeZone36.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology41 = org.joda.time.chrono.ZonedChronology.getInstance(chronology19, dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology41.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology41.millisOfSecond();
        org.joda.time.DurationField durationField44 = zonedChronology41.weekyears();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(0L, chronology46);
        java.lang.String str49 = localDateTime47.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = localDateTime47.toString(dateTimeFormatter50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime47.monthOfYear();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime47.withMillisOfDay(100);
        long long56 = zonedChronology41.set((org.joda.time.ReadablePartial) localDateTime54, (long) 59);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(0L, chronology58);
        int int60 = localDateTime59.getWeekyear();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withYearOfEra(1970);
        org.joda.time.DateTime dateTime63 = localDateTime62.toDateTime();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(0L, chronology65);
        int int67 = localDateTime66.getWeekyear();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withYearOfEra(1970);
        org.joda.time.DateTime dateTime70 = localDateTime69.toDateTime();
        int int71 = dateTime63.compareTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime72 = localDateTime54.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTimeZone dateTimeZone73 = dateTime72.getZone();
        java.lang.String str74 = dateTimeZone73.toString();
        long long76 = dateTimeZone73.convertUTCToLocal((long) '4');
        org.joda.time.DateTime dateTime77 = localDateTime10.toDateTime(dateTimeZone73);
        org.joda.time.LocalDateTime.Property property78 = localDateTime10.era();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime10.minusWeeks(10);
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.LocalDateTime localDateTime82 = localDateTime10.minus(readableDuration81);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u65e5\u672c" + "'", str49, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01T00:00:00.000" + "'", str51, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100L + "'", long56 == 100L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1970 + "'", int67 == 1970);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "UTC" + "'", str74, "UTC");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 52L + "'", long76 == 52L);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
    }

    @Test
    public void test05206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05206");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMonths(1970);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withWeekyear(43);
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = property15.setCopy("\u671d\u9c9c\u6587");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"???\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test05207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05207");
        java.util.Locale locale2 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.lang.String str4 = locale2.getDisplayLanguage(locale3);
        java.util.Locale locale7 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.lang.String str8 = locale3.getDisplayScript(locale7);
        java.lang.String str9 = locale3.getScript();
        boolean boolean10 = locale3.hasExtensions();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, chronology12);
        int int14 = localDateTime13.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withMillisOfSecond(100);
        org.joda.time.Chronology chronology17 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DurationField durationField19 = chronology17.days();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        long long22 = dateTimeZone20.previousTransition(100L);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withMillisOfSecond((int) (byte) 0);
        int[] intArray28 = chronology17.get((org.joda.time.ReadablePartial) localDateTime24, (long) (-1));
        org.joda.time.DateTimeField dateTimeField29 = chronology17.millisOfDay();
        org.joda.time.DurationField durationField30 = chronology17.hours();
        org.joda.time.DurationField durationField31 = chronology17.weeks();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        long long38 = dateTimeZone34.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology39 = org.joda.time.chrono.ZonedChronology.getInstance(chronology17, dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology39.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology39.monthOfYear();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology39.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology39.dayOfYear();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology39.minuteOfDay();
        org.joda.time.DurationField durationField45 = zonedChronology39.centuries();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology39.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology39.weekyear();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology39.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = zonedChronology39.getZone();
        java.util.Locale locale51 = java.util.Locale.US;
        java.util.Locale locale52 = java.util.Locale.JAPAN;
        java.util.Locale locale53 = java.util.Locale.JAPAN;
        java.lang.String str54 = locale52.getDisplayCountry(locale53);
        java.lang.String str55 = locale53.getDisplayScript();
        java.lang.String str56 = locale53.getDisplayLanguage();
        java.lang.String str57 = locale51.getDisplayLanguage(locale53);
        java.lang.String str58 = dateTimeZone49.getShortName((long) 3600000, locale53);
        java.lang.String str59 = locale3.getDisplayVariant(locale53);
        java.lang.String str60 = locale53.getVariant();
        org.junit.Assert.assertEquals(locale2.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale7.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u65e5\u672c" + "'", str54, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str56, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u82f1\u8a9e" + "'", str57, "\u82f1\u8a9e");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test05208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05208");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusSeconds(4);
        java.lang.String str10 = localDateTime9.toString();
        int int11 = localDateTime9.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusHours(29);
        int int14 = localDateTime9.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1969-12-31T23:59:56.100" + "'", str10, "1969-12-31T23:59:56.100");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test05209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05209");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property7.getFieldType();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        java.util.Locale locale15 = java.util.Locale.US;
        boolean boolean16 = localDateTime14.equals((java.lang.Object) locale15);
        java.lang.String str17 = locale15.toLanguageTag();
        int int18 = property7.getMaximumTextLength(locale15);
        java.lang.String str19 = locale15.getISO3Language();
        java.lang.String str20 = locale15.getLanguage();
        java.util.Locale locale21 = locale15.stripExtensions();
        java.util.Locale locale23 = new java.util.Locale("Japanese (Japan)");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(0L, chronology25);
        java.lang.String str28 = localDateTime26.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = localDateTime26.toString(dateTimeFormatter29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime26.monthOfYear();
        org.joda.time.LocalDateTime localDateTime32 = property31.roundCeilingCopy();
        int int33 = localDateTime32.getMonthOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(0L, chronology35);
        int int37 = localDateTime36.getWeekyear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withYearOfEra(1970);
        org.joda.time.DateTime dateTime40 = localDateTime39.toDateTime();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(0L, chronology42);
        int int44 = localDateTime43.getWeekyear();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withYearOfEra(1970);
        org.joda.time.DateTime dateTime47 = localDateTime46.toDateTime();
        int int48 = dateTime40.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(0L, chronology50);
        java.lang.String str53 = localDateTime51.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = localDateTime51.toString(dateTimeFormatter54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime51.monthOfYear();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime51.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withSecondOfMinute((int) '4');
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        long long63 = dateTimeZone61.previousTransition(100L);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withHourOfDay((int) (short) 0);
        int int68 = localDateTime67.getEra();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(0L, chronology72);
        java.lang.String str75 = localDateTime73.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = null;
        java.lang.String str77 = localDateTime73.toString(dateTimeFormatter76);
        org.joda.time.LocalDateTime.Property property78 = localDateTime73.monthOfYear();
        org.joda.time.Interval interval79 = property78.toInterval();
        org.joda.time.LocalDateTime localDateTime81 = property78.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = property78.getFieldType();
        org.joda.time.LocalDateTime.Property property83 = localDateTime70.property(dateTimeFieldType82);
        int int84 = localDateTime58.indexOf(dateTimeFieldType82);
        boolean boolean85 = dateTime40.isSupported(dateTimeFieldType82);
        org.joda.time.LocalDateTime.Property property86 = localDateTime32.property(dateTimeFieldType82);
        java.lang.String str87 = property86.getAsShortText();
        java.util.Locale locale89 = new java.util.Locale("Ora media di Greenwich");
        int int90 = property86.getMaximumShortTextLength(locale89);
        java.lang.String str91 = locale23.getDisplayCountry(locale89);
        java.lang.String str92 = locale15.getDisplayVariant(locale23);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en-US" + "'", str17, "en-US");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "eng" + "'", str19, "eng");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en" + "'", str20, "en");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_US");
        org.junit.Assert.assertEquals(locale23.toString(), "japanese (japan)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u65e5\u672c" + "'", str28, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T00:00:00.000" + "'", str30, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u65e5\u672c" + "'", str53, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01T00:00:00.000" + "'", str55, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\u65e5\u672c" + "'", str75, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1970-01-01T00:00:00.000" + "'", str77, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "1" + "'", str87, "1");
        org.junit.Assert.assertEquals(locale89.toString(), "ora media di greenwich");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 3 + "'", int90 == 3);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test05210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05210");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-60518361599999L));
        int int2 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withYearOfEra(44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime4.getFieldType(1964);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1964");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test05211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05211");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField34 = zonedChronology28.minutes();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        long long38 = dateTimeZone36.previousTransition(100L);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withHourOfDay((int) (short) 0);
        int int43 = localDateTime42.getEra();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(0L, chronology47);
        java.lang.String str50 = localDateTime48.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = localDateTime48.toString(dateTimeFormatter51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime48.monthOfYear();
        org.joda.time.Interval interval54 = property53.toInterval();
        org.joda.time.LocalDateTime localDateTime56 = property53.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property53.getFieldType();
        org.joda.time.LocalDateTime.Property property58 = localDateTime45.property(dateTimeFieldType57);
        int int59 = localDateTime45.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime45.plusDays((int) '#');
        int int62 = localDateTime61.getWeekyear();
        int[] intArray64 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime61, 4832097L);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.UTC;
        long long67 = dateTimeZone65.previousTransition(100L);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology68);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(0L, chronology71);
        int int73 = localDateTime72.getWeekyear();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withYearOfEra(1970);
        org.joda.time.DateTime dateTime76 = localDateTime75.toDateTime();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(0L, chronology78);
        int int80 = localDateTime79.getWeekyear();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime79.withYearOfEra(1970);
        org.joda.time.DateTime dateTime83 = localDateTime82.toDateTime();
        int int84 = dateTime76.compareTo((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime85 = localDateTime69.toDateTime((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.ReadableDuration readableDuration86 = null;
        org.joda.time.LocalDateTime localDateTime87 = localDateTime69.plus(readableDuration86);
        int int88 = localDateTime69.size();
        org.joda.time.LocalDateTime.Property property89 = localDateTime69.millisOfSecond();
        org.joda.time.LocalDateTime.Property property90 = localDateTime69.centuryOfEra();
        int int91 = localDateTime69.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime93 = localDateTime69.plusWeeks(1200000);
        int[] intArray95 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime69, 0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime97 = localDateTime69.withMonthOfYear((-1970));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1970 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L + "'", long38 == 100L);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u65e5\u672c" + "'", str50, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970-01-01T00:00:00.000" + "'", str52, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1970 + "'", int62 == 1970);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1970, 1, 1, 4832097]");
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 100L + "'", long67 == 100L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1970 + "'", int73 == 1970);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1970 + "'", int80 == 1970);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[1970, 1, 1, 0]");
    }

    @Test
    public void test05212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05212");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusDays(4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plus(readableDuration10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readableDuration12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        long long19 = dateTimeZone16.convertLocalToUTC(100L, true);
        java.lang.String str21 = dateTimeZone16.getName(1L);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime15, dateTimeZone16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
    }

    @Test
    public void test05213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05213");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-60518361599999L));
        int int2 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withYearOfEra(44);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusMinutes((int) (short) 1);
        int[] intArray7 = localDateTime1.getValues();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[52, 4, 1, 1]");
    }

    @Test
    public void test05214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05214");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property7.getFieldType();
        long long12 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime13 = property7.roundHalfEvenCopy();
        java.util.Locale locale14 = java.util.Locale.ITALY;
        boolean boolean15 = locale14.hasExtensions();
        java.lang.String str16 = locale14.toLanguageTag();
        java.lang.String str17 = locale14.getDisplayScript();
        java.lang.String str18 = property7.getAsText(locale14);
        int int19 = property7.get();
        org.joda.time.LocalDateTime localDateTime21 = property7.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime23 = property7.addWrapFieldToCopy(45);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it-IT" + "'", str16, "it-IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "gennaio" + "'", str18, "gennaio");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test05215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05215");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.era();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(0L, chronology31);
        int int33 = localDateTime32.getWeekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withDayOfMonth(10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(0L, chronology41);
        int int43 = localDateTime42.getWeekyear();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withMillisOfSecond(100);
        org.joda.time.Chronology chronology46 = localDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfCentury();
        org.joda.time.DurationField durationField48 = chronology46.days();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        long long51 = dateTimeZone49.previousTransition(100L);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withMillisOfSecond((int) (byte) 0);
        int[] intArray57 = chronology46.get((org.joda.time.ReadablePartial) localDateTime53, (long) (-1));
        zonedChronology28.validate((org.joda.time.ReadablePartial) localDateTime37, intArray57);
        int int59 = localDateTime37.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime37.withMillisOfDay(10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L + "'", long51 == 100L);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(localDateTime61);
    }

    @Test
    public void test05216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05216");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.era();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        long long35 = dateTimeZone32.convertLocalToUTC(100L, true);
        java.lang.String str37 = dateTimeZone32.getName(1L);
        org.joda.time.Chronology chronology38 = zonedChronology28.withZone(dateTimeZone32);
        java.lang.String str39 = zonedChronology28.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str39, "ZonedChronology[ISOChronology[UTC], UTC]");
    }

    @Test
    public void test05217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05217");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minus(readableDuration6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minusHours(5);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale12.getDisplayName();
        int int15 = property10.getMaximumTextLength(locale12);
        org.joda.time.LocalDateTime localDateTime16 = property10.getLocalDateTime();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str14, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test05218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05218");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(0L);
        long long4 = dateTimeZone0.nextTransition((long) (-1));
        boolean boolean6 = dateTimeZone0.isStandardOffset((long) ' ');
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(0L, chronology10);
        java.util.Locale locale12 = java.util.Locale.US;
        boolean boolean13 = localDateTime11.equals((java.lang.Object) locale12);
        java.lang.String str14 = locale12.getDisplayScript();
        org.joda.time.tz.NameProvider nameProvider15 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str20 = nameProvider15.getShortName(locale17, "", "hi!");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(0L, chronology22);
        java.lang.String str25 = localDateTime23.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = localDateTime23.toString(dateTimeFormatter26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime23.monthOfYear();
        org.joda.time.Interval interval29 = property28.toInterval();
        org.joda.time.LocalDateTime localDateTime31 = property28.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property28.getFieldType();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, chronology34);
        java.util.Locale locale36 = java.util.Locale.US;
        boolean boolean37 = localDateTime35.equals((java.lang.Object) locale36);
        java.lang.String str38 = locale36.toLanguageTag();
        int int39 = property28.getMaximumTextLength(locale36);
        java.lang.String str40 = locale17.getDisplayCountry(locale36);
        java.lang.String str41 = locale12.getDisplayScript(locale36);
        java.lang.String str42 = locale12.getScript();
        java.lang.String str43 = dateTimeZone0.getName(2773835L, locale12);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(0L, chronology45);
        int int47 = localDateTime46.getWeekyear();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withMillisOfSecond(100);
        org.joda.time.Chronology chronology50 = localDateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.yearOfCentury();
        org.joda.time.DurationField durationField52 = chronology50.days();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        long long55 = dateTimeZone53.previousTransition(100L);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withMillisOfSecond((int) (byte) 0);
        int[] intArray61 = chronology50.get((org.joda.time.ReadablePartial) localDateTime57, (long) (-1));
        org.joda.time.DateTimeField dateTimeField62 = chronology50.millisOfDay();
        org.joda.time.DurationField durationField63 = chronology50.hours();
        org.joda.time.DurationField durationField64 = chronology50.weeks();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        long long71 = dateTimeZone67.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology72 = org.joda.time.chrono.ZonedChronology.getInstance(chronology50, dateTimeZone67);
        org.joda.time.DateTimeField dateTimeField73 = zonedChronology72.halfdayOfDay();
        java.util.TimeZone timeZone75 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        long long78 = dateTimeZone76.nextTransition((long) (byte) -1);
        org.joda.time.chrono.ZonedChronology zonedChronology79 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology72, dateTimeZone76);
        int int81 = dateTimeZone76.getOffsetFromLocal((long) '#');
        long long83 = dateTimeZone0.getMillisKeepLocal(dateTimeZone76, (long) 24264);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(nameProvider15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u65e5\u672c" + "'", str25, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T00:00:00.000" + "'", str27, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "en-US" + "'", str38, "en-US");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L + "'", long55 == 100L);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 10L + "'", long71 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(timeZone75);
        org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
        org.junit.Assert.assertNotNull(zonedChronology79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 24264L + "'", long83 == 24264L);
    }

    @Test
    public void test05219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05219");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfDay();
        long long38 = zonedChronology28.getDateTimeMillis((long) '4', (int) (byte) 1, 12, 43, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        int int40 = localDateTime39.getYear();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withMinuteOfHour((int) '#');
        long long44 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime42, (long) (byte) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(0L, chronology46);
        java.util.Locale locale48 = java.util.Locale.US;
        boolean boolean49 = localDateTime47.equals((java.lang.Object) locale48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.minus(readableDuration51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.plusWeeks(44);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusMillis(0);
        boolean boolean58 = localDateTime42.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.DurationFieldType durationFieldType59 = null;
        boolean boolean60 = localDateTime42.isSupported(durationFieldType59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(0L, chronology62);
        java.lang.String str65 = localDateTime63.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = localDateTime63.toString(dateTimeFormatter66);
        org.joda.time.LocalDateTime.Property property68 = localDateTime63.monthOfYear();
        org.joda.time.Interval interval69 = property68.toInterval();
        long long70 = property68.remainder();
        org.joda.time.LocalDateTime localDateTime71 = property68.roundHalfFloorCopy();
        java.util.Locale locale72 = java.util.Locale.ENGLISH;
        int int73 = property68.getMaximumTextLength(locale72);
        int int74 = property68.get();
        java.util.Locale locale77 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale78 = java.util.Locale.ENGLISH;
        java.lang.String str79 = locale77.getDisplayLanguage(locale78);
        java.lang.String str80 = property68.getAsShortText(locale78);
        org.joda.time.LocalDateTime localDateTime81 = property68.getLocalDateTime();
        boolean boolean82 = localDateTime42.isAfter((org.joda.time.ReadablePartial) localDateTime81);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 4363010L + "'", long38 == 4363010L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1644572124536L + "'", long44 == 1644572124536L);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u65e5\u672c" + "'", str65, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1970-01-01T00:00:00.000" + "'", str67, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 9 + "'", int73 == 9);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertEquals(locale77.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u65e5\u672c" + "'", str79, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Jan" + "'", str80, "Jan");
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test05220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05220");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone8.previousTransition(0L);
        long long12 = dateTimeZone8.nextTransition((long) (-1));
        org.joda.time.Chronology chronology13 = chronology6.withZone(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.hourOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, chronology17);
        java.lang.String str20 = localDateTime18.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = localDateTime18.toString(dateTimeFormatter21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.monthOfYear();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withYearOfCentury((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.minusMonths(31);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(0L, chronology30);
        int int32 = localDateTime31.getWeekyear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withMillisOfSecond(100);
        org.joda.time.Chronology chronology35 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DurationField durationField37 = chronology35.days();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        long long40 = dateTimeZone38.previousTransition(100L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withMillisOfSecond((int) (byte) 0);
        int[] intArray46 = chronology35.get((org.joda.time.ReadablePartial) localDateTime42, (long) (-1));
        org.joda.time.DateTimeField dateTimeField47 = chronology35.millisOfDay();
        org.joda.time.DurationField durationField48 = chronology35.hours();
        org.joda.time.DurationField durationField49 = chronology35.weeks();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        long long56 = dateTimeZone52.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology57 = org.joda.time.chrono.ZonedChronology.getInstance(chronology35, dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField58 = zonedChronology57.halfdayOfDay();
        java.util.TimeZone timeZone60 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        long long63 = dateTimeZone61.nextTransition((long) (byte) -1);
        org.joda.time.chrono.ZonedChronology zonedChronology64 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology57, dateTimeZone61);
        java.lang.String str65 = zonedChronology64.toString();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(0L, chronology67);
        java.lang.String str70 = localDateTime68.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = null;
        java.lang.String str72 = localDateTime68.toString(dateTimeFormatter71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime68.monthOfYear();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime68.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.withSecondOfMinute((int) '4');
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minusWeeks(999);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.LocalDateTime localDateTime82 = localDateTime77.withDurationAdded(readableDuration80, 3);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime77.withDate((int) (short) -1, 7, 12);
        int[] intArray88 = zonedChronology64.get((org.joda.time.ReadablePartial) localDateTime77, (long) 31);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime77.withEra((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime90.minusSeconds(53);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime90);
        org.joda.time.LocalDateTime localDateTime95 = localDateTime93.withWeekyear(201);
        boolean boolean96 = localDateTime14.isEqual((org.joda.time.ReadablePartial) localDateTime93);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u65e5\u672c" + "'", str20, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.000" + "'", str22, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 100L + "'", long40 == 100L);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10L + "'", long56 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertNotNull(zonedChronology64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str65, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u65e5\u672c" + "'", str70, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1970-01-01T00:00:00.000" + "'", str72, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1970, 1, 1, 31]");
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test05221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05221");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfCentury((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) '#');
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test05222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05222");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.weekOfWeekyear();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test05223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05223");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        long long35 = dateTimeZone33.previousTransition(0L);
        long long37 = dateTimeZone33.nextTransition((long) (-1));
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone33);
        long long40 = dateTimeZone33.convertUTCToLocal((long) 20);
        org.joda.time.chrono.ZonedChronology zonedChronology41 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology28, dateTimeZone33);
        int int43 = dateTimeZone33.getOffset((long) 170);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet49 = locale47.getUnicodeLocaleAttributes();
        java.lang.String str50 = dateTimeZone33.getShortName(1644572129286L, locale47);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 20L + "'", long40 == 20L);
        org.junit.Assert.assertNotNull(zonedChronology41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
    }

    @Test
    public void test05224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05224");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.millis();
        org.joda.time.DurationField durationField9 = chronology6.months();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.hourOfHalfday();
        org.joda.time.DurationField durationField11 = chronology6.centuries();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test05225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05225");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = timeZone1.getOffset((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone.setDefault(timeZone1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(0L, chronology15);
        int int17 = localDateTime16.getWeekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withYearOfEra(1970);
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        int int21 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime20);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean24 = dateTime20.equals((java.lang.Object) timeZone23);
        boolean boolean25 = timeZone1.hasSameRules(timeZone23);
        timeZone23.setID("+09:52");
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        int int29 = localDateTime28.getYear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withMinuteOfHour((int) '#');
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.dayOfMonth();
        org.joda.time.tz.NameProvider nameProvider33 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str38 = nameProvider33.getShortName(locale35, "", "hi!");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(0L, chronology40);
        java.lang.String str43 = localDateTime41.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = localDateTime41.toString(dateTimeFormatter44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime41.monthOfYear();
        org.joda.time.Interval interval47 = property46.toInterval();
        org.joda.time.LocalDateTime localDateTime49 = property46.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property46.getFieldType();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(0L, chronology52);
        java.util.Locale locale54 = java.util.Locale.US;
        boolean boolean55 = localDateTime53.equals((java.lang.Object) locale54);
        java.lang.String str56 = locale54.toLanguageTag();
        int int57 = property46.getMaximumTextLength(locale54);
        java.lang.String str58 = locale35.getDisplayCountry(locale54);
        java.util.Locale locale59 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale59);
        java.util.Locale locale63 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale64 = java.util.Locale.ENGLISH;
        java.lang.String str65 = locale63.getDisplayLanguage(locale64);
        java.lang.String str66 = locale59.getDisplayName(locale63);
        java.lang.String str67 = locale54.getDisplayScript(locale59);
        int int68 = property32.getMaximumTextLength(locale59);
        java.util.Locale.Category category69 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale72 = new java.util.Locale("1", "hi!");
        java.util.Locale.setDefault(category69, locale72);
        java.util.Locale locale76 = new java.util.Locale("en", "Japanese (Japan)");
        java.util.Locale.setDefault(category69, locale76);
        java.lang.String str78 = locale59.getDisplayCountry(locale76);
        java.lang.String str79 = timeZone23.getDisplayName(locale59);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(nameProvider33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u65e5\u672c" + "'", str43, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01T00:00:00.000" + "'", str45, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "en-US" + "'", str56, "en-US");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale63.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u65e5\u672c" + "'", str65, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Japanese (Japan)" + "'", str66, "Japanese (Japan)");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + category69 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category69.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale72.toString(), "1_HI!");
        org.junit.Assert.assertEquals(locale76.toString(), "en_JAPANESE (JAPAN)");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Japan" + "'", str78, "Japan");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "GMT+00:00" + "'", str79, "GMT+00:00");
    }

    @Test
    public void test05226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05226");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder5 = builder1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder1.setRegion("fran\347ais");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: franc?ais [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test05227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05227");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        int int6 = localDateTime5.getCenturyOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        java.lang.String str11 = localDateTime9.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = localDateTime9.toString(dateTimeFormatter12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime9.monthOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(0L, chronology16);
        java.lang.String str19 = localDateTime17.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = localDateTime17.toString(dateTimeFormatter20);
        boolean boolean22 = localDateTime9.isAfter((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withPeriodAdded(readablePeriod25, 19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = localDateTime24.toString(dateTimeFormatter28);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime.Property property31 = localDateTime5.year();
        java.lang.String str32 = property31.getAsText();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 19 + "'", int6 == 19);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c" + "'", str11, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T00:00:00.000" + "'", str13, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u65e5\u672c" + "'", str19, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:00.000" + "'", str21, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1969-01-01T00:00:00.000" + "'", str29, "1969-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970" + "'", str32, "1970");
    }

    @Test
    public void test05228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05228");
        java.util.Locale locale1 = new java.util.Locale("1970-01-08T02:00:00.000");
        org.junit.Assert.assertEquals(locale1.toString(), "1970-01-08t02:00:00.000");
    }

    @Test
    public void test05229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05229");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(0L, chronology2);
        int int4 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMillisOfSecond(100);
        org.joda.time.Chronology chronology7 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.days();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone10.previousTransition(100L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfSecond((int) (byte) 0);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePartial) localDateTime14, (long) (-1));
        org.joda.time.DateTimeField dateTimeField19 = chronology7.millisOfDay();
        org.joda.time.DurationField durationField20 = chronology7.hours();
        org.joda.time.DurationField durationField21 = chronology7.weeks();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        long long28 = dateTimeZone24.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology29 = org.joda.time.chrono.ZonedChronology.getInstance(chronology7, dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology29.halfdayOfDay();
        long long34 = zonedChronology29.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        int int39 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withMillisOfSecond(100);
        org.joda.time.Chronology chronology42 = localDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfCentury();
        org.joda.time.DurationField durationField44 = chronology42.millis();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) '#', chronology42);
        int[] intArray48 = zonedChronology29.get((org.joda.time.ReadablePartial) localDateTime46, (long) 1);
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology29.yearOfEra();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology29.era();
        org.joda.time.DurationField durationField51 = zonedChronology29.minutes();
        org.joda.time.Chronology chronology52 = zonedChronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology29.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(0L, (org.joda.time.Chronology) zonedChronology29);
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology29.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long63 = zonedChronology29.getDateTimeMillis(70, 35217444, 35116539, 29, 0, 35199563, 14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 29 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-62167219199980L) + "'", long34 == (-62167219199980L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1970, 1, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test05230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05230");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology28.minutes();
        org.joda.time.DurationField durationField35 = zonedChronology28.halfdays();
        org.joda.time.DateTimeZone dateTimeZone36 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test05231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05231");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(20);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(0L, chronology3);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withMillisOfSecond(100);
        org.joda.time.Chronology chronology8 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfCentury();
        org.joda.time.DurationField durationField10 = chronology8.days();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        long long13 = dateTimeZone11.previousTransition(100L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) (byte) 0);
        int[] intArray19 = chronology8.get((org.joda.time.ReadablePartial) localDateTime15, (long) (-1));
        org.joda.time.DateTimeField dateTimeField20 = chronology8.millisOfDay();
        org.joda.time.DurationField durationField21 = chronology8.hours();
        org.joda.time.DurationField durationField22 = chronology8.weeks();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long29 = dateTimeZone25.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology30 = org.joda.time.chrono.ZonedChronology.getInstance(chronology8, dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology30.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology30.millisOfSecond();
        org.joda.time.DurationField durationField33 = zonedChronology30.weekyears();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(0L, chronology35);
        java.lang.String str38 = localDateTime36.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = localDateTime36.toString(dateTimeFormatter39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime36.monthOfYear();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime36.withMillisOfDay(100);
        long long45 = zonedChronology30.set((org.joda.time.ReadablePartial) localDateTime43, (long) 59);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(0L, chronology47);
        int int49 = localDateTime48.getWeekyear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withYearOfEra(1970);
        org.joda.time.DateTime dateTime52 = localDateTime51.toDateTime();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(0L, chronology54);
        int int56 = localDateTime55.getWeekyear();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withYearOfEra(1970);
        org.joda.time.DateTime dateTime59 = localDateTime58.toDateTime();
        int int60 = dateTime52.compareTo((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime61 = localDateTime43.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime61.getZone();
        java.lang.String str63 = dateTimeZone62.toString();
        long long65 = dateTimeZone62.convertUTCToLocal((long) '4');
        java.lang.String str67 = dateTimeZone62.getShortName((long) 292278993);
        long long69 = dateTimeZone1.getMillisKeepLocal(dateTimeZone62, (long) 70);
        boolean boolean70 = dateTimeZone62.isFixed();
        long long72 = dateTimeZone62.previousTransition((-3599813L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u65e5\u672c" + "'", str38, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T00:00:00.000" + "'", str40, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 100L + "'", long45 == 100L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "UTC" + "'", str63, "UTC");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 52L + "'", long65 == 52L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 90L + "'", long69 == 90L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-3599813L) + "'", long72 == (-3599813L));
    }

    @Test
    public void test05232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05232");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale3 = new java.util.Locale("1", "hi!");
        java.util.Locale.setDefault(category0, locale3);
        org.joda.time.tz.NameProvider nameProvider5 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str10 = nameProvider5.getShortName(locale7, "", "hi!");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider5);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider5);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(0L, chronology14);
        java.util.Locale locale16 = java.util.Locale.US;
        boolean boolean17 = localDateTime15.equals((java.lang.Object) locale16);
        java.lang.String str18 = locale16.toLanguageTag();
        java.lang.String str21 = nameProvider5.getShortName(locale16, "2022-02-11T09:44:17.426", "");
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str25 = nameProvider5.getName(locale22, "zh-CN", "S\374dkorea");
        java.util.Locale.setDefault(category0, locale22);
        java.util.Locale locale27 = java.util.Locale.getDefault(category0);
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str29 = locale28.getLanguage();
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder30.clearExtensions();
        java.util.Locale.Builder builder33 = builder30.setLanguage("");
        java.util.Locale.Builder builder34 = builder33.clearExtensions();
        java.util.Locale locale36 = new java.util.Locale("UTC");
        java.util.Locale.Builder builder37 = builder34.setLocale(locale36);
        java.util.Locale locale38 = builder34.build();
        java.util.Locale.Builder builder40 = builder34.setScript("");
        java.util.Locale.Builder builder41 = builder40.clearExtensions();
        java.util.Locale locale42 = builder41.build();
        java.lang.String str43 = locale42.getISO3Country();
        java.lang.String str44 = locale28.getDisplayCountry(locale42);
        java.util.Locale.setDefault(category0, locale28);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale3.toString(), "1_HI!");
        org.junit.Assert.assertNotNull(nameProvider5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "en-US" + "'", str18, "en-US");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "zh" + "'", str29, "zh");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals(locale36.toString(), "utc");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "utc");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "utc");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Taiwan" + "'", str44, "Taiwan");
    }

    @Test
    public void test05233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05233");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.millis();
        org.joda.time.DurationField durationField9 = chronology6.months();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusHours((int) '#');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusDays(3);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withDurationAdded(readableDuration20, 12);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusSeconds(7);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.centuryOfEra();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test05234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05234");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        java.lang.String str12 = localDateTime10.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = localDateTime10.toString(dateTimeFormatter13);
        boolean boolean15 = localDateTime2.isAfter((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime.Property property16 = localDateTime10.secondOfMinute();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(0L, chronology18);
        java.lang.String str21 = localDateTime19.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = localDateTime19.toString(dateTimeFormatter22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime19.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(0L, chronology26);
        java.lang.String str29 = localDateTime27.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = localDateTime27.toString(dateTimeFormatter30);
        boolean boolean32 = localDateTime19.isAfter((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.plusYears((int) (short) -1);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readableDuration35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plus(readablePeriod37);
        java.util.Date date39 = localDateTime36.toDate();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime10.withFields((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.monthOfYear();
        java.lang.String str42 = property41.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u672c" + "'", str12, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.000" + "'", str14, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u65e5\u672c" + "'", str21, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.000" + "'", str23, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u65e5\u672c" + "'", str29, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.000" + "'", str31, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Jan 01 00:00:00 GMT 1969");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Property[monthOfYear]" + "'", str42, "Property[monthOfYear]");
    }

    @Test
    public void test05235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05235");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField33 = zonedChronology28.halfdays();
        org.joda.time.DurationField durationField34 = zonedChronology28.minutes();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone38 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology28.minuteOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test05236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05236");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.withTime(1, (int) (byte) 0, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withWeekOfWeekyear(1598067);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1598067 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test05237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05237");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.era();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(0L, chronology31);
        int int33 = localDateTime32.getWeekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withDayOfMonth(10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(0L, chronology41);
        int int43 = localDateTime42.getWeekyear();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withMillisOfSecond(100);
        org.joda.time.Chronology chronology46 = localDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfCentury();
        org.joda.time.DurationField durationField48 = chronology46.days();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        long long51 = dateTimeZone49.previousTransition(100L);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withMillisOfSecond((int) (byte) 0);
        int[] intArray57 = chronology46.get((org.joda.time.ReadablePartial) localDateTime53, (long) (-1));
        zonedChronology28.validate((org.joda.time.ReadablePartial) localDateTime37, intArray57);
        org.joda.time.DateTimeField dateTimeField59 = zonedChronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField60 = zonedChronology28.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long65 = zonedChronology28.getDateTimeMillis(35286275, (int) '4', 0, 1969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L + "'", long51 == 100L);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test05238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05238");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        int int14 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime13);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean17 = dateTime13.equals((java.lang.Object) timeZone16);
        int int18 = timeZone16.getRawOffset();
        java.time.ZoneId zoneId19 = timeZone16.toZoneId();
        java.time.ZoneId zoneId20 = timeZone16.toZoneId();
        java.lang.String str23 = timeZone16.getDisplayName(false, 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(zoneId19);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GMT" + "'", str23, "GMT");
    }

    @Test
    public void test05239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05239");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-60518361599999L));
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusMonths(53);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withDayOfYear(24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
    }

    @Test
    public void test05240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05240");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale6 = new java.util.Locale("UTC");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale locale8 = builder4.build();
        java.util.Locale.Builder builder10 = builder4.setScript("");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder11.build();
        java.util.Locale.Builder builder13 = builder11.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder11.setLanguage("2022-02-11T09:45:57.890");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-11T09:45:57.890 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals(locale6.toString(), "utc");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "utc");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "utc");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test05241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05241");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(0L, chronology2);
        int int4 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMillisOfSecond(100);
        org.joda.time.Chronology chronology7 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.millis();
        org.joda.time.DurationField durationField10 = chronology7.months();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.DurationField durationField12 = chronology7.halfdays();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) ' ', chronology7);
        org.joda.time.DateTimeField dateTimeField14 = chronology7.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField16 = chronology7.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(59);
        java.lang.String str20 = dateTimeZone18.getShortName(35L);
        org.joda.time.Chronology chronology21 = chronology7.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.minuteOfDay();
        org.joda.time.DurationField durationField23 = chronology21.halfdays();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.059" + "'", str20, "+00:00:00.059");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test05242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05242");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withMillisOfSecond(100);
        org.joda.time.Chronology chronology11 = localDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.days();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long16 = dateTimeZone14.previousTransition(100L);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfSecond((int) (byte) 0);
        int[] intArray22 = chronology11.get((org.joda.time.ReadablePartial) localDateTime18, (long) (-1));
        org.joda.time.DateTimeField dateTimeField23 = chronology11.millisOfDay();
        org.joda.time.DurationField durationField24 = chronology11.hours();
        org.joda.time.DurationField durationField25 = chronology11.weeks();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long32 = dateTimeZone28.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology33 = org.joda.time.chrono.ZonedChronology.getInstance(chronology11, dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology33.halfdayOfDay();
        org.joda.time.DurationField durationField35 = zonedChronology33.seconds();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology33.weekyear();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology33.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology33);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        long long42 = zonedChronology33.add(readablePeriod39, (long) 1970, (int) (byte) 1);
        boolean boolean43 = locale3.equals((java.lang.Object) 1970);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1970L + "'", long42 == 1970L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test05243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05243");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfDay();
        long long39 = zonedChronology28.getDateTimeMillis(0, 1, (int) (byte) 1, 20);
        org.joda.time.DateTimeZone dateTimeZone40 = zonedChronology28.getZone();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        long long43 = dateTimeZone41.previousTransition(0L);
        long long45 = dateTimeZone41.convertUTCToLocal(1L);
        long long47 = dateTimeZone41.convertUTCToLocal((long) (byte) 10);
        org.joda.time.Chronology chronology48 = zonedChronology28.withZone(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 0);
        boolean boolean52 = dateTimeZone51.isFixed();
        int int54 = dateTimeZone51.getOffsetFromLocal((long) 'u');
        org.joda.time.Chronology chronology55 = chronology48.withZone(dateTimeZone51);
        long long57 = dateTimeZone51.nextTransition(1644658509610L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-62167219199980L) + "'", long39 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1644658509610L + "'", long57 == 1644658509610L);
    }

    @Test
    public void test05244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05244");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfHalfday();
        java.lang.String str35 = zonedChronology28.toString();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        long long39 = dateTimeZone37.nextTransition(4363010L);
        org.joda.time.Chronology chronology40 = zonedChronology28.withZone(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology28.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            long long50 = zonedChronology28.getDateTimeMillis(61, 28800000, 0, 45, 278, 1439016, 1969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 45 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str35, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 4363010L + "'", long39 == 4363010L);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test05245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05245");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology32.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology32.minuteOfDay();
        java.lang.String str36 = zonedChronology32.toString();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology32.monthOfYear();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology32.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long44 = zonedChronology32.getDateTimeMillis(28L, 1200000, 35142965, (-174585600), 47);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1200000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str36, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test05246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05246");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withDurationAdded(readableDuration9, (int) (byte) 1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.minuteOfHour();
        java.lang.String str13 = property12.getAsShortText();
        int int14 = property12.getMaximumValue();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
    }

    @Test
    public void test05247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05247");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.era();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField32 = zonedChronology28.seconds();
        org.joda.time.DurationField durationField33 = zonedChronology28.minutes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test05248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05248");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusSeconds(2022);
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundFloorCopy();
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        java.lang.String str17 = property13.getAsShortText(locale15);
        java.lang.String str18 = locale15.getVariant();
        java.lang.String str19 = locale15.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ja" + "'", str19, "ja");
    }

    @Test
    public void test05249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05249");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        long long37 = zonedChronology28.add((long) 9, 35L, (int) (short) 1);
        org.joda.time.Chronology chronology38 = zonedChronology28.withUTC();
        org.joda.time.Chronology chronology39 = zonedChronology28.withUTC();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology28);
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology28.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray44 = zonedChronology28.get(readablePeriod42, (-3599883L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 44L + "'", long37 == 44L);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test05250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05250");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusDays(4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plus(readableDuration10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readableDuration12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        long long19 = dateTimeZone16.convertLocalToUTC(100L, true);
        java.lang.String str21 = dateTimeZone16.getName(1L);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime15, dateTimeZone16);
        org.joda.time.DateTime dateTime23 = localDateTime15.toDateTime();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(0L, chronology25);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        long long32 = dateTimeZone30.previousTransition(100L);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withMillisOfSecond((int) (byte) 0);
        int int37 = localDateTime26.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        long long41 = dateTimeZone38.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDateTime26.toDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology44 = dateTime43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        long long47 = dateTimeZone45.previousTransition(0L);
        long long49 = dateTimeZone45.convertUTCToLocal(1L);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        long long54 = dateTimeZone45.getMillisKeepLocal(dateTimeZone52, (long) (-1));
        boolean boolean55 = dateTimeZone45.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology56 = org.joda.time.chrono.ZonedChronology.getInstance(chronology44, dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField57 = zonedChronology56.minuteOfDay();
        org.joda.time.DurationField durationField58 = zonedChronology56.centuries();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone59);
        org.joda.time.Chronology chronology61 = zonedChronology56.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField62 = zonedChronology56.clockhourOfHalfday();
        java.lang.String str63 = zonedChronology56.toString();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime23, (org.joda.time.Chronology) zonedChronology56);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L + "'", long32 == 100L);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L + "'", long41 == 100L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(zonedChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str63, "ZonedChronology[ISOChronology[UTC], UTC]");
    }

    @Test
    public void test05251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05251");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.weekOfWeekyear();
        org.joda.time.Chronology chronology36 = zonedChronology28.withUTC();
        long long44 = zonedChronology28.getDateTimeMillis((int) (byte) -1, 12, 9, 1, (int) (byte) 1, (int) (short) 1, 5);
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology28.yearOfEra();
        java.lang.String str46 = zonedChronology28.toString();
        org.joda.time.DateTimeZone dateTimeZone47 = zonedChronology28.getZone();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology28);
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology28.millisOfSecond();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-62169202738995L) + "'", long44 == (-62169202738995L));
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str46, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test05252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05252");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.lang.String str11 = property7.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property7.getFieldType();
        org.joda.time.LocalDateTime localDateTime13 = property7.roundFloorCopy();
        int int14 = property7.get();
        org.joda.time.LocalDateTime localDateTime15 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfMonth();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(0L, chronology18);
        java.lang.String str21 = localDateTime19.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = localDateTime19.toString(dateTimeFormatter22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime19.monthOfYear();
        org.joda.time.LocalDateTime localDateTime25 = property24.withMinimumValue();
        org.joda.time.Interval interval26 = property24.toInterval();
        org.joda.time.LocalDateTime localDateTime27 = property24.getLocalDateTime();
        boolean boolean28 = localDateTime15.isEqual((org.joda.time.ReadablePartial) localDateTime27);
        int int29 = localDateTime15.getMinuteOfHour();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(0L, chronology31);
        java.util.Locale locale33 = java.util.Locale.US;
        boolean boolean34 = localDateTime32.equals((java.lang.Object) locale33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withYearOfEra((int) (byte) 1);
        int int37 = localDateTime36.getEra();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusSeconds((int) '4');
        int int40 = localDateTime36.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.plusHours((int) '4');
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withYearOfEra(1971);
        boolean boolean45 = localDateTime15.isEqual((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime15.plusSeconds(1967);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u65e5\u672c" + "'", str21, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.000" + "'", str23, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test05253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05253");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMinutes(100);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.year();
        org.joda.time.LocalDateTime localDateTime19 = property17.addWrapFieldToCopy(2);
        org.joda.time.LocalDateTime localDateTime21 = property17.addToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        long long24 = dateTimeZone22.previousTransition(100L);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(0L, chronology28);
        int int30 = localDateTime29.getWeekyear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withYearOfEra(1970);
        org.joda.time.DateTime dateTime33 = localDateTime32.toDateTime();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(0L, chronology35);
        int int37 = localDateTime36.getWeekyear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withYearOfEra(1970);
        org.joda.time.DateTime dateTime40 = localDateTime39.toDateTime();
        int int41 = dateTime33.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = localDateTime26.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        int int43 = property17.compareTo((org.joda.time.ReadableInstant) dateTime42);
        java.lang.String str44 = property17.getAsShortText();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1969" + "'", str44, "1969");
    }

    @Test
    public void test05254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05254");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\u30c9\u30a4\u30c4\u8a9e", (double) 117);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=117.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05255");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(0L, chronology35);
        int int37 = localDateTime36.getWeekyear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withMillisOfSecond(0);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        long long46 = dateTimeZone44.previousTransition(100L);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(0L, chronology50);
        int int52 = localDateTime51.getWeekyear();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withYearOfEra(1970);
        org.joda.time.DateTime dateTime55 = localDateTime54.toDateTime();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(0L, chronology57);
        int int59 = localDateTime58.getWeekyear();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withYearOfEra(1970);
        org.joda.time.DateTime dateTime62 = localDateTime61.toDateTime();
        int int63 = dateTime55.compareTo((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime64 = localDateTime48.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime48.plus(readableDuration65);
        boolean boolean67 = localDateTime41.isAfter((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime41.minusDays(2022);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime69.minusMonths((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.LocalDateTime localDateTime75 = localDateTime69.minus(readableDuration74);
        int[] intArray77 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime69, (long) 1);
        org.joda.time.DurationField durationField78 = zonedChronology28.hours();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L + "'", long46 == 100L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1970 + "'", int59 == 1970);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1970, 1, 1, 1]");
        org.junit.Assert.assertNotNull(durationField78);
    }

    @Test
    public void test05256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05256");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        long long30 = dateTimeZone23.nextTransition(86399999L);
        java.lang.String str31 = dateTimeZone23.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 86399999L + "'", long30 == 86399999L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
    }

    @Test
    public void test05257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05257");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        int int12 = property7.getMaximumTextLength(locale11);
        int int13 = property7.get();
        java.util.Locale locale16 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.lang.String str18 = locale16.getDisplayLanguage(locale17);
        java.lang.String str19 = property7.getAsShortText(locale17);
        org.joda.time.LocalDateTime localDateTime20 = property7.getLocalDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withDurationAdded(readableDuration21, (int) (short) 10);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.minus(readableDuration24);
        int int26 = localDateTime20.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = localDateTime20.withTime(9, 44, 52, 35286275);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35286275 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals(locale16.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c" + "'", str18, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Jan" + "'", str19, "Jan");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
    }

    @Test
    public void test05258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05258");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        java.lang.String str36 = localDateTime34.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = localDateTime34.toString(dateTimeFormatter37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime34.monthOfYear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.withMillisOfDay(100);
        long long43 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime41, (long) 59);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(0L, chronology45);
        int int47 = localDateTime46.getWeekyear();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withYearOfEra(1970);
        org.joda.time.DateTime dateTime50 = localDateTime49.toDateTime();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(0L, chronology52);
        int int54 = localDateTime53.getWeekyear();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withYearOfEra(1970);
        org.joda.time.DateTime dateTime57 = localDateTime56.toDateTime();
        int int58 = dateTime50.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime59 = localDateTime41.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.LocalDateTime.Property property60 = localDateTime41.monthOfYear();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime41.plusDays(1971);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.minuteOfHour();
        int int64 = property63.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime66 = property63.addToCopy((long) 4);
        java.lang.String str67 = property63.getAsText();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.000" + "'", str38, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 59 + "'", int64 == 59);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0" + "'", str67, "0");
    }

    @Test
    public void test05259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05259");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone8.previousTransition(0L);
        long long12 = dateTimeZone8.nextTransition((long) (-1));
        org.joda.time.Chronology chronology13 = chronology6.withZone(dateTimeZone8);
        org.joda.time.DurationField durationField14 = chronology6.minutes();
        org.joda.time.DurationField durationField15 = chronology6.hours();
        org.joda.time.DurationField durationField16 = chronology6.millis();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test05260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05260");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withWeekyear(44);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test05261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05261");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfHour();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, chronology34);
        java.util.Locale locale36 = java.util.Locale.US;
        boolean boolean37 = localDateTime35.equals((java.lang.Object) locale36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withYearOfEra((int) (byte) 1);
        int int40 = localDateTime39.getEra();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusSeconds((int) '4');
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.minusDays(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = localDateTime46.getFieldType(0);
        long long50 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime46, (long) (short) 1);
        java.lang.String str52 = localDateTime46.toString("-00:00:00.001");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-62136028800000L) + "'", long50 == (-62136028800000L));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-00:00:00.001" + "'", str52, "-00:00:00.001");
    }

    @Test
    public void test05262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05262");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.minuteOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology32.centuries();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.Chronology chronology37 = zonedChronology32.withZone(dateTimeZone35);
        org.joda.time.DurationField durationField38 = zonedChronology32.weeks();
        org.joda.time.DurationField durationField39 = zonedChronology32.seconds();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology32.weekOfWeekyear();
        org.joda.time.DurationField durationField41 = zonedChronology32.halfdays();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test05263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05263");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.getISO3Country();
        java.lang.String str3 = locale0.getDisplayScript();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(0L, chronology5);
        java.lang.String str8 = localDateTime6.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = localDateTime6.toString(dateTimeFormatter9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime6.monthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMinimumValue();
        org.joda.time.Interval interval13 = property11.toInterval();
        org.joda.time.LocalDateTime localDateTime14 = property11.getLocalDateTime();
        boolean boolean15 = locale0.equals((java.lang.Object) property11);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u5fb7\u6587" + "'", str1, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DEU" + "'", str2, "DEU");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c" + "'", str8, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.000" + "'", str10, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test05264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05264");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology28);
        org.joda.time.DateTime dateTime31 = localDateTime30.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            int int33 = localDateTime30.getValue(35282921);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35282921");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test05265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05265");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int3 = timeZone1.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        timeZone1.setID("+00:00:00.020");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
    }

    @Test
    public void test05266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05266");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.era();
        org.joda.time.Chronology chronology34 = zonedChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test05267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05267");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone1.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 0, dateTimeZone1);
        java.util.Locale locale8 = new java.util.Locale("", "1970-01-01T00:00:00.000");
        java.lang.String str9 = dateTimeZone1.getShortName((long) (byte) 0, locale8);
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayName(locale12);
        java.util.Set<java.lang.Character> charSet14 = locale12.getExtensionKeys();
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.lang.String str18 = locale12.getDisplayName(locale15);
        java.lang.String str19 = dateTimeZone1.getName((long) 6, locale15);
        long long21 = dateTimeZone1.previousTransition((long) (byte) 100);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertEquals(locale8.toString(), "_1970-01-01T00:00:00.000");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str13, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str17, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u671d\u9c9c\u6587" + "'", str18, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
    }

    @Test
    public void test05268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05268");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Italian");
    }

    @Test
    public void test05269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05269");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        java.lang.String str2 = timeZone1.getID();
        java.util.TimeZone.setDefault(timeZone1);
        timeZone1.setRawOffset((int) 'u');
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(0L, chronology7);
        int int9 = localDateTime8.getWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withMillisOfSecond(100);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology12.days();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone15.previousTransition(100L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfSecond((int) (byte) 0);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePartial) localDateTime19, (long) (-1));
        org.joda.time.DateTimeField dateTimeField24 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField25 = chronology12.hours();
        org.joda.time.DurationField durationField26 = chronology12.weeks();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        long long33 = dateTimeZone29.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology34 = org.joda.time.chrono.ZonedChronology.getInstance(chronology12, dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology34.millisOfSecond();
        org.joda.time.DurationField durationField37 = zonedChronology34.weekyears();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology34.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone39 = zonedChronology34.getZone();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusMonths(1971);
        java.util.Date date43 = localDateTime40.toDate();
        boolean boolean44 = timeZone1.inDaylightTime(date43);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(date43);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Fri Feb 11 09:48:27 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test05270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05270");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMinutes(100);
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str19 = localDateTime14.toString("\u4e2d\u56fd\u8a9e", locale18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField21 = localDateTime14.getField(52100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 52100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str19, "\u4e2d\u56fd\u8a9e");
    }

    @Test
    public void test05271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05271");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plus(readableDuration11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        boolean boolean15 = dateTimeZone13.isLocalDateTimeGap(localDateTime14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, chronology17);
        java.lang.String str20 = localDateTime18.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = localDateTime18.toString(dateTimeFormatter21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.monthOfYear();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundCeilingCopy();
        boolean boolean25 = dateTimeZone13.isLocalDateTimeGap(localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusMillis((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone28.previousTransition(100L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withHourOfDay((int) (short) 0);
        int int35 = localDateTime34.getEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(0L, chronology39);
        java.lang.String str42 = localDateTime40.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = localDateTime40.toString(dateTimeFormatter43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime40.monthOfYear();
        org.joda.time.Interval interval46 = property45.toInterval();
        org.joda.time.LocalDateTime localDateTime48 = property45.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property45.getFieldType();
        org.joda.time.LocalDateTime.Property property50 = localDateTime37.property(dateTimeFieldType49);
        boolean boolean51 = localDateTime27.isSupported(dateTimeFieldType49);
        org.joda.time.LocalDateTime.Property property52 = localDateTime10.property(dateTimeFieldType49);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime10.minusMinutes(32);
        int int55 = localDateTime10.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime10.minusYears(24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime59 = localDateTime10.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u65e5\u672c" + "'", str20, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.000" + "'", str22, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u65e5\u672c" + "'", str42, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01T00:00:00.000" + "'", str44, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertNotNull(localDateTime57);
    }

    @Test
    public void test05272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05272");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone32 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        long long37 = dateTimeZone35.previousTransition(0L);
        long long39 = dateTimeZone35.nextTransition((long) (-1));
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone35);
        long long42 = dateTimeZone35.convertUTCToLocal((long) 20);
        int int44 = dateTimeZone35.getStandardOffset(22L);
        org.joda.time.chrono.ZonedChronology zonedChronology45 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology28, dateTimeZone35);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray48 = zonedChronology28.get(readablePeriod46, (long) 366);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 20L + "'", long42 == 20L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(zonedChronology45);
    }

    @Test
    public void test05273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05273");
        java.util.Locale locale2 = new java.util.Locale("era", "2022-02-11T09:45:51.062");
        java.lang.String str3 = locale2.getDisplayScript();
        org.junit.Assert.assertEquals(locale2.toString(), "era_2022-02-11T09:45:51.062");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test05274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05274");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(0L, chronology5);
        java.lang.String str8 = localDateTime6.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = localDateTime6.toString(dateTimeFormatter9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime6.monthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundCeilingCopy();
        boolean boolean13 = dateTimeZone1.isLocalDateTimeGap(localDateTime12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        java.lang.String str15 = dateTimeZone1.getID();
        boolean boolean17 = dateTimeZone1.equals((java.lang.Object) "eng");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(0L, chronology19);
        int int21 = localDateTime20.getWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withMillisOfSecond(100);
        org.joda.time.Chronology chronology24 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfCentury();
        org.joda.time.DurationField durationField26 = chronology24.millis();
        org.joda.time.DurationField durationField27 = chronology24.months();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = localDateTime28.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusMillis((int) (byte) 1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        java.lang.String str36 = localDateTime34.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = localDateTime34.toString(dateTimeFormatter37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime34.monthOfYear();
        org.joda.time.Interval interval40 = property39.toInterval();
        long long41 = property39.remainder();
        org.joda.time.LocalDateTime localDateTime42 = property39.roundHalfFloorCopy();
        int int43 = localDateTime42.getMillisOfSecond();
        boolean boolean44 = localDateTime28.isEqual((org.joda.time.ReadablePartial) localDateTime42);
        boolean boolean45 = dateTimeZone1.isLocalDateTimeGap(localDateTime28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime47 = localDateTime28.withDayOfWeek(32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c" + "'", str8, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.000" + "'", str10, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.000" + "'", str38, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test05275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05275");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withMillisOfDay(100);
        org.joda.time.LocalDateTime.Property property10 = localDateTime2.centuryOfEra();
        int int11 = localDateTime2.getMillisOfDay();
        org.joda.time.DateTime dateTime12 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime2.year();
        long long14 = property13.remainder();
        org.joda.time.LocalDateTime localDateTime15 = property13.roundCeilingCopy();
        int int16 = localDateTime15.getYearOfEra();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
    }

    @Test
    public void test05276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05276");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.year();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfWeek();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test05277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05277");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(24, 0, 6, (-1), 36000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05278");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.millis();
        org.joda.time.DurationField durationField9 = chronology6.months();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.era();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test05279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05279");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property7.getFieldType();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        java.util.Locale locale15 = java.util.Locale.US;
        boolean boolean16 = localDateTime14.equals((java.lang.Object) locale15);
        java.lang.String str17 = locale15.toLanguageTag();
        int int18 = property7.getMaximumTextLength(locale15);
        java.lang.String str19 = property7.toString();
        int int20 = property7.getLeapAmount();
        org.joda.time.tz.NameProvider nameProvider21 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str26 = nameProvider21.getShortName(locale23, "", "hi!");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(0L, chronology28);
        java.lang.String str31 = localDateTime29.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = localDateTime29.toString(dateTimeFormatter32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime29.monthOfYear();
        org.joda.time.Interval interval35 = property34.toInterval();
        org.joda.time.LocalDateTime localDateTime37 = property34.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property34.getFieldType();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(0L, chronology40);
        java.util.Locale locale42 = java.util.Locale.US;
        boolean boolean43 = localDateTime41.equals((java.lang.Object) locale42);
        java.lang.String str44 = locale42.toLanguageTag();
        int int45 = property34.getMaximumTextLength(locale42);
        java.lang.String str46 = locale23.getDisplayCountry(locale42);
        java.util.Locale locale47 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale47);
        java.util.Locale locale51 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale52 = java.util.Locale.ENGLISH;
        java.lang.String str53 = locale51.getDisplayLanguage(locale52);
        java.lang.String str54 = locale47.getDisplayName(locale51);
        java.lang.String str55 = locale42.getDisplayScript(locale47);
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.util.Locale locale57 = java.util.Locale.ITALY;
        java.lang.String str58 = locale56.getDisplayCountry(locale57);
        java.lang.String str59 = locale42.getDisplayName(locale56);
        java.lang.String str60 = property7.getAsText(locale56);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en-US" + "'", str17, "en-US");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Property[monthOfYear]" + "'", str19, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(nameProvider21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u65e5\u672c" + "'", str31, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01T00:00:00.000" + "'", str33, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "en-US" + "'", str44, "en-US");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale51.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u65e5\u672c" + "'", str53, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Japanese (Japan)" + "'", str54, "Japanese (Japan)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "English (United States)" + "'", str59, "English (United States)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "January" + "'", str60, "January");
    }

    @Test
    public void test05280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05280");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 0);
        boolean boolean3 = dateTimeZone2.isFixed();
        int int5 = dateTimeZone2.getOffsetFromLocal((long) 'u');
        java.lang.String str7 = dateTimeZone2.getName(4832097L);
        int int9 = dateTimeZone2.getOffsetFromLocal((long) 35155654);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test05281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05281");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.minuteOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology32.centuries();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.Chronology chronology37 = zonedChronology32.withZone(dateTimeZone35);
        org.joda.time.DurationField durationField38 = zonedChronology32.weeks();
        org.joda.time.DurationField durationField39 = zonedChronology32.seconds();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology32.weekOfWeekyear();
        java.lang.String str41 = zonedChronology32.toString();
        org.joda.time.DurationField durationField42 = zonedChronology32.millis();
        org.joda.time.DurationField durationField43 = zonedChronology32.centuries();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str41, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test05282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05282");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeZone dateTimeZone31 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.weekOfWeekyear();
        org.joda.time.DurationField durationField35 = zonedChronology28.years();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        long long38 = dateTimeZone36.previousTransition(100L);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(0L, chronology42);
        int int44 = localDateTime43.getWeekyear();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withYearOfEra(1970);
        org.joda.time.DateTime dateTime47 = localDateTime46.toDateTime();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(0L, chronology49);
        int int51 = localDateTime50.getWeekyear();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withYearOfEra(1970);
        org.joda.time.DateTime dateTime54 = localDateTime53.toDateTime();
        int int55 = dateTime47.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime56 = localDateTime40.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime40.plus(readableDuration57);
        int int59 = localDateTime40.size();
        org.joda.time.LocalDateTime.Property property60 = localDateTime40.millisOfSecond();
        org.joda.time.LocalDateTime.Property property61 = localDateTime40.centuryOfEra();
        int int62 = localDateTime40.getMonthOfYear();
        boolean boolean63 = zonedChronology28.equals((java.lang.Object) localDateTime40);
        org.joda.time.DurationField durationField64 = zonedChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology28.millisOfSecond();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(0L, chronology67);
        int int69 = localDateTime68.getWeekyear();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.withMillisOfSecond(100);
        org.joda.time.Chronology chronology72 = localDateTime68.getChronology();
        org.joda.time.DurationFieldType durationFieldType73 = null;
        boolean boolean74 = localDateTime68.isSupported(durationFieldType73);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime68.withCenturyOfEra((int) '#');
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minusHours(1200000);
        int int79 = localDateTime78.getYearOfCentury();
        int[] intArray81 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime78, 43L);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime78.withMillisOfDay((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime85 = localDateTime83.withMillisOfDay(422580000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 422580000 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L + "'", long38 == 100L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1970 + "'", int69 == 1970);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 33 + "'", int79 == 33);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1970, 1, 1, 43]");
        org.junit.Assert.assertNotNull(localDateTime83);
    }

    @Test
    public void test05283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05283");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        long long36 = dateTimeZone34.previousTransition(0L);
        long long38 = dateTimeZone34.convertUTCToLocal(1L);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        long long43 = dateTimeZone34.getMillisKeepLocal(dateTimeZone41, (long) (-1));
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(0L, chronology45);
        int int47 = localDateTime46.getWeekyear();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withMillisOfSecond(100);
        org.joda.time.Chronology chronology50 = localDateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.yearOfCentury();
        org.joda.time.DurationField durationField52 = chronology50.days();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        long long55 = dateTimeZone53.previousTransition(100L);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withMillisOfSecond((int) (byte) 0);
        int[] intArray61 = chronology50.get((org.joda.time.ReadablePartial) localDateTime57, (long) (-1));
        org.joda.time.DateTimeField dateTimeField62 = chronology50.millisOfDay();
        boolean boolean63 = dateTimeZone41.equals((java.lang.Object) chronology50);
        org.joda.time.Chronology chronology64 = zonedChronology28.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology28.halfdayOfDay();
        java.lang.String str66 = zonedChronology28.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L + "'", long55 == 100L);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str66, "ZonedChronology[ISOChronology[UTC], UTC]");
    }

    @Test
    public void test05284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05284");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfCentury();
        int int9 = property8.getMinimumValueOverall();
        java.lang.String str10 = property8.toString();
        java.lang.String str11 = property8.getAsText();
        boolean boolean12 = property8.isLeap();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[yearOfCentury]" + "'", str10, "Property[yearOfCentury]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "22" + "'", str11, "22");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test05285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05285");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(35162287, 43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05286");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        java.lang.String str8 = property7.getName();
        org.joda.time.DurationField durationField9 = property7.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime10 = property7.withMinimumValue();
        java.lang.String str11 = property7.getName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "monthOfYear" + "'", str11, "monthOfYear");
    }

    @Test
    public void test05287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05287");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfHalfday();
        java.lang.String str35 = zonedChronology28.toString();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        long long39 = dateTimeZone37.nextTransition(4363010L);
        org.joda.time.Chronology chronology40 = zonedChronology28.withZone(dateTimeZone37);
        long long45 = zonedChronology28.getDateTimeMillis(1900, (int) (byte) 10, (int) (byte) 10, (int) ' ');
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology28.dayOfMonth();
        org.joda.time.DurationField durationField47 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology28.clockhourOfHalfday();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str35, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 4363010L + "'", long39 == 4363010L);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-2184623999968L) + "'", long45 == (-2184623999968L));
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test05288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05288");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 4);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone2.previousTransition(100L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withHourOfDay((int) (short) 0);
        int int9 = localDateTime8.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withCenturyOfEra(0);
        int int12 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plus(readablePeriod14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusYears(52100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusMillis(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withHourOfDay((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L + "'", long4 == 100L);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test05289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05289");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("gmt_JAN_2022-02-11T09:43:35.370");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"gmt_JAN_2022-02-11T09:43:35.370\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05290");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getDayOfYear();
        int int4 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis(1950);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test05291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05291");
        java.util.Locale locale2 = new java.util.Locale("ZonedChronology[ISOChronology[UTC], UTC]", "");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(0L, chronology5);
        int int7 = localDateTime6.getWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withMillisOfSecond(100);
        org.joda.time.Chronology chronology10 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfCentury();
        org.joda.time.DurationField durationField12 = chronology10.days();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        long long15 = dateTimeZone13.previousTransition(100L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfSecond((int) (byte) 0);
        int[] intArray21 = chronology10.get((org.joda.time.ReadablePartial) localDateTime17, (long) (-1));
        org.joda.time.DateTimeField dateTimeField22 = chronology10.millisOfDay();
        org.joda.time.DurationField durationField23 = chronology10.hours();
        org.joda.time.DurationField durationField24 = chronology10.weeks();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        long long31 = dateTimeZone27.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology10, dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.halfdayOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology32.seconds();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology32.minuteOfDay();
        org.joda.time.DurationField durationField36 = zonedChronology32.seconds();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology32.secondOfMinute();
        org.joda.time.Chronology chronology38 = zonedChronology32.withUTC();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(1899L, chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusMinutes(92);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        int int48 = dateTimeZone44.getStandardOffset(999L);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(0L, chronology50);
        int int52 = localDateTime51.getWeekyear();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withMillisOfSecond(100);
        org.joda.time.Chronology chronology55 = localDateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.yearOfCentury();
        org.joda.time.DurationField durationField57 = chronology55.days();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        long long60 = dateTimeZone58.previousTransition(100L);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withMillisOfSecond((int) (byte) 0);
        int[] intArray66 = chronology55.get((org.joda.time.ReadablePartial) localDateTime62, (long) (-1));
        org.joda.time.LocalDateTime localDateTime68 = localDateTime62.withWeekOfWeekyear(32);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusYears(1964);
        boolean boolean71 = dateTimeZone44.isLocalDateTimeGap(localDateTime70);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 2022);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(0L, chronology75);
        java.lang.String str78 = localDateTime76.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = null;
        java.lang.String str80 = localDateTime76.toString(dateTimeFormatter79);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime(0L, chronology82);
        java.lang.String str85 = localDateTime83.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = null;
        java.lang.String str87 = localDateTime83.toString(dateTimeFormatter86);
        org.joda.time.LocalDateTime.Property property88 = localDateTime83.monthOfYear();
        org.joda.time.Interval interval89 = property88.toInterval();
        long long90 = property88.remainder();
        org.joda.time.LocalDateTime localDateTime91 = property88.roundHalfFloorCopy();
        java.lang.String str92 = property88.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = property88.getFieldType();
        int int94 = localDateTime76.get(dateTimeFieldType93);
        org.joda.time.LocalDateTime.Property property95 = localDateTime73.property(dateTimeFieldType93);
        boolean boolean96 = dateTimeZone44.isLocalDateTimeGap(localDateTime73);
        int int97 = localDateTime73.getDayOfYear();
        int int98 = localDateTime39.compareTo((org.joda.time.ReadablePartial) localDateTime73);
        boolean boolean99 = locale2.equals((java.lang.Object) int98);
        org.junit.Assert.assertEquals(locale2.toString(), "zonedchronology[isochronology[utc], utc]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u65e5\u672c" + "'", str78, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1970-01-01T00:00:00.000" + "'", str80, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u65e5\u672c" + "'", str85, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "1970-01-01T00:00:00.000" + "'", str87, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "1" + "'", str92, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test05292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05292");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.eras();
        org.joda.time.Chronology chronology9 = chronology6.withUTC();
        java.lang.String str10 = chronology9.toString();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        long long20 = dateTimeZone18.previousTransition(100L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withMillisOfSecond((int) (byte) 0);
        int int25 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        long long29 = dateTimeZone26.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = localDateTime14.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime32 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology33 = dateTime31.getChronology();
        long long34 = dateTime31.getMillis();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[UTC]" + "'", str10, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L + "'", long29 == 100L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test05293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05293");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(0L, chronology2);
        int int4 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMillisOfSecond(100);
        org.joda.time.Chronology chronology7 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(0L);
        long long13 = dateTimeZone9.nextTransition((long) (-1));
        org.joda.time.Chronology chronology14 = chronology7.withZone(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (short) 10, chronology7);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMillis(20);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.weekyear();
        int int19 = property18.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime20 = property18.withMinimumValue();
        int int21 = localDateTime20.getEra();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-292275054) + "'", int19 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test05294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05294");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        int int9 = property7.get();
        java.util.Locale locale10 = null;
        int int11 = property7.getMaximumShortTextLength(locale10);
        org.joda.time.LocalDateTime localDateTime12 = property7.roundHalfFloorCopy();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test05295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05295");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.weekyear();
        org.joda.time.Chronology chronology32 = zonedChronology28.withUTC();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        long long36 = dateTimeZone34.previousTransition(100L);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withHourOfDay((int) (short) 0);
        int int41 = localDateTime40.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusYears(0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusHours((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfCentury();
        boolean boolean49 = localDateTime33.equals((java.lang.Object) property48);
        org.joda.time.tz.NameProvider nameProvider50 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str55 = nameProvider50.getShortName(locale52, "", "hi!");
        int int56 = property48.getMaximumTextLength(locale52);
        java.util.Set<java.lang.String> strSet57 = locale52.getUnicodeLocaleKeys();
        java.lang.String str58 = locale52.getISO3Country();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L + "'", long36 == 100L);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nameProvider50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test05296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05296");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.millis();
        org.joda.time.DurationField durationField9 = chronology6.months();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusHours((int) '#');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis((int) ' ');
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.year();
        org.joda.time.Interval interval17 = property16.toInterval();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundCeilingCopy();
        java.lang.String str19 = property16.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Property[year]" + "'", str19, "Property[year]");
    }

    @Test
    public void test05297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05297");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(0L, chronology2);
        int int4 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMillisOfSecond(100);
        org.joda.time.Chronology chronology7 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.days();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone10.previousTransition(100L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfSecond((int) (byte) 0);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePartial) localDateTime14, (long) (-1));
        org.joda.time.DateTimeField dateTimeField19 = chronology7.millisOfDay();
        org.joda.time.DurationField durationField20 = chronology7.hours();
        org.joda.time.DurationField durationField21 = chronology7.weeks();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        long long28 = dateTimeZone24.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology29 = org.joda.time.chrono.ZonedChronology.getInstance(chronology7, dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology29.halfdayOfDay();
        org.joda.time.DurationField durationField31 = zonedChronology29.seconds();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology29.minuteOfDay();
        org.joda.time.DurationField durationField33 = zonedChronology29.seconds();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology29.secondOfMinute();
        org.joda.time.Chronology chronology35 = zonedChronology29.withUTC();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(1899L, chronology35);
        org.joda.time.DurationField durationField37 = chronology35.hours();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test05298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05298");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField33 = zonedChronology28.halfdays();
        org.joda.time.DurationField durationField34 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.minuteOfHour();
        org.joda.time.Chronology chronology37 = zonedChronology28.withUTC();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(0L, chronology40);
        int int42 = localDateTime41.getWeekyear();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withMillisOfSecond(0);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        long long51 = dateTimeZone49.previousTransition(100L);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(0L, chronology55);
        int int57 = localDateTime56.getWeekyear();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withYearOfEra(1970);
        org.joda.time.DateTime dateTime60 = localDateTime59.toDateTime();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(0L, chronology62);
        int int64 = localDateTime63.getWeekyear();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withYearOfEra(1970);
        org.joda.time.DateTime dateTime67 = localDateTime66.toDateTime();
        int int68 = dateTime60.compareTo((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime69 = localDateTime53.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime53.plus(readableDuration70);
        boolean boolean72 = localDateTime46.isAfter((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime46.minusDays(2022);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime74.minusMonths((int) (short) 10);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.minus(readablePeriod80);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime38.withFields((org.joda.time.ReadablePartial) localDateTime78);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L + "'", long51 == 100L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime82);
    }

    @Test
    public void test05299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05299");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 0);
        boolean boolean34 = dateTimeZone33.isFixed();
        org.joda.time.Chronology chronology35 = zonedChronology28.withZone(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology28);
        org.joda.time.DurationField durationField37 = zonedChronology28.years();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.centuryOfEra();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test05300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05300");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.millis();
        org.joda.time.DurationField durationField9 = chronology6.months();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusHours((int) '#');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusMillis((int) '4');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.monthOfYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test05301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05301");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(260);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test05302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05302");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale3 = new java.util.Locale("1", "hi!");
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale7 = new java.util.Locale("en", "Japanese (Japan)");
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale3.toString(), "1_HI!");
        org.junit.Assert.assertEquals(locale7.toString(), "en_JAPANESE (JAPAN)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_JAPANESE (JAPAN)");
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test05303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05303");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.millisOfSecond();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        java.lang.String str39 = localDateTime37.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = localDateTime37.toString(dateTimeFormatter40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime37.monthOfYear();
        org.joda.time.LocalDateTime localDateTime43 = property42.roundCeilingCopy();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minus(readableDuration44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.plusSeconds(2022);
        int[] intArray49 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime47, (long) 11);
        org.joda.time.DateTimeZone dateTimeZone50 = zonedChronology28.getZone();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone54);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone54);
        int int58 = dateTimeZone54.getStandardOffset(999L);
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale60);
        java.util.Locale locale64 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale65 = java.util.Locale.ENGLISH;
        java.lang.String str66 = locale64.getDisplayLanguage(locale65);
        java.lang.String str67 = locale60.getDisplayName(locale64);
        java.lang.String str68 = dateTimeZone54.getName(35L, locale60);
        java.util.Locale locale69 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet70 = locale69.getUnicodeLocaleAttributes();
        java.lang.String str71 = locale60.getDisplayLanguage(locale69);
        java.lang.String str72 = dateTimeZone50.getShortName(27236744L, locale69);
        boolean boolean74 = dateTimeZone50.isStandardOffset((long) 8);
        java.lang.String str76 = dateTimeZone50.getNameKey(36060000L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u65e5\u672c" + "'", str39, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T00:00:00.000" + "'", str41, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale64.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u65e5\u672c" + "'", str66, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Japanese (Japan)" + "'", str67, "Japanese (Japan)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00" + "'", str68, "+00:00");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str71, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "UTC" + "'", str76, "UTC");
    }

    @Test
    public void test05304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05304");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.year();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.millisOfSecond();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        java.lang.String str39 = localDateTime37.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = localDateTime37.toString(dateTimeFormatter40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime37.monthOfYear();
        org.joda.time.Interval interval43 = property42.toInterval();
        long long44 = property42.remainder();
        org.joda.time.LocalDateTime localDateTime45 = property42.roundHalfFloorCopy();
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        int int47 = property42.getMaximumTextLength(locale46);
        org.joda.time.LocalDateTime localDateTime48 = property42.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime50 = property49.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusMillis(8);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusSeconds(59);
        long long56 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime54, (long) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime58 = localDateTime54.withEra(92);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 92 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u65e5\u672c" + "'", str39, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T00:00:00.000" + "'", str41, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 59008L + "'", long56 == 59008L);
    }

    @Test
    public void test05305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05305");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(260, 20, 117, 31, (int) '4', 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05306");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfHalfday();
        java.lang.String str35 = zonedChronology28.toString();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        long long39 = dateTimeZone37.nextTransition(4363010L);
        org.joda.time.Chronology chronology40 = zonedChronology28.withZone(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology28.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray44 = zonedChronology28.get(readablePeriod42, (long) 36000000);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str35, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 4363010L + "'", long39 == 4363010L);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test05307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05307");
        java.util.Locale locale2 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.lang.String str4 = locale2.getDisplayLanguage(locale3);
        java.util.Locale locale7 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.lang.String str8 = locale3.getDisplayScript(locale7);
        java.lang.String str9 = locale7.getDisplayScript();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.lang.String str11 = locale7.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale2.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale7.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c" + "'", str11, "\u65e5\u672c");
    }

    @Test
    public void test05308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05308");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale locale6 = java.util.Locale.ITALY;
        boolean boolean7 = locale6.hasExtensions();
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        java.util.Locale locale9 = locale6.stripExtensions();
        java.lang.String str10 = locale9.getVariant();
        java.util.Locale.Builder builder11 = builder4.setLocale(locale9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.setVariant("\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ?????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test05309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05309");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale0);
        java.lang.String str2 = locale0.getCountry();
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.lang.String str4 = locale3.getDisplayCountry();
        java.lang.String str5 = locale0.getDisplayName(locale3);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.lang.String str7 = locale6.getCountry();
        java.lang.String str8 = locale6.getDisplayLanguage();
        java.lang.String str9 = locale6.getDisplayCountry();
        java.lang.String str10 = locale0.getDisplayCountry(locale6);
        java.util.Locale locale11 = locale6.stripExtensions();
        java.lang.String str12 = locale6.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JP" + "'", str2, "JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u5927\u97d3\u6c11\u56fd" + "'", str4, "\u5927\u97d3\u6c11\u56fd");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc77c\ubcf8\uc5b4\uc77c\ubcf8)" + "'", str5, "\uc77c\ubcf8\uc5b4\uc77c\ubcf8)");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CN" + "'", str7, "CN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str8, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str9, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u65e5\u672c" + "'", str10, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str12, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
    }

    @Test
    public void test05310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05310");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.util.Locale locale4 = java.util.Locale.JAPAN;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale3.getDisplayName();
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.String str15 = locale12.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale3, locale8, locale12, locale16, locale19, locale20, locale21, locale24, locale25 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList29);
        java.lang.String[] strArray36 = new java.lang.String[] { "\u65e5\u6587\u65e5\u672c)", "CN", "\u4e2d\u6587", "\u65e5\u6587\u65e5\u672c)" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        boolean boolean39 = strSet37.isEmpty();
        java.util.Locale.FilteringMode filteringMode40 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet37, filteringMode40);
        java.util.Spliterator<java.lang.String> strSpliterator42 = strSet37.spliterator();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(0L, chronology44);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withMillisOfSecond(100);
        org.joda.time.Chronology chronology49 = localDateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.yearOfCentury();
        org.joda.time.DurationField durationField51 = chronology49.days();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        long long54 = dateTimeZone52.previousTransition(100L);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withMillisOfSecond((int) (byte) 0);
        int[] intArray60 = chronology49.get((org.joda.time.ReadablePartial) localDateTime56, (long) (-1));
        org.joda.time.DateTimeField dateTimeField61 = chronology49.millisOfDay();
        org.joda.time.DurationField durationField62 = chronology49.hours();
        org.joda.time.DurationField durationField63 = chronology49.weeks();
        java.util.TimeZone timeZone65 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        long long70 = dateTimeZone66.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology71 = org.joda.time.chrono.ZonedChronology.getInstance(chronology49, dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField72 = zonedChronology71.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField73 = zonedChronology71.millisOfSecond();
        org.joda.time.DurationField durationField74 = zonedChronology71.weekyears();
        org.joda.time.DateTimeField dateTimeField75 = zonedChronology71.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField76 = zonedChronology71.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField77 = zonedChronology71.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField78 = zonedChronology71.weekOfWeekyear();
        org.joda.time.Chronology chronology79 = zonedChronology71.withUTC();
        boolean boolean80 = strSet37.remove((java.lang.Object) zonedChronology71);
        org.joda.time.DurationField durationField81 = zonedChronology71.minutes();
        org.joda.time.DateTimeField dateTimeField82 = zonedChronology71.secondOfDay();
        org.joda.time.DateTimeField dateTimeField83 = zonedChronology71.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField84 = zonedChronology71.secondOfMinute();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u65e5\u672c" + "'", str5, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str6, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c" + "'", str9, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str11, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str15, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c" + "'", str18, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u672c" + "'", str27, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + filteringMode40 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode40.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strSpliterator42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L + "'", long54 == 100L);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 10L + "'", long70 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
    }

    @Test
    public void test05311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05311");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        java.util.Locale locale31 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.lang.String str32 = locale31.getDisplayVariant();
        java.lang.String str34 = locale31.getExtension('x');
        java.util.Set<java.lang.String> strSet35 = locale31.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        int int39 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withMillisOfSecond(0);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        long long48 = dateTimeZone46.previousTransition(100L);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(0L, chronology52);
        int int54 = localDateTime53.getWeekyear();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withYearOfEra(1970);
        org.joda.time.DateTime dateTime57 = localDateTime56.toDateTime();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(0L, chronology59);
        int int61 = localDateTime60.getWeekyear();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.withYearOfEra(1970);
        org.joda.time.DateTime dateTime64 = localDateTime63.toDateTime();
        int int65 = dateTime57.compareTo((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime66 = localDateTime50.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime50.plus(readableDuration67);
        boolean boolean69 = localDateTime43.isAfter((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime43.minusDays(2022);
        org.joda.time.LocalDateTime.Property property72 = localDateTime43.yearOfEra();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime43.withHourOfDay(1);
        boolean boolean75 = strSet35.contains((java.lang.Object) localDateTime74);
        long long77 = chronology6.set((org.joda.time.ReadablePartial) localDateTime74, 1970L);
        org.joda.time.LocalDateTime.Property property78 = localDateTime74.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime80 = localDateTime74.withHourOfDay(69);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertEquals(locale31.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 100L + "'", long48 == 100L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1970 + "'", int61 == 1970);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 90000000L + "'", long77 == 90000000L);
        org.junit.Assert.assertNotNull(property78);
    }

    @Test
    public void test05312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05312");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("US");
        int int2 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test05313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05313");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("2022-02-11T09:46:09.637", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05314");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("0001-01-01t00:00:00.000", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=0001-01-01t00:00:00.000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05315");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(0L);
        long long4 = dateTimeZone0.nextTransition((long) (-1));
        boolean boolean5 = dateTimeZone0.isFixed();
        java.lang.String str6 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
    }

    @Test
    public void test05316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05316");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMillisOfSecond(100);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DurationField durationField43 = chronology41.millis();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '#', chronology41);
        int[] intArray47 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime45, (long) 1);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology28.yearOfEra();
        org.joda.time.DurationField durationField51 = zonedChronology28.minutes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1970, 1, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test05317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05317");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.centuryOfEra();
        org.joda.time.DurationField durationField36 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = zonedChronology28.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        java.util.TimeZone timeZone40 = dateTimeZone38.toTimeZone();
        timeZone40.setRawOffset(0);
        int int43 = timeZone40.getRawOffset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test05318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05318");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(0L, chronology5);
        int int7 = localDateTime6.getWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withMillisOfSecond(100);
        org.joda.time.Chronology chronology10 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfCentury();
        org.joda.time.DurationField durationField12 = chronology10.days();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        long long15 = dateTimeZone13.previousTransition(100L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfSecond((int) (byte) 0);
        int[] intArray21 = chronology10.get((org.joda.time.ReadablePartial) localDateTime17, (long) (-1));
        org.joda.time.DateTimeField dateTimeField22 = chronology10.millisOfDay();
        org.joda.time.DurationField durationField23 = chronology10.hours();
        org.joda.time.DurationField durationField24 = chronology10.weeks();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        long long31 = dateTimeZone27.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology10, dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.yearOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology32.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime3, (org.joda.time.Chronology) zonedChronology32);
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology32.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology32.minuteOfHour();
        org.joda.time.DurationField durationField40 = zonedChronology32.days();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test05319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05319");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("gennaio");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.parse("year", strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator13 = strSet12.spliterator();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale17.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str25 = locale22.getDisplayName(locale24);
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.lang.String str28 = locale26.getDisplayCountry(locale27);
        java.lang.String str29 = locale26.getDisplayName();
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        java.util.Locale locale36 = java.util.Locale.JAPAN;
        java.lang.String str37 = locale35.getDisplayCountry(locale36);
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.util.Locale locale39 = java.util.Locale.JAPAN;
        java.util.Locale locale40 = java.util.Locale.JAPAN;
        java.lang.String str41 = locale39.getDisplayCountry(locale40);
        java.util.Locale[] localeArray42 = new java.util.Locale[] { locale17, locale22, locale26, locale30, locale33, locale34, locale35, locale38, locale39 };
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList43);
        boolean boolean46 = strSet12.retainAll((java.util.Collection<java.util.Locale>) localeList43);
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags(languageRangeList9, (java.util.Collection<java.lang.String>) strSet12);
        java.lang.String str48 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet12);
        org.joda.time.tz.Provider provider49 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet50 = provider49.getAvailableIDs();
        java.util.Set<java.lang.String> strSet51 = provider49.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider49);
        java.util.Set<java.lang.String> strSet53 = provider49.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone55 = provider49.getZone("");
        org.joda.time.DateTimeZone dateTimeZone57 = provider49.getZone("");
        org.joda.time.DateTimeZone dateTimeZone59 = provider49.getZone("");
        java.util.Set<java.lang.String> strSet60 = provider49.getAvailableIDs();
        java.lang.String str61 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet60);
        java.util.Locale locale62 = java.util.Locale.JAPAN;
        java.util.Locale locale63 = java.util.Locale.JAPAN;
        java.lang.String str64 = locale62.getDisplayCountry(locale63);
        java.lang.String str65 = locale62.getDisplayName();
        java.lang.String str66 = locale62.getCountry();
        java.util.Set<java.lang.String> strSet67 = locale62.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(0L, chronology69);
        int int71 = localDateTime70.getWeekyear();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.plusHours((int) ' ');
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(0L, chronology77);
        int int79 = localDateTime78.getWeekyear();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.withMillisOfSecond(100);
        org.joda.time.Chronology chronology82 = localDateTime78.getChronology();
        java.lang.String str83 = localDateTime78.toString();
        int int84 = localDateTime78.getYearOfCentury();
        int int85 = localDateTime78.getCenturyOfEra();
        boolean boolean86 = localDateTime75.isEqual((org.joda.time.ReadablePartial) localDateTime78);
        java.lang.Object obj87 = null;
        boolean boolean88 = localDateTime75.equals(obj87);
        int int89 = localDateTime75.getDayOfWeek();
        boolean boolean90 = strSet67.contains((java.lang.Object) int89);
        java.lang.String str91 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet67);
        java.lang.String str92 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet67);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strSpliterator13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u65e5\u672c" + "'", str19, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Japanese (Japan)" + "'", str20, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str25, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u65e5\u672c" + "'", str28, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Japanese (Japan)" + "'", str29, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u65e5\u672c" + "'", str32, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u65e5\u672c" + "'", str37, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u65e5\u672c" + "'", str41, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(provider49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNull(dateTimeZone55);
        org.junit.Assert.assertNull(dateTimeZone57);
        org.junit.Assert.assertNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u65e5\u672c" + "'", str64, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Japanese (Japan)" + "'", str65, "Japanese (Japan)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "JP" + "'", str66, "JP");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1970 + "'", int71 == 1970);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1970 + "'", int79 == 1970);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "1970-01-01T00:00:00.000" + "'", str83, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 70 + "'", int84 == 70);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 19 + "'", int85 == 19);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 5 + "'", int89 == 5);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertNull(str92);
    }

    @Test
    public void test05320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05320");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        long long37 = zonedChronology28.add((long) 9, 35L, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology28.era();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology28.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology28.weekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 44L + "'", long37 == 44L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test05321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05321");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 0);
        boolean boolean34 = dateTimeZone33.isFixed();
        org.joda.time.Chronology chronology35 = zonedChronology28.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.yearOfCentury();
        org.joda.time.DurationField durationField38 = zonedChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.monthOfYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test05322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05322");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField32 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test05323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05323");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeZone dateTimeZone31 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.yearOfCentury();
        org.joda.time.DurationField durationField36 = zonedChronology28.minutes();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.clockhourOfHalfday();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test05324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05324");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minusYears(31);
        int int9 = localDateTime8.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, chronology11);
        int int13 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfSecond(100);
        org.joda.time.Chronology chronology16 = localDateTime12.getChronology();
        java.lang.String str17 = localDateTime12.toString();
        int int18 = localDateTime12.getYearOfCentury();
        boolean boolean19 = localDateTime8.isAfter((org.joda.time.ReadablePartial) localDateTime12);
        int[] intArray20 = localDateTime8.getValues();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.000" + "'", str17, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 70 + "'", int18 == 70);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1939, 1, 1, 0]");
    }

    @Test
    public void test05325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05325");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        java.lang.String str12 = localDateTime10.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = localDateTime10.toString(dateTimeFormatter13);
        boolean boolean15 = localDateTime2.isAfter((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime.Property property16 = localDateTime10.yearOfEra();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(0L, chronology18);
        int int20 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfMonth(10);
        int int27 = localDateTime24.getEra();
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.era();
        boolean boolean31 = localDateTime10.equals((java.lang.Object) property30);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u672c" + "'", str12, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.000" + "'", str14, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test05326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05326");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone1.previousTransition(0L);
        long long5 = dateTimeZone1.nextTransition((long) (-1));
        boolean boolean7 = dateTimeZone1.isStandardOffset((long) ' ');
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(19L, dateTimeZone1);
        long long10 = dateTimeZone1.nextTransition((long) (byte) 100);
        long long14 = dateTimeZone1.convertLocalToUTC(999L, true, 0L);
        long long16 = dateTimeZone1.previousTransition(6L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 999L + "'", long14 == 999L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 6L + "'", long16 == 6L);
    }

    @Test
    public void test05327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05327");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("JAPANESE (JAPAN)");
        int int2 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test05328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05328");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        long long21 = dateTime19.getMillis();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(0L, chronology23);
        int int25 = localDateTime24.getWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.withMonthOfYear(5);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withMinuteOfHour(1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        java.lang.String str36 = localDateTime34.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = localDateTime34.toString(dateTimeFormatter37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime34.monthOfYear();
        org.joda.time.Interval interval40 = property39.toInterval();
        long long41 = property39.remainder();
        org.joda.time.LocalDateTime localDateTime42 = property39.roundHalfFloorCopy();
        java.lang.String str43 = property39.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property39.getFieldType();
        org.joda.time.LocalDateTime localDateTime45 = property39.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property39.getFieldType();
        int int47 = localDateTime29.indexOf(dateTimeFieldType46);
        boolean boolean48 = dateTime19.isSupported(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.000" + "'", str38, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Jan" + "'", str43, "Jan");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test05329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05329");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.eras();
        org.joda.time.Chronology chronology9 = chronology6.withUTC();
        java.lang.String str10 = chronology9.toString();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withSecondOfMinute(4);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        boolean boolean16 = dateTimeZone15.isFixed();
        long long19 = dateTimeZone15.adjustOffset((long) 'x', true);
        org.joda.time.DateTime dateTime20 = localDateTime11.toDateTime(dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime11.withDurationAdded(readableDuration21, 86399999);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(0L, chronology25);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withMillisOfSecond(100);
        org.joda.time.Chronology chronology30 = localDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        long long34 = dateTimeZone32.previousTransition(0L);
        long long36 = dateTimeZone32.nextTransition((long) (-1));
        org.joda.time.Chronology chronology37 = chronology30.withZone(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.DateTime dateTime40 = localDateTime11.toDateTime(dateTimeZone32);
        long long42 = dateTimeZone32.convertUTCToLocal((long) 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[UTC]" + "'", str10, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 120L + "'", long19 == 120L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 100L + "'", long42 == 100L);
    }

    @Test
    public void test05330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05330");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(0L, chronology2);
        int int4 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMillisOfSecond(100);
        org.joda.time.Chronology chronology7 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.days();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone10.previousTransition(100L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfSecond((int) (byte) 0);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePartial) localDateTime14, (long) (-1));
        org.joda.time.DateTimeField dateTimeField19 = chronology7.millisOfDay();
        org.joda.time.DurationField durationField20 = chronology7.hours();
        org.joda.time.DurationField durationField21 = chronology7.weeks();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        long long28 = dateTimeZone24.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology29 = org.joda.time.chrono.ZonedChronology.getInstance(chronology7, dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology29.yearOfEra();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology29.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 0);
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.Chronology chronology36 = zonedChronology29.withZone(dateTimeZone34);
        org.joda.time.DurationField durationField37 = zonedChronology29.months();
        org.joda.time.Chronology chronology38 = zonedChronology29.withUTC();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 201, chronology38);
        int int40 = localDateTime39.getHourOfDay();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test05331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05331");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.minuteOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology32.centuries();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withYearOfEra(1970);
        org.joda.time.DateTime dateTime41 = localDateTime40.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        long long44 = dateTimeZone42.previousTransition(100L);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(0L, chronology48);
        int int50 = localDateTime49.getWeekyear();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withYearOfEra(1970);
        org.joda.time.DateTime dateTime53 = localDateTime52.toDateTime();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(0L, chronology55);
        int int57 = localDateTime56.getWeekyear();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withYearOfEra(1970);
        org.joda.time.DateTime dateTime60 = localDateTime59.toDateTime();
        int int61 = dateTime53.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime62 = localDateTime46.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean63 = dateTime41.isEqual((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Chronology chronology64 = dateTime53.getChronology();
        boolean boolean65 = zonedChronology32.equals((java.lang.Object) chronology64);
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology32.secondOfDay();
        org.joda.time.DateTimeField dateTimeField67 = zonedChronology32.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.UTC;
        long long70 = dateTimeZone68.previousTransition(0L);
        long long72 = dateTimeZone68.convertUTCToLocal(1L);
        java.util.TimeZone timeZone74 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        long long77 = dateTimeZone68.getMillisKeepLocal(dateTimeZone75, (long) (-1));
        boolean boolean78 = dateTimeZone68.isFixed();
        java.lang.String str80 = dateTimeZone68.getShortName((long) (short) 0);
        long long84 = dateTimeZone68.convertLocalToUTC(1644572694666L, false, (long) 35080732);
        org.joda.time.Chronology chronology85 = zonedChronology32.withZone(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L + "'", long44 == 100L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00" + "'", str80, "+00:00");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1644572694666L + "'", long84 == 1644572694666L);
        org.junit.Assert.assertNotNull(chronology85);
    }

    @Test
    public void test05332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05332");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        int int5 = strSet4.size();
        java.lang.Object[] objArray6 = strSet4.toArray();
        org.joda.time.tz.Provider provider7 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet8 = provider7.getAvailableIDs();
        java.util.Set<java.lang.String> strSet9 = provider7.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider7);
        java.util.Set<java.lang.String> strSet11 = provider7.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Set<java.lang.String> strSet15 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        java.lang.String str21 = locale19.getDisplayCountry(locale20);
        java.lang.String str22 = locale19.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.lang.String str25 = locale23.getDisplayCountry(locale24);
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str27 = locale24.getDisplayName(locale26);
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.lang.String str30 = locale28.getDisplayCountry(locale29);
        java.lang.String str31 = locale28.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.JAPAN;
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.lang.String str34 = locale32.getDisplayCountry(locale33);
        java.util.Locale locale35 = java.util.Locale.ITALIAN;
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.util.Locale locale37 = java.util.Locale.JAPAN;
        java.util.Locale locale38 = java.util.Locale.JAPAN;
        java.lang.String str39 = locale37.getDisplayCountry(locale38);
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        java.util.Locale locale41 = java.util.Locale.JAPAN;
        java.util.Locale locale42 = java.util.Locale.JAPAN;
        java.lang.String str43 = locale41.getDisplayCountry(locale42);
        java.util.Locale[] localeArray44 = new java.util.Locale[] { locale19, locale24, locale28, locale32, locale35, locale36, locale37, locale40, locale41 };
        java.util.ArrayList<java.util.Locale> localeList45 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList45, localeArray44);
        java.util.List<java.util.Locale> localeList47 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList45);
        java.lang.String[] strArray49 = new java.lang.String[] { "1970-01-01T00:00:00.000" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        java.util.Locale.FilteringMode filteringMode52 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList50, filteringMode52);
        java.util.Locale locale54 = java.util.Locale.CHINA;
        java.util.Locale locale55 = java.util.Locale.CHINA;
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.util.Locale locale60 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale61 = locale60.stripExtensions();
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.util.Locale locale65 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale66 = locale65.stripExtensions();
        java.util.Locale locale69 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale70 = java.util.Locale.ENGLISH;
        java.lang.String str71 = locale69.getDisplayLanguage(locale70);
        java.util.Locale locale72 = java.util.Locale.JAPAN;
        java.util.Locale locale73 = java.util.Locale.JAPAN;
        java.lang.String str74 = locale72.getDisplayCountry(locale73);
        java.util.Locale locale77 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale78 = locale77.stripExtensions();
        java.util.Locale locale79 = java.util.Locale.getDefault();
        java.util.Locale locale81 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Locale locale82 = java.util.Locale.US;
        java.util.Locale locale83 = java.util.Locale.getDefault();
        java.util.Locale locale84 = java.util.Locale.CHINA;
        java.lang.String str85 = locale84.getCountry();
        java.util.Locale[] localeArray86 = new java.util.Locale[] { locale54, locale55, locale56, locale57, locale60, locale62, locale65, locale69, locale73, locale78, locale79, locale81, locale82, locale83, locale84 };
        java.util.ArrayList<java.util.Locale> localeList87 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList87, localeArray86);
        java.util.List<java.util.Locale> localeList89 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList87);
        boolean boolean90 = strSet15.containsAll((java.util.Collection<java.util.Locale>) localeList89);
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList89);
        boolean boolean92 = strSet11.retainAll((java.util.Collection<java.util.Locale>) localeList91);
        boolean boolean93 = strSet4.removeAll((java.util.Collection<java.util.Locale>) localeList91);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 575 + "'", int5 == 575);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNotNull(provider7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u65e5\u672c" + "'", str21, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Japanese (Japan)" + "'", str22, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u65e5\u672c" + "'", str25, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str27, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u65e5\u672c" + "'", str30, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Japanese (Japan)" + "'", str31, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u65e5\u672c" + "'", str34, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u65e5\u672c" + "'", str39, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u65e5\u672c" + "'", str43, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localeList47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + filteringMode52 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode52.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale60.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertEquals(locale65.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals(locale69.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u65e5\u672c" + "'", str71, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u65e5\u672c" + "'", str74, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale77.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale79);
// flaky:         org.junit.Assert.assertEquals(locale79.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale83);
// flaky:         org.junit.Assert.assertEquals(locale83.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "CN" + "'", str85, "CN");
        org.junit.Assert.assertNotNull(localeArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(localeList89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test05333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05333");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.minuteOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology32.centuries();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withYearOfEra(1970);
        org.joda.time.DateTime dateTime41 = localDateTime40.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        long long44 = dateTimeZone42.previousTransition(100L);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(0L, chronology48);
        int int50 = localDateTime49.getWeekyear();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withYearOfEra(1970);
        org.joda.time.DateTime dateTime53 = localDateTime52.toDateTime();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(0L, chronology55);
        int int57 = localDateTime56.getWeekyear();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withYearOfEra(1970);
        org.joda.time.DateTime dateTime60 = localDateTime59.toDateTime();
        int int61 = dateTime53.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime62 = localDateTime46.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean63 = dateTime41.isEqual((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Chronology chronology64 = dateTime53.getChronology();
        boolean boolean65 = zonedChronology32.equals((java.lang.Object) chronology64);
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology32.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone67 = zonedChronology32.getZone();
        long long70 = dateTimeZone67.convertLocalToUTC(86399999L, true);
        boolean boolean71 = dateTimeZone67.isFixed();
        boolean boolean72 = dateTimeZone67.isFixed();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L + "'", long44 == 100L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 86399999L + "'", long70 == 86399999L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test05334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05334");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone31.previousTransition(100L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        int int39 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYearOfEra(1970);
        org.joda.time.DateTime dateTime42 = localDateTime41.toDateTime();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(0L, chronology44);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withYearOfEra(1970);
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        int int50 = dateTime42.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = localDateTime35.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime35.plus(readableDuration52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(0L, chronology55);
        java.util.Locale locale57 = java.util.Locale.US;
        boolean boolean58 = localDateTime56.equals((java.lang.Object) locale57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.dayOfWeek();
        int int60 = localDateTime56.getDayOfWeek();
        int int61 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        int[] intArray63 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime56, (long) 12);
        java.lang.String str64 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField67 = zonedChronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField68 = zonedChronology28.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray72 = zonedChronology28.get(readablePeriod69, (long) 27236744, 2752748L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L + "'", long33 == 100L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1970, 1, 1, 12]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str64, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test05335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05335");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(81976385, 2, 1963, 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05336");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.millis();
        org.joda.time.DurationField durationField9 = chronology6.months();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusHours((int) '#');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusDays(3);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.withMinuteOfHour(52);
        org.joda.time.LocalDateTime.Property property22 = localDateTime13.year();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test05337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05337");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(1970);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test05338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05338");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        int int12 = property7.getMaximumTextLength(locale11);
        int int13 = property7.get();
        java.util.Locale locale16 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.lang.String str18 = locale16.getDisplayLanguage(locale17);
        java.lang.String str19 = property7.getAsShortText(locale17);
        org.joda.time.LocalDateTime localDateTime20 = property7.getLocalDateTime();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(0L, chronology22);
        java.util.Locale locale24 = java.util.Locale.US;
        boolean boolean25 = localDateTime23.equals((java.lang.Object) locale24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(0L, chronology29);
        int int31 = localDateTime30.getWeekyear();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withEra((int) (short) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfDay();
        int int39 = localDateTime37.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime20.minus(readableDuration41);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date43 = localDateTime42.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -52 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals(locale16.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c" + "'", str18, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Jan" + "'", str19, "Jan");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1971 + "'", int39 == 1971);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test05339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05339");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.lang.String str2 = locale1.getCountry();
        java.lang.String str3 = locale1.getScript();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test05340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05340");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeZone dateTimeZone31 = zonedChronology28.getZone();
        org.joda.time.DurationField durationField32 = zonedChronology28.years();
        org.joda.time.DurationField durationField33 = zonedChronology28.seconds();
        org.joda.time.DurationField durationField34 = zonedChronology28.weeks();
        // The following exception was thrown during execution in test generation
        try {
            long long39 = zonedChronology28.getDateTimeMillis(100, 232, 3, 35286275);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 232 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test05341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05341");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) '4');
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readablePeriod11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(0L, chronology14);
        int int16 = localDateTime15.getWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withMillisOfSecond(100);
        org.joda.time.Chronology chronology19 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology19.days();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        long long24 = dateTimeZone22.previousTransition(100L);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withMillisOfSecond((int) (byte) 0);
        int[] intArray30 = chronology19.get((org.joda.time.ReadablePartial) localDateTime26, (long) (-1));
        org.joda.time.DateTimeField dateTimeField31 = chronology19.millisOfDay();
        org.joda.time.DurationField durationField32 = chronology19.hours();
        org.joda.time.DurationField durationField33 = chronology19.weeks();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        long long40 = dateTimeZone36.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology41 = org.joda.time.chrono.ZonedChronology.getInstance(chronology19, dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology41.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology41.millisOfSecond();
        org.joda.time.DurationField durationField44 = zonedChronology41.weekyears();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(0L, chronology46);
        java.lang.String str49 = localDateTime47.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = localDateTime47.toString(dateTimeFormatter50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime47.monthOfYear();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime47.withMillisOfDay(100);
        long long56 = zonedChronology41.set((org.joda.time.ReadablePartial) localDateTime54, (long) 59);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(0L, chronology58);
        int int60 = localDateTime59.getWeekyear();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withYearOfEra(1970);
        org.joda.time.DateTime dateTime63 = localDateTime62.toDateTime();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(0L, chronology65);
        int int67 = localDateTime66.getWeekyear();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withYearOfEra(1970);
        org.joda.time.DateTime dateTime70 = localDateTime69.toDateTime();
        int int71 = dateTime63.compareTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime72 = localDateTime54.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTimeZone dateTimeZone73 = dateTime72.getZone();
        java.lang.String str74 = dateTimeZone73.toString();
        long long76 = dateTimeZone73.convertUTCToLocal((long) '4');
        org.joda.time.DateTime dateTime77 = localDateTime10.toDateTime(dateTimeZone73);
        org.joda.time.LocalDateTime.Property property78 = localDateTime10.era();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime10.minusWeeks(10);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime10.minusDays(1899);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u65e5\u672c" + "'", str49, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01T00:00:00.000" + "'", str51, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100L + "'", long56 == 100L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1970 + "'", int67 == 1970);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "UTC" + "'", str74, "UTC");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 52L + "'", long76 == 52L);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
    }

    @Test
    public void test05342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05342");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minus(readableDuration6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusHours((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        int int12 = localDateTime10.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withHourOfDay(81991403);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 81991403 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
    }

    @Test
    public void test05343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05343");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField33 = zonedChronology28.halfdays();
        org.joda.time.DurationField durationField34 = zonedChronology28.minutes();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.millisOfDay();
        org.joda.time.DurationField durationField36 = zonedChronology28.years();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology28.hourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        long long43 = dateTimeZone41.previousTransition(100L);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withHourOfDay((int) (short) 0);
        int int48 = localDateTime47.getEra();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.minusMillis((int) (short) 1);
        int int51 = localDateTime50.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.plusMinutes((int) (byte) 10);
        int int54 = localDateTime50.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.minusYears((int) (short) -1);
        long long58 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime50, (-60518361599999L));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 70 + "'", int54 == 70);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 99L + "'", long58 == 99L);
    }

    @Test
    public void test05344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05344");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone10.previousTransition(0L);
        org.joda.time.Chronology chronology13 = chronology6.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = chronology6.year();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone15.previousTransition(0L);
        int int19 = dateTimeZone15.getStandardOffset((-1L));
        org.joda.time.Chronology chronology20 = chronology6.withZone(dateTimeZone15);
        // The following exception was thrown during execution in test generation
        try {
            long long26 = chronology20.getDateTimeMillis((long) 36060000, 71, (int) (byte) 0, 31, 22697);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 71 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test05345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05345");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone31.previousTransition(100L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        int int39 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYearOfEra(1970);
        org.joda.time.DateTime dateTime42 = localDateTime41.toDateTime();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(0L, chronology44);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withYearOfEra(1970);
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        int int50 = dateTime42.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = localDateTime35.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime35.plus(readableDuration52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(0L, chronology55);
        java.util.Locale locale57 = java.util.Locale.US;
        boolean boolean58 = localDateTime56.equals((java.lang.Object) locale57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.dayOfWeek();
        int int60 = localDateTime56.getDayOfWeek();
        int int61 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        int[] intArray63 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime56, (long) 12);
        java.lang.String str64 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology28.yearOfCentury();
        org.joda.time.DurationField durationField66 = zonedChronology28.minutes();
        // The following exception was thrown during execution in test generation
        try {
            long long72 = zonedChronology28.getDateTimeMillis(0L, (int) ' ', 32, 61, 11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L + "'", long33 == 100L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1970, 1, 1, 12]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str64, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
    }

    @Test
    public void test05346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05346");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strMap35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strMap37);
        boolean boolean39 = zonedChronology28.equals((java.lang.Object) strMap37);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology28.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology28);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.hourOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test05347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05347");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        long long38 = dateTimeZone36.previousTransition(0L);
        long long40 = dateTimeZone36.nextTransition((long) (-1));
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone36);
        long long43 = dateTimeZone36.convertUTCToLocal((long) 20);
        int int45 = dateTimeZone36.getStandardOffset(22L);
        org.joda.time.Chronology chronology46 = zonedChronology28.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology28.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 20L + "'", long43 == 20L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test05348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05348");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(0L);
        long long4 = dateTimeZone0.nextTransition((long) (-1));
        boolean boolean6 = dateTimeZone0.isStandardOffset((long) ' ');
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        java.time.ZoneId zoneId8 = timeZone7.toZoneId();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone(zoneId8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone(zoneId8);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone(zoneId8);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        java.lang.String str14 = timeZone13.getID();
        int int15 = timeZone13.getRawOffset();
        boolean boolean16 = timeZone11.hasSameRules(timeZone13);
        boolean boolean17 = timeZone13.useDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GMT" + "'", str14, "GMT");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test05349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05349");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minus(readableDuration6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minus(readableDuration8);
        int int10 = localDateTime2.getMinuteOfHour();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, chronology12);
        int int14 = localDateTime13.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withYearOfEra(1970);
        org.joda.time.DateTime dateTime17 = localDateTime16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        long long20 = dateTimeZone18.previousTransition(100L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(0L, chronology24);
        int int26 = localDateTime25.getWeekyear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withYearOfEra(1970);
        org.joda.time.DateTime dateTime29 = localDateTime28.toDateTime();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(0L, chronology31);
        int int33 = localDateTime32.getWeekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withYearOfEra(1970);
        org.joda.time.DateTime dateTime36 = localDateTime35.toDateTime();
        int int37 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean39 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology40 = dateTime17.getChronology();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(0L, chronology42);
        int int44 = localDateTime43.getWeekyear();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withYearOfEra(1970);
        org.joda.time.DateTime dateTime47 = localDateTime46.toDateTime();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(0L, chronology49);
        int int51 = localDateTime50.getWeekyear();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withYearOfEra(1970);
        org.joda.time.DateTime dateTime54 = localDateTime53.toDateTime();
        int int55 = dateTime47.compareTo((org.joda.time.ReadableInstant) dateTime54);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean58 = dateTime54.equals((java.lang.Object) timeZone57);
        org.joda.time.DateTimeZone dateTimeZone59 = dateTime54.getZone();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(0L, chronology61);
        int int63 = localDateTime62.getWeekyear();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withYearOfEra(1970);
        org.joda.time.DateTime dateTime66 = localDateTime65.toDateTime();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(0L, chronology68);
        int int70 = localDateTime69.getWeekyear();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.withYearOfEra(1970);
        org.joda.time.DateTime dateTime73 = localDateTime72.toDateTime();
        int int74 = dateTime66.compareTo((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean75 = dateTime54.isAfter((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(0L, chronology77);
        java.lang.String str80 = localDateTime78.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = null;
        java.lang.String str82 = localDateTime78.toString(dateTimeFormatter81);
        org.joda.time.LocalDateTime.Property property83 = localDateTime78.monthOfYear();
        org.joda.time.Interval interval84 = property83.toInterval();
        long long85 = property83.remainder();
        org.joda.time.LocalDateTime localDateTime86 = property83.roundHalfFloorCopy();
        java.lang.String str87 = property83.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = property83.getFieldType();
        int int89 = dateTime66.get(dateTimeFieldType88);
        int int90 = dateTime17.get(dateTimeFieldType88);
        int int91 = localDateTime2.get(dateTimeFieldType88);
        int int92 = localDateTime2.getYear();
        int int93 = localDateTime2.getWeekyear();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1970 + "'", int63 == 1970);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1970 + "'", int70 == 1970);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\u65e5\u672c" + "'", str80, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "1970-01-01T00:00:00.000" + "'", str82, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(localDateTime86);
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Jan" + "'", str87, "Jan");
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1970 + "'", int92 == 1970);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1970 + "'", int93 == 1970);
    }

    @Test
    public void test05350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05350");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        java.util.TimeZone.setDefault(timeZone1);
        boolean boolean3 = timeZone1.observesDaylightTime();
        boolean boolean4 = timeZone1.observesDaylightTime();
        int int5 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test05351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05351");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator4 = strSet3.spliterator();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(70);
        boolean boolean8 = dateTimeZone6.isStandardOffset(41731035L);
        boolean boolean9 = strSet3.remove((java.lang.Object) dateTimeZone6);
        java.util.Iterator<java.lang.String> strItor10 = strSet3.iterator();
        strSet3.clear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSpliterator4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strItor10);
    }

    @Test
    public void test05352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05352");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(51, 33);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test05353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05353");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        long long9 = dateTimeZone7.previousTransition(100L);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(0L, chronology20);
        int int22 = localDateTime21.getWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYearOfEra(1970);
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        int int26 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        boolean boolean28 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(0L, chronology30);
        int int32 = localDateTime31.getWeekyear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withYearOfEra(1970);
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        int int39 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYearOfEra(1970);
        org.joda.time.DateTime dateTime42 = localDateTime41.toDateTime();
        int int43 = dateTime35.compareTo((org.joda.time.ReadableInstant) dateTime42);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean46 = dateTime42.equals((java.lang.Object) timeZone45);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTime42.getZone();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(0L, chronology49);
        int int51 = localDateTime50.getWeekyear();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withYearOfEra(1970);
        org.joda.time.DateTime dateTime54 = localDateTime53.toDateTime();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(0L, chronology56);
        int int58 = localDateTime57.getWeekyear();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.withYearOfEra(1970);
        org.joda.time.DateTime dateTime61 = localDateTime60.toDateTime();
        int int62 = dateTime54.compareTo((org.joda.time.ReadableInstant) dateTime61);
        boolean boolean63 = dateTime42.isAfter((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(0L, chronology65);
        java.lang.String str68 = localDateTime66.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = localDateTime66.toString(dateTimeFormatter69);
        org.joda.time.LocalDateTime.Property property71 = localDateTime66.monthOfYear();
        org.joda.time.Interval interval72 = property71.toInterval();
        long long73 = property71.remainder();
        org.joda.time.LocalDateTime localDateTime74 = property71.roundHalfFloorCopy();
        java.lang.String str75 = property71.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = property71.getFieldType();
        int int77 = dateTime54.get(dateTimeFieldType76);
        int int78 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Chronology chronology79 = dateTime6.getChronology();
        long long80 = dateTime6.getMillis();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1970 + "'", int58 == 1970);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\u65e5\u672c" + "'", str68, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1970-01-01T00:00:00.000" + "'", str70, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(localDateTime74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Jan" + "'", str75, "Jan");
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
    }

    @Test
    public void test05354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05354");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("Korean");
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("2022-02-11T09:43:35.370");
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(locale7);
        java.lang.String str9 = locale6.getDisplayName(locale7);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(0L, chronology14);
        int int16 = localDateTime15.getWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withDayOfMonth(10);
        int int23 = localDateTime20.getEra();
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.dayOfWeek();
        java.util.Locale locale25 = java.util.Locale.ITALY;
        boolean boolean26 = locale25.hasExtensions();
        java.util.Set<java.lang.String> strSet27 = locale25.getUnicodeLocaleKeys();
        java.lang.String str28 = property24.getAsText(locale25);
        java.lang.String str29 = locale11.getDisplayLanguage(locale25);
        java.lang.String str30 = locale6.getDisplayVariant(locale11);
        java.util.Locale.Builder builder31 = builder0.setLocale(locale11);
        java.util.Locale locale34 = new java.util.Locale("1970-01-01T00:00:00.000Z", "2022-02-11T09:43:35.370");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder35 = builder0.setLocale(locale34);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 1970-01-01t00:00:00.000z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "venerd\354" + "'", str28, "venerd\354");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals(locale34.toString(), "1970-01-01t00:00:00.000z_2022-02-11T09:43:35.370");
    }

    @Test
    public void test05355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05355");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.minuteOfDay();
        java.lang.Object obj35 = null;
        boolean boolean36 = zonedChronology28.equals(obj35);
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.weekyear();
        org.joda.time.DurationField durationField38 = zonedChronology28.weekyears();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology28);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.clockhourOfDay();
        org.joda.time.DurationField durationField41 = zonedChronology28.months();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray45 = zonedChronology28.get(readablePeriod42, 92L, 59008L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test05356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05356");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plus(readablePeriod14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, chronology17);
        int int19 = localDateTime18.getWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusHours((int) ' ');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(0L, chronology25);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withMillisOfSecond(100);
        org.joda.time.Chronology chronology30 = localDateTime26.getChronology();
        java.lang.String str31 = localDateTime26.toString();
        int int32 = localDateTime26.getYearOfCentury();
        int int33 = localDateTime26.getCenturyOfEra();
        boolean boolean34 = localDateTime23.isEqual((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMillisOfSecond(100);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        long long45 = dateTimeZone43.previousTransition(0L);
        long long47 = dateTimeZone43.nextTransition((long) (-1));
        org.joda.time.Chronology chronology48 = chronology41.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField49 = chronology41.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(chronology41);
        org.joda.time.DateTimeZone dateTimeZone51 = chronology41.getZone();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.Chronology chronology54 = chronology41.withZone(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime23, chronology54);
        boolean boolean56 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        int[] intArray57 = localDateTime23.getValues();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.000" + "'", str31, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 70 + "'", int32 == 70);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 19 + "'", int33 == 19);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1970, 1, 2, 28800000]");
    }

    @Test
    public void test05357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05357");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property7.getFieldType();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        java.util.Locale locale15 = java.util.Locale.US;
        boolean boolean16 = localDateTime14.equals((java.lang.Object) locale15);
        java.lang.String str17 = locale15.toLanguageTag();
        int int18 = property7.getMaximumTextLength(locale15);
        org.joda.time.LocalDateTime localDateTime19 = property7.roundHalfFloorCopy();
        java.lang.String str20 = property7.getAsText();
        int int21 = property7.getMinimumValue();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en-US" + "'", str17, "en-US");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u6708" + "'", str20, "\u6708");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test05358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05358");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder5 = builder1.clear();
        java.util.Locale.Builder builder7 = builder1.addUnicodeLocaleAttribute("japonais");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder1.removeUnicodeLocaleAttribute("giapponese");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: giapponese [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test05359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05359");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.millis();
        org.joda.time.DurationField durationField9 = chronology6.months();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusHours((int) '#');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis((int) ' ');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfSecond();
        int int17 = property16.getLeapAmount();
        java.lang.String str18 = property16.toString();
        int int19 = property16.getMinimumValueOverall();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Property[millisOfSecond]" + "'", str18, "Property[millisOfSecond]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test05360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05360");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(48, 723600000, 70, 30069, (int) (short) 1, 25, 1200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 30069 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05361");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        int int14 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime13);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean17 = dateTime13.equals((java.lang.Object) timeZone16);
        java.time.ZoneId zoneId18 = timeZone16.toZoneId();
        int int20 = timeZone16.getOffset((long) 170);
        timeZone16.setRawOffset(0);
        java.util.Locale locale23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = timeZone16.getDisplayName(locale23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(zoneId18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test05362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05362");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology32.minuteOfHour();
        org.joda.time.DurationField durationField35 = zonedChronology32.months();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology32.secondOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test05363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05363");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.minuteOfHour();
        boolean boolean5 = property4.isLeap();
        int int6 = property4.get();
        org.joda.time.LocalDateTime localDateTime8 = property4.addToCopy(70L);
        org.joda.time.LocalDateTime localDateTime9 = property4.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test05364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05364");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        long long3 = dateTimeZone1.nextTransition(4363010L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        java.lang.String str5 = timeZone4.getID();
        timeZone4.setID("era");
        int int9 = timeZone4.getOffset(35080732L);
        boolean boolean10 = timeZone4.useDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 4363010L + "'", long3 == 4363010L);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-00:00:00.001" + "'", str5, "-00:00:00.001");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test05365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05365");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DurationField durationField32 = zonedChronology28.minutes();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, chronology34);
        java.lang.String str37 = localDateTime35.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = localDateTime35.toString(dateTimeFormatter38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime35.monthOfYear();
        org.joda.time.LocalDateTime localDateTime41 = property40.withMinimumValue();
        org.joda.time.Interval interval42 = property40.toInterval();
        org.joda.time.LocalDateTime localDateTime43 = property40.getLocalDateTime();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = localDateTime43.getFieldTypes();
        int[] intArray46 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime43, (-3599883L));
        int int47 = localDateTime43.getEra();
        org.joda.time.DurationFieldType durationFieldType48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime50 = localDateTime43.withFieldAdded(durationFieldType48, 840);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u65e5\u672c" + "'", str37, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.000" + "'", str39, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1969, 12, 31, 82800117]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
    }

    @Test
    public void test05366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05366");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(25);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test05367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05367");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMillis((int) 'u');
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.era();
        int int10 = localDateTime6.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 70 + "'", int10 == 70);
    }

    @Test
    public void test05368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05368");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(27236745);
        int int3 = dateTimeZone1.getOffsetFromLocal(82045684L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 27236745 + "'", int3 == 27236745);
    }

    @Test
    public void test05369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05369");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.yearOfCentury();
        org.joda.time.DurationField durationField33 = zonedChronology28.halfdays();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        long long37 = zonedChronology28.add(readablePeriod34, (long) 28, 35217444);
        org.joda.time.Chronology chronology38 = zonedChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology28.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 28L + "'", long37 == 28L);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test05370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05370");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMonths(1970);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readableDuration13);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.withTime(10, (int) '4', 7, (int) 'a');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test05371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05371");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        boolean boolean11 = property7.isLeap();
        org.joda.time.ReadableInstant readableInstant12 = null;
        long long13 = property7.getDifferenceAsLong(readableInstant12);
        org.joda.time.DurationField durationField14 = property7.getDurationField();
        int int15 = property7.getLeapAmount();
        int int16 = property7.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property7.roundHalfCeilingCopy();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = property7.getAsShortText(locale19);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.getDefault(category22);
        java.util.Locale locale24 = java.util.Locale.getDefault(category22);
        java.util.Locale locale27 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        java.util.Locale locale32 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.lang.String str33 = locale28.getDisplayScript(locale32);
        java.lang.String str34 = locale28.getScript();
        java.util.Locale locale35 = java.util.Locale.ITALY;
        boolean boolean36 = locale35.hasExtensions();
        java.util.Set<java.lang.String> strSet37 = locale35.getUnicodeLocaleKeys();
        java.util.Locale locale38 = locale35.stripExtensions();
        java.lang.String str39 = locale28.getDisplayVariant(locale35);
        java.util.Locale.setDefault(category22, locale35);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(0L, chronology42);
        java.lang.String str45 = localDateTime43.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = localDateTime43.toString(dateTimeFormatter46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime43.monthOfYear();
        java.lang.String str49 = property48.getName();
        java.lang.String str50 = property48.getName();
        org.joda.time.LocalDateTime localDateTime52 = property48.addToCopy((int) (short) -1);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(0L, chronology54);
        int int56 = localDateTime55.getWeekyear();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withDayOfMonth(10);
        int int63 = localDateTime60.getEra();
        org.joda.time.LocalDateTime.Property property64 = localDateTime60.dayOfWeek();
        java.util.Locale locale65 = java.util.Locale.ITALY;
        boolean boolean66 = locale65.hasExtensions();
        java.util.Set<java.lang.String> strSet67 = locale65.getUnicodeLocaleKeys();
        java.lang.String str68 = property64.getAsText(locale65);
        java.lang.String str69 = property48.getAsText(locale65);
        java.util.Locale.setDefault(category22, locale65);
        java.lang.String str71 = property7.getAsShortText(locale65);
        java.util.Locale locale72 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str73 = locale72.getLanguage();
        java.util.Locale.Builder builder74 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder75 = builder74.clearExtensions();
        java.util.Locale.Builder builder77 = builder74.setLanguage("");
        java.util.Locale.Builder builder78 = builder77.clearExtensions();
        java.util.Locale locale80 = new java.util.Locale("UTC");
        java.util.Locale.Builder builder81 = builder78.setLocale(locale80);
        java.util.Locale locale82 = builder78.build();
        java.util.Locale.Builder builder84 = builder78.setScript("");
        java.util.Locale.Builder builder85 = builder84.clearExtensions();
        java.util.Locale locale86 = builder85.build();
        java.lang.String str87 = locale86.getISO3Country();
        java.lang.String str88 = locale72.getDisplayCountry(locale86);
        java.util.Locale locale92 = new java.util.Locale("GMT", "Jan", "2022-02-11T09:43:35.370");
        java.lang.String str93 = locale86.getDisplayCountry(locale92);
        java.lang.String str94 = locale65.getDisplayScript(locale86);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-625L) + "'", long13 == (-625L));
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Jan" + "'", str21, "Jan");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale27.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u65e5\u672c" + "'", str29, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale32.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u65e5\u672c" + "'", str45, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01T00:00:00.000" + "'", str47, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "monthOfYear" + "'", str49, "monthOfYear");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "monthOfYear" + "'", str50, "monthOfYear");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "venerd\354" + "'", str68, "venerd\354");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "gennaio" + "'", str69, "gennaio");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "gen" + "'", str71, "gen");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "zh" + "'", str73, "zh");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertEquals(locale80.toString(), "utc");
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "utc");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "utc");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Taiwan" + "'", str88, "Taiwan");
        org.junit.Assert.assertEquals(locale92.toString(), "gmt_JAN_2022-02-11T09:43:35.370");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test05372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05372");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("1970");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale locale6 = builder4.build();
        java.util.Locale.Builder builder9 = builder4.setExtension('a', "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder4.setVariant("-01:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: -01:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test05373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05373");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        java.lang.String str2 = timeZone1.getID();
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(0L, chronology5);
        int int7 = localDateTime6.getWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withYearOfEra(1970);
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, chronology12);
        int int14 = localDateTime13.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withYearOfEra(1970);
        org.joda.time.DateTime dateTime17 = localDateTime16.toDateTime();
        int int18 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime17);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean21 = dateTime17.equals((java.lang.Object) timeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        timeZone20.setRawOffset((int) (short) 0);
        boolean boolean25 = timeZone1.hasSameRules(timeZone20);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("+00:00");
        timeZone27.setID("ISOChronology[UTC]");
        boolean boolean30 = timeZone1.hasSameRules(timeZone27);
        boolean boolean31 = timeZone27.observesDaylightTime();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        java.util.Locale locale35 = java.util.Locale.US;
        boolean boolean36 = localDateTime34.equals((java.lang.Object) locale35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(0L, chronology40);
        int int42 = localDateTime41.getWeekyear();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime.Property property47 = localDateTime34.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime34.withCenturyOfEra(43);
        java.util.Date date50 = localDateTime34.toDate();
        boolean boolean51 = timeZone27.inDaylightTime(date50);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test05374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05374");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.millisOfSecond();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test05375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05375");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.yearOfCentury();
        org.joda.time.DurationField durationField33 = zonedChronology28.seconds();
        org.joda.time.DateTimeZone dateTimeZone34 = zonedChronology28.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long39 = zonedChronology28.getDateTimeMillis(46, 24, 2, 92);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 24 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
    }

    @Test
    public void test05376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05376");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone8.previousTransition(0L);
        long long12 = dateTimeZone8.nextTransition((long) (-1));
        org.joda.time.Chronology chronology13 = chronology6.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField14 = chronology6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology6);
        java.lang.String str17 = localDateTime15.toString("\u4e2d\u56fd");
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(0L, chronology20);
        int int22 = localDateTime21.getWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYearOfEra(1970);
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(0L, chronology27);
        java.lang.String str30 = localDateTime28.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = localDateTime28.toString(dateTimeFormatter31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime28.monthOfYear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withSecondOfMinute((int) '4');
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        long long40 = dateTimeZone38.previousTransition(100L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withHourOfDay((int) (short) 0);
        int int45 = localDateTime44.getEra();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(0L, chronology49);
        java.lang.String str52 = localDateTime50.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = localDateTime50.toString(dateTimeFormatter53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime50.monthOfYear();
        org.joda.time.Interval interval56 = property55.toInterval();
        org.joda.time.LocalDateTime localDateTime58 = property55.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property55.getFieldType();
        org.joda.time.LocalDateTime.Property property60 = localDateTime47.property(dateTimeFieldType59);
        int int61 = localDateTime35.indexOf(dateTimeFieldType59);
        boolean boolean62 = dateTime25.isSupported(dateTimeFieldType59);
        int int63 = property18.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeField dateTimeField64 = property18.getField();
        org.joda.time.LocalDateTime localDateTime65 = property18.getLocalDateTime();
        java.util.Locale locale68 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.lang.String str70 = locale68.getDisplayLanguage(locale69);
        java.util.Locale locale73 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.lang.String str74 = locale69.getDisplayScript(locale73);
        java.lang.String str75 = locale73.getDisplayScript();
        java.util.Locale locale76 = locale73.stripExtensions();
        java.lang.String str77 = property18.getAsShortText(locale76);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u56fd" + "'", str17, "\u4e2d\u56fd");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u65e5\u672c" + "'", str30, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01T00:00:00.070" + "'", str32, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 100L + "'", long40 == 100L);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u65e5\u672c" + "'", str52, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970-01-01T00:00:00.070" + "'", str54, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertEquals(locale68.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u65e5\u672c" + "'", str70, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale73.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "9" + "'", str77, "9");
    }

    @Test
    public void test05377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05377");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-11T09:43:35.370");
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(locale2);
        java.lang.String str4 = locale1.getDisplayName(locale2);
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withDayOfMonth(10);
        int int18 = localDateTime15.getEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.dayOfWeek();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.lang.String str23 = property19.getAsText(locale20);
        java.lang.String str24 = locale6.getDisplayLanguage(locale20);
        java.lang.String str25 = locale1.getDisplayVariant(locale6);
        java.util.Set<java.lang.Character> charSet26 = locale1.getExtensionKeys();
        java.util.Locale locale28 = new java.util.Locale("Property[yearOfEra]");
        java.lang.String str29 = locale1.getDisplayLanguage(locale28);
        java.lang.String str30 = locale28.getDisplayCountry();
        java.lang.String str31 = locale28.getLanguage();
        java.lang.String str32 = locale28.getDisplayScript();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "venerd\354" + "'", str23, "venerd\354");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertEquals(locale28.toString(), "property[yearofera]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "property[yearofera]" + "'", str31, "property[yearofera]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test05378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05378");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, chronology11);
        java.lang.String str14 = localDateTime12.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime12.toString(dateTimeFormatter15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.monthOfYear();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.LocalDateTime localDateTime20 = property17.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property17.getFieldType();
        org.joda.time.LocalDateTime.Property property22 = localDateTime9.property(dateTimeFieldType21);
        int int23 = localDateTime9.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime9.plusDays((int) '#');
        int int26 = localDateTime9.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime9.withMillisOfDay((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusYears((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withMinuteOfHour((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusMillis(0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.070" + "'", str16, "1970-01-01T00:00:00.070");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test05379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05379");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMillisOfSecond(100);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DurationField durationField43 = chronology41.millis();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '#', chronology41);
        int[] intArray47 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime45, (long) 1);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology28.yearOfEra();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(0L, chronology50);
        int int52 = localDateTime51.getWeekyear();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withMillisOfSecond(100);
        org.joda.time.Chronology chronology55 = localDateTime51.getChronology();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.plusMinutes((int) (byte) -1);
        long long59 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime57, (long) 31);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Chronology chronology61 = zonedChronology28.withZone(dateTimeZone60);
        org.joda.time.Chronology chronology62 = chronology61.withUTC();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray65 = chronology62.get(readablePeriod63, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1970, 1, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(localDateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-59930L) + "'", long59 == (-59930L));
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology62);
    }

    @Test
    public void test05380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05380");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(70, (-2719), 27236746, 99, 575, 43, 81976385);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 99 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05381");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1598067, 422580000, 0, 0, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 422580000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05382");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("45");
        // The following exception was thrown during execution in test generation
        try {
            int int8 = timeZone1.getOffset((-292275054), 0, 1963, 8, 97, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
    }

    @Test
    public void test05383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05383");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.minuteOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology32.centuries();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.Chronology chronology37 = zonedChronology32.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology32.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        long long42 = zonedChronology32.add(readablePeriod39, (long) 1970, 59);
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology32.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology32.secondOfDay();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology32.minuteOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1970L + "'", long42 == 1970L);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test05384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05384");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("zh-CN");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.parse("CN", strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.lang.String str11 = locale8.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str16 = locale13.getDisplayName(locale15);
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale17.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.lang.String str28 = locale26.getDisplayCountry(locale27);
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.util.Locale[] localeArray33 = new java.util.Locale[] { locale8, locale13, locale17, locale21, locale24, locale25, locale26, locale29, locale30 };
        java.util.ArrayList<java.util.Locale> localeList34 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList34, localeArray33);
        java.util.List<java.util.Locale> localeList36 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList34);
        java.lang.String[] strArray38 = new java.lang.String[] { "1970-01-01T00:00:00.000" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.Locale.FilteringMode filteringMode41 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList39, filteringMode41);
        java.util.Locale locale43 = java.util.Locale.CHINA;
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.util.Locale locale49 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale50 = locale49.stripExtensions();
        java.util.Locale locale51 = java.util.Locale.ITALIAN;
        java.util.Locale locale54 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale55 = locale54.stripExtensions();
        java.util.Locale locale58 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale59 = java.util.Locale.ENGLISH;
        java.lang.String str60 = locale58.getDisplayLanguage(locale59);
        java.util.Locale locale61 = java.util.Locale.JAPAN;
        java.util.Locale locale62 = java.util.Locale.JAPAN;
        java.lang.String str63 = locale61.getDisplayCountry(locale62);
        java.util.Locale locale66 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale67 = locale66.stripExtensions();
        java.util.Locale locale68 = java.util.Locale.getDefault();
        java.util.Locale locale70 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Locale locale71 = java.util.Locale.US;
        java.util.Locale locale72 = java.util.Locale.getDefault();
        java.util.Locale locale73 = java.util.Locale.CHINA;
        java.lang.String str74 = locale73.getCountry();
        java.util.Locale[] localeArray75 = new java.util.Locale[] { locale43, locale44, locale45, locale46, locale49, locale51, locale54, locale58, locale62, locale67, locale68, locale70, locale71, locale72, locale73 };
        java.util.ArrayList<java.util.Locale> localeList76 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList76, localeArray75);
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList76);
        java.util.stream.Stream<java.util.Locale> localeStream79 = localeList78.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream80 = localeList78.stream();
        java.util.stream.Stream<java.util.Locale> localeStream81 = localeList78.parallelStream();
        java.util.Locale.FilteringMode filteringMode82 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList78, filteringMode82);
        java.util.Locale.FilteringMode filteringMode84 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList83, filteringMode84);
        java.util.stream.Stream<java.util.Locale> localeStream86 = localeList85.stream();
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u65e5\u672c" + "'", str10, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str11, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str16, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u65e5\u672c" + "'", str19, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str20, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u65e5\u672c" + "'", str28, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u65e5\u672c" + "'", str32, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localeList36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + filteringMode41 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode41.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale49.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it");
        org.junit.Assert.assertEquals(locale54.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals(locale58.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u65e5\u672c" + "'", str60, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u65e5\u672c" + "'", str63, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale66.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "CN" + "'", str74, "CN");
        org.junit.Assert.assertNotNull(localeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertNotNull(localeStream79);
        org.junit.Assert.assertNotNull(localeStream80);
        org.junit.Assert.assertNotNull(localeStream81);
        org.junit.Assert.assertTrue("'" + filteringMode82 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode82.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertTrue("'" + filteringMode84 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode84.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList85);
        org.junit.Assert.assertNotNull(localeStream86);
    }

    @Test
    public void test05385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05385");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minus(readableDuration6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusWeeks(44);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusYears(575);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfSecond();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test05386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05386");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusDays(4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plus(readableDuration10);
        java.lang.Class<?> wildcardClass12 = localDateTime11.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 170 + "'", int7 == 170);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test05387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05387");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        long long20 = dateTimeZone18.previousTransition(0L);
        long long22 = dateTimeZone18.convertUTCToLocal(1L);
        long long24 = dateTimeZone18.convertUTCToLocal((long) (byte) 10);
        org.joda.time.DateTime dateTime25 = localDateTime13.toDateTime(dateTimeZone18);
        java.lang.String str26 = dateTimeZone18.getID();
        long long29 = dateTimeZone18.adjustOffset(86399999L, false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 86399999L + "'", long29 == 86399999L);
    }

    @Test
    public void test05388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05388");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.weekOfWeekyear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withMillisOfSecond(100);
        org.joda.time.Chronology chronology14 = localDateTime10.getChronology();
        int int15 = property7.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        int int16 = property7.get();
        int int17 = property7.getLeapAmount();
        int int18 = property7.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime19 = property7.withMaximumValue();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test05389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05389");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withYearOfEra(12);
        int int5 = localDateTime2.getHourOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test05390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05390");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("1969-01-01T00:00:00.000");
        timeZone1.setRawOffset((int) (byte) 100);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
    }

    @Test
    public void test05391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05391");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone8.previousTransition(0L);
        long long12 = dateTimeZone8.nextTransition((long) (-1));
        org.joda.time.Chronology chronology13 = chronology6.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField14 = chronology6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone16 = chronology6.getZone();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        java.lang.String str19 = dateTimeZone16.getName((-61800969599425L));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
    }

    @Test
    public void test05392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05392");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField33 = zonedChronology28.halfdays();
        org.joda.time.DurationField durationField34 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DurationField durationField37 = zonedChronology28.years();
        org.joda.time.DurationField durationField38 = zonedChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology28.yearOfCentury();
        org.joda.time.DurationField durationField40 = zonedChronology28.minutes();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology28.yearOfEra();
        long long45 = zonedChronology28.add(0L, 1970L, 69);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) 69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 135930L + "'", long45 == 135930L);
    }

    @Test
    public void test05393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05393");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusDays(4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plus(readableDuration10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readableDuration12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfMonth();
        int int15 = localDateTime13.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test05394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05394");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra((int) (byte) 1);
        java.lang.String str7 = localDateTime6.toString();
        int int8 = localDateTime6.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime6.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.plus(readablePeriod12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis(45);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0001-01-01T00:00:00.000" + "'", str7, "0001-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test05395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05395");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.JAPAN;
        java.lang.String str2 = locale1.getDisplayName();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.JAPAN;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale4.getDisplayName();
        java.lang.String str7 = locale4.getVariant();
        java.lang.String str9 = locale4.getExtension('x');
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.lang.String str12 = locale11.getDisplayCountry();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale11.getDisplayLanguage(locale13);
        java.lang.String str15 = locale13.getVariant();
        java.util.Locale.setDefault(category0, locale13);
        java.util.Locale locale17 = java.util.Locale.getDefault(category0);
        java.util.Locale locale18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Can't set default locale to NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str2, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str6, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u672c" + "'", str12, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Japanisch" + "'", str14, "Japanisch");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
    }

    @Test
    public void test05396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05396");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone(zoneId2);
        int int4 = timeZone3.getRawOffset();
        java.util.TimeZone.setDefault(timeZone3);
        int int7 = timeZone3.getOffset((long) 81991403);
        boolean boolean8 = timeZone3.observesDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test05397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05397");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(0L);
        long long4 = dateTimeZone0.convertUTCToLocal(1L);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        long long9 = dateTimeZone0.getMillisKeepLocal(dateTimeZone7, (long) (-1));
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, chronology11);
        int int13 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfSecond(100);
        org.joda.time.Chronology chronology16 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DurationField durationField19 = chronology16.seconds();
        boolean boolean20 = dateTimeZone7.equals((java.lang.Object) chronology16);
        java.lang.String str22 = dateTimeZone7.getNameKey(840L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
    }

    @Test
    public void test05398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05398");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMillisOfSecond(100);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DurationField durationField43 = chronology41.millis();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '#', chronology41);
        int[] intArray47 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime45, (long) 1);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology28.yearOfEra();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(0L, chronology50);
        int int52 = localDateTime51.getWeekyear();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withMillisOfSecond(100);
        org.joda.time.Chronology chronology55 = localDateTime51.getChronology();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.plusMinutes((int) (byte) -1);
        long long59 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime57, (long) 31);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Chronology chronology61 = zonedChronology28.withZone(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.UTC;
        long long65 = dateTimeZone62.convertLocalToUTC(100L, true);
        java.lang.String str67 = dateTimeZone62.getName(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology68 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology28, dateTimeZone62);
        org.joda.time.DurationField durationField69 = zonedChronology28.weekyears();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1970, 1, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-60000L) + "'", long59 == (-60000L));
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L + "'", long65 == 100L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertNotNull(zonedChronology68);
        org.junit.Assert.assertNotNull(durationField69);
    }

    @Test
    public void test05399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05399");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        java.lang.Object[] objArray5 = strSet4.toArray();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withHourOfDay((int) (short) 0);
        int int13 = localDateTime12.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusYears(0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusHours((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusMonths((int) '#');
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plus(readablePeriod23);
        int int25 = localDateTime24.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = strSet4.contains((java.lang.Object) int25);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String cannot be cast to java.lang.Integer");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test05400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05400");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        int int12 = property7.getMaximumTextLength(locale11);
        org.joda.time.LocalDateTime localDateTime13 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfCentury();
        java.lang.String str15 = property14.getAsShortText();
        org.joda.time.LocalDateTime localDateTime16 = property14.roundHalfFloorCopy();
        java.lang.String str17 = localDateTime16.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "70" + "'", str15, "70");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.000" + "'", str17, "1970-01-01T00:00:00.000");
    }

    @Test
    public void test05401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05401");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = locale0.stripExtensions();
        boolean boolean2 = locale1.hasExtensions();
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = locale3.stripExtensions();
        boolean boolean5 = locale4.hasExtensions();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(0L, chronology7);
        int int9 = localDateTime8.getWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond(0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        long long18 = dateTimeZone16.previousTransition(100L);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(0L, chronology22);
        int int24 = localDateTime23.getWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withYearOfEra(1970);
        org.joda.time.DateTime dateTime27 = localDateTime26.toDateTime();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(0L, chronology29);
        int int31 = localDateTime30.getWeekyear();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withYearOfEra(1970);
        org.joda.time.DateTime dateTime34 = localDateTime33.toDateTime();
        int int35 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime36 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime20.plus(readableDuration37);
        boolean boolean39 = localDateTime13.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime13.minusDays(2022);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.minusMonths((int) (short) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(0L, chronology47);
        int int49 = localDateTime48.getWeekyear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withDayOfMonth(10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(0L, chronology57);
        java.lang.String str60 = localDateTime58.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = null;
        java.lang.String str62 = localDateTime58.toString(dateTimeFormatter61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime58.monthOfYear();
        org.joda.time.Interval interval64 = property63.toInterval();
        org.joda.time.LocalDateTime localDateTime66 = property63.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property63.getFieldType();
        org.joda.time.LocalDateTime.Property property68 = localDateTime55.property(dateTimeFieldType67);
        int int69 = localDateTime45.get(dateTimeFieldType67);
        java.util.Locale locale72 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str73 = localDateTime45.toString("\uc911\uad6d\uc5b4\uc911\uad6d)", locale72);
        java.lang.String str74 = locale4.getDisplayVariant(locale72);
        java.lang.String str75 = locale4.getISO3Language();
        java.lang.String str76 = locale1.getDisplayVariant(locale4);
        java.lang.String str77 = locale4.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u65e5\u672c" + "'", str60, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-01T00:00:00.000" + "'", str62, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 8 + "'", int69 == 8);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str73, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "eng" + "'", str75, "eng");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Kanada" + "'", str77, "Kanada");
    }

    @Test
    public void test05402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05402");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(0L);
        long long4 = dateTimeZone0.nextTransition((long) (-1));
        boolean boolean6 = dateTimeZone0.isStandardOffset((long) ' ');
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        java.time.ZoneId zoneId8 = timeZone7.toZoneId();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone(zoneId8);
        timeZone9.setID("70");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withMillisOfSecond(100);
        org.joda.time.Chronology chronology18 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.days();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(100L);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMillisOfSecond((int) (byte) 0);
        int[] intArray29 = chronology18.get((org.joda.time.ReadablePartial) localDateTime25, (long) (-1));
        org.joda.time.DateTimeField dateTimeField30 = chronology18.millisOfDay();
        org.joda.time.DurationField durationField31 = chronology18.hours();
        org.joda.time.DurationField durationField32 = chronology18.weeks();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        long long39 = dateTimeZone35.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology40 = org.joda.time.chrono.ZonedChronology.getInstance(chronology18, dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology40.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology40.millisOfSecond();
        org.joda.time.DurationField durationField43 = zonedChronology40.months();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology40.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology40.clockhourOfDay();
        org.joda.time.DurationField durationField47 = zonedChronology40.halfdays();
        java.lang.String str48 = zonedChronology40.toString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(0L, chronology50);
        java.lang.String str53 = localDateTime51.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = localDateTime51.toString(dateTimeFormatter54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime51.monthOfYear();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime51.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withSecondOfMinute((int) '4');
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusWeeks(999);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime60.withDurationAdded(readableDuration63, 3);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime60.withDate((int) (short) -1, 7, 12);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime60.withMillisOfDay(4);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime60.minusMillis((int) (byte) 1);
        int[] intArray75 = zonedChronology40.get((org.joda.time.ReadablePartial) localDateTime60, 544734900L);
        java.util.Date date76 = localDateTime60.toDate();
        org.joda.time.LocalDateTime localDateTime77 = org.joda.time.LocalDateTime.fromDateFields(date76);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.fromDateFields(date76);
        boolean boolean79 = timeZone9.inDaylightTime(date76);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L + "'", long23 == 100L);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10L + "'", long39 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str48, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u65e5\u672c" + "'", str53, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01T00:00:00.000" + "'", str55, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1970, 1, 7, 26334900]");
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:52 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test05403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05403");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("1970");
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str7 = locale5.getExtension('a');
        java.util.Locale.Builder builder8 = builder2.setLocale(locale5);
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder8.removeUnicodeLocaleAttribute("\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ????? (????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test05404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05404");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(0L, chronology2);
        int int4 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMillisOfSecond(100);
        org.joda.time.Chronology chronology7 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(0L);
        long long13 = dateTimeZone9.nextTransition((long) (-1));
        org.joda.time.Chronology chronology14 = chronology7.withZone(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (short) 10, chronology7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withDayOfMonth(366);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 366 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test05405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05405");
        java.util.Locale locale2 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.lang.String str3 = locale2.getDisplayVariant();
        java.lang.String str5 = locale2.getExtension('x');
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale2.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale2.getUnicodeLocaleKeys();
        java.util.Iterator<java.lang.String> strItor9 = strSet8.iterator();
        boolean boolean10 = strSet8.isEmpty();
        org.junit.Assert.assertEquals(locale2.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test05406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05406");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(2759396L);
    }

    @Test
    public void test05407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05407");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(0L, chronology2);
        int int4 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMillisOfSecond(100);
        org.joda.time.Chronology chronology7 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.days();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone10.previousTransition(100L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfSecond((int) (byte) 0);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePartial) localDateTime14, (long) (-1));
        org.joda.time.DateTimeField dateTimeField19 = chronology7.millisOfDay();
        org.joda.time.DurationField durationField20 = chronology7.hours();
        org.joda.time.DurationField durationField21 = chronology7.weeks();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        long long28 = dateTimeZone24.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology29 = org.joda.time.chrono.ZonedChronology.getInstance(chronology7, dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology29.halfdayOfDay();
        long long34 = zonedChronology29.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        int int39 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withMillisOfSecond(100);
        org.joda.time.Chronology chronology42 = localDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfCentury();
        org.joda.time.DurationField durationField44 = chronology42.millis();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) '#', chronology42);
        int[] intArray48 = zonedChronology29.get((org.joda.time.ReadablePartial) localDateTime46, (long) 1);
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology29.yearOfEra();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology29.era();
        org.joda.time.DurationField durationField51 = zonedChronology29.minutes();
        org.joda.time.Chronology chronology52 = zonedChronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology29.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(0L, (org.joda.time.Chronology) zonedChronology29);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withDayOfWeek(2);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(0L, chronology58);
        int int60 = localDateTime59.getWeekyear();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withMillisOfSecond(100);
        org.joda.time.Chronology chronology63 = localDateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.yearOfCentury();
        org.joda.time.DurationField durationField65 = chronology63.millis();
        org.joda.time.DurationField durationField66 = chronology63.months();
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now(chronology63);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = localDateTime67.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.minusHours((int) '#');
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.plusMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime74 = localDateTime70.minusDays(3);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(0L, chronology76);
        java.lang.String str79 = localDateTime77.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = null;
        java.lang.String str81 = localDateTime77.toString(dateTimeFormatter80);
        org.joda.time.LocalDateTime.Property property82 = localDateTime77.monthOfYear();
        org.joda.time.Interval interval83 = property82.toInterval();
        long long84 = property82.remainder();
        org.joda.time.LocalDateTime localDateTime85 = property82.roundHalfFloorCopy();
        java.lang.String str86 = property82.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = property82.getFieldType();
        int int88 = localDateTime74.get(dateTimeFieldType87);
        boolean boolean89 = localDateTime56.isSupported(dateTimeFieldType87);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime56.minusMillis(22);
        org.joda.time.LocalDateTime.Property property92 = localDateTime91.millisOfSecond();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-62167219199980L) + "'", long34 == (-62167219199980L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1970, 1, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u65e5\u672c" + "'", str79, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "1970-01-01T00:00:00.000" + "'", str81, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "1" + "'", str86, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(property92);
    }

    @Test
    public void test05408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05408");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("chinese");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"chinese\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05409");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology32.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology32.minuteOfDay();
        java.lang.String str36 = zonedChronology32.toString();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology32.monthOfYear();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology32.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        long long42 = dateTimeZone40.nextTransition(4363010L);
        java.lang.String str44 = dateTimeZone40.getName((long) (byte) 100);
        long long46 = dateTimeZone40.previousTransition(1644572123417L);
        org.joda.time.Chronology chronology47 = zonedChronology32.withZone(dateTimeZone40);
        boolean boolean49 = dateTimeZone40.isStandardOffset(169689598035L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str36, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 4363010L + "'", long42 == 4363010L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-00:00:00.001" + "'", str44, "-00:00:00.001");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1644572123417L + "'", long46 == 1644572123417L);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test05410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05410");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        int int14 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime13);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean17 = dateTime13.equals((java.lang.Object) timeZone16);
        java.time.ZoneId zoneId18 = timeZone16.toZoneId();
        int int20 = timeZone16.getOffset((long) 170);
        timeZone16.setID("Japanisch (Japan)");
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        java.time.ZoneId zoneId25 = timeZone24.toZoneId();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone(zoneId25);
        boolean boolean27 = timeZone16.hasSameRules(timeZone26);
        java.lang.Object obj28 = timeZone26.clone();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(zoneId18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test05411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05411");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone7 = provider0.getZone("1970-01-01T00:00:00.064+00:00:00.064");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(dateTimeZone7);
    }

    @Test
    public void test05412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05412");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) '4');
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readablePeriod11);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate((int) (byte) 100, 10, 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundCeilingCopy();
        java.util.Locale locale21 = new java.util.Locale("", "\u4e2d\u56fd");
        java.lang.String str22 = property17.getAsText(locale21);
        org.joda.time.LocalDateTime localDateTime23 = property17.getLocalDateTime();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(0L, chronology25);
        java.lang.String str28 = localDateTime26.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = localDateTime26.toString(dateTimeFormatter29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime26.monthOfYear();
        org.joda.time.LocalDateTime localDateTime32 = property31.roundCeilingCopy();
        int int33 = localDateTime32.getMonthOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(0L, chronology35);
        int int37 = localDateTime36.getWeekyear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withYearOfEra(1970);
        org.joda.time.DateTime dateTime40 = localDateTime39.toDateTime();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(0L, chronology42);
        int int44 = localDateTime43.getWeekyear();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withYearOfEra(1970);
        org.joda.time.DateTime dateTime47 = localDateTime46.toDateTime();
        int int48 = dateTime40.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(0L, chronology50);
        java.lang.String str53 = localDateTime51.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = localDateTime51.toString(dateTimeFormatter54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime51.monthOfYear();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime51.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withSecondOfMinute((int) '4');
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        long long63 = dateTimeZone61.previousTransition(100L);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withHourOfDay((int) (short) 0);
        int int68 = localDateTime67.getEra();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(0L, chronology72);
        java.lang.String str75 = localDateTime73.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = null;
        java.lang.String str77 = localDateTime73.toString(dateTimeFormatter76);
        org.joda.time.LocalDateTime.Property property78 = localDateTime73.monthOfYear();
        org.joda.time.Interval interval79 = property78.toInterval();
        org.joda.time.LocalDateTime localDateTime81 = property78.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = property78.getFieldType();
        org.joda.time.LocalDateTime.Property property83 = localDateTime70.property(dateTimeFieldType82);
        int int84 = localDateTime58.indexOf(dateTimeFieldType82);
        boolean boolean85 = dateTime40.isSupported(dateTimeFieldType82);
        org.joda.time.LocalDateTime.Property property86 = localDateTime32.property(dateTimeFieldType82);
        java.lang.String str87 = property86.getAsShortText();
        java.util.Locale locale89 = new java.util.Locale("Ora media di Greenwich");
        int int90 = property86.getMaximumShortTextLength(locale89);
        java.util.Locale locale91 = locale89.stripExtensions();
        java.lang.String str92 = property17.getAsShortText(locale89);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "\u4e2d\u56fd");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "39" + "'", str22, "39");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u65e5\u672c" + "'", str28, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T00:00:00.000" + "'", str30, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u65e5\u672c" + "'", str53, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01T00:00:00.000" + "'", str55, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\u65e5\u672c" + "'", str75, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1970-01-01T00:00:00.000" + "'", str77, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "1" + "'", str87, "1");
        org.junit.Assert.assertEquals(locale89.toString(), "ora media di greenwich");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 3 + "'", int90 == 3);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "ora media di greenwich");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "39" + "'", str92, "39");
    }

    @Test
    public void test05413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05413");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = timeZone1.getOffset((long) (byte) 10);
        int int6 = timeZone1.getOffset(36060000L);
        int int7 = timeZone1.getRawOffset();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test05414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05414");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) '4');
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readablePeriod11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(0L, chronology14);
        int int16 = localDateTime15.getWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withMillisOfSecond(100);
        org.joda.time.Chronology chronology19 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology19.days();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        long long24 = dateTimeZone22.previousTransition(100L);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withMillisOfSecond((int) (byte) 0);
        int[] intArray30 = chronology19.get((org.joda.time.ReadablePartial) localDateTime26, (long) (-1));
        org.joda.time.DateTimeField dateTimeField31 = chronology19.millisOfDay();
        org.joda.time.DurationField durationField32 = chronology19.hours();
        org.joda.time.DurationField durationField33 = chronology19.weeks();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        long long40 = dateTimeZone36.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology41 = org.joda.time.chrono.ZonedChronology.getInstance(chronology19, dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology41.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology41.millisOfSecond();
        org.joda.time.DurationField durationField44 = zonedChronology41.weekyears();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(0L, chronology46);
        java.lang.String str49 = localDateTime47.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = localDateTime47.toString(dateTimeFormatter50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime47.monthOfYear();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime47.withMillisOfDay(100);
        long long56 = zonedChronology41.set((org.joda.time.ReadablePartial) localDateTime54, (long) 59);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(0L, chronology58);
        int int60 = localDateTime59.getWeekyear();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withYearOfEra(1970);
        org.joda.time.DateTime dateTime63 = localDateTime62.toDateTime();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(0L, chronology65);
        int int67 = localDateTime66.getWeekyear();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withYearOfEra(1970);
        org.joda.time.DateTime dateTime70 = localDateTime69.toDateTime();
        int int71 = dateTime63.compareTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime72 = localDateTime54.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTimeZone dateTimeZone73 = dateTime72.getZone();
        java.lang.String str74 = dateTimeZone73.toString();
        long long76 = dateTimeZone73.convertUTCToLocal((long) '4');
        org.joda.time.DateTime dateTime77 = localDateTime10.toDateTime(dateTimeZone73);
        org.joda.time.LocalDateTime.Property property78 = localDateTime10.era();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime10.minusWeeks(10);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime10.plusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.minusMillis(64);
        org.joda.time.LocalDateTime.Property property85 = localDateTime82.monthOfYear();
        int int86 = localDateTime82.getDayOfYear();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u65e5\u672c" + "'", str49, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01T00:00:00.000" + "'", str51, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100L + "'", long56 == 100L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1970 + "'", int67 == 1970);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "UTC" + "'", str74, "UTC");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 52L + "'", long76 == 52L);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 121 + "'", int86 == 121);
    }

    @Test
    public void test05415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05415");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder6 = builder1.setLanguageTag("chinese");
        java.util.Locale.Builder builder7 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setLanguage("1959-01-01T00:27:11.004");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 1959-01-01T00:27:11.004 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test05416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05416");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(0L, chronology2);
        int int4 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMillisOfSecond(100);
        org.joda.time.Chronology chronology7 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.millis();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) '#', chronology7);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMonths(3);
        int int14 = localDateTime13.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withTime(47, 27236746, 38, 71);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 47 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 91 + "'", int14 == 91);
    }

    @Test
    public void test05417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05417");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone1.previousTransition(0L);
        long long5 = dateTimeZone1.convertUTCToLocal(1L);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        long long10 = dateTimeZone1.getMillisKeepLocal(dateTimeZone8, (long) (-1));
        java.lang.String str12 = dateTimeZone8.getName((long) 70);
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str18 = locale15.getDisplayName(locale17);
        java.lang.String str19 = dateTimeZone8.getShortName((long) 4, locale15);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(68135866170L, dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u65e5\u672c" + "'", str16, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str18, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
    }

    @Test
    public void test05418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05418");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField33 = zonedChronology28.halfdays();
        org.joda.time.DurationField durationField34 = zonedChronology28.minutes();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.clockhourOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test05419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05419");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        boolean boolean4 = dateTimeZone0.equals((java.lang.Object) "hi!");
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(0L, chronology7);
        int int9 = localDateTime8.getWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withMillisOfSecond(100);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology12.millis();
        org.joda.time.DurationField durationField15 = chronology12.months();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusYears(2022);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(0L, chronology21);
        java.lang.String str24 = localDateTime22.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = localDateTime22.toString(dateTimeFormatter25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime22.monthOfYear();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(0);
        java.util.Date date31 = localDateTime28.toDate();
        int int32 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        boolean boolean33 = dateTimeZone0.isLocalDateTimeGap(localDateTime19);
        org.joda.time.Chronology chronology34 = localDateTime19.getChronology();
        org.joda.time.DurationFieldType durationFieldType35 = null;
        boolean boolean36 = localDateTime19.isSupported(durationFieldType35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(0L, chronology39);
        int int41 = localDateTime40.getWeekyear();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withMillisOfSecond(100);
        org.joda.time.Chronology chronology44 = localDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        long long48 = dateTimeZone46.previousTransition(0L);
        long long50 = dateTimeZone46.nextTransition((long) (-1));
        org.joda.time.Chronology chronology51 = chronology44.withZone(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (short) 10, chronology44);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusMillis(20);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.weekyear();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.plus(readablePeriod56);
        int int58 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime57);
        int int59 = localDateTime19.size();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u65e5\u672c" + "'", str24, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.000" + "'", str26, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
    }

    @Test
    public void test05420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05420");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plus(readablePeriod5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        boolean boolean9 = dateTimeZone7.isLocalDateTimeGap(localDateTime8);
        boolean boolean10 = localDateTime6.isAfter((org.joda.time.ReadablePartial) localDateTime8);
        java.util.Date date11 = localDateTime8.toDate();
        int int12 = localDateTime8.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withDayOfWeek(840);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 840 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Fri Feb 11 09:48:31 GMT 2022");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
    }

    @Test
    public void test05421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05421");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(0L);
        long long4 = dateTimeZone0.convertUTCToLocal(1L);
        java.lang.String str5 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
    }

    @Test
    public void test05422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05422");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minusYears(31);
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.withYearOfEra(53);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMonths(5);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test05423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05423");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        java.lang.String str12 = localDateTime10.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = localDateTime10.toString(dateTimeFormatter13);
        boolean boolean15 = localDateTime2.isAfter((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.plusYears((int) (short) -1);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minus(readableDuration18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readablePeriod20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMinutes(292278993);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.weekOfWeekyear();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u672c" + "'", str12, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.000" + "'", str14, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test05424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05424");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfCentury((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minusMonths(31);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusHours(81976385);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test05425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05425");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = timeZone1.getOffset((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int7 = timeZone1.getOffset((-625L));
        int int14 = timeZone1.getOffset(0, (int) (short) 100, 10, (int) (short) 1, 1, (int) ' ');
        timeZone1.setID("Italian");
        java.lang.String str17 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GMT+00:00" + "'", str17, "GMT+00:00");
    }

    @Test
    public void test05426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05426");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.Object obj3 = null;
        boolean boolean4 = locale1.equals(obj3);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test05427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05427");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\uc911\uad6d\uc5b4");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str4 = dateTimeZone2.getNameKey(259200000L);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
    }

    @Test
    public void test05428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05428");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withDurationAdded(readableDuration7, (int) (short) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        org.joda.time.Interval interval11 = property10.toInterval();
        org.joda.time.Interval interval12 = property10.toInterval();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
    }

    @Test
    public void test05429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05429");
        java.util.Locale locale2 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.lang.String str3 = locale2.getDisplayVariant();
        java.lang.String str5 = locale2.getExtension('x');
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale2.getDisplayVariant(locale6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = locale2.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for ??");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test05430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05430");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Kanada", (double) 24815L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=24815.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05431");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMillisOfSecond(100);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DurationField durationField43 = chronology41.millis();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '#', chronology41);
        int[] intArray47 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime45, (long) 1);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology28.yearOfEra();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(0L, chronology50);
        int int52 = localDateTime51.getWeekyear();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withMillisOfSecond(100);
        org.joda.time.Chronology chronology55 = localDateTime51.getChronology();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.plusMinutes((int) (byte) -1);
        long long59 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime57, (long) 31);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.minusMinutes(70);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusHours(99);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.monthOfYear();
        java.lang.String str65 = property64.getAsText();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1970, 1, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-60000L) + "'", long59 == (-60000L));
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u6708" + "'", str65, "\u6708");
    }

    @Test
    public void test05432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05432");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.millis();
        org.joda.time.DurationField durationField9 = chronology6.months();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusYears(2022);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.lang.String str16 = locale15.getCountry();
        java.lang.String str17 = locale15.getDisplayLanguage();
        java.lang.String str18 = locale15.getDisplayCountry();
        int int19 = property14.getMaximumShortTextLength(locale15);
        java.lang.String str20 = locale15.getDisplayName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CN" + "'", str16, "CN");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u6587" + "'", str17, "\u4e2d\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u4e2d\u56fd" + "'", str18, "\u4e2d\u56fd");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str20, "\u4e2d\u6587\u4e2d\u56fd)");
    }

    @Test
    public void test05433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05433");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap6);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale11 = java.util.Locale.JAPAN;
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        java.lang.String str14 = locale11.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.lang.String str17 = locale15.getDisplayCountry(locale16);
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str19 = locale16.getDisplayName(locale18);
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.lang.String str23 = locale20.getDisplayName();
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.lang.String str26 = locale24.getDisplayCountry(locale25);
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.lang.String str31 = locale29.getDisplayCountry(locale30);
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.lang.String str35 = locale33.getDisplayCountry(locale34);
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale11, locale16, locale20, locale24, locale27, locale28, locale29, locale32, locale33 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList37);
        java.lang.String[] strArray41 = new java.lang.String[] { "1970-01-01T00:00:00.000" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.Locale.FilteringMode filteringMode44 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strList42, filteringMode44);
        java.util.Locale locale46 = java.util.Locale.CHINA;
        java.util.Locale locale47 = java.util.Locale.CHINA;
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.util.Locale locale52 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale53 = locale52.stripExtensions();
        java.util.Locale locale54 = java.util.Locale.ITALIAN;
        java.util.Locale locale57 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale58 = locale57.stripExtensions();
        java.util.Locale locale61 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale62 = java.util.Locale.ENGLISH;
        java.lang.String str63 = locale61.getDisplayLanguage(locale62);
        java.util.Locale locale64 = java.util.Locale.JAPAN;
        java.util.Locale locale65 = java.util.Locale.JAPAN;
        java.lang.String str66 = locale64.getDisplayCountry(locale65);
        java.util.Locale locale69 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale70 = locale69.stripExtensions();
        java.util.Locale locale71 = java.util.Locale.getDefault();
        java.util.Locale locale73 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Locale locale74 = java.util.Locale.US;
        java.util.Locale locale75 = java.util.Locale.getDefault();
        java.util.Locale locale76 = java.util.Locale.CHINA;
        java.lang.String str77 = locale76.getCountry();
        java.util.Locale[] localeArray78 = new java.util.Locale[] { locale46, locale47, locale48, locale49, locale52, locale54, locale57, locale61, locale65, locale70, locale71, locale73, locale74, locale75, locale76 };
        java.util.ArrayList<java.util.Locale> localeList79 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList79, localeArray78);
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList79);
        java.util.stream.Stream<java.util.Locale> localeStream82 = localeList81.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream83 = localeList81.stream();
        java.util.stream.Stream<java.util.Locale> localeStream84 = localeList81.parallelStream();
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList81);
        java.util.stream.Stream<java.util.Locale> localeStream86 = localeList81.parallelStream();
        boolean boolean87 = strSet2.containsAll((java.util.Collection<java.util.Locale>) localeList81);
        java.util.Iterator<java.lang.String> strItor88 = strSet2.iterator();
        java.util.Locale locale91 = new java.util.Locale("era", "2022-02-11T09:45:51.062");
        boolean boolean92 = strSet2.contains((java.lang.Object) "era");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u672c" + "'", str13, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str14, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u672c" + "'", str17, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str19, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u65e5\u672c" + "'", str22, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str23, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u65e5\u672c" + "'", str26, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u65e5\u672c" + "'", str31, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u65e5\u672c" + "'", str35, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + filteringMode44 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode44.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale52.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it");
        org.junit.Assert.assertEquals(locale57.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals(locale61.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u65e5\u672c" + "'", str63, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u65e5\u672c" + "'", str66, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale69.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "CN" + "'", str77, "CN");
        org.junit.Assert.assertNotNull(localeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(localeList81);
        org.junit.Assert.assertNotNull(localeStream82);
        org.junit.Assert.assertNotNull(localeStream83);
        org.junit.Assert.assertNotNull(localeStream84);
        org.junit.Assert.assertNotNull(localeList85);
        org.junit.Assert.assertNotNull(localeStream86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(strItor88);
        org.junit.Assert.assertEquals(locale91.toString(), "era_2022-02-11T09:45:51.062");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test05434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05434");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(0L);
        long long4 = dateTimeZone0.nextTransition((long) (-1));
        boolean boolean6 = dateTimeZone0.isStandardOffset((long) ' ');
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        java.time.ZoneId zoneId8 = timeZone7.toZoneId();
        java.lang.String str9 = timeZone7.getID();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = timeZone7.getOffset(0, 1969, 97, 51, 100, 2022);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
    }

    @Test
    public void test05435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05435");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.lang.String str3 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Set<java.lang.String> strSet8 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.String str15 = locale12.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str20 = locale17.getDisplayName(locale19);
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.lang.String str24 = locale21.getDisplayName();
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.util.Locale[] localeArray37 = new java.util.Locale[] { locale12, locale17, locale21, locale25, locale28, locale29, locale30, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList38);
        java.lang.String[] strArray42 = new java.lang.String[] { "1970-01-01T00:00:00.000" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.util.Locale.FilteringMode filteringMode45 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList43, filteringMode45);
        java.util.Locale locale47 = java.util.Locale.CHINA;
        java.util.Locale locale48 = java.util.Locale.CHINA;
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.util.Locale locale53 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale54 = locale53.stripExtensions();
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        java.util.Locale locale58 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale59 = locale58.stripExtensions();
        java.util.Locale locale62 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.lang.String str64 = locale62.getDisplayLanguage(locale63);
        java.util.Locale locale65 = java.util.Locale.JAPAN;
        java.util.Locale locale66 = java.util.Locale.JAPAN;
        java.lang.String str67 = locale65.getDisplayCountry(locale66);
        java.util.Locale locale70 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale71 = locale70.stripExtensions();
        java.util.Locale locale72 = java.util.Locale.getDefault();
        java.util.Locale locale74 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Locale locale75 = java.util.Locale.US;
        java.util.Locale locale76 = java.util.Locale.getDefault();
        java.util.Locale locale77 = java.util.Locale.CHINA;
        java.lang.String str78 = locale77.getCountry();
        java.util.Locale[] localeArray79 = new java.util.Locale[] { locale47, locale48, locale49, locale50, locale53, locale55, locale58, locale62, locale66, locale71, locale72, locale74, locale75, locale76, locale77 };
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList80);
        boolean boolean83 = strSet8.containsAll((java.util.Collection<java.util.Locale>) localeList82);
        java.util.List<java.util.Locale> localeList84 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList82);
        boolean boolean85 = strSet4.removeAll((java.util.Collection<java.util.Locale>) localeList82);
        java.util.stream.Stream<java.util.Locale> localeStream86 = localeList82.parallelStream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str15, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c" + "'", str18, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str20, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str24, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u672c" + "'", str27, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u65e5\u672c" + "'", str32, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + filteringMode45 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode45.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale53.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertEquals(locale58.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals(locale62.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u65e5\u672c" + "'", str64, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u65e5\u672c" + "'", str67, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale70.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "CN" + "'", str78, "CN");
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(localeList82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(localeList84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(localeStream86);
    }

    @Test
    public void test05436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05436");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYear(1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfEra(70);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, chronology12);
        int int14 = localDateTime13.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withMillisOfSecond(100);
        org.joda.time.Chronology chronology17 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DurationField durationField19 = chronology17.days();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        long long22 = dateTimeZone20.previousTransition(100L);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withMillisOfSecond((int) (byte) 0);
        int[] intArray28 = chronology17.get((org.joda.time.ReadablePartial) localDateTime24, (long) (-1));
        org.joda.time.DateTimeField dateTimeField29 = chronology17.millisOfDay();
        org.joda.time.DurationField durationField30 = chronology17.hours();
        org.joda.time.DurationField durationField31 = chronology17.weeks();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        long long38 = dateTimeZone34.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology39 = org.joda.time.chrono.ZonedChronology.getInstance(chronology17, dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology39.minuteOfDay();
        org.joda.time.DurationField durationField41 = zonedChronology39.halfdays();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology39.hourOfDay();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology39.weekyear();
        org.joda.time.DurationField durationField44 = zonedChronology39.centuries();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime8, (org.joda.time.Chronology) zonedChronology39);
        org.joda.time.LocalDateTime.Property property46 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime47 = property46.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test05437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05437");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale6 = new java.util.Locale("UTC");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale locale8 = builder4.build();
        java.util.Locale.Builder builder10 = builder4.setScript("");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder11.build();
        java.util.Locale.Builder builder14 = builder11.setVariant("");
        java.util.Locale.Builder builder16 = builder14.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder14.setVariant("59");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 59 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals(locale6.toString(), "utc");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "utc");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "utc");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test05438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05438");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        int int12 = property7.getMaximumTextLength(locale11);
        org.joda.time.LocalDateTime localDateTime13 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfCentury();
        java.lang.String str15 = property14.getAsShortText();
        org.joda.time.LocalDateTime localDateTime16 = property14.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime19 = property14.roundHalfFloorCopy();
        int int20 = property14.get();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "70" + "'", str15, "70");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 70 + "'", int20 == 70);
    }

    @Test
    public void test05439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05439");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusSeconds(4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.minusYears(86399999);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        java.lang.String str16 = localDateTime14.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = localDateTime14.toString(dateTimeFormatter17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime14.monthOfYear();
        org.joda.time.Interval interval20 = property19.toInterval();
        long long21 = property19.remainder();
        org.joda.time.LocalDateTime localDateTime22 = property19.roundHalfFloorCopy();
        java.lang.String str23 = property19.getAsShortText();
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        int int25 = property19.getMaximumTextLength(locale24);
        org.joda.time.LocalDateTime localDateTime27 = property19.addWrapFieldToCopy(100);
        org.joda.time.DurationField durationField28 = property19.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime29 = property19.withMinimumValue();
        boolean boolean30 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.plus(readableDuration32);
        int int34 = localDateTime29.getYear();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.plusMillis((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property37 = localDateTime29.hourOfDay();
        int int38 = property37.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u65e5\u672c" + "'", str16, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:00:00.000" + "'", str18, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test05440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05440");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1644572112969L);
        int int2 = localDateTime1.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
    }

    @Test
    public void test05441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05441");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMillisOfSecond(70);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusWeeks(33);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withDayOfYear(10);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test05442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05442");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.lang.String str11 = property7.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property7.getFieldType();
        org.joda.time.LocalDateTime localDateTime13 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekyear();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withPeriodAdded(readablePeriod15, 4);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMinuteOfHour(4);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.yearOfEra();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusWeeks((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime22.getFieldTypes();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
    }

    @Test
    public void test05443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05443");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = timeZone1.getOffset((long) (byte) 10);
        int int5 = timeZone1.getRawOffset();
        timeZone1.setRawOffset((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int14 = timeZone1.getOffset(35142965, 35116539, 28800000, 121, (int) '4', 44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test05444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05444");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        long long37 = zonedChronology28.add((long) 9, 35L, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology28.era();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        long long43 = zonedChronology28.add(readablePeriod40, 39420L, (int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 44L + "'", long37 == 44L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 39420L + "'", long43 == 39420L);
    }

    @Test
    public void test05445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05445");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int5 = timeZone3.getRawOffset();
        boolean boolean6 = timeZone1.hasSameRules(timeZone3);
        timeZone1.setRawOffset(0);
        java.lang.String str9 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4" + "'", str9, "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
    }

    @Test
    public void test05446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05446");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfEra(1970);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        int int19 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.plus(readableDuration21);
        int int23 = localDateTime4.size();
        org.joda.time.LocalDateTime.Property property24 = localDateTime4.millisOfSecond();
        org.joda.time.LocalDateTime.Property property25 = localDateTime4.centuryOfEra();
        org.joda.time.LocalDateTime.Property property26 = localDateTime4.dayOfWeek();
        java.lang.String str27 = localDateTime4.toString();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime4.plusDays(54);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T00:00:00.100" + "'", str27, "1970-01-01T00:00:00.100");
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test05447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05447");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(0L, chronology5);
        int int7 = localDateTime6.getWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withMillisOfSecond(100);
        org.joda.time.Chronology chronology10 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfCentury();
        org.joda.time.DurationField durationField12 = chronology10.days();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        long long15 = dateTimeZone13.previousTransition(100L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfSecond((int) (byte) 0);
        int[] intArray21 = chronology10.get((org.joda.time.ReadablePartial) localDateTime17, (long) (-1));
        org.joda.time.DateTimeField dateTimeField22 = chronology10.millisOfDay();
        org.joda.time.DurationField durationField23 = chronology10.hours();
        org.joda.time.DurationField durationField24 = chronology10.weeks();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        long long31 = dateTimeZone27.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology10, dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.yearOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology32.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime3, (org.joda.time.Chronology) zonedChronology32);
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology32.weekOfWeekyear();
        java.lang.String str38 = zonedChronology32.toString();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(0L, chronology40);
        int int42 = localDateTime41.getWeekyear();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withMillisOfSecond(100);
        org.joda.time.Chronology chronology45 = localDateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        long long49 = dateTimeZone47.previousTransition(0L);
        long long51 = dateTimeZone47.nextTransition((long) (-1));
        org.joda.time.Chronology chronology52 = chronology45.withZone(dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone47);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.hourOfDay();
        org.joda.time.DurationField durationField55 = property54.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime56 = property54.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withMonthOfYear(11);
        int[] intArray60 = zonedChronology32.get((org.joda.time.ReadablePartial) localDateTime58, (-61800969599425L));
        org.joda.time.DurationField durationField61 = zonedChronology32.months();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str38, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[11, 8, 10, 575]");
        org.junit.Assert.assertNotNull(durationField61);
    }

    @Test
    public void test05448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05448");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        java.lang.String str9 = localDateTime7.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = localDateTime7.toString(dateTimeFormatter10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        boolean boolean14 = dateTimeZone2.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone2);
        java.lang.String str16 = dateTimeZone2.getID();
        boolean boolean18 = dateTimeZone2.equals((java.lang.Object) "eng");
        java.lang.String str20 = dateTimeZone2.getName(1644572123792L);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(0L, chronology23);
        java.lang.String str26 = localDateTime24.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = localDateTime24.toString(dateTimeFormatter27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime24.monthOfYear();
        org.joda.time.Interval interval30 = property29.toInterval();
        long long31 = property29.remainder();
        org.joda.time.LocalDateTime localDateTime32 = property29.roundHalfFloorCopy();
        java.lang.String str33 = property29.getAsShortText();
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        int int35 = property29.getMaximumTextLength(locale34);
        org.joda.time.LocalDateTime localDateTime37 = property29.addWrapFieldToCopy(100);
        int int38 = localDateTime37.size();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(0L, chronology40);
        int int42 = localDateTime41.getWeekyear();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withMillisOfSecond(100);
        org.joda.time.Chronology chronology45 = localDateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfCentury();
        org.joda.time.DurationField durationField47 = chronology45.days();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        long long50 = dateTimeZone48.previousTransition(100L);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withMillisOfSecond((int) (byte) 0);
        int[] intArray56 = chronology45.get((org.joda.time.ReadablePartial) localDateTime52, (long) (-1));
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        long long59 = dateTimeZone57.previousTransition(0L);
        long long61 = dateTimeZone57.convertUTCToLocal(1L);
        long long63 = dateTimeZone57.convertUTCToLocal((long) (byte) 10);
        org.joda.time.DateTime dateTime64 = localDateTime52.toDateTime(dateTimeZone57);
        long long67 = dateTimeZone57.adjustOffset(4363010L, false);
        org.joda.time.DateTime dateTime68 = localDateTime37.toDateTime(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(45L, dateTimeZone57);
        long long71 = dateTimeZone2.getMillisKeepLocal(dateTimeZone57, 28529L);
        long long75 = dateTimeZone57.convertLocalToUTC(36060000L, false, 0L);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(1964L, dateTimeZone57);
        int int77 = localDateTime76.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c" + "'", str9, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.000" + "'", str11, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u65e5\u672c" + "'", str26, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01T00:00:00.000" + "'", str28, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u4e00\u6708" + "'", str33, "\u4e00\u6708");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10L + "'", long63 == 10L);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 4363010L + "'", long67 == 4363010L);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 28529L + "'", long71 == 28529L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 36060000L + "'", long75 == 36060000L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test05449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05449");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        boolean boolean10 = dateTimeZone9.isFixed();
        org.joda.time.Chronology chronology11 = chronology6.withZone(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(70);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 1970L);
        java.util.TimeZone timeZone16 = dateTimeZone13.toTimeZone();
        int int17 = timeZone16.getRawOffset();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(0L, chronology19);
        int int21 = localDateTime20.getWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withMillisOfSecond(100);
        org.joda.time.Chronology chronology24 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfCentury();
        org.joda.time.DurationField durationField26 = chronology24.eras();
        org.joda.time.Chronology chronology27 = chronology24.withUTC();
        java.lang.String str28 = chronology27.toString();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withSecondOfMinute(4);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        boolean boolean34 = dateTimeZone33.isFixed();
        long long37 = dateTimeZone33.adjustOffset((long) 'x', true);
        org.joda.time.DateTime dateTime38 = localDateTime29.toDateTime(dateTimeZone33);
        org.joda.time.tz.NameProvider nameProvider40 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str45 = nameProvider40.getShortName(locale42, "", "hi!");
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.lang.String str49 = nameProvider40.getName(locale46, "CN", "\u65e5\u672c");
        java.lang.String str50 = locale46.getISO3Language();
        java.lang.String str51 = dateTimeZone33.getShortName((long) (short) -1, locale46);
        java.util.TimeZone timeZone52 = dateTimeZone33.toTimeZone();
        boolean boolean53 = timeZone16.hasSameRules(timeZone52);
        boolean boolean54 = timeZone16.useDaylightTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1899L + "'", long15 == 1899L);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 70 + "'", int17 == 70);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[UTC]" + "'", str28, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 120L + "'", long37 == 120L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(nameProvider40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "deu" + "'", str50, "deu");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-00:00:00.001" + "'", str51, "-00:00:00.001");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test05450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05450");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.util.Locale locale4 = java.util.Locale.JAPAN;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale3.getDisplayName();
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.String str15 = locale12.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale3, locale8, locale12, locale16, locale19, locale20, locale21, locale24, locale25 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList29);
        java.lang.String[] strArray36 = new java.lang.String[] { "\u65e5\u6587\u65e5\u672c)", "CN", "\u4e2d\u6587", "\u65e5\u6587\u65e5\u672c)" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        boolean boolean39 = strSet37.isEmpty();
        java.util.Locale.FilteringMode filteringMode40 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet37, filteringMode40);
        java.util.Spliterator<java.lang.String> strSpliterator42 = strSet37.spliterator();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(0L, chronology44);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withMillisOfSecond(100);
        org.joda.time.Chronology chronology49 = localDateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.yearOfCentury();
        org.joda.time.DurationField durationField51 = chronology49.days();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        long long54 = dateTimeZone52.previousTransition(100L);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withMillisOfSecond((int) (byte) 0);
        int[] intArray60 = chronology49.get((org.joda.time.ReadablePartial) localDateTime56, (long) (-1));
        org.joda.time.DateTimeField dateTimeField61 = chronology49.millisOfDay();
        org.joda.time.DurationField durationField62 = chronology49.hours();
        org.joda.time.DurationField durationField63 = chronology49.weeks();
        java.util.TimeZone timeZone65 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        long long70 = dateTimeZone66.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology71 = org.joda.time.chrono.ZonedChronology.getInstance(chronology49, dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField72 = zonedChronology71.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField73 = zonedChronology71.millisOfSecond();
        org.joda.time.DurationField durationField74 = zonedChronology71.weekyears();
        org.joda.time.DateTimeField dateTimeField75 = zonedChronology71.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField76 = zonedChronology71.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField77 = zonedChronology71.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField78 = zonedChronology71.weekOfWeekyear();
        org.joda.time.Chronology chronology79 = zonedChronology71.withUTC();
        boolean boolean80 = strSet37.remove((java.lang.Object) zonedChronology71);
        org.joda.time.DurationField durationField81 = zonedChronology71.minutes();
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        long long85 = zonedChronology71.add(readablePeriod82, 0L, 0);
        org.joda.time.DateTimeField dateTimeField86 = zonedChronology71.hourOfHalfday();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u65e5\u672c" + "'", str5, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str6, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c" + "'", str9, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str11, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str15, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c" + "'", str18, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u672c" + "'", str27, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + filteringMode40 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode40.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strSpliterator42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L + "'", long54 == 100L);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 10L + "'", long70 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField86);
    }

    @Test
    public void test05451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05451");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, chronology11);
        java.lang.String str14 = localDateTime12.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime12.toString(dateTimeFormatter15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.monthOfYear();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.LocalDateTime localDateTime20 = property17.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property17.getFieldType();
        org.joda.time.LocalDateTime.Property property22 = localDateTime9.property(dateTimeFieldType21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        long long24 = property22.getDifferenceAsLong(readableInstant23);
        org.joda.time.LocalDateTime localDateTime26 = property22.setCopy(10);
        java.lang.String str27 = property22.toString();
        java.lang.String str28 = property22.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.000" + "'", str16, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-625L) + "'", long24 == (-625L));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[monthOfYear]" + "'", str27, "Property[monthOfYear]");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u4e00\u6708" + "'", str28, "\u4e00\u6708");
    }

    @Test
    public void test05452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05452");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        int int12 = property7.getMaximumTextLength(locale11);
        org.joda.time.LocalDateTime localDateTime13 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.monthOfYear();
        int int16 = localDateTime13.getYearOfCentury();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(0L, chronology18);
        java.lang.String str21 = localDateTime19.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = localDateTime19.toString(dateTimeFormatter22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime19.monthOfYear();
        org.joda.time.Interval interval25 = property24.toInterval();
        long long26 = property24.remainder();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundHalfFloorCopy();
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        int int29 = property24.getMaximumTextLength(locale28);
        java.util.Locale locale30 = java.util.Locale.CHINA;
        java.lang.String str31 = locale30.getCountry();
        int int32 = property24.getMaximumTextLength(locale30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, chronology34);
        int int36 = localDateTime35.getWeekyear();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        long long41 = dateTimeZone39.previousTransition(100L);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withMillisOfSecond((int) (byte) 0);
        int int46 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        long long50 = dateTimeZone47.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime52 = localDateTime35.toDateTime(dateTimeZone47);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(0L, chronology54);
        java.lang.String str57 = localDateTime55.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = null;
        java.lang.String str59 = localDateTime55.toString(dateTimeFormatter58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(0L, chronology61);
        java.lang.String str64 = localDateTime62.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = null;
        java.lang.String str66 = localDateTime62.toString(dateTimeFormatter65);
        org.joda.time.LocalDateTime.Property property67 = localDateTime62.monthOfYear();
        org.joda.time.Interval interval68 = property67.toInterval();
        long long69 = property67.remainder();
        org.joda.time.LocalDateTime localDateTime70 = property67.roundHalfFloorCopy();
        java.lang.String str71 = property67.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property67.getFieldType();
        int int73 = localDateTime55.get(dateTimeFieldType72);
        int int74 = dateTime52.get(dateTimeFieldType72);
        int int75 = property24.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime76 = localDateTime13.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Instant instant77 = dateTime52.toInstant();
        long long78 = instant77.getMillis();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 70 + "'", int16 == 70);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u65e5\u672c" + "'", str21, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.000" + "'", str23, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "CN" + "'", str31, "CN");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L + "'", long41 == 100L);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u65e5\u672c" + "'", str57, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01T00:00:00.000" + "'", str59, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u65e5\u672c" + "'", str64, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01T00:00:00.000" + "'", str66, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(localDateTime70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u4e00\u6708" + "'", str71, "\u4e00\u6708");
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
    }

    @Test
    public void test05453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05453");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setVariant("Property[yearOfEra]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: Property[yearOfEra] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test05454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05454");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(0L, chronology10);
        int int12 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusHours((int) ' ');
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(0L, chronology18);
        int int20 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withMillisOfSecond(100);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        java.lang.String str24 = localDateTime19.toString();
        int int25 = localDateTime19.getYearOfCentury();
        int int26 = localDateTime19.getCenturyOfEra();
        boolean boolean27 = localDateTime16.isEqual((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        boolean boolean30 = dateTimeZone28.isLocalDateTimeGap(localDateTime29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(0L, chronology32);
        java.lang.String str35 = localDateTime33.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = localDateTime33.toString(dateTimeFormatter36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime33.monthOfYear();
        org.joda.time.LocalDateTime localDateTime39 = property38.roundCeilingCopy();
        boolean boolean40 = dateTimeZone28.isLocalDateTimeGap(localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusMillis((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        long long45 = dateTimeZone43.previousTransition(100L);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withHourOfDay((int) (short) 0);
        int int50 = localDateTime49.getEra();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(0L, chronology54);
        java.lang.String str57 = localDateTime55.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = null;
        java.lang.String str59 = localDateTime55.toString(dateTimeFormatter58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime55.monthOfYear();
        org.joda.time.Interval interval61 = property60.toInterval();
        org.joda.time.LocalDateTime localDateTime63 = property60.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property60.getFieldType();
        org.joda.time.LocalDateTime.Property property65 = localDateTime52.property(dateTimeFieldType64);
        boolean boolean66 = localDateTime42.isSupported(dateTimeFieldType64);
        int int67 = localDateTime16.get(dateTimeFieldType64);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime16.withCenturyOfEra(7);
        boolean boolean70 = localDateTime6.isAfter((org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.DurationFieldType durationFieldType71 = null;
        boolean boolean72 = localDateTime69.isSupported(durationFieldType71);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.000" + "'", str24, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 70 + "'", int25 == 70);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 19 + "'", int26 == 19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u65e5\u672c" + "'", str35, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01T00:00:00.000" + "'", str37, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 100L + "'", long45 == 100L);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u65e5\u672c" + "'", str57, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01T00:00:00.000" + "'", str59, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test05455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05455");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(0L);
        long long4 = dateTimeZone0.nextTransition((long) (-1));
        boolean boolean6 = dateTimeZone0.isStandardOffset((long) ' ');
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        java.time.ZoneId zoneId8 = timeZone7.toZoneId();
        java.time.ZoneId zoneId9 = timeZone7.toZoneId();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone(zoneId9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone(zoneId9);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNotNull(zoneId9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
    }

    @Test
    public void test05456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05456");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology28.minutes();
        org.joda.time.DurationField durationField35 = zonedChronology28.halfdays();
        org.joda.time.DateTimeZone dateTimeZone36 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.weekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test05457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05457");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-11T09:46:24.767");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:46:24.767");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05458");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.withTime(1, (int) (byte) 0, (int) (short) 1, 4);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(0L, chronology24);
        int int26 = localDateTime25.getWeekyear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withMillisOfSecond(100);
        org.joda.time.Chronology chronology29 = localDateTime25.getChronology();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withDurationAdded(readableDuration30, (int) (short) 0);
        boolean boolean33 = localDateTime22.isAfter((org.joda.time.ReadablePartial) localDateTime25);
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("2022-02-11T09:43:35.370");
        java.util.Locale locale37 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(locale37);
        java.lang.String str39 = locale36.getDisplayName(locale37);
        java.lang.String str40 = localDateTime25.toString("\u4e00\u6708", locale36);
        boolean boolean41 = locale36.hasExtensions();
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.lang.String str43 = locale42.getDisplayCountry();
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale42.getDisplayLanguage(locale44);
        java.lang.String str46 = locale36.getDisplayScript(locale42);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u4e00\u6708" + "'", str40, "\u4e00\u6708");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u65e5\u672c" + "'", str43, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Japanisch" + "'", str45, "Japanisch");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test05459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05459");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = timeZone1.getOffset((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone.setDefault(timeZone1);
        java.lang.String str7 = timeZone1.getID();
        int int9 = timeZone1.getOffset((-625L));
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, chronology11);
        int int13 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withYearOfEra(1970);
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(0L, chronology18);
        int int20 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYearOfEra(1970);
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        int int24 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime23);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean27 = dateTime23.equals((java.lang.Object) timeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        timeZone26.setRawOffset((int) (short) 0);
        java.time.ZoneId zoneId31 = timeZone26.toZoneId();
        boolean boolean32 = timeZone1.hasSameRules(timeZone26);
        java.util.TimeZone.setDefault(timeZone1);
        java.time.ZoneId zoneId34 = timeZone1.toZoneId();
        java.util.Locale locale39 = new java.util.Locale("2022-02-11T09:43:35.370", "2022-02-11T09:43:35.370");
        java.util.Locale locale40 = locale39.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = timeZone1.getDisplayName(false, 7, locale39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT" + "'", str7, "GMT");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(zoneId31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(zoneId34);
        org.junit.Assert.assertEquals(locale39.toString(), "2022-02-11t09:43:35.370_2022-02-11T09:43:35.370");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "2022-02-11t09:43:35.370_2022-02-11T09:43:35.370");
    }

    @Test
    public void test05460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05460");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.util.Locale locale4 = java.util.Locale.JAPAN;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale3.getDisplayName();
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.String str15 = locale12.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale3, locale8, locale12, locale16, locale19, locale20, locale21, locale24, locale25 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList29);
        java.util.Collection<java.lang.String> strCollection32 = null;
        java.lang.String str33 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection32);
        java.util.Locale locale34 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale34);
        java.lang.String str36 = locale34.getLanguage();
        java.util.Set<java.lang.String> strSet37 = locale34.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator38 = strSet37.spliterator();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(0L, chronology40);
        java.lang.String str43 = localDateTime41.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = localDateTime41.toString(dateTimeFormatter44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime41.monthOfYear();
        org.joda.time.Interval interval47 = property46.toInterval();
        org.joda.time.LocalDateTime localDateTime49 = property46.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property46.getFieldType();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(0L, chronology52);
        java.util.Locale locale54 = java.util.Locale.US;
        boolean boolean55 = localDateTime53.equals((java.lang.Object) locale54);
        java.lang.String str56 = locale54.toLanguageTag();
        int int57 = property46.getMaximumTextLength(locale54);
        boolean boolean58 = strSet37.remove((java.lang.Object) locale54);
        strSet37.clear();
        java.lang.String str60 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet37);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        long long63 = dateTimeZone61.previousTransition(100L);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(0L, chronology67);
        int int69 = localDateTime68.getWeekyear();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.withYearOfEra(1970);
        org.joda.time.DateTime dateTime72 = localDateTime71.toDateTime();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime(0L, chronology74);
        int int76 = localDateTime75.getWeekyear();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime75.withYearOfEra(1970);
        org.joda.time.DateTime dateTime79 = localDateTime78.toDateTime();
        int int80 = dateTime72.compareTo((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTime dateTime81 = localDateTime65.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.LocalDateTime localDateTime83 = localDateTime65.plus(readableDuration82);
        int int84 = localDateTime65.size();
        org.joda.time.LocalDateTime.Property property85 = localDateTime65.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime87 = property85.addWrapFieldToCopy(0);
        org.joda.time.tz.Provider provider88 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet89 = provider88.getAvailableIDs();
        boolean boolean90 = property85.equals((java.lang.Object) strSet89);
        java.util.List<java.lang.String> strList91 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet89);
        java.util.Spliterator<java.lang.String> strSpliterator92 = strSet89.spliterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u65e5\u672c" + "'", str5, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str6, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c" + "'", str9, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str11, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str15, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c" + "'", str18, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u672c" + "'", str27, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ja" + "'", str36, "ja");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(strSpliterator38);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u65e5\u672c" + "'", str43, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01T00:00:00.000" + "'", str45, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "en-US" + "'", str56, "en-US");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1970 + "'", int69 == 1970);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1970 + "'", int76 == 1970);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(provider88);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strList91);
        org.junit.Assert.assertNotNull(strSpliterator92);
    }

    @Test
    public void test05461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05461");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.weekOfWeekyear();
        org.joda.time.Chronology chronology36 = zonedChronology28.withUTC();
        org.joda.time.DurationField durationField37 = zonedChronology28.minutes();
        long long41 = zonedChronology28.add(27236744L, 1952L, 366);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 27951176L + "'", long41 == 27951176L);
    }

    @Test
    public void test05462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05462");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("it-it");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withMillisOfSecond(100);
        org.joda.time.Chronology chronology11 = localDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.days();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long16 = dateTimeZone14.previousTransition(100L);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfSecond((int) (byte) 0);
        int[] intArray22 = chronology11.get((org.joda.time.ReadablePartial) localDateTime18, (long) (-1));
        org.joda.time.DateTimeField dateTimeField23 = chronology11.millisOfDay();
        org.joda.time.DurationField durationField24 = chronology11.hours();
        org.joda.time.DurationField durationField25 = chronology11.weeks();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long32 = dateTimeZone28.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology33 = org.joda.time.chrono.ZonedChronology.getInstance(chronology11, dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology33.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology33.millisOfSecond();
        org.joda.time.DurationField durationField36 = zonedChronology33.halfdays();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology33.minuteOfHour();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(0L, chronology39);
        java.util.Locale locale41 = java.util.Locale.US;
        boolean boolean42 = localDateTime40.equals((java.lang.Object) locale41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withYearOfEra((int) (byte) 1);
        int int45 = localDateTime44.getEra();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.plusSeconds((int) '4');
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime44.minusDays(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = localDateTime51.getFieldType(0);
        long long55 = zonedChronology33.set((org.joda.time.ReadablePartial) localDateTime51, (long) (short) 1);
        org.joda.time.DateTimeField dateTimeField56 = zonedChronology33.clockhourOfHalfday();
        boolean boolean57 = languageRange1.equals((java.lang.Object) dateTimeField56);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "it-it" + "'", str3, "it-it");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-62136028800000L) + "'", long55 == (-62136028800000L));
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test05463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05463");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfSecond(0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        long long19 = dateTimeZone17.previousTransition(100L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(0L, chronology23);
        int int25 = localDateTime24.getWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withYearOfEra(1970);
        org.joda.time.DateTime dateTime28 = localDateTime27.toDateTime();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(0L, chronology30);
        int int32 = localDateTime31.getWeekyear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withYearOfEra(1970);
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        int int36 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime37 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime21.plus(readableDuration38);
        boolean boolean40 = localDateTime14.isAfter((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime14.minusDays(2022);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.minusMonths((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.minus(readableDuration47);
        int int49 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        boolean boolean51 = localDateTime48.equals((java.lang.Object) "\u65e5\u6587\u65e5\u672c)");
        int int52 = localDateTime48.getWeekyear();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(0L, chronology54);
        int int56 = localDateTime55.getWeekyear();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withMillisOfSecond(100);
        org.joda.time.Chronology chronology59 = localDateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.yearOfCentury();
        org.joda.time.DurationField durationField61 = chronology59.days();
        org.joda.time.DateTimeField dateTimeField62 = chronology59.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.UTC;
        long long65 = dateTimeZone63.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(dateTimeZone63);
        int[] intArray68 = chronology59.get((org.joda.time.ReadablePartial) localDateTime66, (long) 999);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.plusHours((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime48.withFields((org.joda.time.ReadablePartial) localDateTime70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime73 = localDateTime48.withDayOfWeek(35199563);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35199563 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1964 + "'", int52 == 1964);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L + "'", long65 == 100L);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1970, 1, 1, 999]");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime71);
    }

    @Test
    public void test05464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05464");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology6.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology6.yearOfCentury();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test05465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05465");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        long long35 = dateTimeZone33.previousTransition(0L);
        long long37 = dateTimeZone33.nextTransition((long) (-1));
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone33);
        long long40 = dateTimeZone33.convertUTCToLocal((long) 20);
        org.joda.time.chrono.ZonedChronology zonedChronology41 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology28, dateTimeZone33);
        org.joda.time.DurationField durationField42 = zonedChronology28.halfdays();
        long long48 = zonedChronology28.getDateTimeMillis((long) '4', (int) (byte) 10, 5, 59, (int) 'x');
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology28.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology28);
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology28.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 20L + "'", long40 == 20L);
        org.junit.Assert.assertNotNull(zonedChronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 36359120L + "'", long48 == 36359120L);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test05466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05466");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYear(1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundCeilingCopy();
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale11);
        java.util.Locale locale15 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.lang.String str18 = locale11.getDisplayName(locale15);
        java.util.Locale locale19 = java.util.Locale.ITALY;
        java.lang.String str20 = locale15.getDisplayScript(locale19);
        int int21 = property9.getMaximumTextLength(locale19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(0L, chronology23);
        int int25 = localDateTime24.getWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone28.previousTransition(100L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withMillisOfSecond((int) (byte) 0);
        int int35 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        int int36 = localDateTime32.getDayOfYear();
        org.joda.time.LocalDateTime.Property property37 = localDateTime32.dayOfYear();
        java.lang.String str38 = property37.getAsShortText();
        java.util.Locale locale42 = new java.util.Locale("GMT", "Jan", "2022-02-11T09:43:35.370");
        java.lang.String str43 = locale42.getDisplayLanguage();
        java.lang.String str44 = locale42.getVariant();
        java.lang.String str45 = locale42.getDisplayCountry();
        int int46 = property37.getMaximumShortTextLength(locale42);
        java.util.Set<java.lang.String> strSet47 = locale42.getUnicodeLocaleAttributes();
        java.lang.String str48 = locale19.getDisplayLanguage(locale42);
        java.util.Locale locale51 = new java.util.Locale("2022-02-11T09:46:09.637", "Freitag");
        java.lang.String str52 = locale19.getDisplayVariant(locale51);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale15.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u672c" + "'", str17, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Japanese (Japan)" + "'", str18, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertEquals(locale42.toString(), "gmt_JAN_2022-02-11T09:43:35.370");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "gmt" + "'", str43, "gmt");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-11T09:43:35.370" + "'", str44, "2022-02-11T09:43:35.370");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "JAN" + "'", str45, "JAN");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Italian" + "'", str48, "Italian");
        org.junit.Assert.assertEquals(locale51.toString(), "2022-02-11t09:46:09.637_FREITAG");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test05467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05467");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology28);
        org.joda.time.DurationField durationField34 = zonedChronology28.millis();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test05468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05468");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        long long32 = dateTimeZone30.previousTransition(100L);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withYearOfEra(1970);
        org.joda.time.DateTime dateTime41 = localDateTime40.toDateTime();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(0L, chronology43);
        int int45 = localDateTime44.getWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withYearOfEra(1970);
        org.joda.time.DateTime dateTime48 = localDateTime47.toDateTime();
        int int49 = dateTime41.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime50 = localDateTime34.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime34.plus(readableDuration51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withPeriodAdded(readablePeriod53, (int) (byte) 10);
        int[] intArray57 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime52, (long) (-1));
        java.lang.String str58 = zonedChronology28.toString();
        org.joda.time.DateTimeZone dateTimeZone59 = zonedChronology28.getZone();
        int int61 = dateTimeZone59.getStandardOffset(36060043L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L + "'", long32 == 100L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str58, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test05469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05469");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfMonth(10);
        int int10 = localDateTime7.getEra();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.dayOfWeek();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleKeys();
        java.lang.String str15 = property11.getAsText(locale12);
        java.lang.String str16 = property11.getName();
        org.joda.time.DurationField durationField17 = property11.getDurationField();
        org.joda.time.LocalDateTime localDateTime18 = property11.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "venerd\354" + "'", str15, "venerd\354");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "dayOfWeek" + "'", str16, "dayOfWeek");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test05470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05470");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusSeconds(2022);
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property14 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy(1596097L);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusYears(32);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test05471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05471");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.minuteOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology32.centuries();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.Chronology chronology37 = zonedChronology32.withZone(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology40 = zonedChronology32.withZone(dateTimeZone39);
        org.joda.time.DurationField durationField41 = zonedChronology32.months();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology32.era();
        org.joda.time.DurationField durationField43 = zonedChronology32.weekyears();
        long long47 = zonedChronology32.add(52100L, (long) 20, (-1970));
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology32.minuteOfHour();
        org.joda.time.DurationField durationField49 = zonedChronology32.days();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 12700L + "'", long47 == 12700L);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
    }

    @Test
    public void test05472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05472");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 4);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYear(100);
        int int4 = localDateTime1.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime1);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test05473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05473");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = timeZone1.getOffset((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone.setDefault(timeZone1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(0L, chronology15);
        int int17 = localDateTime16.getWeekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withYearOfEra(1970);
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        int int21 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime20);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean24 = dateTime20.equals((java.lang.Object) timeZone23);
        boolean boolean25 = timeZone1.hasSameRules(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.Object obj27 = timeZone23.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test05474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05474");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeZone dateTimeZone31 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology28);
        org.joda.time.DurationField durationField35 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test05475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05475");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeZone dateTimeZone31 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.weekOfWeekyear();
        org.joda.time.DurationField durationField35 = zonedChronology28.years();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        long long39 = zonedChronology28.add(readablePeriod36, (long) 1970, 0);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray43 = zonedChronology28.get(readablePeriod40, 52100L, 92L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1970L + "'", long39 == 1970L);
    }

    @Test
    public void test05476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05476");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.secondOfDay();
        org.joda.time.DurationField durationField10 = chronology6.weeks();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = chronology6.getDateTimeMillis(1644572148897L, 35142965, (int) (byte) 10, 81976385, 366);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35142965 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test05477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05477");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.minuteOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology32.centuries();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withYearOfEra(1970);
        org.joda.time.DateTime dateTime41 = localDateTime40.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        long long44 = dateTimeZone42.previousTransition(100L);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(0L, chronology48);
        int int50 = localDateTime49.getWeekyear();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withYearOfEra(1970);
        org.joda.time.DateTime dateTime53 = localDateTime52.toDateTime();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(0L, chronology55);
        int int57 = localDateTime56.getWeekyear();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withYearOfEra(1970);
        org.joda.time.DateTime dateTime60 = localDateTime59.toDateTime();
        int int61 = dateTime53.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime62 = localDateTime46.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean63 = dateTime41.isEqual((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Chronology chronology64 = dateTime53.getChronology();
        boolean boolean65 = zonedChronology32.equals((java.lang.Object) chronology64);
        org.joda.time.DurationField durationField66 = zonedChronology32.minutes();
        org.joda.time.DateTimeField dateTimeField67 = zonedChronology32.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField68 = zonedChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField69 = zonedChronology32.yearOfCentury();
        java.lang.String str70 = zonedChronology32.toString();
        org.joda.time.DateTimeField dateTimeField71 = zonedChronology32.centuryOfEra();
        org.joda.time.DurationField durationField72 = zonedChronology32.minutes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L + "'", long44 == 100L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str70, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
    }

    @Test
    public void test05478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05478");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusSeconds(2022);
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property14 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy(457L);
        org.joda.time.LocalDateTime localDateTime17 = property14.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(3600000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3600000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test05479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05479");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMillisOfSecond(100);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DurationField durationField43 = chronology41.millis();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '#', chronology41);
        int[] intArray47 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime45, (long) 1);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology28.era();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(0L, chronology51);
        java.lang.String str54 = localDateTime52.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = localDateTime52.toString(dateTimeFormatter55);
        org.joda.time.LocalDateTime.Property property57 = localDateTime52.monthOfYear();
        org.joda.time.LocalDateTime localDateTime58 = property57.roundCeilingCopy();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minus(readableDuration59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusMonths(1970);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.weekyear();
        org.joda.time.LocalDateTime.Property property64 = localDateTime62.hourOfDay();
        long long66 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime62, (long) 1900);
        org.joda.time.DateTimeField dateTimeField67 = zonedChronology28.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1970, 1, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u65e5\u672c" + "'", str54, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01T00:00:00.000" + "'", str56, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 5180457600000L + "'", long66 == 5180457600000L);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test05480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05480");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfHalfday();
        java.lang.String str35 = zonedChronology28.toString();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        long long39 = dateTimeZone37.nextTransition(4363010L);
        org.joda.time.Chronology chronology40 = zonedChronology28.withZone(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone41 = zonedChronology28.getZone();
        org.joda.time.DurationField durationField42 = zonedChronology28.millis();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology28.yearOfCentury();
        long long49 = zonedChronology28.add(613608L, (long) 7, 31);
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology28.hourOfDay();
        org.joda.time.DurationField durationField51 = zonedChronology28.halfdays();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str35, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 4363010L + "'", long39 == 4363010L);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 613825L + "'", long49 == 613825L);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test05481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05481");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra((int) (short) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("Ora media di Greenwich");
        java.lang.String str20 = property17.getAsShortText(locale19);
        java.lang.String str21 = property17.getAsShortText();
        org.joda.time.Interval interval22 = property17.toInterval();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(interval22);
    }

    @Test
    public void test05482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05482");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property7.getFieldType();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        java.util.Locale locale15 = java.util.Locale.US;
        boolean boolean16 = localDateTime14.equals((java.lang.Object) locale15);
        java.lang.String str17 = locale15.toLanguageTag();
        int int18 = property7.getMaximumTextLength(locale15);
        org.joda.time.LocalDateTime localDateTime19 = property7.roundFloorCopy();
        int int20 = property7.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime21 = property7.withMaximumValue();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en-US" + "'", str17, "en-US");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test05483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05483");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ITALY;
        boolean boolean2 = locale1.hasExtensions();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleKeys();
        java.lang.String str6 = nameProvider0.getShortName(locale1, "\u65e5\u6587\u65e5\u672c)", "2022-02-11T09:43:35.370");
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.lang.String str10 = locale8.getDisplayScript();
        java.lang.String str13 = nameProvider0.getShortName(locale8, "KOR", "US");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c" + "'", str9, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test05484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05484");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((-1), 91, 1975, 35162287, 43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35162287 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05485");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        int int12 = property7.getMaximumTextLength(locale11);
        org.joda.time.LocalDateTime localDateTime13 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, chronology17);
        int int19 = localDateTime18.getWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withMillisOfSecond(100);
        org.joda.time.Chronology chronology22 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        org.joda.time.DurationField durationField24 = chronology22.eras();
        org.joda.time.Chronology chronology25 = chronology22.withUTC();
        java.lang.String str26 = chronology25.toString();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 4);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withYear(100);
        int int32 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = localDateTime27.toString(dateTimeFormatter33);
        boolean boolean35 = localDateTime13.isAfter((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime27.withPeriodAdded(readablePeriod36, 45);
        int int39 = localDateTime27.getSecondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime27.minus(readablePeriod40);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-11T09:48:33.711" + "'", str34, "2022-02-11T09:48:33.711");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 33 + "'", int39 == 33);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test05486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05486");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test05487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05487");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra((int) (byte) 1);
        int int7 = localDateTime2.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minusMillis(1939);
        int int10 = localDateTime2.getHourOfDay();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 19 + "'", int7 == 19);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test05488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05488");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(0L, chronology4);
        java.lang.String str7 = localDateTime5.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = localDateTime5.toString(dateTimeFormatter8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.monthOfYear();
        int int11 = localDateTime5.getMinuteOfHour();
        boolean boolean12 = dateTimeZone1.isLocalDateTimeGap(localDateTime5);
        java.lang.String str14 = localDateTime5.toString("-00:00:00.001");
        java.util.Locale locale17 = new java.util.Locale("44");
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale17.getDisplayScript(locale19);
        java.lang.String str22 = localDateTime5.toString("\u7f8e\u570b", locale19);
        org.joda.time.LocalDateTime.Property property23 = localDateTime5.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u65e5\u672c" + "'", str7, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.000" + "'", str9, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-00:00:00.001" + "'", str14, "-00:00:00.001");
        org.junit.Assert.assertEquals(locale17.toString(), "44");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u7f8e\u570b" + "'", str22, "\u7f8e\u570b");
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test05489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05489");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str2 = locale0.getExtension('a');
        java.lang.String str3 = locale0.getDisplayVariant();
        java.util.Locale locale4 = java.util.Locale.JAPAN;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale4.getDisplayName();
        java.lang.String str7 = locale4.getVariant();
        java.lang.String str8 = locale4.getDisplayScript();
        java.lang.String str9 = locale0.getDisplayCountry(locale4);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale.Builder builder13 = builder10.setLanguage("");
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale16 = new java.util.Locale("UTC");
        java.util.Locale.Builder builder17 = builder14.setLocale(locale16);
        java.util.Locale locale18 = builder14.build();
        java.util.Locale.Builder builder20 = builder14.setScript("");
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        java.util.Locale locale24 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.lang.String str26 = locale24.getDisplayLanguage(locale25);
        java.util.Locale locale29 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.lang.String str30 = locale25.getDisplayScript(locale29);
        java.lang.String str31 = locale25.getScript();
        java.util.Locale.Builder builder32 = builder20.setLocale(locale25);
        java.util.Locale locale33 = builder20.build();
        java.lang.String str34 = locale4.getDisplayName(locale33);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str6, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u30ab\u30ca\u30c0" + "'", str9, "\u30ab\u30ca\u30c0");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals(locale16.toString(), "utc");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "utc");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals(locale24.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u65e5\u672c" + "'", str26, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale29.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Japanese (Japan)" + "'", str34, "Japanese (Japan)");
    }

    @Test
    public void test05490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05490");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        long long3 = dateTimeZone1.convertUTCToLocal((long) '4');
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMillisOfSecond(0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone15.previousTransition(100L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(0L, chronology21);
        int int23 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withYearOfEra(1970);
        org.joda.time.DateTime dateTime26 = localDateTime25.toDateTime();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(0L, chronology28);
        int int30 = localDateTime29.getWeekyear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withYearOfEra(1970);
        org.joda.time.DateTime dateTime33 = localDateTime32.toDateTime();
        int int34 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = localDateTime19.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime19.plus(readableDuration36);
        boolean boolean38 = localDateTime12.isAfter((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime12.minusDays(2022);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.minusMonths((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType45 = null;
        boolean boolean46 = localDateTime40.isSupported(durationFieldType45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime40.millisOfDay();
        org.joda.time.LocalDateTime localDateTime48 = property47.withMaximumValue();
        boolean boolean49 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime48.minuteOfHour();
        int int51 = property50.getLeapAmount();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 3600052L + "'", long3 == 3600052L);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test05491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05491");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        int int14 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime13);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean17 = dateTime13.equals((java.lang.Object) timeZone16);
        java.time.ZoneId zoneId18 = timeZone16.toZoneId();
        timeZone16.setRawOffset(9);
        boolean boolean21 = timeZone16.observesDaylightTime();
        java.util.Locale locale26 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.lang.String str27 = locale26.getDisplayVariant();
        java.lang.String str28 = locale26.getVariant();
        java.lang.String str29 = locale26.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = timeZone16.getDisplayName(true, 71, locale26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 71");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(zoneId18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals(locale26.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u65e5\u672c" + "'", str29, "\u65e5\u672c");
    }

    @Test
    public void test05492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05492");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMillisOfSecond(100);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DurationField durationField43 = chronology41.millis();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '#', chronology41);
        int[] intArray47 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime45, (long) 1);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology28.hourOfHalfday();
        org.joda.time.DurationField durationField50 = zonedChronology28.centuries();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray53 = zonedChronology28.get(readablePeriod51, 1013456915574L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1970, 1, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
    }

    @Test
    public void test05493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05493");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 2022);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(0L, chronology4);
        java.lang.String str7 = localDateTime5.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = localDateTime5.toString(dateTimeFormatter8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.monthOfYear();
        org.joda.time.Interval interval11 = property10.toInterval();
        long long12 = property10.remainder();
        org.joda.time.LocalDateTime localDateTime13 = property10.roundHalfFloorCopy();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        int int15 = property10.getMaximumTextLength(locale14);
        org.joda.time.LocalDateTime localDateTime16 = property10.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfCentury();
        java.lang.String str18 = property17.getAsShortText();
        org.joda.time.LocalDateTime localDateTime19 = property17.withMinimumValue();
        int int20 = localDateTime19.getYear();
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(0L, chronology23);
        java.lang.String str26 = localDateTime24.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = localDateTime24.toString(dateTimeFormatter27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime24.monthOfYear();
        org.joda.time.Interval interval30 = property29.toInterval();
        org.joda.time.LocalDateTime localDateTime32 = property29.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property29.getFieldType();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(0L, chronology35);
        java.util.Locale locale37 = java.util.Locale.US;
        boolean boolean38 = localDateTime36.equals((java.lang.Object) locale37);
        java.lang.String str39 = locale37.toLanguageTag();
        int int40 = property29.getMaximumTextLength(locale37);
        org.joda.time.LocalDateTime localDateTime41 = property29.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime42 = property29.roundFloorCopy();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(0L, chronology44);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        long long51 = dateTimeZone49.previousTransition(100L);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withMillisOfSecond((int) (byte) 0);
        int int56 = localDateTime45.compareTo((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        long long60 = dateTimeZone57.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(dateTimeZone57);
        org.joda.time.DateTime dateTime62 = localDateTime45.toDateTime(dateTimeZone57);
        int int63 = property29.compareTo((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.LocalDateTime localDateTime64 = property29.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = property29.getFieldType();
        boolean boolean66 = dateTime21.isSupported(dateTimeFieldType65);
        boolean boolean67 = localDateTime1.isSupported(dateTimeFieldType65);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime69 = localDateTime1.withMonthOfYear(51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u65e5\u672c" + "'", str7, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.000" + "'", str9, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "70" + "'", str18, "70");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1900 + "'", int20 == 1900);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u65e5\u672c" + "'", str26, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01T00:00:00.000" + "'", str28, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "en-US" + "'", str39, "en-US");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L + "'", long51 == 100L);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test05494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05494");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        long long37 = zonedChronology28.add((long) 9, 35L, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField40 = zonedChronology28.days();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 44L + "'", long37 == 44L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test05495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05495");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfSecond((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime6.getFields();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withMillisOfSecond(100);
        org.joda.time.Chronology chronology14 = localDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.days();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        long long19 = dateTimeZone17.previousTransition(100L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMillisOfSecond((int) (byte) 0);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePartial) localDateTime21, (long) (-1));
        org.joda.time.DateTimeField dateTimeField26 = chronology14.millisOfDay();
        org.joda.time.DurationField durationField27 = chronology14.hours();
        org.joda.time.DurationField durationField28 = chronology14.weeks();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        long long35 = dateTimeZone31.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology36 = org.joda.time.chrono.ZonedChronology.getInstance(chronology14, dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology36.halfdayOfDay();
        long long41 = zonedChronology36.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology36.clockhourOfHalfday();
        java.lang.String str43 = zonedChronology36.toString();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        long long47 = dateTimeZone45.nextTransition(4363010L);
        org.joda.time.Chronology chronology48 = zonedChronology36.withZone(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone49 = zonedChronology36.getZone();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(0L, chronology51);
        int int53 = localDateTime52.getWeekyear();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withMillisOfSecond(100);
        org.joda.time.Chronology chronology56 = localDateTime52.getChronology();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime52.withDurationAdded(readableDuration57, (int) (short) 0);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.monthOfYear();
        boolean boolean61 = dateTimeZone49.equals((java.lang.Object) localDateTime59);
        java.util.TimeZone timeZone62 = dateTimeZone49.toTimeZone();
        java.util.TimeZone.setDefault(timeZone62);
        java.time.ZoneId zoneId64 = timeZone62.toZoneId();
        boolean boolean65 = localDateTime6.equals((java.lang.Object) zoneId64);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-62167219199980L) + "'", long41 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str43, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 4363010L + "'", long47 == 4363010L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(zoneId64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test05496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05496");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone32 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.year();
        long long39 = zonedChronology28.add((long) 7, 999L, 23);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology28.clockhourOfHalfday();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 22984L + "'", long39 == 22984L);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test05497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05497");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.lang.String str11 = property7.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property7.getFieldType();
        org.joda.time.LocalDateTime localDateTime13 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = property14.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusMinutes((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.weekyear();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test05498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05498");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDayOfMonth((int) (short) 10);
        int int9 = localDateTime8.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withMinuteOfHour(19);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays(2022);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType15 = localDateTime11.getFieldType(53);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 53");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test05499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05499");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        java.lang.String str12 = localDateTime10.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = localDateTime10.toString(dateTimeFormatter13);
        long long16 = chronology6.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime10.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime10.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property20 = localDateTime10.yearOfCentury();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u672c" + "'", str12, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.000" + "'", str14, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test05500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05500");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone10.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone10);
        int[] intArray15 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) 999);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusHours((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        java.lang.String str20 = property18.getName();
        org.joda.time.DateTimeField dateTimeField21 = property18.getField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1, 999]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "monthOfYear" + "'", str20, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeField21);
    }
}

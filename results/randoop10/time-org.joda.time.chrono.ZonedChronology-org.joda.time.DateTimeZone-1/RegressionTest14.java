import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest14 {

    public static boolean debug = false;

    @Test
    public void test07001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07001");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.hourOfHalfday();
        java.lang.String str35 = zonedChronology28.toString();
        org.joda.time.DurationField durationField36 = zonedChronology28.centuries();
        long long40 = zonedChronology28.add(44795L, 28800064L, 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str35, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 57644923L + "'", long40 == 57644923L);
    }

    @Test
    public void test07002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07002");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(0L, chronology21);
        int int23 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withYearOfEra(1970);
        org.joda.time.DateTime dateTime26 = localDateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        long long29 = dateTimeZone27.previousTransition(100L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        int int35 = localDateTime34.getWeekyear();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withYearOfEra(1970);
        org.joda.time.DateTime dateTime38 = localDateTime37.toDateTime();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(0L, chronology40);
        int int42 = localDateTime41.getWeekyear();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withYearOfEra(1970);
        org.joda.time.DateTime dateTime45 = localDateTime44.toDateTime();
        int int46 = dateTime38.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = localDateTime31.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean48 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology49 = dateTime38.getChronology();
        int int50 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(0L, chronology52);
        int int54 = localDateTime53.getWeekyear();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.millisOfSecond();
        org.joda.time.LocalDateTime.Property property58 = localDateTime56.year();
        java.util.Locale locale59 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale59);
        java.util.Locale locale63 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale64 = java.util.Locale.ENGLISH;
        java.lang.String str65 = locale63.getDisplayLanguage(locale64);
        java.lang.String str66 = locale59.getDisplayName(locale63);
        java.lang.String str67 = property58.getAsShortText(locale63);
        java.util.Set<java.lang.String> strSet68 = locale63.getUnicodeLocaleKeys();
        boolean boolean69 = dateTime19.equals((java.lang.Object) strSet68);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(0L, chronology71);
        java.lang.String str74 = localDateTime72.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = null;
        java.lang.String str76 = localDateTime72.toString(dateTimeFormatter75);
        org.joda.time.LocalDateTime.Property property77 = localDateTime72.monthOfYear();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime72.withMillisOfDay(100);
        org.joda.time.LocalDateTime.Property property80 = localDateTime72.centuryOfEra();
        int int81 = property80.get();
        org.joda.time.LocalDateTime localDateTime82 = property80.roundHalfCeilingCopy();
        boolean boolean83 = strSet68.equals((java.lang.Object) localDateTime82);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime85 = localDateTime82.withMonthOfYear(3600000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3600000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L + "'", long29 == 100L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(locale59);
// flaky:         org.junit.Assert.assertEquals(locale59.toString(), "en");
        org.junit.Assert.assertEquals(locale63.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u65e5\u672c" + "'", str65, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "English" + "'", str66, "English");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1970" + "'", str67, "1970");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u65e5\u672c" + "'", str74, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01T00:00:00.000" + "'", str76, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 19 + "'", int81 == 19);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test07003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07003");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        int int14 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime13);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean17 = dateTime13.equals((java.lang.Object) timeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        boolean boolean20 = dateTimeZone18.isStandardOffset(15812L);
        java.lang.String str21 = dateTimeZone18.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
    }

    @Test
    public void test07004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07004");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("+35:35");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=+35:35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07005");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = zonedChronology32.getZone();
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        long long38 = dateTimeZone36.previousTransition(100L);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(0L, chronology42);
        int int44 = localDateTime43.getWeekyear();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withYearOfEra(1970);
        org.joda.time.DateTime dateTime47 = localDateTime46.toDateTime();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(0L, chronology49);
        int int51 = localDateTime50.getWeekyear();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withYearOfEra(1970);
        org.joda.time.DateTime dateTime54 = localDateTime53.toDateTime();
        int int55 = dateTime47.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime56 = localDateTime40.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime40.plus(readableDuration57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(0L, chronology60);
        java.util.Locale locale62 = java.util.Locale.US;
        boolean boolean63 = localDateTime61.equals((java.lang.Object) locale62);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.dayOfWeek();
        int int65 = localDateTime61.getDayOfWeek();
        int int66 = localDateTime40.compareTo((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime40.minusYears(9);
        boolean boolean69 = dateTimeZone34.isLocalDateTimeGap(localDateTime40);
        org.joda.time.LocalDateTime.Property property70 = localDateTime40.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime71 = property70.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L + "'", long38 == 100L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime71);
    }

    @Test
    public void test07006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07006");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMillisOfSecond(100);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DurationField durationField43 = chronology41.millis();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '#', chronology41);
        int[] intArray47 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime45, (long) 1);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology28.era();
        org.joda.time.DurationField durationField50 = zonedChronology28.minutes();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        long long54 = zonedChronology28.add(readablePeriod51, (long) 10, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField56 = zonedChronology28.minuteOfHour();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1970, 1, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10L + "'", long54 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test07007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07007");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = chronology6.add(readablePeriod19, (long) (byte) -1, (int) (byte) 0);
        org.joda.time.DurationField durationField23 = chronology6.years();
        org.joda.time.DateTimeField dateTimeField24 = chronology6.centuryOfEra();
        long long28 = chronology6.add(20L, 69L, (int) (byte) 100);
        org.joda.time.DurationField durationField29 = chronology6.minutes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 6920L + "'", long28 == 6920L);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test07008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07008");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone1.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 0, dateTimeZone1);
        java.util.Locale locale8 = new java.util.Locale("", "1970-01-01T00:00:00.000");
        java.lang.String str9 = dateTimeZone1.getShortName((long) (byte) 0, locale8);
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.util.Locale locale18 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.lang.String str19 = locale14.getDisplayScript(locale18);
        java.util.Locale.setDefault(category10, locale18);
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayName(locale22);
        java.util.Locale.setDefault(category10, locale22);
        java.lang.String str25 = locale8.getDisplayVariant(locale22);
        java.lang.String str26 = locale8.getCountry();
        boolean boolean27 = locale8.hasExtensions();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertEquals(locale8.toString(), "_1970-01-01T00:00:00.000");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale13.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u672c" + "'", str15, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale18.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str23, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.000" + "'", str26, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test07009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07009");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.dayOfYear();
        org.joda.time.DurationField durationField33 = zonedChronology28.seconds();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        long long37 = zonedChronology28.add(readablePeriod34, (long) 32, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long45 = zonedChronology28.getDateTimeMillis(1439016, 59, 1598067, 1964, 169, 39, 1200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1964 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 32L + "'", long37 == 32L);
    }

    @Test
    public void test07010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07010");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("Korean");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test07011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07011");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(9, (int) '4');
        org.joda.time.DateTime dateTime9 = localDateTime2.toDateTime(dateTimeZone8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime2.withHourOfDay(2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test07012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07012");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.clockhourOfHalfday();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(0L, chronology35);
        int int37 = localDateTime36.getWeekyear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withMillisOfSecond(100);
        org.joda.time.Chronology chronology40 = localDateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        long long44 = dateTimeZone42.previousTransition(0L);
        long long46 = dateTimeZone42.nextTransition((long) (-1));
        org.joda.time.Chronology chronology47 = chronology40.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField48 = chronology40.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.DateTimeZone dateTimeZone50 = chronology40.getZone();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.Chronology chronology53 = chronology40.withZone(dateTimeZone52);
        org.joda.time.Chronology chronology54 = zonedChronology28.withZone(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField55 = chronology54.year();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test07013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07013");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int3 = timeZone1.getRawOffset();
        boolean boolean4 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test07014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07014");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDayOfWeek(3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusYears(31);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusDays(3);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks(20);
        int int12 = localDateTime11.getYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long16 = dateTimeZone14.previousTransition(100L);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay((int) (short) 0);
        int int21 = localDateTime18.getMinuteOfHour();
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.lang.String str28 = locale25.getDisplayName();
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.lang.String str31 = locale29.getDisplayCountry(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str33 = locale30.getDisplayName(locale32);
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.lang.String str37 = locale34.getDisplayName();
        java.util.Locale locale38 = java.util.Locale.JAPAN;
        java.util.Locale locale39 = java.util.Locale.JAPAN;
        java.lang.String str40 = locale38.getDisplayCountry(locale39);
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.util.Locale locale43 = java.util.Locale.JAPAN;
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.lang.String str45 = locale43.getDisplayCountry(locale44);
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        java.util.Locale locale47 = java.util.Locale.JAPAN;
        java.util.Locale locale48 = java.util.Locale.JAPAN;
        java.lang.String str49 = locale47.getDisplayCountry(locale48);
        java.util.Locale[] localeArray50 = new java.util.Locale[] { locale25, locale30, locale34, locale38, locale41, locale42, locale43, locale46, locale47 };
        java.util.ArrayList<java.util.Locale> localeList51 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList51, localeArray50);
        java.util.List<java.util.Locale> localeList53 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList51);
        boolean boolean54 = localDateTime18.equals((java.lang.Object) localeList51);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime18.withMillisOfDay(1970);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(0L, chronology59);
        int int61 = localDateTime60.getWeekyear();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.millisOfSecond();
        org.joda.time.LocalDateTime.Property property65 = localDateTime63.year();
        java.util.Locale locale66 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale66);
        java.util.Locale locale70 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale71 = java.util.Locale.ENGLISH;
        java.lang.String str72 = locale70.getDisplayLanguage(locale71);
        java.lang.String str73 = locale66.getDisplayName(locale70);
        java.lang.String str74 = property65.getAsShortText(locale70);
        java.util.Set<java.lang.String> strSet75 = locale70.getUnicodeLocaleKeys();
        java.util.Locale locale77 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.lang.String str78 = locale77.getCountry();
        java.lang.String str79 = locale70.getDisplayVariant(locale77);
        java.lang.String str80 = localDateTime18.toString("+10:01", locale70);
        java.util.Locale.Category category81 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale82 = java.util.Locale.getDefault(category81);
        java.util.Locale locale83 = java.util.Locale.getDefault(category81);
        java.util.Set<java.lang.String> strSet84 = locale83.getUnicodeLocaleAttributes();
        java.lang.String str85 = locale70.getDisplayLanguage(locale83);
        java.util.Locale.setDefault(locale70);
        java.util.Locale locale87 = java.util.Locale.GERMAN;
        java.lang.String str88 = locale87.getLanguage();
        java.lang.String str89 = locale70.getDisplayVariant(locale87);
        java.util.Locale locale93 = new java.util.Locale("GMT", "Jan", "2022-02-11T09:43:35.370");
        java.lang.String str94 = locale70.getDisplayLanguage(locale93);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = localDateTime11.toString("0070-01-01T00:00:00.100", locale70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1939 + "'", int12 == 1939);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u672c" + "'", str27, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Japanese (Japan)" + "'", str28, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u65e5\u672c" + "'", str31, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str33, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Japanese (Japan)" + "'", str37, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u65e5\u672c" + "'", str40, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u65e5\u672c" + "'", str45, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u65e5\u672c" + "'", str49, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(localeList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1970 + "'", int61 == 1970);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(locale66);
// flaky:         org.junit.Assert.assertEquals(locale66.toString(), "en");
        org.junit.Assert.assertEquals(locale70.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u65e5\u672c" + "'", str72, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "English" + "'", str73, "English");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1970" + "'", str74, "1970");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+10:01" + "'", str80, "+10:01");
        org.junit.Assert.assertTrue("'" + category81 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category81.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale82);
// flaky:         org.junit.Assert.assertEquals(locale82.toString(), "en");
        org.junit.Assert.assertNotNull(locale83);
// flaky:         org.junit.Assert.assertEquals(locale83.toString(), "en");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u65e5\u672c" + "'", str85, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "de");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "de" + "'", str88, "de");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals(locale93.toString(), "gmt_JAN_2022-02-11T09:43:35.370");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "\u65e5\u672c" + "'", str94, "\u65e5\u672c");
    }

    @Test
    public void test07015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07015");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        boolean boolean4 = dateTimeZone0.equals((java.lang.Object) "hi!");
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withMillisOfSecond(100);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        org.joda.time.DurationField durationField15 = chronology13.days();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        long long18 = dateTimeZone16.previousTransition(100L);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfSecond((int) (byte) 0);
        int[] intArray24 = chronology13.get((org.joda.time.ReadablePartial) localDateTime20, (long) (-1));
        org.joda.time.DateTimeField dateTimeField25 = chronology13.millisOfDay();
        org.joda.time.DurationField durationField26 = chronology13.hours();
        org.joda.time.DurationField durationField27 = chronology13.weeks();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        long long34 = dateTimeZone30.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology35 = org.joda.time.chrono.ZonedChronology.getInstance(chronology13, dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology35.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology35.millisOfSecond();
        org.joda.time.DurationField durationField38 = zonedChronology35.months();
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap42 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList43 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, strMap42);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap44 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList45 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, strMap44);
        boolean boolean46 = zonedChronology35.equals((java.lang.Object) strMap44);
        org.joda.time.DateTimeZone dateTimeZone47 = zonedChronology35.getZone();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        long long51 = zonedChronology35.add(readablePeriod48, 120L, 86399999);
        org.joda.time.DateTimeZone dateTimeZone52 = zonedChronology35.getZone();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(0L, chronology54);
        java.util.Locale locale56 = java.util.Locale.US;
        boolean boolean57 = localDateTime55.equals((java.lang.Object) locale56);
        int[] intArray59 = zonedChronology35.get((org.joda.time.ReadablePartial) localDateTime55, 1971L);
        org.joda.time.DateTimeField dateTimeField60 = zonedChronology35.yearOfCentury();
        boolean boolean61 = dateTimeZone0.equals((java.lang.Object) zonedChronology35);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(languageRangeList43);
        org.junit.Assert.assertNotNull(languageRangeList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 120L + "'", long51 == 120L);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1970, 1, 1, 1971]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test07016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07016");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone1.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 0, dateTimeZone1);
        org.joda.time.DurationFieldType durationFieldType5 = null;
        boolean boolean6 = localDateTime4.isSupported(durationFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withWeekyear(2);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plus(readableDuration9);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test07017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07017");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.lang.String str11 = property7.getAsShortText();
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        int int13 = property7.getMaximumTextLength(locale12);
        org.joda.time.LocalDateTime localDateTime15 = property7.addWrapFieldToCopy(100);
        int int16 = localDateTime15.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(0L, chronology18);
        int int20 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withMillisOfSecond(100);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfCentury();
        org.joda.time.DurationField durationField25 = chronology23.days();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        long long28 = dateTimeZone26.previousTransition(100L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withMillisOfSecond((int) (byte) 0);
        int[] intArray34 = chronology23.get((org.joda.time.ReadablePartial) localDateTime30, (long) (-1));
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        long long37 = dateTimeZone35.previousTransition(0L);
        long long39 = dateTimeZone35.convertUTCToLocal(1L);
        long long41 = dateTimeZone35.convertUTCToLocal((long) (byte) 10);
        org.joda.time.DateTime dateTime42 = localDateTime30.toDateTime(dateTimeZone35);
        long long45 = dateTimeZone35.adjustOffset(4363010L, false);
        org.joda.time.DateTime dateTime46 = localDateTime15.toDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime.Property property47 = localDateTime15.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = property47.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusWeeks((int) (byte) 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 4363010L + "'", long45 == 4363010L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test07018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07018");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.secondOfMinute();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        int int39 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withDayOfMonth(10);
        int int46 = localDateTime43.getEra();
        org.joda.time.LocalDateTime.Property property47 = localDateTime43.dayOfWeek();
        int int48 = localDateTime43.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime43.plusSeconds(0);
        int int51 = localDateTime43.getCenturyOfEra();
        int[] intArray53 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime43, (-3599813L));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 19 + "'", int51 == 19);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1969, 12, 31, 82800187]");
    }

    @Test
    public void test07019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07019");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        int int14 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime13);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean17 = dateTime13.equals((java.lang.Object) timeZone16);
        java.time.ZoneId zoneId18 = timeZone16.toZoneId();
        timeZone16.setRawOffset(9);
        boolean boolean21 = timeZone16.observesDaylightTime();
        int int22 = timeZone16.getDSTSavings();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(zoneId18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test07020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07020");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.plus(readableDuration8);
        java.lang.String str10 = localDateTime9.toString();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minus(readableDuration11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = property13.setCopy((-100));
        java.lang.String str16 = property13.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.000" + "'", str10, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[weekyear]" + "'", str16, "Property[weekyear]");
    }

    @Test
    public void test07021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07021");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.setLanguage("yearOfCentury");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: yearOfCentury [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test07022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07022");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = timeZone1.getOffset((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(0L, chronology7);
        int int9 = localDateTime8.getWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withMillisOfSecond(100);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology12.days();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone15.previousTransition(100L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfSecond((int) (byte) 0);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePartial) localDateTime19, (long) (-1));
        org.joda.time.DateTimeField dateTimeField24 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField25 = chronology12.hours();
        org.joda.time.DurationField durationField26 = chronology12.weeks();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        long long33 = dateTimeZone29.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology34 = org.joda.time.chrono.ZonedChronology.getInstance(chronology12, dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology34.halfdayOfDay();
        long long39 = zonedChronology34.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(0L, chronology42);
        int int44 = localDateTime43.getWeekyear();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withMillisOfSecond(100);
        org.joda.time.Chronology chronology47 = localDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfCentury();
        org.joda.time.DurationField durationField49 = chronology47.millis();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) '#', chronology47);
        int[] intArray53 = zonedChronology34.get((org.joda.time.ReadablePartial) localDateTime51, (long) 1);
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology34.yearOfEra();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(0L, chronology56);
        int int58 = localDateTime57.getWeekyear();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.withMillisOfSecond(100);
        org.joda.time.Chronology chronology61 = localDateTime57.getChronology();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime57.plusMinutes((int) (byte) -1);
        long long65 = zonedChronology34.set((org.joda.time.ReadablePartial) localDateTime63, (long) 31);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.minusMinutes(70);
        boolean boolean68 = dateTimeZone5.equals((java.lang.Object) localDateTime63);
        int int69 = localDateTime63.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType70 = null;
        boolean boolean71 = localDateTime63.isSupported(durationFieldType70);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-62167219199980L) + "'", long39 == (-62167219199980L));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1970, 1, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1970 + "'", int58 == 1970);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-60000L) + "'", long65 == (-60000L));
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 19 + "'", int69 == 19);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test07023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07023");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder3.addUnicodeLocaleAttribute("\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?????????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test07024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07024");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plus(readablePeriod14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYearOfEra(575);
        int int18 = localDateTime17.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusDays(6);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.withPeriodAdded(readablePeriod21, 7);
        org.joda.time.LocalDateTime.Property property24 = localDateTime17.weekyear();
        int int25 = localDateTime17.size();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
    }

    @Test
    public void test07025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07025");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setRegion("");
        java.util.Locale.Builder builder7 = builder4.clear();
        java.util.Locale.Builder builder9 = builder7.setLanguageTag("Chinese");
        java.util.Locale locale13 = new java.util.Locale("fra", "ita", "\u4e2d\u56fd");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder7.setLocale(locale13);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ITA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "\u4e2d\u56fd");
    }

    @Test
    public void test07026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07026");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale6 = new java.util.Locale("UTC");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale locale8 = builder4.build();
        java.util.Locale.Builder builder10 = builder4.setScript("");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder11.build();
        java.util.Locale.Builder builder15 = builder11.setExtension('a', "1970");
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.util.Locale locale20 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.lang.String str22 = locale20.getDisplayLanguage(locale21);
        java.util.Locale locale25 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.lang.String str26 = locale21.getDisplayScript(locale25);
        java.lang.String str27 = locale21.getScript();
        java.util.Locale locale28 = locale21.stripExtensions();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.lang.String str30 = locale29.getDisplayCountry();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale29.getDisplayLanguage(locale31);
        java.lang.String str33 = locale31.getISO3Country();
        java.lang.String str34 = locale28.getDisplayLanguage(locale31);
        java.lang.String str35 = locale28.getDisplayCountry();
        java.lang.String str36 = locale16.getDisplayLanguage(locale28);
        java.util.Locale locale37 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(locale37);
        java.lang.String str39 = locale37.getDisplayLanguage();
        java.lang.String str40 = locale28.getDisplayCountry(locale37);
        java.util.Locale.Builder builder41 = builder15.setLocale(locale28);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder44 = builder15.setExtension('a', "cinese (Cina)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: cinese (Cina) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals(locale6.toString(), "utc");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "utc");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "utc");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "German" + "'", str17, "German");
        org.junit.Assert.assertEquals(locale20.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u65e5\u672c" + "'", str22, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale25.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "HI!" + "'", str30, "HI!");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u65e5\u672c" + "'", str32, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Englisch" + "'", str34, "Englisch");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "German" + "'", str36, "German");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u4e2d\u6587" + "'", str39, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test07027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07027");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfEra(1970);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        int int19 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.plus(readableDuration21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(0L, chronology24);
        java.util.Locale locale26 = java.util.Locale.US;
        boolean boolean27 = localDateTime25.equals((java.lang.Object) locale26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.dayOfWeek();
        int int29 = localDateTime25.getDayOfWeek();
        int int30 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime4.plusSeconds(43);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, chronology34);
        int int36 = localDateTime35.getWeekyear();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withMillisOfSecond(100);
        org.joda.time.Chronology chronology39 = localDateTime35.getChronology();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(0L, chronology41);
        int int43 = localDateTime42.getWeekyear();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withMillisOfSecond(100);
        org.joda.time.Chronology chronology46 = localDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        long long50 = dateTimeZone48.previousTransition(0L);
        long long52 = dateTimeZone48.nextTransition((long) (-1));
        org.joda.time.Chronology chronology53 = chronology46.withZone(dateTimeZone48);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(0L, chronology55);
        int int57 = localDateTime56.getWeekyear();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withYearOfEra(1970);
        org.joda.time.DateTime dateTime60 = localDateTime59.toDateTime();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(0L, chronology62);
        int int64 = localDateTime63.getWeekyear();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withYearOfEra(1970);
        org.joda.time.DateTime dateTime67 = localDateTime66.toDateTime();
        int int68 = dateTime60.compareTo((org.joda.time.ReadableInstant) dateTime67);
        java.util.TimeZone timeZone70 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean71 = dateTime67.equals((java.lang.Object) timeZone70);
        org.joda.time.Chronology chronology72 = dateTime67.getChronology();
        int int73 = dateTimeZone48.getOffset((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Chronology chronology74 = chronology39.withZone(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime4, dateTimeZone48);
        int int76 = localDateTime4.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test07028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07028");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfMonth(10);
        int int10 = localDateTime7.getEra();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime14 = property11.addToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone15.previousTransition(0L);
        long long19 = dateTimeZone15.convertUTCToLocal(1L);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        long long24 = dateTimeZone15.getMillisKeepLocal(dateTimeZone22, (long) (-1));
        int int26 = dateTimeZone15.getStandardOffset((long) '4');
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(0L, chronology29);
        java.lang.String str32 = localDateTime30.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = localDateTime30.toString(dateTimeFormatter33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime30.monthOfYear();
        org.joda.time.Interval interval36 = property35.toInterval();
        long long37 = property35.remainder();
        org.joda.time.LocalDateTime localDateTime38 = property35.roundHalfFloorCopy();
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        int int40 = property35.getMaximumTextLength(locale39);
        java.util.Locale locale41 = java.util.Locale.CHINA;
        java.lang.String str42 = locale41.getCountry();
        int int43 = property35.getMaximumTextLength(locale41);
        java.lang.String str44 = dateTimeZone15.getShortName((-625L), locale41);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        long long47 = dateTimeZone45.previousTransition(100L);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(0L, chronology51);
        int int53 = localDateTime52.getWeekyear();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withYearOfEra(1970);
        org.joda.time.DateTime dateTime56 = localDateTime55.toDateTime();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(0L, chronology58);
        int int60 = localDateTime59.getWeekyear();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withYearOfEra(1970);
        org.joda.time.DateTime dateTime63 = localDateTime62.toDateTime();
        int int64 = dateTime56.compareTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime65 = localDateTime49.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        int int66 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime65);
        long long67 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime65);
        java.util.Locale locale71 = new java.util.Locale("Chinesisch", "Japanese (Japan)", "2022-02-11T09:43:35.370");
        java.lang.String str72 = property11.getAsText(locale71);
        java.util.Set<java.lang.Character> charSet73 = locale71.getExtensionKeys();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u65e5\u672c" + "'", str32, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01T00:00:00.000" + "'", str34, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "CN" + "'", str42, "CN");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertEquals(locale71.toString(), "chinesisch_JAPANESE (JAPAN)_2022-02-11T09:43:35.370");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "70" + "'", str72, "70");
        org.junit.Assert.assertNotNull(charSet73);
    }

    @Test
    public void test07029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07029");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYear(1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test07030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07030");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getDisplayName();
        java.lang.String str3 = locale0.getVariant();
        java.lang.String str4 = locale0.getCountry();
        java.lang.String str5 = locale0.getDisplayLanguage();
        java.lang.String str6 = locale0.getDisplayLanguage();
        java.lang.String str7 = locale0.getCountry();
        java.util.Set<java.lang.Character> charSet8 = locale0.getExtensionKeys();
        boolean boolean9 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str2, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JP" + "'", str4, "JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u65e5\u6587" + "'", str5, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u6587" + "'", str6, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JP" + "'", str7, "JP");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07031");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfCentury((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = property11.setCopy("43");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withDayOfWeek(24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 24 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test07032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07032");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.lang.String str11 = property7.getAsShortText();
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        int int13 = property7.getMaximumTextLength(locale12);
        org.joda.time.LocalDateTime localDateTime15 = property7.addWrapFieldToCopy(100);
        org.joda.time.DurationField durationField16 = property7.getRangeDurationField();
        int int17 = property7.getMaximumValue();
        long long18 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime20 = property7.addWrapFieldToCopy((int) 'u');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plusMillis((int) (short) 1);
        org.joda.time.DateTimeField[] dateTimeFieldArray27 = localDateTime22.getFields();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime22.minusYears(86399999);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(0L, chronology31);
        java.lang.String str34 = localDateTime32.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = localDateTime32.toString(dateTimeFormatter35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime32.monthOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(0L, chronology39);
        java.lang.String str42 = localDateTime40.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = localDateTime40.toString(dateTimeFormatter43);
        boolean boolean45 = localDateTime32.isAfter((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime40.plusYears((int) (short) -1);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withPeriodAdded(readablePeriod48, 19);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusSeconds(1971);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withMonthOfYear(1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e00\u6708" + "'", str11, "\u4e00\u6708");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u65e5\u672c" + "'", str34, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-01T00:00:00.000" + "'", str36, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u65e5\u672c" + "'", str42, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01T00:00:00.000" + "'", str44, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
    }

    @Test
    public void test07033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07033");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = timeZone1.getOffset((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone.setDefault(timeZone1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(0L, chronology15);
        int int17 = localDateTime16.getWeekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withYearOfEra(1970);
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        int int21 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime20);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean24 = dateTime20.equals((java.lang.Object) timeZone23);
        boolean boolean25 = timeZone1.hasSameRules(timeZone23);
        timeZone23.setID("+09:52");
        java.util.TimeZone timeZone29 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        java.lang.String str30 = timeZone29.getID();
        java.util.TimeZone.setDefault(timeZone29);
        timeZone29.setRawOffset((int) 'u');
        int int35 = timeZone29.getOffset(35080732L);
        boolean boolean36 = timeZone23.hasSameRules(timeZone29);
        java.util.TimeZone.setDefault(timeZone23);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GMT" + "'", str30, "GMT");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 117 + "'", int35 == 117);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test07034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07034");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfMonth();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int36 = timeZone33.getOffset((long) (byte) 10);
        boolean boolean37 = timeZone33.observesDaylightTime();
        timeZone33.setRawOffset(20);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.ZonedChronology zonedChronology41 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology28, dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone40);
        int int43 = localDateTime42.getHourOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(0L, chronology45);
        int int47 = localDateTime46.getWeekyear();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withMillisOfSecond(100);
        org.joda.time.Chronology chronology50 = localDateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.yearOfCentury();
        org.joda.time.DurationField durationField52 = chronology50.eras();
        org.joda.time.Chronology chronology53 = chronology50.withUTC();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = chronology53.getZone();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        long long58 = dateTimeZone56.previousTransition(100L);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(0L, chronology62);
        int int64 = localDateTime63.getWeekyear();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withYearOfEra(1970);
        org.joda.time.DateTime dateTime67 = localDateTime66.toDateTime();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(0L, chronology69);
        int int71 = localDateTime70.getWeekyear();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.withYearOfEra(1970);
        org.joda.time.DateTime dateTime74 = localDateTime73.toDateTime();
        int int75 = dateTime67.compareTo((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime76 = localDateTime60.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime60.plus(readableDuration77);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.yearOfEra();
        boolean boolean80 = dateTimeZone55.equals((java.lang.Object) localDateTime78);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime(0L, chronology82);
        java.lang.String str85 = localDateTime83.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = null;
        java.lang.String str87 = localDateTime83.toString(dateTimeFormatter86);
        org.joda.time.LocalDateTime.Property property88 = localDateTime83.monthOfYear();
        org.joda.time.Interval interval89 = property88.toInterval();
        org.joda.time.LocalDateTime localDateTime91 = property88.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = property88.getFieldType();
        long long93 = property88.remainder();
        org.joda.time.LocalDateTime localDateTime94 = property88.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = property88.getFieldType();
        int int96 = localDateTime78.get(dateTimeFieldType95);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime98 = localDateTime42.withField(dateTimeFieldType95, 82022695);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82022695 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(zonedChronology41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 100L + "'", long58 == 100L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1970 + "'", int71 == 1970);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u65e5\u672c" + "'", str85, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "1970-01-01T00:00:00.000" + "'", str87, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(dateTimeFieldType95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test07035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07035");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.util.Locale locale4 = java.util.Locale.JAPAN;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale3.getDisplayName();
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.String str15 = locale12.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale3, locale8, locale12, locale16, locale19, locale20, locale21, locale24, locale25 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList29);
        java.lang.String[] strArray36 = new java.lang.String[] { "\u65e5\u6587\u65e5\u672c)", "CN", "\u4e2d\u6587", "\u65e5\u6587\u65e5\u672c)" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        boolean boolean39 = strSet37.isEmpty();
        java.util.Locale.FilteringMode filteringMode40 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet37, filteringMode40);
        java.util.Spliterator<java.lang.String> strSpliterator42 = strSet37.spliterator();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(0L, chronology44);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withMillisOfSecond(100);
        org.joda.time.Chronology chronology49 = localDateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.yearOfCentury();
        org.joda.time.DurationField durationField51 = chronology49.days();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        long long54 = dateTimeZone52.previousTransition(100L);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withMillisOfSecond((int) (byte) 0);
        int[] intArray60 = chronology49.get((org.joda.time.ReadablePartial) localDateTime56, (long) (-1));
        org.joda.time.DateTimeField dateTimeField61 = chronology49.millisOfDay();
        org.joda.time.DurationField durationField62 = chronology49.hours();
        org.joda.time.DurationField durationField63 = chronology49.weeks();
        java.util.TimeZone timeZone65 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        long long70 = dateTimeZone66.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology71 = org.joda.time.chrono.ZonedChronology.getInstance(chronology49, dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField72 = zonedChronology71.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField73 = zonedChronology71.millisOfSecond();
        org.joda.time.DurationField durationField74 = zonedChronology71.weekyears();
        org.joda.time.DateTimeField dateTimeField75 = zonedChronology71.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField76 = zonedChronology71.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField77 = zonedChronology71.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField78 = zonedChronology71.weekOfWeekyear();
        org.joda.time.Chronology chronology79 = zonedChronology71.withUTC();
        boolean boolean80 = strSet37.remove((java.lang.Object) zonedChronology71);
        org.joda.time.DateTimeField dateTimeField81 = zonedChronology71.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray84 = zonedChronology71.get(readablePeriod82, (long) 5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u65e5\u672c" + "'", str5, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str6, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c" + "'", str9, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str11, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str15, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c" + "'", str18, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u672c" + "'", str27, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + filteringMode40 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode40.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strSpliterator42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L + "'", long54 == 100L);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 10L + "'", long70 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTimeField81);
    }

    @Test
    public void test07036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07036");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.era();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.year();
        org.joda.time.DurationField durationField31 = zonedChronology28.centuries();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        long long36 = zonedChronology28.add(readablePeriod33, (-2208988800000L), 575);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-2208988800000L) + "'", long36 == (-2208988800000L));
    }

    @Test
    public void test07037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07037");
        java.util.Locale locale2 = new java.util.Locale("\u6728\u66dc\u65e5", "+10:01");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        boolean boolean4 = locale2.hasExtensions();
        org.junit.Assert.assertEquals(locale2.toString(), "\u6728\u66dc\u65e5_+10:01");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test07038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07038");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfEra(1970);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        int int19 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.plus(readableDuration21);
        int int23 = localDateTime4.size();
        org.joda.time.LocalDateTime.Property property24 = localDateTime4.millisOfSecond();
        java.lang.String str25 = property24.getAsText();
        org.joda.time.LocalDateTime localDateTime27 = property24.addToCopy(31);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "100" + "'", str25, "100");
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test07039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07039");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minus(readableDuration6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusWeeks(44);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusYears(575);
        int[] intArray15 = localDateTime12.getValues();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 11, 5, 0]");
    }

    @Test
    public void test07040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07040");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone8.previousTransition(0L);
        long long12 = dateTimeZone8.nextTransition((long) (-1));
        org.joda.time.Chronology chronology13 = chronology6.withZone(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.hourOfDay();
        org.joda.time.DurationField durationField16 = property15.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime17 = property15.withMaximumValue();
        int int18 = property15.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime19 = property15.getLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = property15.setCopy(232);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 232 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 23 + "'", int18 == 23);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test07041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07041");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        int int14 = localDateTime10.getDayOfYear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.dayOfYear();
        int int16 = property15.getMinimumValue();
        java.lang.String str17 = property15.getAsText();
        int int18 = property15.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime19 = property15.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = localDateTime19.getValue(27236746);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 27236746");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test07042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07042");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis((int) (short) 1);
        int int10 = localDateTime9.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withEra((int) (short) 0);
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = localDateTime9.isSupported(durationFieldType13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.withMinuteOfHour(0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        int int18 = localDateTime16.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 99 + "'", int18 == 99);
    }

    @Test
    public void test07043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07043");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfDay();
        long long39 = zonedChronology28.getDateTimeMillis(0, 1, (int) (byte) 1, 20);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology28.dayOfWeek();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-62167219199980L) + "'", long39 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test07044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07044");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone31.previousTransition(100L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        int int39 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYearOfEra(1970);
        org.joda.time.DateTime dateTime42 = localDateTime41.toDateTime();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(0L, chronology44);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withYearOfEra(1970);
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        int int50 = dateTime42.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = localDateTime35.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime35.plus(readableDuration52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(0L, chronology55);
        java.util.Locale locale57 = java.util.Locale.US;
        boolean boolean58 = localDateTime56.equals((java.lang.Object) locale57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.dayOfWeek();
        int int60 = localDateTime56.getDayOfWeek();
        int int61 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        int[] intArray63 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime56, (long) 12);
        org.joda.time.LocalDateTime.Property property64 = localDateTime56.millisOfDay();
        org.joda.time.DurationField durationField65 = property64.getDurationField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L + "'", long33 == 100L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1970, 1, 1, 12]");
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(durationField65);
    }

    @Test
    public void test07045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07045");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.secondOfMinute();
        org.joda.time.DurationField durationField34 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.secondOfMinute();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test07046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07046");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(35335002);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test07047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07047");
        java.util.Locale locale3 = new java.util.Locale("", "\u65e5\u6587", "1970-01-01T00:00:52.099");
        boolean boolean4 = locale3.hasExtensions();
        org.joda.time.tz.NameProvider nameProvider5 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str10 = nameProvider5.getShortName(locale7, "", "hi!");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, chronology12);
        java.lang.String str15 = localDateTime13.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = localDateTime13.toString(dateTimeFormatter16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.monthOfYear();
        org.joda.time.Interval interval19 = property18.toInterval();
        org.joda.time.LocalDateTime localDateTime21 = property18.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property18.getFieldType();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(0L, chronology24);
        java.util.Locale locale26 = java.util.Locale.US;
        boolean boolean27 = localDateTime25.equals((java.lang.Object) locale26);
        java.lang.String str28 = locale26.toLanguageTag();
        int int29 = property18.getMaximumTextLength(locale26);
        java.lang.String str30 = locale7.getDisplayCountry(locale26);
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale31);
        java.util.Locale locale35 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = locale35.getDisplayLanguage(locale36);
        java.lang.String str38 = locale31.getDisplayName(locale35);
        java.lang.String str39 = locale26.getDisplayScript(locale31);
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.lang.String str42 = locale40.getDisplayCountry(locale41);
        java.lang.String str43 = locale26.getDisplayName(locale40);
        java.lang.String str44 = locale40.getDisplayName();
        java.lang.String str45 = locale3.getDisplayName(locale40);
        org.joda.time.tz.NameProvider nameProvider46 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str51 = nameProvider46.getShortName(locale48, "", "hi!");
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str55 = nameProvider46.getName(locale52, "CN", "\u65e5\u672c");
        java.util.Locale locale56 = java.util.Locale.US;
        java.lang.String str57 = locale56.getLanguage();
        java.lang.String str60 = nameProvider46.getName(locale56, "JP", "\u4e00\u6708");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider46);
        java.util.Locale locale62 = java.util.Locale.CHINA;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale62.getDisplayName(locale63);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(0L, chronology66);
        int int68 = localDateTime67.getWeekyear();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.millisOfSecond();
        org.joda.time.LocalDateTime.Property property72 = localDateTime70.year();
        java.util.Locale locale73 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale73);
        java.util.Locale locale77 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale78 = java.util.Locale.ENGLISH;
        java.lang.String str79 = locale77.getDisplayLanguage(locale78);
        java.lang.String str80 = locale73.getDisplayName(locale77);
        java.lang.String str81 = property72.getAsShortText(locale77);
        java.lang.String str82 = locale63.getDisplayLanguage(locale77);
        java.lang.String str85 = nameProvider46.getShortName(locale63, "Englisch", "zh");
        java.util.Locale locale88 = new java.util.Locale("\u610f\u5927\u5229\u6587", "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        java.util.Locale.setDefault(locale88);
        java.lang.String str92 = nameProvider46.getName(locale88, "2022-02-11T19:46:02.000", "Property[yearOfEra]");
        java.lang.String str93 = locale40.getDisplayCountry(locale88);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u65e5\u6587_1970-01-01T00:00:52.099");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nameProvider5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u672c" + "'", str15, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.000" + "'", str17, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "en-US" + "'", str28, "en-US");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale35.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u65e5\u672c" + "'", str37, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Chinese (China)" + "'", str38, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "English (United States)" + "'", str43, "English (United States)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u82f1\u6587" + "'", str44, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u65e5\u6587 (1970-01-01T00:00:52.099)" + "'", str45, "\u65e5\u6587 (1970-01-01T00:00:52.099)");
        org.junit.Assert.assertNotNull(nameProvider46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "en" + "'", str57, "en");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str64, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1970 + "'", int68 == 1970);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale77.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u65e5\u672c" + "'", str79, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Chinese (China)" + "'", str80, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "1970" + "'", str81, "1970");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Korean" + "'", str82, "Korean");
        org.junit.Assert.assertNull(str85);
// flaky:         org.junit.Assert.assertEquals(locale88.toString(), "\u610f\u5927\u5229\u6587\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
    }

    @Test
    public void test07048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07048");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(0L, chronology2);
        int int4 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMillisOfSecond(100);
        org.joda.time.Chronology chronology7 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.millis();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) '#', chronology7);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusHours(100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minus(readableDuration16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withDurationAdded(readableDuration18, 99);
        java.lang.String str21 = localDateTime20.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:01:40.035" + "'", str21, "1970-01-01T00:01:40.035");
    }

    @Test
    public void test07049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07049");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfDay();
        long long39 = zonedChronology28.getDateTimeMillis(0, 1, (int) (byte) 1, 20);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.dayOfWeek();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-62167219199980L) + "'", long39 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test07050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07050");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("it-IT");
        java.lang.String str2 = locale1.getLanguage();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "it" + "'", str2, "it");
    }

    @Test
    public void test07051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07051");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.secondOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test07052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07052");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.era();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        long long35 = dateTimeZone32.convertLocalToUTC(100L, true);
        java.lang.String str37 = dateTimeZone32.getName(1L);
        org.joda.time.Chronology chronology38 = zonedChronology28.withZone(dateTimeZone32);
        org.joda.time.DurationField durationField39 = chronology38.minutes();
        org.joda.time.DurationField durationField40 = chronology38.seconds();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test07053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07053");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField33 = zonedChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.centuryOfEra();
        java.lang.String str35 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.year();
        org.joda.time.DurationField durationField37 = zonedChronology28.months();
        org.joda.time.DurationField durationField38 = zonedChronology28.weekyears();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray41 = zonedChronology28.get(readablePeriod39, (long) 99);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str35, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test07054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07054");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField34 = zonedChronology28.minutes();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Chronology chronology36 = zonedChronology28.withZone(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 0);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        long long42 = dateTimeZone39.getMillisKeepLocal(dateTimeZone40, 120L);
        org.joda.time.Chronology chronology43 = zonedChronology28.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology28.secondOfMinute();
        org.joda.time.DurationField durationField45 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology28.minuteOfHour();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 120L + "'", long42 == 120L);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
    }

    @Test
    public void test07055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07055");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.hourOfHalfday();
        java.lang.String str35 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        long long40 = dateTimeZone38.previousTransition(0L);
        long long42 = dateTimeZone38.convertUTCToLocal(1L);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        long long47 = dateTimeZone38.getMillisKeepLocal(dateTimeZone45, (long) (-1));
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(0L, chronology49);
        int int51 = localDateTime50.getWeekyear();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withMillisOfSecond(100);
        org.joda.time.Chronology chronology54 = localDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.yearOfEra();
        org.joda.time.DurationField durationField57 = chronology54.seconds();
        boolean boolean58 = dateTimeZone45.equals((java.lang.Object) chronology54);
        boolean boolean59 = dateTimeZone45.isFixed();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((-69L), dateTimeZone45);
        int[] intArray62 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime60, (long) 'x');
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.withYear(1975);
        int int65 = localDateTime60.getHourOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str35, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1970, 1, 1, 120]");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 23 + "'", int65 == 23);
    }

    @Test
    public void test07056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07056");
        java.util.Locale locale3 = new java.util.Locale("", "\u65e5\u6587", "1970-01-01T00:00:52.099");
        boolean boolean4 = locale3.hasExtensions();
        org.joda.time.tz.NameProvider nameProvider5 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str10 = nameProvider5.getShortName(locale7, "", "hi!");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, chronology12);
        java.lang.String str15 = localDateTime13.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = localDateTime13.toString(dateTimeFormatter16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.monthOfYear();
        org.joda.time.Interval interval19 = property18.toInterval();
        org.joda.time.LocalDateTime localDateTime21 = property18.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property18.getFieldType();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(0L, chronology24);
        java.util.Locale locale26 = java.util.Locale.US;
        boolean boolean27 = localDateTime25.equals((java.lang.Object) locale26);
        java.lang.String str28 = locale26.toLanguageTag();
        int int29 = property18.getMaximumTextLength(locale26);
        java.lang.String str30 = locale7.getDisplayCountry(locale26);
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale31);
        java.util.Locale locale35 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = locale35.getDisplayLanguage(locale36);
        java.lang.String str38 = locale31.getDisplayName(locale35);
        java.lang.String str39 = locale26.getDisplayScript(locale31);
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.lang.String str42 = locale40.getDisplayCountry(locale41);
        java.lang.String str43 = locale26.getDisplayName(locale40);
        java.lang.String str44 = locale40.getDisplayName();
        java.lang.String str45 = locale3.getDisplayName(locale40);
        java.lang.String str46 = locale40.getScript();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u65e5\u6587_1970-01-01T00:00:52.099");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nameProvider5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u672c" + "'", str15, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.000" + "'", str17, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "en-US" + "'", str28, "en-US");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "\u610f\u5927\u5229\u6587\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertEquals(locale35.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u65e5\u672c" + "'", str37, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u610f\u5927\u5229\u6587\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str38, "\u610f\u5927\u5229\u6587\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "English (United States)" + "'", str43, "English (United States)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "English" + "'", str44, "English");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u65e5\u6587 (1970-01-01T00:00:52.099)" + "'", str45, "\u65e5\u6587 (1970-01-01T00:00:52.099)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test07057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07057");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = zonedChronology28.getZone();
        java.lang.String str34 = dateTimeZone32.getName(1644572112969L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
    }

    @Test
    public void test07058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07058");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(0L, chronology10);
        int int12 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withMillisOfSecond(100);
        org.joda.time.Chronology chronology15 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DurationField durationField17 = chronology15.days();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        long long20 = dateTimeZone18.previousTransition(100L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withMillisOfSecond((int) (byte) 0);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePartial) localDateTime22, (long) (-1));
        org.joda.time.DateTimeField dateTimeField27 = chronology15.millisOfDay();
        org.joda.time.DurationField durationField28 = chronology15.hours();
        org.joda.time.DurationField durationField29 = chronology15.weeks();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        long long36 = dateTimeZone32.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology37 = org.joda.time.chrono.ZonedChronology.getInstance(chronology15, dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology37.halfdayOfDay();
        org.joda.time.DurationField durationField39 = zonedChronology37.seconds();
        org.joda.time.DateTimeZone dateTimeZone40 = zonedChronology37.getZone();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology37.monthOfYear();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology37.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology37.weekOfWeekyear();
        org.joda.time.DurationField durationField44 = zonedChronology37.years();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology37.halfdayOfDay();
        boolean boolean46 = property7.equals((java.lang.Object) zonedChronology37);
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology37.hourOfDay();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology37.weekyear();
        org.joda.time.DurationField durationField49 = zonedChronology37.months();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology37.yearOfCentury();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test07059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07059");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfMonth(10);
        int int10 = localDateTime7.getEra();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.dayOfWeek();
        int int12 = localDateTime7.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.plusSeconds(0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.monthOfYear();
        org.joda.time.tz.NameProvider nameProvider16 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider16);
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = java.util.Locale.getDefault(category18);
        java.lang.String str22 = nameProvider16.getName(locale19, "0", "venerd\354");
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.lang.String str24 = locale23.getDisplayCountry();
        java.lang.String str25 = locale23.getDisplayName();
        java.lang.String str28 = nameProvider16.getName(locale23, "+00:00:00.059", "ISOChronology[UTC]");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(0L, chronology30);
        java.lang.String str33 = localDateTime31.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = localDateTime31.toString(dateTimeFormatter34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime31.monthOfYear();
        org.joda.time.Interval interval37 = property36.toInterval();
        long long38 = property36.remainder();
        org.joda.time.LocalDateTime localDateTime39 = property36.roundHalfFloorCopy();
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        int int41 = property36.getMaximumTextLength(locale40);
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.lang.String str43 = locale42.getCountry();
        int int44 = property36.getMaximumTextLength(locale42);
        java.util.Locale locale45 = java.util.Locale.PRC;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleKeys();
        java.lang.String str47 = locale42.getDisplayLanguage(locale45);
        java.lang.String str50 = nameProvider16.getName(locale42, "+10:01", "Property[year]");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider16);
        java.util.Locale locale52 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale52);
        java.lang.String str54 = locale52.getCountry();
        java.util.Locale locale55 = java.util.Locale.KOREA;
        java.lang.String str56 = locale55.getDisplayCountry();
        java.lang.String str57 = locale52.getDisplayName(locale55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(0L, chronology59);
        int int61 = localDateTime60.getWeekyear();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.millisOfSecond();
        org.joda.time.LocalDateTime.Property property65 = localDateTime63.year();
        java.util.Locale locale66 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale66);
        java.util.Locale locale70 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale71 = java.util.Locale.ENGLISH;
        java.lang.String str72 = locale70.getDisplayLanguage(locale71);
        java.lang.String str73 = locale66.getDisplayName(locale70);
        java.lang.String str74 = property65.getAsShortText(locale70);
        java.util.Set<java.lang.String> strSet75 = locale70.getUnicodeLocaleKeys();
        java.lang.String str76 = locale55.getDisplayLanguage(locale70);
        java.lang.String str79 = nameProvider16.getName(locale55, "dayOfWeek", "USA");
        boolean boolean80 = locale55.hasExtensions();
        int int81 = property15.getMaximumShortTextLength(locale55);
        org.joda.time.LocalDateTime localDateTime82 = property15.withMinimumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(nameProvider16);
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category18.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "\u610f\u5927\u5229\u6587\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "South Korea" + "'", str24, "South Korea");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Korean (South Korea)" + "'", str25, "Korean (South Korea)");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u65e5\u672c" + "'", str33, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T00:00:00.000" + "'", str35, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "CN" + "'", str43, "CN");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u4e2d\u6587" + "'", str47, "\u4e2d\u6587");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(locale52);
// flaky:         org.junit.Assert.assertEquals(locale52.toString(), "\u610f\u5927\u5229\u6587\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str54, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "South Korea" + "'", str56, "South Korea");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u610f\u5927\u5229\u6587\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str57, "\u610f\u5927\u5229\u6587\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1970 + "'", int61 == 1970);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(locale66);
// flaky:         org.junit.Assert.assertEquals(locale66.toString(), "\u610f\u5927\u5229\u6587\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertEquals(locale70.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u65e5\u672c" + "'", str72, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u610f\u5927\u5229\u6587\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str73, "\u610f\u5927\u5229\u6587\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1970" + "'", str74, "1970");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Korean" + "'", str76, "Korean");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertNotNull(localDateTime82);
    }

    @Test
    public void test07060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07060");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMillisOfSecond(100);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DurationField durationField43 = chronology41.millis();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '#', chronology41);
        int[] intArray47 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime45, (long) 1);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology28.hourOfHalfday();
        org.joda.time.DurationField durationField50 = zonedChronology28.centuries();
        org.joda.time.Chronology chronology51 = zonedChronology28.withUTC();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(0L, chronology53);
        java.lang.String str56 = localDateTime54.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = null;
        java.lang.String str58 = localDateTime54.toString(dateTimeFormatter57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime54.monthOfYear();
        org.joda.time.Interval interval60 = property59.toInterval();
        long long61 = property59.remainder();
        org.joda.time.LocalDateTime localDateTime62 = property59.roundHalfFloorCopy();
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        int int64 = property59.getMaximumTextLength(locale63);
        boolean boolean65 = zonedChronology28.equals((java.lang.Object) locale63);
        org.joda.time.DurationField durationField66 = zonedChronology28.centuries();
        org.joda.time.DurationField durationField67 = zonedChronology28.days();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1970, 1, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u65e5\u672c" + "'", str56, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970-01-01T00:00:00.000" + "'", str58, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField67);
    }

    @Test
    public void test07061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07061");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plus(readableDuration11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusMillis(32);
        org.joda.time.LocalDateTime.Property property16 = localDateTime10.minuteOfHour();
        int int17 = property16.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test07062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07062");
        java.lang.String[] strArray4 = new java.lang.String[] { "\u65e5\u6587\u65e5\u672c)", "CN", "\u4e2d\u6587", "\u65e5\u6587\u65e5\u672c)" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        boolean boolean7 = strSet5.isEmpty();
        boolean boolean8 = strSet5.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.String str15 = locale12.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str20 = locale17.getDisplayName(locale19);
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.lang.String str24 = locale21.getDisplayName();
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.util.Locale[] localeArray37 = new java.util.Locale[] { locale12, locale17, locale21, locale25, locale28, locale29, locale30, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList38);
        java.lang.String[] strArray42 = new java.lang.String[] { "1970-01-01T00:00:00.000" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.util.Locale.FilteringMode filteringMode45 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList43, filteringMode45);
        java.util.Locale locale47 = java.util.Locale.CHINA;
        java.util.Locale locale48 = java.util.Locale.CHINA;
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.util.Locale locale53 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale54 = locale53.stripExtensions();
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        java.util.Locale locale58 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale59 = locale58.stripExtensions();
        java.util.Locale locale62 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.lang.String str64 = locale62.getDisplayLanguage(locale63);
        java.util.Locale locale65 = java.util.Locale.JAPAN;
        java.util.Locale locale66 = java.util.Locale.JAPAN;
        java.lang.String str67 = locale65.getDisplayCountry(locale66);
        java.util.Locale locale70 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale71 = locale70.stripExtensions();
        java.util.Locale locale72 = java.util.Locale.getDefault();
        java.util.Locale locale74 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Locale locale75 = java.util.Locale.US;
        java.util.Locale locale76 = java.util.Locale.getDefault();
        java.util.Locale locale77 = java.util.Locale.CHINA;
        java.lang.String str78 = locale77.getCountry();
        java.util.Locale[] localeArray79 = new java.util.Locale[] { locale47, locale48, locale49, locale50, locale53, locale55, locale58, locale62, locale66, locale71, locale72, locale74, locale75, locale76, locale77 };
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.stream.Stream<java.util.Locale> localeStream83 = localeList82.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream84 = localeList82.stream();
        java.util.stream.Stream<java.util.Locale> localeStream85 = localeList82.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream86 = localeList82.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream87 = localeList82.parallelStream();
        boolean boolean88 = strSet5.retainAll((java.util.Collection<java.util.Locale>) localeList82);
        java.util.TimeZone timeZone90 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone91 = org.joda.time.DateTimeZone.forTimeZone(timeZone90);
        int int93 = timeZone90.getOffset((long) (byte) 10);
        java.lang.Object obj94 = timeZone90.clone();
        boolean boolean95 = strSet5.equals(obj94);
        java.util.Spliterator<java.lang.String> strSpliterator96 = strSet5.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator97 = strSet5.spliterator();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Japanese (Japan)" + "'", str15, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c" + "'", str18, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str20, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Japanese (Japan)" + "'", str24, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u672c" + "'", str27, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u65e5\u672c" + "'", str32, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + filteringMode45 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode45.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale53.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertEquals(locale58.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals(locale62.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u65e5\u672c" + "'", str64, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u65e5\u672c" + "'", str67, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale70.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale72);
// flaky:         org.junit.Assert.assertEquals(locale72.toString(), "\u610f\u5927\u5229\u6587\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale76);
// flaky:         org.junit.Assert.assertEquals(locale76.toString(), "\u610f\u5927\u5229\u6587\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "CN" + "'", str78, "CN");
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(localeList82);
        org.junit.Assert.assertNotNull(localeStream83);
        org.junit.Assert.assertNotNull(localeStream84);
        org.junit.Assert.assertNotNull(localeStream85);
        org.junit.Assert.assertNotNull(localeStream86);
        org.junit.Assert.assertNotNull(localeStream87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(timeZone90);
        org.junit.Assert.assertEquals(timeZone90.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(obj94);
        org.junit.Assert.assertEquals(obj94.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj94), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj94), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(strSpliterator96);
        org.junit.Assert.assertNotNull(strSpliterator97);
    }

    @Test
    public void test07063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07063");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(0L, chronology21);
        int int23 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withYearOfEra(1970);
        org.joda.time.DateTime dateTime26 = localDateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        long long29 = dateTimeZone27.previousTransition(100L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        int int35 = localDateTime34.getWeekyear();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withYearOfEra(1970);
        org.joda.time.DateTime dateTime38 = localDateTime37.toDateTime();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(0L, chronology40);
        int int42 = localDateTime41.getWeekyear();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withYearOfEra(1970);
        org.joda.time.DateTime dateTime45 = localDateTime44.toDateTime();
        int int46 = dateTime38.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = localDateTime31.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean48 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology49 = dateTime38.getChronology();
        int int50 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime38);
        java.lang.String str51 = dateTime38.toString();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(0L, chronology53);
        int int55 = localDateTime54.getWeekyear();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        long long60 = dateTimeZone58.previousTransition(100L);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withMillisOfSecond((int) (byte) 0);
        int int65 = localDateTime54.compareTo((org.joda.time.ReadablePartial) localDateTime62);
        int int66 = localDateTime62.getDayOfYear();
        org.joda.time.LocalDateTime.Property property67 = localDateTime62.dayOfYear();
        int int68 = property67.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property67.getFieldType();
        boolean boolean70 = dateTime38.isSupported(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L + "'", long29 == 100L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str51, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1970 + "'", int55 == 1970);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test07064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07064");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusDays(4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plus(readableDuration10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readableDuration12);
        int int14 = localDateTime11.getCenturyOfEra();
        org.joda.time.Chronology chronology15 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withMinuteOfHour(45);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withYearOfEra(38);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test07065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07065");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet2.spliterator();
        int int4 = strSet2.size();
        java.util.Iterator<java.lang.String> strItor5 = strSet2.iterator();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(0L, chronology7);
        int int9 = localDateTime8.getWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withMillisOfSecond(100);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology12.days();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone15.previousTransition(100L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfSecond((int) (byte) 0);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePartial) localDateTime19, (long) (-1));
        org.joda.time.DateTimeField dateTimeField24 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField25 = chronology12.hours();
        org.joda.time.DurationField durationField26 = chronology12.weeks();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        long long33 = dateTimeZone29.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology34 = org.joda.time.chrono.ZonedChronology.getInstance(chronology12, dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology34.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology34.monthOfYear();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology34.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology34.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology34.hourOfHalfday();
        org.joda.time.DurationField durationField41 = zonedChronology34.millis();
        org.joda.time.DurationField durationField42 = zonedChronology34.hours();
        boolean boolean43 = strSet2.contains((java.lang.Object) durationField42);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = strSet2.add("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test07066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07066");
        java.util.Locale locale2 = new java.util.Locale("1970-01-01T00:00:00.070", "\uc911\uad6d");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale2.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for ??????");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\uc911\uad6d");
    }

    @Test
    public void test07067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07067");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMillisOfSecond(70);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withWeekyear(30069);
        int int24 = localDateTime21.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test07068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07068");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("1969-01-01T00:00:00.000");
        int int2 = timeZone1.getRawOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = timeZone1.getDisplayName(false, 201);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 201");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test07069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07069");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        long long36 = zonedChronology28.add(readablePeriod33, (long) '4', 59);
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.monthOfYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 52L + "'", long36 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test07070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07070");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        java.lang.String str8 = property7.getName();
        org.joda.time.DurationField durationField9 = property7.getDurationField();
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((int) 'a');
        org.joda.time.Interval interval12 = property7.toInterval();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.lang.String str14 = locale13.getVariant();
        java.lang.String str15 = property7.getAsShortText(locale13);
        org.joda.time.LocalDateTime localDateTime16 = property7.withMaximumValue();
        java.lang.String str17 = property7.getAsShortText();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u4e00\u6708" + "'", str15, "\u4e00\u6708");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Jan" + "'", str17, "Jan");
    }

    @Test
    public void test07071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07071");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.yearOfCentury();
        org.joda.time.DurationField durationField33 = zonedChronology28.seconds();
        long long38 = zonedChronology28.getDateTimeMillis(99, (int) (short) 1, 1, 7);
        org.joda.time.DurationField durationField39 = zonedChronology28.years();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-59042995199993L) + "'", long38 == (-59042995199993L));
        org.junit.Assert.assertNotNull(durationField39);
    }

    @Test
    public void test07072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07072");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.minuteOfHour();
        boolean boolean5 = property4.isLeap();
        int int6 = property4.getMaximumValue();
        int int7 = property4.getMaximumValueOverall();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        java.lang.String str12 = localDateTime10.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = localDateTime10.toString(dateTimeFormatter13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.monthOfYear();
        java.lang.String str16 = property15.getName();
        org.joda.time.DurationField durationField17 = property15.getDurationField();
        org.joda.time.LocalDateTime localDateTime19 = property15.addToCopy((int) 'a');
        org.joda.time.Interval interval20 = property15.toInterval();
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.lang.String str22 = locale21.getVariant();
        java.lang.String str23 = property15.getAsShortText(locale21);
        org.joda.time.DateTimeField dateTimeField24 = property15.getField();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(0L, chronology26);
        int int28 = localDateTime27.getWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withMillisOfSecond(100);
        org.joda.time.Chronology chronology31 = localDateTime27.getChronology();
        org.joda.time.DurationFieldType durationFieldType32 = null;
        boolean boolean33 = localDateTime27.isSupported(durationFieldType32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime27.withCenturyOfEra((int) '#');
        org.joda.time.DateTime dateTime36 = localDateTime27.toDateTime();
        int int37 = property15.getDifference((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime36.getZone();
        int int39 = property4.getDifference((org.joda.time.ReadableInstant) dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 59 + "'", int7 == 59);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u672c" + "'", str12, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.000" + "'", str14, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "monthOfYear" + "'", str16, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u4e00\u6708" + "'", str23, "\u4e00\u6708");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 27409549 + "'", int39 == 27409549);
    }

    @Test
    public void test07073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07073");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfSecond();
        int int12 = property11.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime13 = property11.roundHalfCeilingCopy();
        int int14 = property11.getMaximumValueOverall();
        java.lang.String str15 = property11.toString();
        org.joda.time.LocalDateTime localDateTime17 = property11.addWrapFieldToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfCentury();
        java.lang.String str19 = property18.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property18.getFieldType();
        org.joda.time.LocalDateTime localDateTime21 = property18.roundHalfEvenCopy();
        java.util.Locale locale23 = new java.util.Locale("+10:00");
        boolean boolean24 = locale23.hasExtensions();
        int int25 = property18.getMaximumShortTextLength(locale23);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 999 + "'", int14 == 999);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[millisOfSecond]" + "'", str15, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "70" + "'", str19, "70");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertEquals(locale23.toString(), "+10:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test07074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07074");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField9 = chronology6.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField12 = chronology6.seconds();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test07075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07075");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.minuteOfHour();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        java.util.Locale locale8 = java.util.Locale.US;
        boolean boolean9 = localDateTime7.equals((java.lang.Object) locale8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withEra((int) (short) 0);
        int int22 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime.Property property24 = localDateTime19.weekOfWeekyear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(0L, chronology26);
        java.util.Locale locale28 = java.util.Locale.US;
        boolean boolean29 = localDateTime27.equals((java.lang.Object) locale28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plus(readablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        boolean boolean34 = dateTimeZone32.isLocalDateTimeGap(localDateTime33);
        boolean boolean35 = localDateTime31.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.dayOfWeek();
        org.joda.time.LocalDateTime.Property property37 = localDateTime33.year();
        boolean boolean38 = property24.equals((java.lang.Object) localDateTime33);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.plusMinutes(11);
        org.joda.time.LocalDateTime.Property property41 = localDateTime33.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test07076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07076");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(0L, chronology5);
        java.lang.String str8 = localDateTime6.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = localDateTime6.toString(dateTimeFormatter9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime6.monthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundCeilingCopy();
        boolean boolean13 = dateTimeZone1.isLocalDateTimeGap(localDateTime12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        java.lang.String str15 = dateTimeZone1.getID();
        boolean boolean17 = dateTimeZone1.equals((java.lang.Object) "eng");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(0L, chronology19);
        int int21 = localDateTime20.getWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withMillisOfSecond(100);
        org.joda.time.Chronology chronology24 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfCentury();
        org.joda.time.DurationField durationField26 = chronology24.millis();
        org.joda.time.DurationField durationField27 = chronology24.months();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = localDateTime28.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusMillis((int) (byte) 1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        java.lang.String str36 = localDateTime34.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = localDateTime34.toString(dateTimeFormatter37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime34.monthOfYear();
        org.joda.time.Interval interval40 = property39.toInterval();
        long long41 = property39.remainder();
        org.joda.time.LocalDateTime localDateTime42 = property39.roundHalfFloorCopy();
        int int43 = localDateTime42.getMillisOfSecond();
        boolean boolean44 = localDateTime28.isEqual((org.joda.time.ReadablePartial) localDateTime42);
        boolean boolean45 = dateTimeZone1.isLocalDateTimeGap(localDateTime28);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime28.withYearOfEra(35217444);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime28.minusDays(53);
        // The following exception was thrown during execution in test generation
        try {
            int int51 = localDateTime49.getValue(170);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 170");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c" + "'", str8, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.000" + "'", str10, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.000" + "'", str38, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
    }

    @Test
    public void test07077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07077");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.minuteOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology32.centuries();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withYearOfEra(1970);
        org.joda.time.DateTime dateTime41 = localDateTime40.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        long long44 = dateTimeZone42.previousTransition(100L);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(0L, chronology48);
        int int50 = localDateTime49.getWeekyear();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withYearOfEra(1970);
        org.joda.time.DateTime dateTime53 = localDateTime52.toDateTime();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(0L, chronology55);
        int int57 = localDateTime56.getWeekyear();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withYearOfEra(1970);
        org.joda.time.DateTime dateTime60 = localDateTime59.toDateTime();
        int int61 = dateTime53.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime62 = localDateTime46.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean63 = dateTime41.isEqual((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Chronology chronology64 = dateTime53.getChronology();
        boolean boolean65 = zonedChronology32.equals((java.lang.Object) chronology64);
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology32.secondOfDay();
        org.joda.time.DateTimeField dateTimeField67 = zonedChronology32.centuryOfEra();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L + "'", long44 == 100L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test07078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07078");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = timeZone1.getOffset((long) (byte) 10);
        int int5 = timeZone1.getRawOffset();
        timeZone1.setRawOffset((int) 'a');
        timeZone1.setID("1970");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = timeZone1.getDisplayName(true, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test07079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07079");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.minuteOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology32.centuries();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.Chronology chronology37 = zonedChronology32.withZone(dateTimeZone35);
        org.joda.time.DurationField durationField38 = zonedChronology32.weeks();
        org.joda.time.DurationField durationField39 = zonedChronology32.seconds();
        long long44 = zonedChronology32.getDateTimeMillis(30069, (int) (short) 1, (int) (short) 1, 1971);
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology32.minuteOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 886718880001971L + "'", long44 == 886718880001971L);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test07080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07080");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.lang.String str11 = property7.getAsShortText();
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        int int13 = property7.getMaximumTextLength(locale12);
        org.joda.time.LocalDateTime localDateTime15 = property7.addWrapFieldToCopy(100);
        org.joda.time.DurationField durationField16 = property7.getRangeDurationField();
        java.lang.String str17 = property7.getAsString();
        int int18 = property7.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime19 = property7.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime20 = property7.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withWeekyear((int) 'a');
        int int23 = localDateTime20.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withWeekOfWeekyear(3570);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3570 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
    }

    @Test
    public void test07081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07081");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str5 = nameProvider0.getShortName(locale2, "", "hi!");
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str9 = nameProvider0.getName(locale6, "CN", "\u65e5\u672c");
        java.util.Locale locale10 = java.util.Locale.US;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str14 = nameProvider0.getName(locale10, "JP", "\u4e00\u6708");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale16.getDisplayName(locale17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(0L, chronology20);
        int int22 = localDateTime21.getWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfSecond();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.year();
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale27);
        java.util.Locale locale31 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.lang.String str33 = locale31.getDisplayLanguage(locale32);
        java.lang.String str34 = locale27.getDisplayName(locale31);
        java.lang.String str35 = property26.getAsShortText(locale31);
        java.lang.String str36 = locale17.getDisplayLanguage(locale31);
        java.lang.String str39 = nameProvider0.getShortName(locale17, "Englisch", "zh");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(0L, chronology43);
        java.lang.String str46 = localDateTime44.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = localDateTime44.toString(dateTimeFormatter47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime44.monthOfYear();
        org.joda.time.Interval interval50 = property49.toInterval();
        org.joda.time.LocalDateTime localDateTime52 = property49.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property49.getFieldType();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(0L, chronology55);
        java.util.Locale locale57 = java.util.Locale.US;
        boolean boolean58 = localDateTime56.equals((java.lang.Object) locale57);
        java.lang.String str59 = locale57.toLanguageTag();
        int int60 = property49.getMaximumTextLength(locale57);
        java.lang.String str61 = locale57.getISO3Language();
        java.lang.String str62 = locale57.getLanguage();
        java.util.Locale locale63 = locale57.stripExtensions();
        java.lang.String str66 = nameProvider0.getShortName(locale63, "dayOfWeek", "\u82f1\u8a9e");
        java.util.Locale locale68 = java.util.Locale.forLanguageTag("2022-02-11T09:43:35.370");
        java.util.Locale locale69 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(locale69);
        java.lang.String str71 = locale68.getDisplayName(locale69);
        java.lang.String str74 = nameProvider0.getShortName(locale68, "United States", "\u30ab\u30ca\u30c0");
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) 4);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.UTC;
        long long79 = dateTimeZone77.previousTransition(100L);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology80);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.withHourOfDay((int) (short) 0);
        int int84 = localDateTime83.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime83.withCenturyOfEra(0);
        int int87 = localDateTime76.compareTo((org.joda.time.ReadablePartial) localDateTime86);
        org.joda.time.LocalDateTime.Property property88 = localDateTime86.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.LocalDateTime localDateTime90 = localDateTime86.plus(readablePeriod89);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime90.plusYears(52100);
        boolean boolean93 = locale68.equals((java.lang.Object) localDateTime92);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en" + "'", str11, "en");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str18, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "\u610f\u5927\u5229\u6587\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertEquals(locale31.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u65e5\u672c" + "'", str33, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u610f\u5927\u5229\u6587\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str34, "\u610f\u5927\u5229\u6587\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970" + "'", str35, "1970");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Korean" + "'", str36, "Korean");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u65e5\u672c" + "'", str46, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T00:00:00.000" + "'", str48, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "en-US" + "'", str59, "en-US");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "eng" + "'", str61, "eng");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "en" + "'", str62, "en");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_US");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 100L + "'", long79 == 100L);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 100 + "'", int84 == 100);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test07082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07082");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.era();
        java.lang.String str34 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField37 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.era();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str34, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test07083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07083");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, chronology11);
        java.lang.String str14 = localDateTime12.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime12.toString(dateTimeFormatter15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.monthOfYear();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.LocalDateTime localDateTime20 = property17.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property17.getFieldType();
        org.joda.time.LocalDateTime.Property property22 = localDateTime9.property(dateTimeFieldType21);
        int int23 = property22.getMinimumValueOverall();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(0L, chronology25);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withYearOfEra(1970);
        org.joda.time.DateTime dateTime30 = localDateTime29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone31.previousTransition(100L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        int int39 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYearOfEra(1970);
        org.joda.time.DateTime dateTime42 = localDateTime41.toDateTime();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(0L, chronology44);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withYearOfEra(1970);
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        int int50 = dateTime42.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = localDateTime35.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean52 = dateTime30.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology53 = dateTime30.getChronology();
        long long54 = property22.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property22.getFieldType();
        int int56 = property22.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime57 = property22.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType59 = localDateTime57.getFieldType(22697);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 22697");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.000" + "'", str16, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L + "'", long33 == 100L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(localDateTime57);
    }

    @Test
    public void test07084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07084");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfCentury(2);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withPeriodAdded(readablePeriod3, 9);
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test07085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07085");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology6.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology6.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = chronology6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray26 = chronology6.get(readablePeriod24, 2810297L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test07086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07086");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(115804800000L);
    }

    @Test
    public void test07087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07087");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        long long34 = dateTimeZone32.previousTransition(100L);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withHourOfDay((int) (short) 0);
        int int39 = localDateTime36.getMinuteOfHour();
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Locale locale43 = java.util.Locale.JAPAN;
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.lang.String str45 = locale43.getDisplayCountry(locale44);
        java.lang.String str46 = locale43.getDisplayName();
        java.util.Locale locale47 = java.util.Locale.JAPAN;
        java.util.Locale locale48 = java.util.Locale.JAPAN;
        java.lang.String str49 = locale47.getDisplayCountry(locale48);
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str51 = locale48.getDisplayName(locale50);
        java.util.Locale locale52 = java.util.Locale.JAPAN;
        java.util.Locale locale53 = java.util.Locale.JAPAN;
        java.lang.String str54 = locale52.getDisplayCountry(locale53);
        java.lang.String str55 = locale52.getDisplayName();
        java.util.Locale locale56 = java.util.Locale.JAPAN;
        java.util.Locale locale57 = java.util.Locale.JAPAN;
        java.lang.String str58 = locale56.getDisplayCountry(locale57);
        java.util.Locale locale59 = java.util.Locale.ITALIAN;
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.util.Locale locale61 = java.util.Locale.JAPAN;
        java.util.Locale locale62 = java.util.Locale.JAPAN;
        java.lang.String str63 = locale61.getDisplayCountry(locale62);
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        java.util.Locale locale65 = java.util.Locale.JAPAN;
        java.util.Locale locale66 = java.util.Locale.JAPAN;
        java.lang.String str67 = locale65.getDisplayCountry(locale66);
        java.util.Locale[] localeArray68 = new java.util.Locale[] { locale43, locale48, locale52, locale56, locale59, locale60, locale61, locale64, locale65 };
        java.util.ArrayList<java.util.Locale> localeList69 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList69, localeArray68);
        java.util.List<java.util.Locale> localeList71 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.util.Locale>) localeList69);
        boolean boolean72 = localDateTime36.equals((java.lang.Object) localeList69);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime36.withMillisOfDay(1970);
        int int75 = localDateTime74.getMillisOfSecond();
        int[] intArray77 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime74, 10457999999L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100L + "'", long34 == 100L);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u65e5\u672c" + "'", str45, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str46, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u65e5\u672c" + "'", str49, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str51, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u65e5\u672c" + "'", str54, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str55, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u65e5\u672c" + "'", str58, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u65e5\u672c" + "'", str63, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u65e5\u672c" + "'", str67, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(localeList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 970 + "'", int75 == 970);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1970, 5, 2, 3599999]");
    }

    @Test
    public void test07088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07088");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        java.util.TimeZone.setDefault(timeZone1);
        boolean boolean3 = timeZone1.observesDaylightTime();
        boolean boolean4 = timeZone1.observesDaylightTime();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("2022-02-11T09:43:35.370");
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(locale7);
        java.lang.String str9 = locale6.getDisplayName(locale7);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(0L, chronology14);
        int int16 = localDateTime15.getWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withDayOfMonth(10);
        int int23 = localDateTime20.getEra();
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.dayOfWeek();
        java.util.Locale locale25 = java.util.Locale.ITALY;
        boolean boolean26 = locale25.hasExtensions();
        java.util.Set<java.lang.String> strSet27 = locale25.getUnicodeLocaleKeys();
        java.lang.String str28 = property24.getAsText(locale25);
        java.lang.String str29 = locale11.getDisplayLanguage(locale25);
        java.lang.String str30 = locale6.getDisplayVariant(locale11);
        java.util.Set<java.lang.Character> charSet31 = locale6.getExtensionKeys();
        java.lang.String str32 = timeZone1.getDisplayName(locale6);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "venerd\354" + "'", str28, "venerd\354");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Greenwich Mean Time" + "'", str32, "Greenwich Mean Time");
    }

    @Test
    public void test07089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07089");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYearOfEra(1970);
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone15.previousTransition(100L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(0L, chronology21);
        int int23 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withYearOfEra(1970);
        org.joda.time.DateTime dateTime26 = localDateTime25.toDateTime();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(0L, chronology28);
        int int30 = localDateTime29.getWeekyear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withYearOfEra(1970);
        org.joda.time.DateTime dateTime33 = localDateTime32.toDateTime();
        int int34 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = localDateTime19.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean36 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(0L, chronology38);
        int int40 = localDateTime39.getWeekyear();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withMillisOfSecond(100);
        org.joda.time.Chronology chronology43 = localDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfCentury();
        org.joda.time.DurationField durationField45 = chronology43.days();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        long long48 = dateTimeZone46.previousTransition(100L);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withMillisOfSecond((int) (byte) 0);
        int[] intArray54 = chronology43.get((org.joda.time.ReadablePartial) localDateTime50, (long) (-1));
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        long long57 = dateTimeZone55.previousTransition(0L);
        long long59 = dateTimeZone55.convertUTCToLocal(1L);
        long long61 = dateTimeZone55.convertUTCToLocal((long) (byte) 10);
        org.joda.time.DateTime dateTime62 = localDateTime50.toDateTime(dateTimeZone55);
        boolean boolean63 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(0L, chronology65);
        int int67 = localDateTime66.getWeekyear();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withYearOfEra(1970);
        org.joda.time.DateTime dateTime70 = localDateTime69.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.UTC;
        long long73 = dateTimeZone71.previousTransition(100L);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology74);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(0L, chronology77);
        int int79 = localDateTime78.getWeekyear();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.withYearOfEra(1970);
        org.joda.time.DateTime dateTime82 = localDateTime81.toDateTime();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime(0L, chronology84);
        int int86 = localDateTime85.getWeekyear();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime85.withYearOfEra(1970);
        org.joda.time.DateTime dateTime89 = localDateTime88.toDateTime();
        int int90 = dateTime82.compareTo((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.DateTime dateTime91 = localDateTime75.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        boolean boolean92 = dateTime70.isEqual((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Chronology chronology93 = dateTime70.getChronology();
        boolean boolean94 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Chronology chronology95 = dateTime26.getChronology();
        int int96 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology97 = dateTime26.getChronology();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 100L + "'", long48 == 100L);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10L + "'", long61 == 10L);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1970 + "'", int67 == 1970);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 100L + "'", long73 == 100L);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1970 + "'", int79 == 1970);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1970 + "'", int86 == 1970);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(chronology97);
    }

    @Test
    public void test07090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07090");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Chronology chronology34 = zonedChronology28.withZone(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology34);
    }

    @Test
    public void test07091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07091");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        long long9 = dateTimeZone7.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) 0, dateTimeZone7);
        java.util.Locale locale14 = new java.util.Locale("", "1970-01-01T00:00:00.000");
        java.lang.String str15 = dateTimeZone7.getShortName((long) (byte) 0, locale14);
        java.lang.String str16 = dateTimeZone2.getShortName((-62167219199980L), locale14);
        int int18 = dateTimeZone2.getStandardOffset(2000L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(0L, chronology20);
        int int22 = localDateTime21.getWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withMillisOfSecond(100);
        org.joda.time.Chronology chronology25 = localDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DurationField durationField27 = chronology25.millis();
        org.joda.time.DurationField durationField28 = chronology25.months();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(chronology25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = localDateTime29.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusHours((int) '#');
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.minusDays(3);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.withYearOfCentury((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withDurationAdded(readableDuration39, 12);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        long long44 = dateTimeZone42.previousTransition(100L);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withHourOfDay((int) (short) 0);
        int int49 = localDateTime48.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusYears(0);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.minusMinutes(19);
        org.joda.time.LocalDateTime.Property property56 = localDateTime51.weekOfWeekyear();
        int int57 = localDateTime51.getYearOfEra();
        int int58 = localDateTime38.compareTo((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime.Property property59 = localDateTime51.year();
        boolean boolean60 = dateTimeZone2.equals((java.lang.Object) localDateTime51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime64 = localDateTime51.withDate((-1970), (int) (short) -1, 39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertEquals(locale14.toString(), "_1970-01-01T00:00:00.000");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L + "'", long44 == 100L);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 70 + "'", int57 == 70);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test07092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07092");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-11T09:46:38.208");
        java.util.Locale.Category category2 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.util.Locale.setDefault(category2, locale3);
        org.joda.time.tz.NameProvider nameProvider6 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str11 = nameProvider6.getShortName(locale8, "", "hi!");
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str15 = nameProvider6.getName(locale12, "CN", "\u65e5\u672c");
        java.util.Locale locale16 = java.util.Locale.US;
        java.lang.String str17 = locale16.getLanguage();
        java.lang.String str20 = nameProvider6.getName(locale16, "JP", "\u4e00\u6708");
        java.util.Set<java.lang.Character> charSet21 = locale16.getExtensionKeys();
        java.lang.String str22 = locale3.getDisplayCountry(locale16);
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        boolean boolean24 = locale23.hasExtensions();
        java.lang.String str25 = locale23.getDisplayName();
        java.lang.String str26 = locale23.getVariant();
        java.lang.String str27 = locale23.getCountry();
        java.util.Locale locale28 = locale23.stripExtensions();
        java.lang.String str29 = locale3.getDisplayScript(locale28);
        java.lang.String str30 = locale28.getDisplayVariant();
        java.lang.String str31 = locale28.getDisplayCountry();
        java.lang.String str32 = locale1.getDisplayName(locale28);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category2.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str4, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(nameProvider6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en" + "'", str17, "en");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Japan" + "'", str22, "Japan");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str25, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JP" + "'", str27, "JP");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u65e5\u672c" + "'", str31, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test07093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07093");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("");
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone9 = provider0.getZone("English");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNull(dateTimeZone9);
    }

    @Test
    public void test07094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07094");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfEra(1970);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        int int19 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.plus(readableDuration21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withPeriodAdded(readablePeriod23, (int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = localDateTime25.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusSeconds(70);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusMinutes(91);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test07095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07095");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        long long9 = dateTimeZone7.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) 0, dateTimeZone7);
        java.util.Locale locale14 = new java.util.Locale("", "1970-01-01T00:00:00.000");
        java.lang.String str15 = dateTimeZone7.getShortName((long) (byte) 0, locale14);
        java.lang.String str16 = dateTimeZone2.getShortName((-62167219199980L), locale14);
        java.lang.String str17 = locale14.getDisplayVariant();
        java.util.Locale locale20 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale21 = locale20.stripExtensions();
        java.lang.String str22 = locale14.getDisplayCountry(locale20);
        java.lang.String str23 = locale14.getDisplayName();
        java.lang.String str24 = locale14.toString();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertEquals(locale14.toString(), "_1970-01-01T00:00:00.000");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals(locale20.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.000" + "'", str22, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.000" + "'", str23, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "_1970-01-01T00:00:00.000" + "'", str24, "_1970-01-01T00:00:00.000");
    }

    @Test
    public void test07096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07096");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.millis();
        org.joda.time.DurationField durationField9 = chronology6.months();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withYear((int) (short) 10);
        int int17 = localDateTime16.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        long long20 = dateTimeZone18.previousTransition(100L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withHourOfDay((int) (short) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.weekOfWeekyear();
        int int26 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.withPeriodAdded(readablePeriod27, (-8096924));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test07097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07097");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("UTC");
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale9);
        java.util.Locale.Builder builder11 = builder8.setLocale(locale9);
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.lang.String str14 = locale13.getDisplayCountry();
        java.lang.String str15 = locale13.getDisplayName();
        java.util.Locale.Builder builder16 = builder11.setLocale(locale13);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(0L, chronology18);
        java.lang.String str21 = localDateTime19.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = localDateTime19.toString(dateTimeFormatter22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime19.monthOfYear();
        org.joda.time.Interval interval25 = property24.toInterval();
        long long26 = property24.remainder();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundHalfFloorCopy();
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        int int29 = property24.getMaximumTextLength(locale28);
        org.joda.time.LocalDateTime localDateTime30 = property24.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime32 = property31.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField33 = property31.getField();
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder34.clearExtensions();
        java.util.Locale.Builder builder37 = builder34.setLanguage("");
        java.util.Locale.Builder builder38 = builder37.clearExtensions();
        java.util.Locale locale40 = new java.util.Locale("UTC");
        java.util.Locale.Builder builder41 = builder38.setLocale(locale40);
        java.util.Locale locale42 = builder38.build();
        java.util.Locale.Builder builder44 = builder38.setScript("");
        java.util.Locale.Builder builder45 = builder44.clearExtensions();
        java.util.Locale locale46 = builder45.build();
        java.lang.String str47 = locale46.getISO3Country();
        int int48 = property31.getMaximumShortTextLength(locale46);
        java.util.Locale.Builder builder49 = builder16.setLocale(locale46);
        java.util.Locale.Builder builder51 = builder16.removeUnicodeLocaleAttribute("Italia");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder54 = builder51.setUnicodeLocaleKeyword("2022-02-11T09:48:33.711", "\u6708");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-11T09:48:33.711 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u5927\u97d3\u6c11\u56fd" + "'", str14, "\u5927\u97d3\u6c11\u56fd");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u97d3\u56fd\u8a9e\u5927\u97d3\u6c11\u56fd)" + "'", str15, "\u97d3\u56fd\u8a9e\u5927\u97d3\u6c11\u56fd)");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u65e5\u672c" + "'", str21, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.000" + "'", str23, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals(locale40.toString(), "utc");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "utc");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "utc");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test07098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07098");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusDays(4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plus(readableDuration10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readableDuration12);
        int int14 = localDateTime11.getCenturyOfEra();
        org.joda.time.Chronology chronology15 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withMinuteOfHour(45);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusMillis(641);
        int int20 = localDateTime17.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) int20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 70 + "'", int20 == 70);
    }

    @Test
    public void test07099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07099");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(0L, chronology2);
        int int4 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMillisOfSecond(100);
        org.joda.time.Chronology chronology7 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.eras();
        org.joda.time.Chronology chronology10 = chronology7.withUTC();
        java.lang.String str11 = chronology10.toString();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(0L, chronology14);
        int int16 = localDateTime15.getWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        long long21 = dateTimeZone19.previousTransition(100L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMillisOfSecond((int) (byte) 0);
        int int26 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone27.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = localDateTime15.toDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime33 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withYearOfEra(1970);
        org.joda.time.DateTime dateTime41 = localDateTime40.toDateTime();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(0L, chronology43);
        int int45 = localDateTime44.getWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withYearOfEra(1970);
        org.joda.time.DateTime dateTime48 = localDateTime47.toDateTime();
        int int49 = dateTime41.compareTo((org.joda.time.ReadableInstant) dateTime48);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean52 = dateTime48.equals((java.lang.Object) timeZone51);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTime48.getZone();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(0L, chronology55);
        int int57 = localDateTime56.getWeekyear();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withYearOfEra(1970);
        org.joda.time.DateTime dateTime60 = localDateTime59.toDateTime();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(0L, chronology62);
        int int64 = localDateTime63.getWeekyear();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withYearOfEra(1970);
        org.joda.time.DateTime dateTime67 = localDateTime66.toDateTime();
        int int68 = dateTime60.compareTo((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean69 = dateTime48.isAfter((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean70 = dateTime33.isAfter((org.joda.time.ReadableInstant) dateTime60);
        int int71 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-11T09:49:19.690Z" + "'", str34, "2022-02-11T09:49:19.690Z");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test07100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07100");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfSecond(0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        long long19 = dateTimeZone17.previousTransition(100L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(0L, chronology23);
        int int25 = localDateTime24.getWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withYearOfEra(1970);
        org.joda.time.DateTime dateTime28 = localDateTime27.toDateTime();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(0L, chronology30);
        int int32 = localDateTime31.getWeekyear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withYearOfEra(1970);
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        int int36 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime37 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime21.plus(readableDuration38);
        boolean boolean40 = localDateTime14.isAfter((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime14.minusDays(2022);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.minusMonths((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.minus(readableDuration47);
        int int49 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        boolean boolean51 = localDateTime48.equals((java.lang.Object) "\u65e5\u6587\u65e5\u672c)");
        int int52 = localDateTime48.getWeekyear();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(0L, chronology54);
        int int56 = localDateTime55.getWeekyear();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withMillisOfSecond(100);
        org.joda.time.Chronology chronology59 = localDateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.yearOfCentury();
        org.joda.time.DurationField durationField61 = chronology59.days();
        org.joda.time.DateTimeField dateTimeField62 = chronology59.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.UTC;
        long long65 = dateTimeZone63.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(dateTimeZone63);
        int[] intArray68 = chronology59.get((org.joda.time.ReadablePartial) localDateTime66, (long) 999);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.plusHours((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime48.withFields((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime48.withSecondOfMinute(53);
        int int74 = localDateTime48.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1964 + "'", int52 == 1964);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L + "'", long65 == 100L);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1970, 1, 1, 999]");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test07101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07101");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra((int) (byte) 1);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusSeconds((int) '4');
        int int10 = localDateTime6.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        long long13 = dateTimeZone11.previousTransition(100L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, chronology17);
        int int19 = localDateTime18.getWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withYearOfEra(1970);
        org.joda.time.DateTime dateTime22 = localDateTime21.toDateTime();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(0L, chronology24);
        int int26 = localDateTime25.getWeekyear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withYearOfEra(1970);
        org.joda.time.DateTime dateTime29 = localDateTime28.toDateTime();
        int int30 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime31 = localDateTime15.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime15.plus(readableDuration32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withPeriodAdded(readablePeriod34, (int) (byte) 10);
        int int37 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.hourOfDay();
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str41 = locale39.getExtension('a');
        int int42 = property38.getMaximumTextLength(locale39);
        org.joda.time.DurationField durationField43 = property38.getRangeDurationField();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test07102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07102");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        java.lang.String str36 = localDateTime34.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = localDateTime34.toString(dateTimeFormatter37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime34.monthOfYear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.withMillisOfDay(100);
        long long43 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime41, (long) 59);
        org.joda.time.Chronology chronology44 = zonedChronology28.withUTC();
        org.joda.time.DurationField durationField45 = chronology44.hours();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.000" + "'", str38, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
    }

    @Test
    public void test07103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07103");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology28);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        long long37 = zonedChronology28.add(readablePeriod34, (long) 1970, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology28.minuteOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1970L + "'", long37 == 1970L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test07104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07104");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMillisOfSecond(100);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DurationField durationField43 = chronology41.millis();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '#', chronology41);
        int[] intArray47 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime45, (long) 1);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology28.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        long long55 = dateTimeZone52.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 1, dateTimeZone52);
        org.joda.time.Chronology chronology57 = zonedChronology28.withZone(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField58 = zonedChronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField59 = zonedChronology28.minuteOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1970, 1, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L + "'", long55 == 100L);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test07105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07105");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMinutes(100);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.year();
        java.lang.String str18 = property17.getName();
        int int19 = property17.get();
        org.joda.time.DurationField durationField20 = property17.getDurationField();
        boolean boolean21 = property17.isLeap();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "year" + "'", str18, "year");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1969 + "'", int19 == 1969);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test07106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07106");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.yearOfEra();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test07107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07107");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(0L);
        long long4 = dateTimeZone0.convertUTCToLocal(1L);
        long long6 = dateTimeZone0.convertUTCToLocal((long) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        java.util.Locale locale10 = java.util.Locale.US;
        boolean boolean11 = localDateTime9.equals((java.lang.Object) locale10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(0L, chronology15);
        int int17 = localDateTime16.getWeekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property22 = localDateTime9.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime9.withCenturyOfEra(43);
        java.util.Date date25 = localDateTime9.toDate();
        boolean boolean26 = dateTimeZone0.isLocalDateTimeGap(localDateTime9);
        org.joda.time.DateTimeField[] dateTimeFieldArray27 = localDateTime9.getFields();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
    }

    @Test
    public void test07108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07108");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("2022-02-11T09:47:56.545Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:47:56.545Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07109");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale6 = new java.util.Locale("UTC");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale locale8 = builder4.build();
        java.util.Locale.Builder builder10 = builder4.setScript("");
        java.util.Locale.Builder builder11 = builder10.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.removeUnicodeLocaleAttribute("2022-02-11T09:48:33.711");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:48:33.711 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals(locale6.toString(), "utc");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "utc");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test07110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07110");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusSeconds(4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.minusYears(86399999);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        java.lang.String str16 = localDateTime14.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = localDateTime14.toString(dateTimeFormatter17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime14.monthOfYear();
        org.joda.time.Interval interval20 = property19.toInterval();
        long long21 = property19.remainder();
        org.joda.time.LocalDateTime localDateTime22 = property19.roundHalfFloorCopy();
        java.lang.String str23 = property19.getAsShortText();
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        int int25 = property19.getMaximumTextLength(locale24);
        org.joda.time.LocalDateTime localDateTime27 = property19.addWrapFieldToCopy(100);
        org.joda.time.DurationField durationField28 = property19.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime29 = property19.withMinimumValue();
        boolean boolean30 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.plus(readableDuration32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.withDayOfYear(7);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime29.plusWeeks(1964);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u65e5\u672c" + "'", str16, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:00:00.000" + "'", str18, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test07111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07111");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\u671d\u9c9c\u6587", (double) 1964L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1964.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07112");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfEra(1970);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        int int19 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.plus(readableDuration21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(0L, chronology24);
        java.util.Locale locale26 = java.util.Locale.US;
        boolean boolean27 = localDateTime25.equals((java.lang.Object) locale26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.dayOfWeek();
        int int29 = localDateTime25.getDayOfWeek();
        int int30 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime4.minusYears(9);
        org.joda.time.LocalDateTime.Property property33 = localDateTime4.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime35 = property33.addToCopy((-604195147900L));
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(0L, chronology40);
        int int42 = localDateTime41.getWeekyear();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withMillisOfSecond(100);
        org.joda.time.Chronology chronology45 = localDateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfCentury();
        org.joda.time.DurationField durationField47 = chronology45.days();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        long long50 = dateTimeZone48.previousTransition(100L);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withMillisOfSecond((int) (byte) 0);
        int[] intArray56 = chronology45.get((org.joda.time.ReadablePartial) localDateTime52, (long) (-1));
        org.joda.time.DateTimeField dateTimeField57 = chronology45.millisOfDay();
        org.joda.time.DurationField durationField58 = chronology45.hours();
        org.joda.time.DurationField durationField59 = chronology45.weeks();
        java.util.TimeZone timeZone61 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        long long66 = dateTimeZone62.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology67 = org.joda.time.chrono.ZonedChronology.getInstance(chronology45, dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField68 = zonedChronology67.yearOfEra();
        org.joda.time.DateTimeField dateTimeField69 = zonedChronology67.monthOfYear();
        org.joda.time.DateTimeField dateTimeField70 = zonedChronology67.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone71 = zonedChronology67.getZone();
        org.joda.time.DateTimeField dateTimeField72 = zonedChronology67.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField73 = zonedChronology67.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.Chronology chronology75 = zonedChronology67.withZone(dateTimeZone74);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((-60518361599823L), chronology75);
        boolean boolean77 = dateTimeZone37.isLocalDateTimeGap(localDateTime76);
        int int78 = property33.compareTo((org.joda.time.ReadablePartial) localDateTime76);
        int int79 = localDateTime76.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10L + "'", long66 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test07113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07113");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\u6708");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=1?");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07114");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfHalfday();
        java.lang.String str35 = zonedChronology28.toString();
        java.lang.String str36 = zonedChronology28.toString();
        org.joda.time.DurationField durationField37 = zonedChronology28.halfdays();
        org.joda.time.DurationField durationField38 = zonedChronology28.millis();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        long long42 = zonedChronology28.add(readablePeriod39, (long) 71, 61);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str35, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str36, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 71L + "'", long42 == 71L);
    }

    @Test
    public void test07115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07115");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfHalfday();
        java.lang.String str35 = zonedChronology28.toString();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        long long39 = dateTimeZone37.nextTransition(4363010L);
        org.joda.time.Chronology chronology40 = zonedChronology28.withZone(dateTimeZone37);
        long long45 = zonedChronology28.getDateTimeMillis(1900, (int) (byte) 10, (int) (byte) 10, (int) ' ');
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology28.dayOfMonth();
        org.joda.time.DurationField durationField47 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology28.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = zonedChronology28.getZone();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str35, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 4363010L + "'", long39 == 4363010L);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-2184623999968L) + "'", long45 == (-2184623999968L));
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
    }

    @Test
    public void test07116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07116");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone32 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.year();
        long long39 = zonedChronology28.add((long) 7, 999L, 23);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.hourOfHalfday();
        org.joda.time.Chronology chronology41 = zonedChronology28.withUTC();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(0L, chronology43);
        int int45 = localDateTime44.getWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withDayOfMonth(10);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.minusWeeks(2022);
        int int54 = localDateTime49.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property55 = localDateTime49.era();
        org.joda.time.LocalDateTime localDateTime56 = property55.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusWeeks(0);
        boolean boolean59 = zonedChronology28.equals((java.lang.Object) localDateTime58);
        org.joda.time.DurationField durationField60 = zonedChronology28.seconds();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 22984L + "'", long39 == 22984L);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(durationField60);
    }

    @Test
    public void test07117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07117");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        java.lang.String str36 = localDateTime34.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = localDateTime34.toString(dateTimeFormatter37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime34.monthOfYear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.withMillisOfDay(100);
        long long43 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime41, (long) 59);
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology28.weekOfWeekyear();
        org.joda.time.DurationField durationField45 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology28.yearOfCentury();
        org.joda.time.DurationField durationField47 = zonedChronology28.days();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.000" + "'", str38, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test07118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07118");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.centuryOfEra();
        org.joda.time.DurationField durationField36 = zonedChronology28.weekyears();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 4);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        long long41 = dateTimeZone39.previousTransition(100L);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withHourOfDay((int) (short) 0);
        int int46 = localDateTime45.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withCenturyOfEra(0);
        int int49 = localDateTime38.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime48.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.plus(readablePeriod51);
        long long54 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime52, 457L);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.minus(readableDuration55);
        int int57 = localDateTime52.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L + "'", long41 == 100L);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-59958143999900L) + "'", long54 == (-59958143999900L));
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 70 + "'", int57 == 70);
    }

    @Test
    public void test07119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07119");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        int int14 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(0L, chronology16);
        java.lang.String str19 = localDateTime17.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = localDateTime17.toString(dateTimeFormatter20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime17.monthOfYear();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundCeilingCopy();
        int int24 = localDateTime23.getMonthOfYear();
        int int25 = localDateTime23.getEra();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.withDurationAdded(readableDuration26, 52100);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMonths(5);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 4);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        long long35 = dateTimeZone33.previousTransition(100L);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withHourOfDay((int) (short) 0);
        int int40 = localDateTime39.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withCenturyOfEra(0);
        int int43 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.dayOfMonth();
        int int45 = localDateTime42.getDayOfYear();
        int int46 = localDateTime42.getYearOfEra();
        int int47 = localDateTime42.getMillisOfDay();
        boolean boolean48 = localDateTime28.isEqual((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        long long52 = dateTimeZone50.previousTransition(0L);
        long long54 = dateTimeZone50.convertUTCToLocal(1L);
        java.util.TimeZone timeZone56 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        long long59 = dateTimeZone50.getMillisKeepLocal(dateTimeZone57, (long) (-1));
        java.lang.String str61 = dateTimeZone57.getName((long) 70);
        int int63 = dateTimeZone57.getOffset((long) 4);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(0L, dateTimeZone57);
        org.joda.time.DateTime dateTime65 = localDateTime28.toDateTime(dateTimeZone57);
        boolean boolean66 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTimeZone dateTimeZone67 = dateTime65.getZone();
        int int69 = dateTimeZone67.getOffset(1925L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u65e5\u672c" + "'", str19, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:00.000" + "'", str21, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 70 + "'", int46 == 70);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test07120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07120");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int3 = timeZone1.getRawOffset();
        java.util.TimeZone timeZone4 = null;
        boolean boolean5 = timeZone1.hasSameRules(timeZone4);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = timeZone7.getOffset((long) (byte) 10);
        boolean boolean11 = timeZone7.observesDaylightTime();
        timeZone7.setRawOffset(20);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int15 = timeZone7.getRawOffset();
        boolean boolean16 = timeZone1.hasSameRules(timeZone7);
        java.lang.String str17 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642" + "'", str17, "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
    }

    @Test
    public void test07121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07121");
        java.util.Locale locale2 = new java.util.Locale("EN-US", "");
        org.junit.Assert.assertEquals(locale2.toString(), "en-us");
    }

    @Test
    public void test07122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07122");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        int int1 = strSet0.size();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(0L, chronology3);
        java.util.Locale locale5 = java.util.Locale.US;
        boolean boolean6 = localDateTime4.equals((java.lang.Object) locale5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYearOfEra((int) (byte) 1);
        int int9 = localDateTime8.getEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusSeconds((int) '4');
        int int12 = localDateTime8.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        long long15 = dateTimeZone13.previousTransition(100L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(0L, chronology19);
        int int21 = localDateTime20.getWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withYearOfEra(1970);
        org.joda.time.DateTime dateTime24 = localDateTime23.toDateTime();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(0L, chronology26);
        int int28 = localDateTime27.getWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYearOfEra(1970);
        org.joda.time.DateTime dateTime31 = localDateTime30.toDateTime();
        int int32 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime33 = localDateTime17.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime17.plus(readableDuration34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withPeriodAdded(readablePeriod36, (int) (byte) 10);
        int int39 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = strSet0.contains((java.lang.Object) localDateTime8);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 575 + "'", int1 == 575);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test07123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07123");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property7.getFieldType();
        long long12 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime13 = property7.roundHalfEvenCopy();
        java.util.Locale locale14 = java.util.Locale.ITALY;
        boolean boolean15 = locale14.hasExtensions();
        java.lang.String str16 = locale14.toLanguageTag();
        java.lang.String str17 = locale14.getDisplayScript();
        java.lang.String str18 = property7.getAsText(locale14);
        int int19 = property7.get();
        org.joda.time.LocalDateTime localDateTime21 = property7.addToCopy(0);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(0L, chronology23);
        int int25 = localDateTime24.getWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMillisOfSecond(100);
        org.joda.time.Chronology chronology28 = localDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.DurationField durationField31 = chronology28.months();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = localDateTime32.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.plusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusYears(366);
        int int39 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        long long42 = dateTimeZone40.previousTransition(100L);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withHourOfDay((int) (short) 0);
        int int47 = localDateTime46.getEra();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(0L, chronology51);
        java.lang.String str54 = localDateTime52.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = localDateTime52.toString(dateTimeFormatter55);
        org.joda.time.LocalDateTime.Property property57 = localDateTime52.monthOfYear();
        org.joda.time.Interval interval58 = property57.toInterval();
        org.joda.time.LocalDateTime localDateTime60 = property57.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property57.getFieldType();
        org.joda.time.LocalDateTime.Property property62 = localDateTime49.property(dateTimeFieldType61);
        int int63 = property62.getMinimumValueOverall();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(0L, chronology65);
        int int67 = localDateTime66.getWeekyear();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withYearOfEra(1970);
        org.joda.time.DateTime dateTime70 = localDateTime69.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.UTC;
        long long73 = dateTimeZone71.previousTransition(100L);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology74);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(0L, chronology77);
        int int79 = localDateTime78.getWeekyear();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.withYearOfEra(1970);
        org.joda.time.DateTime dateTime82 = localDateTime81.toDateTime();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime(0L, chronology84);
        int int86 = localDateTime85.getWeekyear();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime85.withYearOfEra(1970);
        org.joda.time.DateTime dateTime89 = localDateTime88.toDateTime();
        int int90 = dateTime82.compareTo((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.DateTime dateTime91 = localDateTime75.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        boolean boolean92 = dateTime70.isEqual((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Chronology chronology93 = dateTime70.getChronology();
        long long94 = property62.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTimeZone dateTimeZone95 = dateTime70.getZone();
        org.joda.time.Instant instant96 = dateTime70.toInstant();
        org.joda.time.Instant instant97 = instant96.toInstant();
        org.joda.time.DateTime dateTime98 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) instant97);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it-IT" + "'", str16, "it-IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "gennaio" + "'", str18, "gennaio");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 100L + "'", long42 == 100L);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u65e5\u672c" + "'", str54, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01T00:00:00.000" + "'", str56, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1970 + "'", int67 == 1970);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 100L + "'", long73 == 100L);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1970 + "'", int79 == 1970);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1970 + "'", int86 == 1970);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone95);
        org.junit.Assert.assertNotNull(instant96);
        org.junit.Assert.assertNotNull(instant97);
        org.junit.Assert.assertNotNull(dateTime98);
    }

    @Test
    public void test07124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07124");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(0L, chronology3);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfEra(1970);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withSecondOfMinute(32);
        boolean boolean12 = localDateTime0.isAfter((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(0L, chronology14);
        java.lang.String str17 = localDateTime15.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = localDateTime15.toString(dateTimeFormatter18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime15.monthOfYear();
        org.joda.time.Interval interval21 = property20.toInterval();
        long long22 = property20.remainder();
        org.joda.time.LocalDateTime localDateTime23 = property20.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plus(readableDuration24);
        int int26 = localDateTime25.getMillisOfDay();
        boolean boolean27 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(0L, chronology29);
        int int31 = localDateTime30.getWeekyear();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withMillisOfSecond(100);
        org.joda.time.Chronology chronology34 = localDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.DurationField durationField36 = chronology34.days();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        long long40 = dateTimeZone38.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone38);
        int[] intArray43 = chronology34.get((org.joda.time.ReadablePartial) localDateTime41, (long) 999);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(0L, chronology45);
        java.lang.String str48 = localDateTime46.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = localDateTime46.toString(dateTimeFormatter49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime46.monthOfYear();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime46.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withSecondOfMinute((int) '4');
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusWeeks(999);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime55.withDurationAdded(readableDuration58, 3);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime55.withDate((int) (short) -1, 7, 12);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime55.withMillisOfDay(4);
        int int67 = localDateTime41.compareTo((org.joda.time.ReadablePartial) localDateTime66);
        boolean boolean68 = localDateTime25.isAfter((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.DateTime dateTime69 = localDateTime66.toDateTime();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2022 + "'", int1 == 2022);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u672c" + "'", str17, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:00.000" + "'", str19, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 100L + "'", long40 == 100L);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1970, 1, 1, 999]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u65e5\u672c" + "'", str48, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01T00:00:00.000" + "'", str50, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test07125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07125");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("");
        org.joda.time.DateTimeZone dateTimeZone8 = provider0.getZone("");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNull(dateTimeZone8);
    }

    @Test
    public void test07126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07126");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfMonth();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int36 = timeZone33.getOffset((long) (byte) 10);
        boolean boolean37 = timeZone33.observesDaylightTime();
        timeZone33.setRawOffset(20);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.chrono.ZonedChronology zonedChronology41 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology28, dateTimeZone40);
        // The following exception was thrown during execution in test generation
        try {
            long long47 = zonedChronology28.getDateTimeMillis((long) 71, 36060000, 0, 365, 1969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36060000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(zonedChronology41);
    }

    @Test
    public void test07127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07127");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone10.previousTransition(0L);
        org.joda.time.Chronology chronology13 = chronology6.withZone(dateTimeZone10);
        int int15 = dateTimeZone10.getOffsetFromLocal((-35519989L));
        long long17 = dateTimeZone10.nextTransition(6311L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 6311L + "'", long17 == 6311L);
    }

    @Test
    public void test07128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07128");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfEra(1970);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        int int19 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.plus(readableDuration21);
        int int23 = localDateTime4.size();
        org.joda.time.LocalDateTime.Property property24 = localDateTime4.millisOfSecond();
        org.joda.time.LocalDateTime.Property property25 = localDateTime4.centuryOfEra();
        int int26 = localDateTime4.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property27 = localDateTime4.dayOfWeek();
        org.joda.time.DurationField durationField28 = property27.getRangeDurationField();
        java.lang.String str29 = property27.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property27.getFieldType();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u6728\u66dc\u65e5" + "'", str29, "\u6728\u66dc\u65e5");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
    }

    @Test
    public void test07129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07129");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusDays(4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plus(readableDuration10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime6.minuteOfHour();
        boolean boolean13 = property12.isLeap();
        org.joda.time.LocalDateTime localDateTime14 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime16 = property12.addToCopy(42293116539L);
        org.joda.time.Interval interval17 = property12.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(interval17);
    }

    @Test
    public void test07130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07130");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.minuteOfHour();
        boolean boolean5 = property4.isLeap();
        int int6 = property4.get();
        java.lang.String str7 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime8 = property4.roundFloorCopy();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.lang.String str10 = locale9.getDisplayCountry();
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale9.getDisplayLanguage(locale11);
        java.lang.String str13 = property4.getAsText(locale11);
        java.lang.String str14 = property4.getName();
        int int15 = property4.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime16 = property4.roundFloorCopy();
        java.lang.String str17 = property4.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 49 + "'", int6 == 49);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "49" + "'", str7, "49");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u65e5\u672c" + "'", str10, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Japanisch" + "'", str12, "Japanisch");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "49" + "'", str13, "49");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "minuteOfHour" + "'", str14, "minuteOfHour");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[minuteOfHour]" + "'", str17, "Property[minuteOfHour]");
    }

    @Test
    public void test07131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07131");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\u82f1\u8a9e\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd)", (double) (-1247332470986231L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-1.247332470986231E15");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07132");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', 32);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test07133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07133");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.centuryOfEra();
        org.joda.time.DurationField durationField36 = zonedChronology28.seconds();
        org.joda.time.DurationField durationField37 = zonedChronology28.centuries();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology28.minuteOfHour();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test07134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07134");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMonths(9);
        int int14 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.minusMinutes((int) '#');
        int int17 = localDateTime11.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 70 + "'", int14 == 70);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test07135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07135");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        int int6 = dateTimeZone2.getStandardOffset(999L);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale8);
        java.util.Locale locale12 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.lang.String str15 = locale8.getDisplayName(locale12);
        java.lang.String str16 = dateTimeZone2.getName(35L, locale8);
        java.util.Set<java.lang.String> strSet17 = locale8.getUnicodeLocaleKeys();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(0L, chronology19);
        int int21 = localDateTime20.getWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withMillisOfSecond(100);
        org.joda.time.Chronology chronology24 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfCentury();
        org.joda.time.DurationField durationField26 = chronology24.days();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        long long29 = dateTimeZone27.previousTransition(100L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withMillisOfSecond((int) (byte) 0);
        int[] intArray35 = chronology24.get((org.joda.time.ReadablePartial) localDateTime31, (long) (-1));
        org.joda.time.DateTimeField dateTimeField36 = chronology24.millisOfDay();
        org.joda.time.DurationField durationField37 = chronology24.hours();
        org.joda.time.DurationField durationField38 = chronology24.weeks();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        long long45 = dateTimeZone41.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology46 = org.joda.time.chrono.ZonedChronology.getInstance(chronology24, dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology46.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology46.millisOfSecond();
        org.joda.time.DurationField durationField49 = zonedChronology46.months();
        java.lang.String str50 = zonedChronology46.toString();
        java.lang.String str51 = zonedChronology46.toString();
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology46.clockhourOfDay();
        long long57 = zonedChronology46.getDateTimeMillis(0, 1, (int) (byte) 1, 20);
        org.joda.time.DateTimeZone dateTimeZone58 = zonedChronology46.getZone();
        org.joda.time.Chronology chronology59 = zonedChronology46.withUTC();
        org.joda.time.DateTimeField dateTimeField60 = zonedChronology46.millisOfDay();
        boolean boolean61 = strSet17.remove((java.lang.Object) dateTimeField60);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale12.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Japanese (Japan)" + "'", str15, "Japanese (Japan)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L + "'", long29 == 100L);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str50, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str51, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-62167219199980L) + "'", long57 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test07136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07136");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        java.lang.String str36 = localDateTime34.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = localDateTime34.toString(dateTimeFormatter37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime34.monthOfYear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.withMillisOfDay(100);
        long long43 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime41, (long) 59);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(0L, chronology45);
        int int47 = localDateTime46.getWeekyear();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withYearOfEra(1970);
        org.joda.time.DateTime dateTime50 = localDateTime49.toDateTime();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(0L, chronology52);
        int int54 = localDateTime53.getWeekyear();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withYearOfEra(1970);
        org.joda.time.DateTime dateTime57 = localDateTime56.toDateTime();
        int int58 = dateTime50.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime59 = localDateTime41.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        boolean boolean61 = dateTime57.isSupported(dateTimeFieldType60);
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime57.getZone();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.000" + "'", str38, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeZone62);
    }

    @Test
    public void test07137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07137");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.weekOfWeekyear();
        org.joda.time.Chronology chronology36 = zonedChronology28.withUTC();
        org.joda.time.DurationField durationField37 = zonedChronology28.years();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test07138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07138");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.eras();
        org.joda.time.Chronology chronology9 = chronology6.withUTC();
        java.lang.String str10 = chronology9.toString();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYear(27236744);
        org.joda.time.DurationFieldType durationFieldType14 = null;
        boolean boolean15 = localDateTime11.isSupported(durationFieldType14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusWeeks(1967);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = localDateTime11.toString(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[UTC]" + "'", str10, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-11T09:49:20.864" + "'", str19, "2022-02-11T09:49:20.864");
    }

    @Test
    public void test07139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07139");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("UTC");
        java.util.Locale.Builder builder9 = builder6.clear();
        java.util.Locale.Builder builder10 = builder9.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder9.setExtension('#', "\uc77c\ubcf8\uc5b4 (0022-06-20T09:00:00.000,Ora media di Greenwich)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test07140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07140");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusHours((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths((int) '#');
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plus(readablePeriod17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withDayOfMonth(35286275);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35286275 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test07141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07141");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfEra(1970);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        int int19 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.plus(readableDuration21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(0L, chronology24);
        java.util.Locale locale26 = java.util.Locale.US;
        boolean boolean27 = localDateTime25.equals((java.lang.Object) locale26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.dayOfWeek();
        int int29 = localDateTime25.getDayOfWeek();
        int int30 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.plus(readableDuration31);
        int int33 = localDateTime25.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime25.withYearOfEra((int) 'x');
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays(0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime40 = property38.setCopy("2022-02-11T09:48:22.992");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:48:22.992\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 19 + "'", int33 == 19);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test07142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07142");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfSecond(0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone10.previousTransition(100L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(0L, chronology16);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYearOfEra(1970);
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(0L, chronology23);
        int int25 = localDateTime24.getWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withYearOfEra(1970);
        org.joda.time.DateTime dateTime28 = localDateTime27.toDateTime();
        int int29 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime30 = localDateTime14.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime14.plus(readableDuration31);
        boolean boolean33 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime7.minusDays(2022);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.minusMonths((int) (short) 10);
        org.joda.time.LocalDateTime.Property property40 = localDateTime35.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.minusYears(2);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusMonths(1971);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plus(readableDuration45);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
    }

    @Test
    public void test07143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07143");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfEra(1970);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        int int19 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.plus(readableDuration21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withPeriodAdded(readablePeriod23, (int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = localDateTime25.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusSeconds(70);
        java.lang.String str29 = localDateTime25.toString();
        org.joda.time.LocalDateTime.Property property30 = localDateTime25.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withYearOfCentury(8);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, chronology34);
        int int36 = localDateTime35.getWeekyear();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withYearOfEra(1970);
        org.joda.time.DateTime dateTime39 = localDateTime38.toDateTime();
        int int40 = localDateTime38.getYearOfEra();
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.minusMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime45 = localDateTime38.plusSeconds(97);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = localDateTime38.getFieldTypes();
        org.joda.time.LocalDateTime.Property property47 = localDateTime38.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property47.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime50 = localDateTime32.withField(dateTimeFieldType48, 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.100" + "'", str29, "1970-01-01T00:00:00.100");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
    }

    @Test
    public void test07144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07144");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.lang.String str11 = property7.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property7.getFieldType();
        org.joda.time.LocalDateTime localDateTime13 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = property14.getLocalDateTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readableDuration16);
        int int18 = localDateTime17.getMillisOfDay();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test07145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07145");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.halfdayOfDay();
        org.joda.time.Chronology chronology35 = zonedChronology28.withUTC();
        org.joda.time.DurationField durationField36 = zonedChronology28.years();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.dayOfYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test07146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07146");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        int int11 = property7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime12 = property7.roundCeilingCopy();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test07147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07147");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("UTC");
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder8.addUnicodeLocaleAttribute("2022-02-11T09:44:17.426");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:44:17.426 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test07148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07148");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(0L);
        long long4 = dateTimeZone0.convertUTCToLocal(1L);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        long long9 = dateTimeZone0.getMillisKeepLocal(dateTimeZone7, (long) (-1));
        java.lang.String str11 = dateTimeZone7.getName((long) 70);
        int int13 = dateTimeZone7.getOffset((long) 4);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(0L, chronology15);
        int int17 = localDateTime16.getWeekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withMillisOfSecond(100);
        org.joda.time.Chronology chronology20 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.days();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        long long25 = dateTimeZone23.previousTransition(100L);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMillisOfSecond((int) (byte) 0);
        int[] intArray31 = chronology20.get((org.joda.time.ReadablePartial) localDateTime27, (long) (-1));
        org.joda.time.DateTimeField dateTimeField32 = chronology20.millisOfDay();
        org.joda.time.DurationField durationField33 = chronology20.hours();
        org.joda.time.DurationField durationField34 = chronology20.weeks();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        long long41 = dateTimeZone37.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology42 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology42.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology42.millisOfSecond();
        org.joda.time.DurationField durationField45 = zonedChronology42.months();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology42.minuteOfDay();
        org.joda.time.DurationField durationField47 = zonedChronology42.halfdays();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology42.centuryOfEra();
        java.lang.String str49 = zonedChronology42.toString();
        boolean boolean50 = dateTimeZone7.equals((java.lang.Object) zonedChronology42);
        org.joda.time.DurationField durationField51 = zonedChronology42.hours();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str49, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test07149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07149");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        int int12 = property7.getMaximumTextLength(locale11);
        org.joda.time.LocalDateTime localDateTime13 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMillis(8);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusSeconds(59);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plusDays(35116539);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test07150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07150");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology28);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        long long37 = zonedChronology28.add(readablePeriod34, (long) 1970, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.era();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1970L + "'", long37 == 1970L);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test07151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07151");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone8.previousTransition(0L);
        long long12 = dateTimeZone8.nextTransition((long) (-1));
        org.joda.time.Chronology chronology13 = chronology6.withZone(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.hourOfDay();
        org.joda.time.DurationField durationField16 = property15.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime17 = property15.withMaximumValue();
        int int18 = property15.getMaximumValue();
        long long19 = property15.remainder();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 23 + "'", int18 == 23);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2961484L + "'", long19 == 2961484L);
    }

    @Test
    public void test07152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07152");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusDays(1970);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withMillisOfSecond(100);
        org.joda.time.Chronology chronology18 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.DurationField durationField21 = chronology18.months();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(chronology18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime22.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.minusHours((int) '#');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.minusDays(3);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.withYearOfCentury((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withDurationAdded(readableDuration32, 12);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        java.util.Locale locale38 = java.util.Locale.US;
        boolean boolean39 = localDateTime37.equals((java.lang.Object) locale38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(0L, chronology43);
        int int45 = localDateTime44.getWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime37.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withEra((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withMillisOfSecond(70);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.yearOfCentury();
        long long55 = property54.remainder();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(0L, chronology57);
        java.lang.String str60 = localDateTime58.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = null;
        java.lang.String str62 = localDateTime58.toString(dateTimeFormatter61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime58.monthOfYear();
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime58.plus(readableDuration64);
        org.joda.time.DateTime dateTime66 = localDateTime65.toDateTime();
        org.joda.time.Instant instant67 = dateTime66.toInstant();
        long long68 = property54.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime69 = localDateTime31.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime70 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(0L, chronology72);
        int int74 = localDateTime73.getWeekyear();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.UTC;
        long long79 = dateTimeZone77.previousTransition(100L);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology80);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.withMillisOfSecond((int) (byte) 0);
        int int84 = localDateTime73.compareTo((org.joda.time.ReadablePartial) localDateTime81);
        int int85 = localDateTime81.getDayOfYear();
        org.joda.time.LocalDateTime.Property property86 = localDateTime81.dayOfYear();
        java.lang.String str87 = property86.getAsShortText();
        java.lang.String str88 = property86.getAsText();
        int int89 = property86.getMinimumValue();
        java.lang.String str90 = property86.toString();
        boolean boolean91 = dateTime70.equals((java.lang.Object) property86);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u65e5\u672c" + "'", str60, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-01T00:00:00.000" + "'", str62, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-3940L) + "'", long68 == (-3940L));
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1970 + "'", int74 == 1970);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 100L + "'", long79 == 100L);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "1" + "'", str87, "1");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "1" + "'", str88, "1");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Property[dayOfYear]" + "'", str90, "Property[dayOfYear]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test07153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07153");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        java.lang.String str9 = localDateTime7.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = localDateTime7.toString(dateTimeFormatter10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        boolean boolean14 = dateTimeZone2.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone2);
        java.lang.String str16 = dateTimeZone2.getID();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        long long19 = dateTimeZone17.previousTransition(0L);
        long long21 = dateTimeZone17.convertUTCToLocal(1L);
        java.util.Locale locale24 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.lang.String str26 = locale24.getDisplayLanguage(locale25);
        boolean boolean27 = dateTimeZone17.equals((java.lang.Object) str26);
        java.lang.String str28 = dateTimeZone17.getID();
        long long30 = dateTimeZone2.getMillisKeepLocal(dateTimeZone17, 0L);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 2022, dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c" + "'", str9, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.000" + "'", str11, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertEquals(locale24.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u65e5\u672c" + "'", str26, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test07154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07154");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours((int) ' ');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusMinutes(3);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        long long14 = dateTimeZone12.previousTransition(100L);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withHourOfDay((int) (short) 0);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(0L, chronology20);
        int int22 = localDateTime21.getWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusHours((int) ' ');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(0L, chronology28);
        int int30 = localDateTime29.getWeekyear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withMillisOfSecond(100);
        org.joda.time.Chronology chronology33 = localDateTime29.getChronology();
        java.lang.String str34 = localDateTime29.toString();
        int int35 = localDateTime29.getYearOfCentury();
        int int36 = localDateTime29.getCenturyOfEra();
        boolean boolean37 = localDateTime26.isEqual((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(0L, chronology39);
        int int41 = localDateTime40.getWeekyear();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withMillisOfSecond(100);
        org.joda.time.Chronology chronology44 = localDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        long long48 = dateTimeZone46.previousTransition(0L);
        long long50 = dateTimeZone46.nextTransition((long) (-1));
        org.joda.time.Chronology chronology51 = chronology44.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField52 = chronology44.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(chronology44);
        org.joda.time.DateTimeZone dateTimeZone54 = chronology44.getZone();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.Chronology chronology57 = chronology44.withZone(dateTimeZone56);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime26, chronology57);
        int int59 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        java.lang.String str60 = localDateTime18.toString();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime18.withMinuteOfHour(52);
        boolean boolean63 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime11.minusMillis(19);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01T00:00:00.000" + "'", str34, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 70 + "'", int35 == 70);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 19 + "'", int36 == 19);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1970-01-01T00:00:00.100" + "'", str60, "1970-01-01T00:00:00.100");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDateTime65);
    }

    @Test
    public void test07155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07155");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("1959-01-01T00:27:11.004");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=1959-01-01t00:27:11.004");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07156");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        int int14 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime13);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean17 = dateTime13.equals((java.lang.Object) timeZone16);
        java.lang.String str18 = timeZone16.getID();
        java.lang.String str19 = timeZone16.getID();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GMT" + "'", str18, "GMT");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GMT" + "'", str19, "GMT");
    }

    @Test
    public void test07157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07157");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeZone dateTimeZone31 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.weekOfWeekyear();
        org.joda.time.DurationField durationField35 = zonedChronology28.years();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        long long38 = dateTimeZone36.previousTransition(100L);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(0L, chronology42);
        int int44 = localDateTime43.getWeekyear();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withYearOfEra(1970);
        org.joda.time.DateTime dateTime47 = localDateTime46.toDateTime();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(0L, chronology49);
        int int51 = localDateTime50.getWeekyear();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withYearOfEra(1970);
        org.joda.time.DateTime dateTime54 = localDateTime53.toDateTime();
        int int55 = dateTime47.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime56 = localDateTime40.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime40.plus(readableDuration57);
        int int59 = localDateTime40.size();
        org.joda.time.LocalDateTime.Property property60 = localDateTime40.millisOfSecond();
        org.joda.time.LocalDateTime.Property property61 = localDateTime40.centuryOfEra();
        int int62 = localDateTime40.getMonthOfYear();
        boolean boolean63 = zonedChronology28.equals((java.lang.Object) localDateTime40);
        org.joda.time.DurationField durationField64 = zonedChronology28.halfdays();
        org.joda.time.DurationField durationField65 = zonedChronology28.centuries();
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        long long69 = zonedChronology28.add(readablePeriod66, 1013420747344L, 36000000);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(0L, chronology71);
        java.lang.String str74 = localDateTime72.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = null;
        java.lang.String str76 = localDateTime72.toString(dateTimeFormatter75);
        org.joda.time.LocalDateTime.Property property77 = localDateTime72.monthOfYear();
        org.joda.time.Interval interval78 = property77.toInterval();
        long long79 = property77.remainder();
        org.joda.time.LocalDateTime localDateTime80 = property77.roundHalfFloorCopy();
        java.lang.String str81 = property77.getAsShortText();
        org.joda.time.DateTimeField dateTimeField82 = property77.getField();
        org.joda.time.LocalDateTime localDateTime83 = property77.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.plusMonths(27236744);
        int int88 = localDateTime87.getCenturyOfEra();
        int[] intArray90 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime87, 1644572148897L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L + "'", long38 == 100L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1013420747344L + "'", long69 == 1013420747344L);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u65e5\u672c" + "'", str74, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01T00:00:00.000" + "'", str76, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "1" + "'", str81, "1");
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 22697 + "'", int88 == 22697);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[2022, 2, 11, 34548897]");
    }

    @Test
    public void test07158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07158");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfHalfday();
        java.lang.String str35 = zonedChronology28.toString();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        long long39 = dateTimeZone37.nextTransition(4363010L);
        org.joda.time.Chronology chronology40 = zonedChronology28.withZone(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone41 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology28.era();
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology28);
        org.joda.time.DurationField durationField44 = zonedChronology28.minutes();
        org.joda.time.DateTimeZone dateTimeZone45 = zonedChronology28.getZone();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        long long49 = dateTimeZone47.previousTransition(100L);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withHourOfDay((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withYear(1);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = property56.roundCeilingCopy();
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale58);
        java.util.Locale locale62 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.lang.String str64 = locale62.getDisplayLanguage(locale63);
        java.lang.String str65 = locale58.getDisplayName(locale62);
        java.util.Locale locale66 = java.util.Locale.ITALY;
        java.lang.String str67 = locale62.getDisplayScript(locale66);
        int int68 = property56.getMaximumTextLength(locale66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(0L, chronology70);
        int int72 = localDateTime71.getWeekyear();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.UTC;
        long long77 = dateTimeZone75.previousTransition(100L);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.withMillisOfSecond((int) (byte) 0);
        int int82 = localDateTime71.compareTo((org.joda.time.ReadablePartial) localDateTime79);
        int int83 = localDateTime79.getDayOfYear();
        org.joda.time.LocalDateTime.Property property84 = localDateTime79.dayOfYear();
        java.lang.String str85 = property84.getAsShortText();
        java.util.Locale locale89 = new java.util.Locale("GMT", "Jan", "2022-02-11T09:43:35.370");
        java.lang.String str90 = locale89.getDisplayLanguage();
        java.lang.String str91 = locale89.getVariant();
        java.lang.String str92 = locale89.getDisplayCountry();
        int int93 = property84.getMaximumShortTextLength(locale89);
        java.util.Set<java.lang.String> strSet94 = locale89.getUnicodeLocaleAttributes();
        java.lang.String str95 = locale66.getDisplayLanguage(locale89);
        java.lang.String str96 = dateTimeZone45.getShortName(35155686L, locale89);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str35, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 4363010L + "'", long39 == 4363010L);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 100L + "'", long49 == 100L);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale62.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u65e5\u672c" + "'", str64, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Japanese (Japan)" + "'", str65, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1970 + "'", int72 == 1970);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 100L + "'", long77 == 100L);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "1" + "'", str85, "1");
        org.junit.Assert.assertEquals(locale89.toString(), "gmt_JAN_2022-02-11T09:43:35.370");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "gmt" + "'", str90, "gmt");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "2022-02-11T09:43:35.370" + "'", str91, "2022-02-11T09:43:35.370");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "JAN" + "'", str92, "JAN");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 3 + "'", int93 == 3);
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Italian" + "'", str95, "Italian");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "+00:00" + "'", str96, "+00:00");
    }

    @Test
    public void test07159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07159");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.util.Locale locale4 = java.util.Locale.JAPAN;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale3.getDisplayName();
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.String str15 = locale12.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale3, locale8, locale12, locale16, locale19, locale20, locale21, locale24, locale25 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap32);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, strMap37);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap39 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList40 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, strMap39);
        java.util.Collection<java.util.Locale> localeCollection41 = null;
        java.util.Locale.FilteringMode filteringMode42 = null;
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, localeCollection41, filteringMode42);
        java.util.Locale locale44 = java.util.Locale.lookup(languageRangeList33, (java.util.Collection<java.util.Locale>) localeList43);
        java.util.Locale locale47 = new java.util.Locale("HI!", "US");
        java.lang.String str48 = locale47.getISO3Language();
        java.util.Set<java.lang.String> strSet49 = locale47.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags(languageRangeList33, (java.util.Collection<java.lang.String>) strSet49);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u65e5\u672c" + "'", str5, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str6, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c" + "'", str9, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str11, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str15, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c" + "'", str18, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u672c" + "'", str27, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertNotNull(languageRangeList40);
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertNull(locale44);
        org.junit.Assert.assertEquals(locale47.toString(), "hi!_US");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(strList50);
    }

    @Test
    public void test07160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07160");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(0L, chronology5);
        java.lang.String str8 = localDateTime6.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = localDateTime6.toString(dateTimeFormatter9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime6.monthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundCeilingCopy();
        boolean boolean13 = dateTimeZone1.isLocalDateTimeGap(localDateTime12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        java.lang.String str15 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        long long18 = dateTimeZone16.previousTransition(0L);
        long long20 = dateTimeZone16.convertUTCToLocal(1L);
        java.util.Locale locale23 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        boolean boolean26 = dateTimeZone16.equals((java.lang.Object) str25);
        java.lang.String str27 = dateTimeZone16.getID();
        long long29 = dateTimeZone1.getMillisKeepLocal(dateTimeZone16, 0L);
        long long31 = dateTimeZone1.nextTransition((long) 44);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        long long35 = dateTimeZone1.getMillisKeepLocal(dateTimeZone33, (long) 35116539);
        long long38 = dateTimeZone33.adjustOffset(39420L, true);
        long long41 = dateTimeZone33.adjustOffset((long) 59, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c" + "'", str8, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.000" + "'", str10, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertEquals(locale23.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u65e5\u672c" + "'", str25, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 44L + "'", long31 == 44L);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 31516539L + "'", long35 == 31516539L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 39420L + "'", long38 == 39420L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 59L + "'", long41 == 59L);
    }

    @Test
    public void test07161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07161");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.minuteOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology32.centuries();
        org.joda.time.DurationField durationField35 = zonedChronology32.weekyears();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology32.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology32.millisOfDay();
        org.joda.time.DurationField durationField38 = zonedChronology32.weeks();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        long long41 = dateTimeZone39.previousTransition(0L);
        long long43 = dateTimeZone39.nextTransition((long) (-1));
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone39);
        int int45 = localDateTime44.size();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        boolean boolean48 = dateTimeZone46.isLocalDateTimeGap(localDateTime47);
        int[] intArray49 = localDateTime47.getValues();
        zonedChronology32.validate((org.joda.time.ReadablePartial) localDateTime44, intArray49);
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology32.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[2022, 2, 11, 35361826]");
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test07162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07162");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        long long9 = dateTimeZone7.previousTransition(100L);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(0L, chronology20);
        int int22 = localDateTime21.getWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYearOfEra(1970);
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        int int26 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        boolean boolean28 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(0L, chronology30);
        int int32 = localDateTime31.getWeekyear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withMillisOfSecond(100);
        org.joda.time.Chronology chronology35 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DurationField durationField37 = chronology35.days();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        long long40 = dateTimeZone38.previousTransition(100L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withMillisOfSecond((int) (byte) 0);
        int[] intArray46 = chronology35.get((org.joda.time.ReadablePartial) localDateTime42, (long) (-1));
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        long long49 = dateTimeZone47.previousTransition(0L);
        long long51 = dateTimeZone47.convertUTCToLocal(1L);
        long long53 = dateTimeZone47.convertUTCToLocal((long) (byte) 10);
        org.joda.time.DateTime dateTime54 = localDateTime42.toDateTime(dateTimeZone47);
        boolean boolean55 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(0L, chronology57);
        int int59 = localDateTime58.getWeekyear();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withMillisOfSecond(100);
        org.joda.time.Chronology chronology62 = localDateTime58.getChronology();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime58.plusMinutes((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime58.minusMinutes(3);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withYear(1970);
        boolean boolean69 = dateTime18.equals((java.lang.Object) 1970);
        org.joda.time.DateTimeZone dateTimeZone70 = dateTime18.getZone();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 100L + "'", long40 == 100L);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10L + "'", long53 == 10L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1970 + "'", int59 == 1970);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTimeZone70);
    }

    @Test
    public void test07163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07163");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 4);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone2.previousTransition(100L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withHourOfDay((int) (short) 0);
        int int9 = localDateTime8.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withCenturyOfEra(0);
        int int12 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plus(readableDuration14);
        int int16 = localDateTime11.getHourOfDay();
        int int17 = localDateTime11.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L + "'", long4 == 100L);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test07164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07164");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology6.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DurationField durationField23 = chronology6.days();
        org.joda.time.DateTimeField dateTimeField24 = chronology6.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test07165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07165");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone10.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone10);
        int[] intArray15 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) 999);
        int int16 = localDateTime13.getEra();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1, 999]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test07166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07166");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        strSet1.clear();
        java.lang.Object[] objArray3 = strSet1.toArray();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.parse("CN", strMap5);
        org.joda.time.tz.Provider provider7 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet8 = provider7.getAvailableIDs();
        java.util.Set<java.lang.String> strSet9 = provider7.getAvailableIDs();
        java.util.List<java.lang.String> strList10 = java.util.Locale.filterTags(languageRangeList6, (java.util.Collection<java.lang.String>) strSet9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList6, strMap11);
        java.util.Locale locale16 = new java.util.Locale("ja", "TW", "\uc77c\ubcf8\uc5b4\uc77c\ubcf8)");
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String[] strArray19 = java.util.TimeZone.getAvailableIDs(44);
        java.lang.String[] strArray20 = strSet17.toArray(strArray19);
        java.lang.String str21 = java.util.Locale.lookupTag(languageRangeList12, (java.util.Collection<java.lang.String>) strSet17);
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        boolean boolean24 = strSet23.isEmpty();
        boolean boolean25 = strSet23.isEmpty();
        strSet23.clear();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap28 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.parse("Jan", strMap28);
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator33 = strSet32.spliterator();
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Locale locale37 = java.util.Locale.JAPAN;
        java.util.Locale locale38 = java.util.Locale.JAPAN;
        java.lang.String str39 = locale37.getDisplayCountry(locale38);
        java.lang.String str40 = locale37.getDisplayName();
        java.util.Locale locale41 = java.util.Locale.JAPAN;
        java.util.Locale locale42 = java.util.Locale.JAPAN;
        java.lang.String str43 = locale41.getDisplayCountry(locale42);
        java.util.Locale locale44 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str45 = locale42.getDisplayName(locale44);
        java.util.Locale locale46 = java.util.Locale.JAPAN;
        java.util.Locale locale47 = java.util.Locale.JAPAN;
        java.lang.String str48 = locale46.getDisplayCountry(locale47);
        java.lang.String str49 = locale46.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.JAPAN;
        java.lang.String str52 = locale50.getDisplayCountry(locale51);
        java.util.Locale locale53 = java.util.Locale.ITALIAN;
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.util.Locale locale55 = java.util.Locale.JAPAN;
        java.util.Locale locale56 = java.util.Locale.JAPAN;
        java.lang.String str57 = locale55.getDisplayCountry(locale56);
        java.util.Locale locale58 = java.util.Locale.ITALIAN;
        java.util.Locale locale59 = java.util.Locale.JAPAN;
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.lang.String str61 = locale59.getDisplayCountry(locale60);
        java.util.Locale[] localeArray62 = new java.util.Locale[] { locale37, locale42, locale46, locale50, locale53, locale54, locale55, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList63 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList63, localeArray62);
        java.util.List<java.util.Locale> localeList65 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList63);
        boolean boolean66 = strSet32.retainAll((java.util.Collection<java.util.Locale>) localeList63);
        java.util.Locale.FilteringMode filteringMode67 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter(languageRangeList29, (java.util.Collection<java.util.Locale>) localeList63, filteringMode67);
        boolean boolean69 = strSet23.retainAll((java.util.Collection<java.util.Locale>) localeList63);
        java.util.stream.Stream<java.util.Locale> localeStream70 = localeList63.stream();
        java.util.List<java.util.Locale> localeList71 = java.util.Locale.filter(languageRangeList12, (java.util.Collection<java.util.Locale>) localeList63);
        boolean boolean72 = strSet1.removeAll((java.util.Collection<java.util.Locale>) localeList63);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(provider7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(languageRangeList12);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "\uc77c\ubcf8\uc5b4\uc77c\ubcf8)");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strSpliterator33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u65e5\u672c" + "'", str39, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str40, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u65e5\u672c" + "'", str43, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str45, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u65e5\u672c" + "'", str48, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str49, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u65e5\u672c" + "'", str52, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u65e5\u672c" + "'", str57, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u65e5\u672c" + "'", str61, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(localeList65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + filteringMode67 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode67.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localeStream70);
        org.junit.Assert.assertNotNull(localeList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test07167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07167");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField9 = chronology6.seconds();
        long long13 = chronology6.add((long) (-100), (long) 14, 4044);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 56516L + "'", long13 == 56516L);
    }

    @Test
    public void test07168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07168");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.era();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.year();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.secondOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test07169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07169");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("CN", strMap1);
        org.joda.time.tz.Provider provider3 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet4 = provider3.getAvailableIDs();
        java.util.Set<java.lang.String> strSet5 = provider3.getAvailableIDs();
        java.util.List<java.lang.String> strList6 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap7);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        boolean boolean11 = strSet10.isEmpty();
        java.util.List<java.lang.String> strList12 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet10);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(provider3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test07170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07170");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone8.previousTransition(0L);
        long long12 = dateTimeZone8.nextTransition((long) (-1));
        org.joda.time.Chronology chronology13 = chronology6.withZone(dateTimeZone8);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        java.util.Locale.Builder builder18 = builder15.setLanguage("");
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder21 = builder15.setLocale(locale19);
        java.lang.String str22 = dateTimeZone8.getShortName(19L, locale19);
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str27 = locale24.getDisplayScript(locale25);
        java.lang.String str28 = locale19.getDisplayScript(locale25);
        java.util.Set<java.lang.String> strSet29 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str30 = locale25.getLanguage();
        java.lang.String str31 = locale25.getDisplayLanguage();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "zh" + "'", str30, "zh");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str31, "\u4e2d\u56fd\u8a9e");
    }

    @Test
    public void test07171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07171");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.hourOfHalfday();
        org.joda.time.Chronology chronology35 = zonedChronology28.withUTC();
        org.joda.time.DurationField durationField36 = zonedChronology28.millis();
        org.joda.time.DateTimeZone dateTimeZone37 = zonedChronology28.getZone();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
    }

    @Test
    public void test07172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07172");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfEra(1970);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        int int19 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.plus(readableDuration21);
        int int23 = localDateTime4.size();
        org.joda.time.LocalDateTime.Property property24 = localDateTime4.millisOfSecond();
        org.joda.time.LocalDateTime.Property property25 = localDateTime4.centuryOfEra();
        java.lang.String str26 = property25.getAsText();
        org.joda.time.LocalDateTime localDateTime27 = property25.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "19" + "'", str26, "19");
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test07173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07173");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder0.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder0.setUnicodeLocaleKeyword("KR", "HI!");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword type: HI! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test07174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07174");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withPeriodAdded(readablePeriod2, 1950);
        int int6 = localDateTime4.getValue((int) (short) 1);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.lang.String str9 = locale8.getVariant();
        java.lang.String str10 = localDateTime4.toString("\u5fb7\u56fd", locale8);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u5fb7\u56fd" + "'", str10, "\u5fb7\u56fd");
    }

    @Test
    public void test07175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07175");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-60518361599999L));
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusMonths(53);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.monthOfYear();
        int int6 = localDateTime1.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.weekyear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withMillisOfSecond(100);
        org.joda.time.Chronology chronology14 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusMinutes((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime10.millisOfSecond();
        org.joda.time.LocalDateTime.Property property18 = localDateTime10.minuteOfHour();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(0L, chronology20);
        int int22 = localDateTime21.getWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withMillisOfSecond(100);
        org.joda.time.Chronology chronology25 = localDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DurationField durationField27 = chronology25.eras();
        org.joda.time.Chronology chronology28 = chronology25.withUTC();
        java.lang.String str29 = chronology28.toString();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(0L, chronology32);
        int int34 = localDateTime33.getWeekyear();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        long long39 = dateTimeZone37.previousTransition(100L);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withMillisOfSecond((int) (byte) 0);
        int int44 = localDateTime33.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        long long48 = dateTimeZone45.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = localDateTime33.toDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime51 = localDateTime30.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        int int52 = property18.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        long long55 = dateTimeZone53.previousTransition(100L);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withHourOfDay((int) (short) 0);
        int int60 = localDateTime59.getEra();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(0L, chronology64);
        java.lang.String str67 = localDateTime65.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = null;
        java.lang.String str69 = localDateTime65.toString(dateTimeFormatter68);
        org.joda.time.LocalDateTime.Property property70 = localDateTime65.monthOfYear();
        org.joda.time.Interval interval71 = property70.toInterval();
        org.joda.time.LocalDateTime localDateTime73 = property70.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = property70.getFieldType();
        org.joda.time.LocalDateTime.Property property75 = localDateTime62.property(dateTimeFieldType74);
        int int76 = localDateTime62.getWeekOfWeekyear();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(0L, chronology78);
        int int80 = localDateTime79.getWeekyear();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime79.withYearOfEra(1970);
        org.joda.time.DateTime dateTime83 = localDateTime82.toDateTime();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.LocalDateTime localDateTime86 = new org.joda.time.LocalDateTime(0L, chronology85);
        int int87 = localDateTime86.getWeekyear();
        org.joda.time.LocalDateTime localDateTime89 = localDateTime86.withYearOfEra(1970);
        org.joda.time.DateTime dateTime90 = localDateTime89.toDateTime();
        int int91 = dateTime83.compareTo((org.joda.time.ReadableInstant) dateTime90);
        java.util.TimeZone timeZone93 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean94 = dateTime90.equals((java.lang.Object) timeZone93);
        org.joda.time.DateTimeZone dateTimeZone95 = dateTime90.getZone();
        org.joda.time.DateTime dateTime96 = localDateTime62.toDateTime((org.joda.time.ReadableInstant) dateTime90);
        boolean boolean97 = dateTime50.isAfter((org.joda.time.ReadableInstant) dateTime96);
        org.joda.time.DateTimeZone dateTimeZone98 = dateTime50.getZone();
        long long99 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime50);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 14 + "'", int6 == 14);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[UTC]" + "'", str29, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 100L + "'", long48 == 100L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L + "'", long55 == 100L);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u65e5\u672c" + "'", str67, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1970-01-01T00:00:00.000" + "'", str69, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1970 + "'", int80 == 1970);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1970 + "'", int87 == 1970);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(timeZone93);
        org.junit.Assert.assertEquals(timeZone93.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(dateTimeZone95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(dateTimeZone98);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + (-1917L) + "'", long99 == (-1917L));
    }

    @Test
    public void test07176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07176");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("Korean");
        java.util.Locale.Builder builder6 = builder4.setLanguage("KR");
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder7.setLanguage("");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale13 = new java.util.Locale("UTC");
        java.util.Locale.Builder builder14 = builder11.setLocale(locale13);
        java.util.Locale locale15 = builder11.build();
        java.util.Locale.Builder builder17 = builder11.setScript("");
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale locale21 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = locale21.getDisplayLanguage(locale22);
        java.util.Locale locale26 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.lang.String str27 = locale22.getDisplayScript(locale26);
        java.lang.String str28 = locale22.getScript();
        java.util.Locale.Builder builder29 = builder17.setLocale(locale22);
        java.util.Locale locale30 = builder17.build();
        java.util.Locale.Builder builder31 = builder4.setLocale(locale30);
        java.util.Locale.Builder builder32 = builder4.clear();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        long long42 = dateTimeZone40.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (byte) 0, dateTimeZone40);
        java.util.Locale locale47 = new java.util.Locale("", "1970-01-01T00:00:00.000");
        java.lang.String str48 = dateTimeZone40.getShortName((long) (byte) 0, locale47);
        java.lang.String str49 = dateTimeZone35.getShortName((-62167219199980L), locale47);
        java.lang.String str50 = locale47.getDisplayVariant();
        java.util.Locale locale53 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale54 = locale53.stripExtensions();
        java.lang.String str55 = locale47.getDisplayCountry(locale53);
        java.lang.String str57 = locale47.getExtension('a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder58 = builder32.setLocale(locale47);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 1970-01-01T00:00:00.000 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals(locale13.toString(), "utc");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "utc");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals(locale21.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale26.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 100L + "'", long42 == 100L);
        org.junit.Assert.assertEquals(locale47.toString(), "_1970-01-01T00:00:00.000");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals(locale53.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01T00:00:00.000" + "'", str55, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test07177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07177");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        int int12 = property7.getMaximumTextLength(locale11);
        org.joda.time.LocalDateTime localDateTime13 = property7.roundCeilingCopy();
        org.joda.time.DurationFieldType durationFieldType14 = null;
        boolean boolean15 = localDateTime13.isSupported(durationFieldType14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withWeekOfWeekyear(117);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07178");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDayOfMonth((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withWeekyear(3);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusDays(2022);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMillisOfSecond(5);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withMillisOfDay(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime12.withDate((int) (short) 0, 46, 292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 46 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test07179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07179");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale5);
        java.util.Locale locale9 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.lang.String str12 = locale5.getDisplayName(locale9);
        java.util.Set<java.lang.String> strSet13 = locale5.getUnicodeLocaleKeys();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        int int20 = dateTimeZone16.getStandardOffset(999L);
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale26 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.lang.String str29 = locale22.getDisplayName(locale26);
        java.lang.String str30 = dateTimeZone16.getName(35L, locale22);
        java.lang.String str31 = locale5.getDisplayLanguage(locale22);
        java.util.Locale.Builder builder32 = builder3.setLocale(locale22);
        java.util.Locale locale33 = builder32.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder35 = builder32.addUnicodeLocaleAttribute("2022-02-11T09:48:58.396");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:48:58.396 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale9.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c" + "'", str11, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Japanese (Japan)" + "'", str12, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale26.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u65e5\u672c" + "'", str28, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Japanese (Japan)" + "'", str29, "Japanese (Japan)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str31, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
    }

    @Test
    public void test07180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07180");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(0L, chronology2);
        int int4 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMillisOfSecond(100);
        org.joda.time.Chronology chronology7 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.days();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone10.previousTransition(100L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfSecond((int) (byte) 0);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePartial) localDateTime14, (long) (-1));
        org.joda.time.DateTimeField dateTimeField19 = chronology7.millisOfDay();
        org.joda.time.DurationField durationField20 = chronology7.hours();
        org.joda.time.DurationField durationField21 = chronology7.weeks();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        long long28 = dateTimeZone24.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology29 = org.joda.time.chrono.ZonedChronology.getInstance(chronology7, dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology29.yearOfEra();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology29.monthOfYear();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology29.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology29.dayOfYear();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology29.millisOfSecond();
        org.joda.time.Chronology chronology35 = zonedChronology29.withUTC();
        org.joda.time.DurationField durationField36 = zonedChronology29.minutes();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(456825L, (org.joda.time.Chronology) zonedChronology29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withMinuteOfHour(91);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 91 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test07181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07181");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("+00:00");
        timeZone1.setID("ISOChronology[UTC]");
        int int5 = timeZone1.getOffset((long) 9);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withHourOfDay((int) (short) 0);
        java.util.Date date13 = localDateTime12.toDate();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.fromDateFields(date13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.fromDateFields(date13);
        boolean boolean16 = timeZone1.inDaylightTime(date13);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test07182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07182");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.hourOfHalfday();
        org.joda.time.DurationField durationField35 = zonedChronology28.millis();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.hourOfHalfday();
        long long42 = zonedChronology28.add(259200000L, 43L, 3);
        // The following exception was thrown during execution in test generation
        try {
            long long50 = zonedChronology28.getDateTimeMillis(10, 3570, 1939, (-2719), 81991403, 2022, 252000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2719 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 259200129L + "'", long42 == 259200129L);
    }

    @Test
    public void test07183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07183");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfMonth();
        org.joda.time.DurationField durationField32 = zonedChronology28.minutes();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.hourOfHalfday();
        org.joda.time.DurationField durationField34 = zonedChronology28.minutes();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone36 = zonedChronology28.getZone();
        org.joda.time.DurationField durationField37 = zonedChronology28.millis();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test07184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07184");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfEra(1970);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        int int19 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.plus(readableDuration21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(0L, chronology24);
        java.util.Locale locale26 = java.util.Locale.US;
        boolean boolean27 = localDateTime25.equals((java.lang.Object) locale26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.dayOfWeek();
        int int29 = localDateTime25.getDayOfWeek();
        int int30 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.plus(readableDuration31);
        int int33 = localDateTime25.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime25.withYearOfEra((int) 'x');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime37 = localDateTime25.withEra(1964);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1964 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 19 + "'", int33 == 19);
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test07185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07185");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withMillisOfSecond(100);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        org.joda.time.DurationField durationField15 = chronology13.days();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        long long18 = dateTimeZone16.previousTransition(100L);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfSecond((int) (byte) 0);
        int[] intArray24 = chronology13.get((org.joda.time.ReadablePartial) localDateTime20, (long) (-1));
        org.joda.time.DateTimeField dateTimeField25 = chronology13.millisOfDay();
        org.joda.time.DurationField durationField26 = chronology13.hours();
        org.joda.time.DurationField durationField27 = chronology13.weeks();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        long long34 = dateTimeZone30.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology35 = org.joda.time.chrono.ZonedChronology.getInstance(chronology13, dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology35.minuteOfDay();
        org.joda.time.DurationField durationField37 = zonedChronology35.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology35.hourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology35.weekyear();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology35.halfdayOfDay();
        org.joda.time.DurationField durationField41 = zonedChronology35.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(9, 81976385, 81976385, 77, 27236748, 35199563, 12, (org.joda.time.Chronology) zonedChronology35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 77 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test07186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07186");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) 'u');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(0L, chronology3);
        java.lang.String str6 = localDateTime4.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = localDateTime4.toString(dateTimeFormatter7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.monthOfYear();
        org.joda.time.Interval interval10 = property9.toInterval();
        long long11 = property9.remainder();
        org.joda.time.LocalDateTime localDateTime12 = property9.roundHalfFloorCopy();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        int int14 = property9.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime15 = property9.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.monthOfYear();
        int int18 = localDateTime15.getYearOfCentury();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(0L, chronology20);
        java.lang.String str23 = localDateTime21.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = localDateTime21.toString(dateTimeFormatter24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime21.monthOfYear();
        org.joda.time.Interval interval27 = property26.toInterval();
        long long28 = property26.remainder();
        org.joda.time.LocalDateTime localDateTime29 = property26.roundHalfFloorCopy();
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        int int31 = property26.getMaximumTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.lang.String str33 = locale32.getCountry();
        int int34 = property26.getMaximumTextLength(locale32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        long long43 = dateTimeZone41.previousTransition(100L);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withMillisOfSecond((int) (byte) 0);
        int int48 = localDateTime37.compareTo((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        long long52 = dateTimeZone49.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime54 = localDateTime37.toDateTime(dateTimeZone49);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(0L, chronology56);
        java.lang.String str59 = localDateTime57.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = localDateTime57.toString(dateTimeFormatter60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(0L, chronology63);
        java.lang.String str66 = localDateTime64.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = null;
        java.lang.String str68 = localDateTime64.toString(dateTimeFormatter67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime64.monthOfYear();
        org.joda.time.Interval interval70 = property69.toInterval();
        long long71 = property69.remainder();
        org.joda.time.LocalDateTime localDateTime72 = property69.roundHalfFloorCopy();
        java.lang.String str73 = property69.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = property69.getFieldType();
        int int75 = localDateTime57.get(dateTimeFieldType74);
        int int76 = dateTime54.get(dateTimeFieldType74);
        int int77 = property26.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime78 = localDateTime15.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Instant instant79 = dateTime54.toInstant();
        int int80 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant79);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u672c" + "'", str6, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.000" + "'", str8, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 70 + "'", int18 == 70);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01T00:00:00.000" + "'", str25, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "CN" + "'", str33, "CN");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L + "'", long52 == 100L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u65e5\u672c" + "'", str59, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970-01-01T00:00:00.000" + "'", str61, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u65e5\u672c" + "'", str66, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1970-01-01T00:00:00.000" + "'", str68, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1" + "'", str73, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 421200000 + "'", int80 == 421200000);
    }

    @Test
    public void test07187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07187");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str4 = locale0.getExtension('a');
        java.lang.String str5 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str2, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-CN" + "'", str5, "zh-CN");
    }

    @Test
    public void test07188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07188");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = zonedChronology28.withZone(dateTimeZone36);
        org.joda.time.DurationField durationField38 = zonedChronology28.millis();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test07189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07189");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone1.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 0, dateTimeZone1);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = localDateTime4.getFields();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property6.setCopy(12);
        org.joda.time.LocalDateTime localDateTime9 = property6.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test07190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07190");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.era();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.dayOfYear();
        org.joda.time.DurationField durationField34 = zonedChronology28.minutes();
        org.joda.time.DurationField durationField35 = zonedChronology28.years();
        org.joda.time.Chronology chronology36 = zonedChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.hourOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test07191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07191");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("UTC");
        java.util.Locale.Builder builder9 = builder6.clear();
        java.util.Locale.Builder builder11 = builder6.setLanguage("US");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        java.util.Locale locale15 = java.util.Locale.US;
        boolean boolean16 = localDateTime14.equals((java.lang.Object) locale15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plus(readablePeriod17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime14.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(0L, chronology21);
        int int23 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withMillisOfSecond(100);
        org.joda.time.Chronology chronology26 = localDateTime22.getChronology();
        int int27 = property19.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        boolean boolean28 = property19.isLeap();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(0L, chronology30);
        java.lang.String str33 = localDateTime31.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = localDateTime31.toString(dateTimeFormatter34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime31.monthOfYear();
        org.joda.time.Interval interval37 = property36.toInterval();
        long long38 = property36.remainder();
        org.joda.time.LocalDateTime localDateTime39 = property36.roundHalfFloorCopy();
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        int int41 = property36.getMaximumTextLength(locale40);
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.lang.String str43 = locale42.getCountry();
        int int44 = property36.getMaximumTextLength(locale42);
        java.lang.String str45 = property19.getAsText(locale42);
        java.lang.String str46 = locale42.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet47 = locale42.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder48 = builder6.setLocale(locale42);
        java.util.Locale locale49 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale49);
        java.lang.String str51 = locale49.getCountry();
        java.util.Locale locale52 = java.util.Locale.KOREA;
        java.lang.String str53 = locale52.getDisplayCountry();
        java.lang.String str54 = locale49.getDisplayName(locale52);
        java.lang.String str55 = locale42.getDisplayCountry(locale52);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u65e5\u672c" + "'", str33, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T00:00:00.000" + "'", str35, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "CN" + "'", str43, "CN");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str46, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "JP" + "'", str51, "JP");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u5927\u97d3\u6c11\u56fd" + "'", str53, "\u5927\u97d3\u6c11\u56fd");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\uc77c\ubcf8\uc5b4\uc77c\ubcf8)" + "'", str54, "\uc77c\ubcf8\uc5b4\uc77c\ubcf8)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\uc911\uad6d" + "'", str55, "\uc911\uad6d");
    }

    @Test
    public void test07192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07192");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plus(readableDuration11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundCeilingCopy();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test07193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07193");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Chinese");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        strSet2.clear();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.lang.String str10 = locale7.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.JAPAN;
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.lang.String str19 = locale16.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.lang.String str31 = locale29.getDisplayCountry(locale30);
        java.util.Locale[] localeArray32 = new java.util.Locale[] { locale7, locale12, locale16, locale20, locale23, locale24, locale25, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.util.Locale>) localeList33);
        java.lang.String[] strArray37 = new java.lang.String[] { "1970-01-01T00:00:00.000" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.Locale.FilteringMode filteringMode40 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList38, filteringMode40);
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.util.Locale locale43 = java.util.Locale.CHINA;
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.util.Locale locale48 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale49 = locale48.stripExtensions();
        java.util.Locale locale50 = java.util.Locale.ITALIAN;
        java.util.Locale locale53 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale54 = locale53.stripExtensions();
        java.util.Locale locale57 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.lang.String str59 = locale57.getDisplayLanguage(locale58);
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale locale61 = java.util.Locale.JAPAN;
        java.lang.String str62 = locale60.getDisplayCountry(locale61);
        java.util.Locale locale65 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale66 = locale65.stripExtensions();
        java.util.Locale locale67 = java.util.Locale.getDefault();
        java.util.Locale locale69 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Locale locale70 = java.util.Locale.US;
        java.util.Locale locale71 = java.util.Locale.getDefault();
        java.util.Locale locale72 = java.util.Locale.CHINA;
        java.lang.String str73 = locale72.getCountry();
        java.util.Locale[] localeArray74 = new java.util.Locale[] { locale42, locale43, locale44, locale45, locale48, locale50, locale53, locale57, locale61, locale66, locale67, locale69, locale70, locale71, locale72 };
        java.util.ArrayList<java.util.Locale> localeList75 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList75, localeArray74);
        java.util.List<java.util.Locale> localeList77 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.util.Locale>) localeList75);
        java.util.stream.Stream<java.util.Locale> localeStream78 = localeList77.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream79 = localeList77.stream();
        boolean boolean80 = strSet2.retainAll((java.util.Collection<java.util.Locale>) localeList77);
        java.util.stream.Stream<java.util.Locale> localeStream81 = localeList77.stream();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "chinese");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c" + "'", str9, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str10, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u672c" + "'", str13, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str15, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c" + "'", str18, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str19, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u65e5\u672c" + "'", str22, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u672c" + "'", str27, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u65e5\u672c" + "'", str31, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localeList35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + filteringMode40 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode40.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale48.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it");
        org.junit.Assert.assertEquals(locale53.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals(locale57.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u65e5\u672c" + "'", str59, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u65e5\u672c" + "'", str62, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale65.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "CN" + "'", str73, "CN");
        org.junit.Assert.assertNotNull(localeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(localeList77);
        org.junit.Assert.assertNotNull(localeStream78);
        org.junit.Assert.assertNotNull(localeStream79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(localeStream81);
    }

    @Test
    public void test07194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07194");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        java.lang.String str12 = localDateTime10.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = localDateTime10.toString(dateTimeFormatter13);
        boolean boolean15 = localDateTime2.isAfter((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.plusYears((int) (short) -1);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withPeriodAdded(readablePeriod18, 19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField22 = localDateTime20.getField(62);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 62");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u672c" + "'", str12, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.000" + "'", str14, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test07195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07195");
        java.util.Locale locale2 = new java.util.Locale("usa", "2022-02-11T09:46:30.548Z");
        org.junit.Assert.assertEquals(locale2.toString(), "usa_2022-02-11T09:46:30.548Z");
    }

    @Test
    public void test07196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07196");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.era();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = zonedChronology28.getZone();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        long long35 = dateTimeZone33.previousTransition(100L);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withHourOfDay((int) (short) 0);
        int int40 = localDateTime39.getEra();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.minusMillis((int) (short) 1);
        int int43 = localDateTime42.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withEra((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.withDurationAdded(readableDuration46, 0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.weekyear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withYear(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = localDateTime51.getFieldType(0);
        int int54 = localDateTime32.indexOf(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test07197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07197");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.JAPAN;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.lang.String str3 = locale0.getDisplayName();
        java.lang.String str4 = locale0.getCountry();
        java.util.Set<java.lang.String> strSet5 = locale0.getUnicodeLocaleAttributes();
        boolean boolean7 = strSet5.remove((java.lang.Object) "2022-02-09T22:47:11.378Z");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u65e5\u672c" + "'", str2, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str3, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JP" + "'", str4, "JP");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07198");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField35 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.weekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test07199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07199");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, chronology11);
        java.lang.String str14 = localDateTime12.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime12.toString(dateTimeFormatter15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.monthOfYear();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.LocalDateTime localDateTime20 = property17.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property17.getFieldType();
        org.joda.time.LocalDateTime.Property property22 = localDateTime9.property(dateTimeFieldType21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime9.minusWeeks(1900);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays(4);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.withDurationAdded(readableDuration27, 292278993);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withMillisOfSecond((int) 'x');
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.000" + "'", str16, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test07200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07200");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        int int14 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime13);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean17 = dateTime13.equals((java.lang.Object) timeZone16);
        java.time.ZoneId zoneId18 = timeZone16.toZoneId();
        int int20 = timeZone16.getOffset((long) 170);
        timeZone16.setID("Japanisch (Japan)");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(0L, chronology24);
        int int26 = localDateTime25.getWeekyear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withMillisOfSecond(100);
        org.joda.time.Chronology chronology29 = localDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        boolean boolean33 = dateTimeZone32.isFixed();
        org.joda.time.Chronology chronology34 = chronology29.withZone(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(70);
        long long38 = dateTimeZone32.getMillisKeepLocal(dateTimeZone36, 1970L);
        java.util.TimeZone timeZone39 = dateTimeZone36.toTimeZone();
        boolean boolean40 = timeZone16.hasSameRules(timeZone39);
        timeZone39.setRawOffset((-1));
        java.lang.Object obj43 = timeZone39.clone();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(zoneId18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1899L + "'", long38 == 1899L);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "java.util.SimpleTimeZone[id=+00:00:00.070,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "java.util.SimpleTimeZone[id=+00:00:00.070,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "java.util.SimpleTimeZone[id=+00:00:00.070,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test07201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07201");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property7.getFieldType();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        java.util.Locale locale15 = java.util.Locale.US;
        boolean boolean16 = localDateTime14.equals((java.lang.Object) locale15);
        java.lang.String str17 = locale15.toLanguageTag();
        int int18 = property7.getMaximumTextLength(locale15);
        org.joda.time.LocalDateTime localDateTime19 = property7.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime20 = property7.roundFloorCopy();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(0L, chronology22);
        int int24 = localDateTime23.getWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        long long29 = dateTimeZone27.previousTransition(100L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withMillisOfSecond((int) (byte) 0);
        int int34 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        long long38 = dateTimeZone35.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime40 = localDateTime23.toDateTime(dateTimeZone35);
        int int41 = property7.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime42 = property7.roundCeilingCopy();
        java.util.Locale locale43 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(locale43);
        java.lang.String str45 = locale43.getDisplayLanguage();
        int int46 = property7.getMaximumShortTextLength(locale43);
        java.lang.String str47 = locale43.getDisplayVariant();
        java.lang.String str48 = locale43.getScript();
        java.util.Locale locale51 = new java.util.Locale("\u6728\u66dc\u65e5", "\u97d3\u56fd\u8a9e");
        java.lang.String str52 = locale51.getDisplayLanguage();
        java.lang.String str53 = locale51.getScript();
        java.lang.String str54 = locale43.getDisplayCountry(locale51);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en-US" + "'", str17, "en-US");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L + "'", long29 == 100L);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L + "'", long38 == 100L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u4e2d\u6587" + "'", str45, "\u4e2d\u6587");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
// flaky:         org.junit.Assert.assertEquals(locale51.toString(), "\u6728\u66dc\u65e5\u97d3\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u6728\u66dc\u65e5" + "'", str52, "\u6728\u66dc\u65e5");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "China" + "'", str54, "China");
    }

    @Test
    public void test07202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07202");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone32 = zonedChronology28.getZone();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, chronology34);
        java.util.Locale locale36 = java.util.Locale.US;
        boolean boolean37 = localDateTime35.equals((java.lang.Object) locale36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.minus(readableDuration39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.minus(readableDuration41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(0L, chronology44);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withDayOfMonth(10);
        int int53 = localDateTime50.getEra();
        int[] intArray54 = localDateTime50.getValues();
        zonedChronology28.validate((org.joda.time.ReadablePartial) localDateTime42, intArray54);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        long long58 = dateTimeZone56.previousTransition(100L);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withHourOfDay((int) (short) 0);
        java.util.Date date63 = localDateTime62.toDate();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.minusWeeks(7);
        long long67 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime62, (long) (byte) 0);
        org.joda.time.DateTimeField dateTimeField68 = zonedChronology28.hourOfDay();
        org.joda.time.DurationField durationField69 = zonedChronology28.months();
        org.joda.time.DurationField durationField70 = zonedChronology28.years();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1970, 1, 2, 28800000]");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 100L + "'", long58 == 100L);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 100L + "'", long67 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(durationField70);
    }

    @Test
    public void test07203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07203");
        java.util.Locale locale2 = new java.util.Locale("+00:00", "KOR");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        java.lang.String str4 = locale2.toString();
        org.junit.Assert.assertEquals(locale2.toString(), "+00:00_KOR");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00_KOR" + "'", str4, "+00:00_KOR");
    }

    @Test
    public void test07204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07204");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.minuteOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology32.centuries();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.Chronology chronology37 = zonedChronology32.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology32.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        long long42 = zonedChronology32.add(readablePeriod39, (long) 1970, 59);
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology32.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology32.millisOfSecond();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1970L + "'", long42 == 1970L);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test07205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07205");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.era();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.clockhourOfDay();
        org.joda.time.DurationField durationField33 = zonedChronology28.minutes();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.millisOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test07206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07206");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(0L, chronology2);
        int int4 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMillisOfSecond(100);
        org.joda.time.Chronology chronology7 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(0L);
        long long13 = dateTimeZone9.nextTransition((long) (-1));
        org.joda.time.Chronology chronology14 = chronology7.withZone(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (short) 10, chronology7);
        int int16 = localDateTime15.getEra();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test07207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07207");
        java.util.Locale locale1 = new java.util.Locale("19");
        org.junit.Assert.assertEquals(locale1.toString(), "19");
    }

    @Test
    public void test07208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07208");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfWeek();
        int int6 = localDateTime2.getDayOfWeek();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withMillisOfSecond(100);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        org.joda.time.DurationField durationField15 = chronology13.days();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        long long18 = dateTimeZone16.previousTransition(100L);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfSecond((int) (byte) 0);
        int[] intArray24 = chronology13.get((org.joda.time.ReadablePartial) localDateTime20, (long) (-1));
        org.joda.time.DateTimeField dateTimeField25 = chronology13.millisOfDay();
        org.joda.time.DurationField durationField26 = chronology13.hours();
        org.joda.time.DurationField durationField27 = chronology13.weeks();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        long long34 = dateTimeZone30.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology35 = org.joda.time.chrono.ZonedChronology.getInstance(chronology13, dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology35.halfdayOfDay();
        long long40 = zonedChronology35.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology35.clockhourOfHalfday();
        java.lang.String str42 = zonedChronology35.toString();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        long long46 = dateTimeZone44.nextTransition(4363010L);
        org.joda.time.Chronology chronology47 = zonedChronology35.withZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone48 = zonedChronology35.getZone();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(0L, chronology50);
        java.util.Locale locale52 = java.util.Locale.US;
        boolean boolean53 = localDateTime51.equals((java.lang.Object) locale52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withYearOfEra((int) (byte) 1);
        int int56 = localDateTime55.getEra();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.plusSeconds((int) '4');
        org.joda.time.LocalDateTime localDateTime60 = localDateTime55.minusWeeks((int) (byte) 10);
        boolean boolean61 = dateTimeZone48.isLocalDateTimeGap(localDateTime60);
        int int62 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime60);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-62167219199980L) + "'", long40 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str42, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 4363010L + "'", long46 == 4363010L);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test07209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07209");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(0L, chronology4);
        java.lang.String str7 = localDateTime5.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = localDateTime5.toString(dateTimeFormatter8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.monthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundCeilingCopy();
        boolean boolean12 = dateTimeZone0.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusMillis((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusDays(35080732);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withWeekyear(205);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u65e5\u672c" + "'", str7, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.000" + "'", str9, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test07210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07210");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, chronology11);
        java.lang.String str14 = localDateTime12.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime12.toString(dateTimeFormatter15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.monthOfYear();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.LocalDateTime localDateTime20 = property17.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property17.getFieldType();
        org.joda.time.LocalDateTime.Property property22 = localDateTime9.property(dateTimeFieldType21);
        int int23 = localDateTime9.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime9.withMinuteOfHour(0);
        java.lang.Class<?> wildcardClass26 = localDateTime9.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.000" + "'", str16, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test07211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07211");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        long long6 = dateTimeZone3.convertLocalToUTC((long) 121, false);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 121L + "'", long6 == 121L);
    }

    @Test
    public void test07212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07212");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.eras();
        org.joda.time.Chronology chronology9 = chronology6.withUTC();
        java.lang.String str10 = chronology9.toString();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        long long20 = dateTimeZone18.previousTransition(100L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withMillisOfSecond((int) (byte) 0);
        int int25 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        long long29 = dateTimeZone26.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = localDateTime14.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime32 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Instant instant33 = dateTime31.toInstant();
        org.joda.time.Chronology chronology34 = dateTime31.getChronology();
        java.lang.String str35 = dateTime31.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[UTC]" + "'", str10, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L + "'", long29 == 100L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str35, "1970-01-01T00:00:00.000Z");
    }

    @Test
    public void test07213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07213");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(999, 31, 10, 56, 81991403, (int) 'u', 70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07214");
        java.util.Locale locale2 = new java.util.Locale("+00:00", "KOR");
        java.lang.String str3 = locale2.getLanguage();
        java.util.Locale.setDefault(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "+00:00_KOR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
    }

    @Test
    public void test07215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07215");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        boolean boolean2 = strSet1.isEmpty();
        boolean boolean3 = strSet1.isEmpty();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(0L, chronology5);
        java.util.Locale locale7 = java.util.Locale.US;
        boolean boolean8 = localDateTime6.equals((java.lang.Object) locale7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, chronology12);
        int int14 = localDateTime13.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfWeek();
        boolean boolean20 = strSet1.remove((java.lang.Object) property19);
        int int21 = property19.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime22 = property19.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test07216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07216");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.plus(readableDuration8);
        java.lang.String str10 = localDateTime9.toString();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minus(readableDuration11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = property13.setCopy((-100));
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        long long18 = dateTimeZone16.previousTransition(100L);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay((int) (short) 0);
        int int23 = localDateTime22.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusYears(0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.minusMinutes(19);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withMinuteOfHour((int) (byte) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        int int35 = localDateTime34.getWeekyear();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withMillisOfSecond(100);
        org.joda.time.Chronology chronology38 = localDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DurationField durationField40 = chronology38.days();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        long long43 = dateTimeZone41.previousTransition(100L);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withMillisOfSecond((int) (byte) 0);
        int[] intArray49 = chronology38.get((org.joda.time.ReadablePartial) localDateTime45, (long) (-1));
        org.joda.time.DateTimeField dateTimeField50 = chronology38.millisOfDay();
        org.joda.time.DurationField durationField51 = chronology38.hours();
        org.joda.time.DurationField durationField52 = chronology38.weeks();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        long long59 = dateTimeZone55.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology60 = org.joda.time.chrono.ZonedChronology.getInstance(chronology38, dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField61 = zonedChronology60.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField62 = zonedChronology60.millisOfSecond();
        org.joda.time.DurationField durationField63 = zonedChronology60.weekyears();
        org.joda.time.DateTimeField dateTimeField64 = zonedChronology60.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology60.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology60.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField67 = zonedChronology60.centuryOfEra();
        org.joda.time.DurationField durationField68 = zonedChronology60.weekyears();
        org.joda.time.DateTimeField dateTimeField69 = zonedChronology60.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone70 = zonedChronology60.getZone();
        org.joda.time.DateTime dateTime71 = localDateTime31.toDateTime(dateTimeZone70);
        int int72 = property13.getDifference((org.joda.time.ReadableInstant) dateTime71);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.000" + "'", str10, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10L + "'", long59 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1900 + "'", int72 == 1900);
    }

    @Test
    public void test07217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07217");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.weekOfWeekyear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withMillisOfSecond(100);
        org.joda.time.Chronology chronology14 = localDateTime10.getChronology();
        int int15 = property7.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        boolean boolean16 = property7.isLeap();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(0L, chronology18);
        java.lang.String str21 = localDateTime19.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = localDateTime19.toString(dateTimeFormatter22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime19.monthOfYear();
        org.joda.time.Interval interval25 = property24.toInterval();
        long long26 = property24.remainder();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundHalfFloorCopy();
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        int int29 = property24.getMaximumTextLength(locale28);
        java.util.Locale locale30 = java.util.Locale.CHINA;
        java.lang.String str31 = locale30.getCountry();
        int int32 = property24.getMaximumTextLength(locale30);
        java.lang.String str33 = property7.getAsText(locale30);
        java.lang.String str34 = locale30.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet35 = locale30.getUnicodeLocaleAttributes();
        java.lang.String str36 = locale30.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet37 = locale30.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u65e5\u672c" + "'", str21, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.000" + "'", str23, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "CN" + "'", str31, "CN");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese" + "'", str34, "Chinese");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese" + "'", str36, "Chinese");
        org.junit.Assert.assertNotNull(strSet37);
    }

    @Test
    public void test07218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07218");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMillisOfSecond(100);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DurationField durationField43 = chronology41.millis();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '#', chronology41);
        int[] intArray47 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime45, (long) 1);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology28.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        long long55 = dateTimeZone52.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 1, dateTimeZone52);
        org.joda.time.Chronology chronology57 = zonedChronology28.withZone(dateTimeZone52);
        // The following exception was thrown during execution in test generation
        try {
            long long62 = zonedChronology28.getDateTimeMillis(1967, (int) (byte) 1, 22697, 19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22697 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1970, 1, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L + "'", long55 == 100L);
        org.junit.Assert.assertNotNull(chronology57);
    }

    @Test
    public void test07219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07219");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.millis();
        org.joda.time.DurationField durationField9 = chronology6.months();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.era();
        boolean boolean13 = property12.isLeap();
        org.joda.time.LocalDateTime localDateTime14 = property12.getLocalDateTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test07220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07220");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeZone dateTimeZone31 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DurationField durationField34 = zonedChronology28.months();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test07221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07221");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 0);
        boolean boolean34 = dateTimeZone33.isFixed();
        org.joda.time.Chronology chronology35 = zonedChronology28.withZone(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology28);
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology28);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test07222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07222");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.centuryOfEra();
        org.joda.time.DurationField durationField36 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = zonedChronology28.getZone();
        boolean boolean40 = dateTimeZone38.isStandardOffset((long) 35142965);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test07223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07223");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.weekyear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        java.lang.String str36 = localDateTime34.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = localDateTime34.toString(dateTimeFormatter37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime34.monthOfYear();
        org.joda.time.LocalDateTime localDateTime40 = property39.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withHourOfDay(0);
        java.util.Date date43 = localDateTime40.toDate();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.fromDateFields(date43);
        long long46 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime44, 100L);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        long long50 = zonedChronology28.add(readablePeriod47, 32L, 10);
        org.joda.time.DateTimeZone dateTimeZone51 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology28.yearOfEra();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.000" + "'", str38, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 32L + "'", long50 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test07224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07224");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        long long19 = dateTimeZone17.previousTransition(100L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay((int) (short) 0);
        int int24 = localDateTime23.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusYears(0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusMonths(9);
        boolean boolean31 = localDateTime14.isAfter((org.joda.time.ReadablePartial) localDateTime28);
        int int32 = localDateTime28.getMonthOfYear();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, chronology34);
        java.util.Locale locale36 = java.util.Locale.US;
        boolean boolean37 = localDateTime35.equals((java.lang.Object) locale36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.minus(readableDuration39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(0L, chronology43);
        int int45 = localDateTime44.getWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        long long50 = dateTimeZone48.previousTransition(100L);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withMillisOfSecond((int) (byte) 0);
        int int55 = localDateTime44.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        long long59 = dateTimeZone56.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime61 = localDateTime44.toDateTime(dateTimeZone56);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(0L, chronology63);
        java.lang.String str66 = localDateTime64.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = null;
        java.lang.String str68 = localDateTime64.toString(dateTimeFormatter67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(0L, chronology70);
        java.lang.String str73 = localDateTime71.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = null;
        java.lang.String str75 = localDateTime71.toString(dateTimeFormatter74);
        org.joda.time.LocalDateTime.Property property76 = localDateTime71.monthOfYear();
        org.joda.time.Interval interval77 = property76.toInterval();
        long long78 = property76.remainder();
        org.joda.time.LocalDateTime localDateTime79 = property76.roundHalfFloorCopy();
        java.lang.String str80 = property76.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = property76.getFieldType();
        int int82 = localDateTime64.get(dateTimeFieldType81);
        int int83 = dateTime61.get(dateTimeFieldType81);
        long long84 = property41.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.LocalDateTime localDateTime86 = property41.addToCopy(419L);
        java.lang.String str87 = property41.getAsShortText();
        int int88 = property41.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime90 = property41.addToCopy(30L);
        int int91 = localDateTime28.compareTo((org.joda.time.ReadablePartial) localDateTime90);
        org.joda.time.DurationFieldType durationFieldType92 = null;
        boolean boolean93 = localDateTime90.isSupported(durationFieldType92);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 100L + "'", long59 == 100L);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u65e5\u672c" + "'", str66, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1970-01-01T00:00:00.000" + "'", str68, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u65e5\u672c" + "'", str73, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-01T00:00:00.000" + "'", str75, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Jan" + "'", str80, "Jan");
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "0" + "'", str87, "0");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 86399999 + "'", int88 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test07225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07225");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone1.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 0, dateTimeZone1);
        java.util.Locale locale8 = new java.util.Locale("", "1970-01-01T00:00:00.000");
        java.lang.String str9 = dateTimeZone1.getShortName((long) (byte) 0, locale8);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("Ora media di Greenwich");
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.getVariant();
        java.lang.String str14 = locale8.getDisplayCountry(locale12);
        java.util.Set<java.lang.String> strSet15 = locale8.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        long long18 = dateTimeZone16.previousTransition(100L);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(0L, chronology22);
        int int24 = localDateTime23.getWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withYearOfEra(1970);
        org.joda.time.DateTime dateTime27 = localDateTime26.toDateTime();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(0L, chronology29);
        int int31 = localDateTime30.getWeekyear();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withYearOfEra(1970);
        org.joda.time.DateTime dateTime34 = localDateTime33.toDateTime();
        int int35 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime36 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime20.plus(readableDuration37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(0L, chronology40);
        java.util.Locale locale42 = java.util.Locale.US;
        boolean boolean43 = localDateTime41.equals((java.lang.Object) locale42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.dayOfWeek();
        int int45 = localDateTime41.getDayOfWeek();
        int int46 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime41.plus(readableDuration47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withHourOfDay((int) (byte) 0);
        boolean boolean51 = strSet15.contains((java.lang.Object) localDateTime50);
        java.util.Spliterator<java.lang.String> strSpliterator52 = strSet15.spliterator();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertEquals(locale8.toString(), "_1970-01-01T00:00:00.000");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.000" + "'", str14, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strSpliterator52);
    }

    @Test
    public void test07226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07226");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1970L);
        int int2 = localDateTime1.getCenturyOfEra();
        int int3 = localDateTime1.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test07227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07227");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("it-it");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
    }

    @Test
    public void test07228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07228");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(723600000, 86399999, (-8096924), 421200000, 35116539);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 421200000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07229");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        int int14 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime13);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean17 = dateTime13.equals((java.lang.Object) timeZone16);
        java.time.ZoneId zoneId18 = timeZone16.toZoneId();
        int int20 = timeZone16.getOffset((long) 170);
        timeZone16.setID("Japanisch (Japan)");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(0L, chronology26);
        int int28 = localDateTime27.getWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withMillisOfSecond(100);
        org.joda.time.Chronology chronology31 = localDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        org.joda.time.DurationField durationField33 = chronology31.millis();
        org.joda.time.DurationField durationField34 = chronology31.months();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = localDateTime35.getFieldTypes();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.era();
        java.util.Locale locale38 = java.util.Locale.US;
        java.lang.String str39 = locale38.getLanguage();
        int int40 = property37.getMaximumShortTextLength(locale38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(0L, chronology42);
        java.util.Locale locale44 = java.util.Locale.US;
        boolean boolean45 = localDateTime43.equals((java.lang.Object) locale44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(0L, chronology49);
        int int51 = localDateTime50.getWeekyear();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime43.withFields((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusMinutes(100);
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str60 = localDateTime55.toString("\u4e2d\u56fd\u8a9e", locale59);
        java.lang.String str61 = locale59.getDisplayVariant();
        java.lang.String str62 = locale38.getDisplayCountry(locale59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = timeZone16.getDisplayName(true, 169, locale38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 169");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(zoneId18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "en" + "'", str39, "en");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str60, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u7f8e\u570b" + "'", str62, "\u7f8e\u570b");
    }

    @Test
    public void test07230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07230");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfMonth();
        org.joda.time.DurationField durationField32 = zonedChronology28.minutes();
        java.lang.String str33 = zonedChronology28.toString();
        org.joda.time.DurationField durationField34 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.clockhourOfHalfday();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test07231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07231");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.lang.String str4 = locale2.getDisplayCountry(locale3);
        java.util.Locale.Builder builder5 = builder1.setLocale(locale3);
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder8 = builder5.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder8.setLanguage("January");
        java.util.Locale locale11 = builder8.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder8.removeUnicodeLocaleAttribute("0008-01-03T00:00:00.099");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 0008-01-03T00:00:00.099 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "january_KR");
    }

    @Test
    public void test07232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07232");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = timeZone1.getOffset((long) (byte) 10);
        int int5 = timeZone1.getRawOffset();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone1.hasSameRules(timeZone6);
        java.util.TimeZone.setDefault(timeZone1);
        boolean boolean9 = timeZone1.observesDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07233");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minus(readableDuration6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusHours((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra((-1970));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1970 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test07234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07234");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(0L);
        long long4 = dateTimeZone0.nextTransition((long) (-1));
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusWeeks(59);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfEra(100);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        long long13 = dateTimeZone11.previousTransition(100L);
        boolean boolean15 = dateTimeZone11.equals((java.lang.Object) "hi!");
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        java.lang.String str17 = dateTimeZone11.toString();
        long long21 = dateTimeZone11.convertLocalToUTC((long) 27236744, true, (long) (byte) 0);
        org.joda.time.DateTime dateTime22 = localDateTime10.toDateTime(dateTimeZone11);
        int int24 = dateTimeZone11.getOffset(20L);
        long long27 = dateTimeZone11.adjustOffset(3241365465600051L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 27236744L + "'", long21 == 27236744L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3241365465600051L + "'", long27 == 3241365465600051L);
    }

    @Test
    public void test07235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07235");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        int int6 = localDateTime5.getCenturyOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        java.lang.String str11 = localDateTime9.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = localDateTime9.toString(dateTimeFormatter12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime9.monthOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(0L, chronology16);
        java.lang.String str19 = localDateTime17.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = localDateTime17.toString(dateTimeFormatter20);
        boolean boolean22 = localDateTime9.isAfter((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.plusYears((int) (short) -1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withPeriodAdded(readablePeriod25, 19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = localDateTime24.toString(dateTimeFormatter28);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plus(readablePeriod31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.secondOfMinute();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 19 + "'", int6 == 19);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c" + "'", str11, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T00:00:00.000" + "'", str13, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u65e5\u672c" + "'", str19, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:00.000" + "'", str21, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1969-01-01T00:00:00.000" + "'", str29, "1969-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test07236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07236");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.weekyear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        java.lang.String str36 = localDateTime34.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = localDateTime34.toString(dateTimeFormatter37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime34.monthOfYear();
        org.joda.time.LocalDateTime localDateTime40 = property39.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withHourOfDay(0);
        java.util.Date date43 = localDateTime40.toDate();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.fromDateFields(date43);
        long long46 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime44, 100L);
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        boolean boolean51 = dateTimeZone49.isLocalDateTimeGap(localDateTime50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(0L, chronology53);
        java.lang.String str56 = localDateTime54.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = null;
        java.lang.String str58 = localDateTime54.toString(dateTimeFormatter57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime54.monthOfYear();
        org.joda.time.LocalDateTime localDateTime60 = property59.roundCeilingCopy();
        boolean boolean61 = dateTimeZone49.isLocalDateTimeGap(localDateTime60);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone49);
        org.joda.time.Chronology chronology63 = zonedChronology28.withZone(dateTimeZone49);
        long long67 = dateTimeZone49.convertLocalToUTC(1644572148897L, true, (-60518361599999L));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.000" + "'", str38, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u65e5\u672c" + "'", str56, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970-01-01T00:00:00.000" + "'", str58, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1644572148897L + "'", long67 == 1644572148897L);
    }

    @Test
    public void test07237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07237");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours((int) ' ');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withDayOfMonth(10);
        int int18 = localDateTime15.getEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.dayOfWeek();
        boolean boolean20 = localDateTime5.isEqual((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property21 = localDateTime15.weekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        long long25 = dateTimeZone23.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 0, dateTimeZone23);
        java.util.Locale locale30 = new java.util.Locale("", "1970-01-01T00:00:00.000");
        java.lang.String str31 = dateTimeZone23.getShortName((long) (byte) 0, locale30);
        java.util.Locale locale34 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.lang.String str36 = locale34.getDisplayLanguage(locale35);
        java.util.Locale locale39 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.lang.String str40 = locale35.getDisplayScript(locale39);
        java.lang.String str41 = locale30.getDisplayVariant(locale39);
        int int42 = property21.getMaximumTextLength(locale39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((java.lang.Object) int42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertEquals(locale30.toString(), "_1970-01-01T00:00:00.000");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertEquals(locale34.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale39.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
    }

    @Test
    public void test07238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07238");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        boolean boolean11 = property7.isLeap();
        org.joda.time.ReadableInstant readableInstant12 = null;
        long long13 = property7.getDifferenceAsLong(readableInstant12);
        org.joda.time.DurationField durationField14 = property7.getDurationField();
        int int15 = property7.getLeapAmount();
        int int16 = property7.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property7.roundHalfCeilingCopy();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = property7.getAsShortText(locale19);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.getDefault(category22);
        java.util.Locale locale24 = java.util.Locale.getDefault(category22);
        java.util.Locale locale27 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        java.util.Locale locale32 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.lang.String str33 = locale28.getDisplayScript(locale32);
        java.lang.String str34 = locale28.getScript();
        java.util.Locale locale35 = java.util.Locale.ITALY;
        boolean boolean36 = locale35.hasExtensions();
        java.util.Set<java.lang.String> strSet37 = locale35.getUnicodeLocaleKeys();
        java.util.Locale locale38 = locale35.stripExtensions();
        java.lang.String str39 = locale28.getDisplayVariant(locale35);
        java.util.Locale.setDefault(category22, locale35);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(0L, chronology42);
        java.lang.String str45 = localDateTime43.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = localDateTime43.toString(dateTimeFormatter46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime43.monthOfYear();
        java.lang.String str49 = property48.getName();
        java.lang.String str50 = property48.getName();
        org.joda.time.LocalDateTime localDateTime52 = property48.addToCopy((int) (short) -1);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(0L, chronology54);
        int int56 = localDateTime55.getWeekyear();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withDayOfMonth(10);
        int int63 = localDateTime60.getEra();
        org.joda.time.LocalDateTime.Property property64 = localDateTime60.dayOfWeek();
        java.util.Locale locale65 = java.util.Locale.ITALY;
        boolean boolean66 = locale65.hasExtensions();
        java.util.Set<java.lang.String> strSet67 = locale65.getUnicodeLocaleKeys();
        java.lang.String str68 = property64.getAsText(locale65);
        java.lang.String str69 = property48.getAsText(locale65);
        java.util.Locale.setDefault(category22, locale65);
        java.lang.String str71 = property7.getAsShortText(locale65);
        java.lang.String str72 = locale65.getDisplayCountry();
        java.lang.String str73 = locale65.getISO3Country();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-625L) + "'", long13 == (-625L));
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Jan" + "'", str21, "Jan");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "+00:00_KOR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "+00:00_KOR");
        org.junit.Assert.assertEquals(locale27.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u65e5\u672c" + "'", str29, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale32.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u65e5\u672c" + "'", str45, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01T00:00:00.000" + "'", str47, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "monthOfYear" + "'", str49, "monthOfYear");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "monthOfYear" + "'", str50, "monthOfYear");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "venerd\354" + "'", str68, "venerd\354");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "gennaio" + "'", str69, "gennaio");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "gen" + "'", str71, "gen");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Italia" + "'", str72, "Italia");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ITA" + "'", str73, "ITA");
    }

    @Test
    public void test07239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07239");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology32.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology32.secondOfMinute();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        int int39 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withMillisOfSecond(100);
        org.joda.time.Chronology chronology42 = localDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        boolean boolean46 = dateTimeZone45.isFixed();
        org.joda.time.Chronology chronology47 = chronology42.withZone(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(70);
        long long51 = dateTimeZone45.getMillisKeepLocal(dateTimeZone49, 1970L);
        java.lang.String str53 = dateTimeZone45.getNameKey(1900L);
        org.joda.time.Chronology chronology54 = zonedChronology32.withZone(dateTimeZone45);
        org.joda.time.DurationField durationField55 = zonedChronology32.weekyears();
        org.joda.time.DurationField durationField56 = zonedChronology32.years();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1899L + "'", long51 == 1899L);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
    }

    @Test
    public void test07240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07240");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Property[yearOfEra]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=property[yearofera]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07241");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.secondOfDay();
        org.joda.time.DurationField durationField31 = zonedChronology28.years();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        long long36 = dateTimeZone34.previousTransition(100L);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(0L, chronology40);
        int int42 = localDateTime41.getWeekyear();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withYearOfEra(1970);
        org.joda.time.DateTime dateTime45 = localDateTime44.toDateTime();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(0L, chronology47);
        int int49 = localDateTime48.getWeekyear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withYearOfEra(1970);
        org.joda.time.DateTime dateTime52 = localDateTime51.toDateTime();
        int int53 = dateTime45.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime54 = localDateTime38.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime38.plus(readableDuration55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(0L, chronology58);
        java.util.Locale locale60 = java.util.Locale.US;
        boolean boolean61 = localDateTime59.equals((java.lang.Object) locale60);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.dayOfWeek();
        int int63 = localDateTime59.getDayOfWeek();
        int int64 = localDateTime38.compareTo((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime59.plus(readableDuration65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withHourOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.withYear(292278993);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.LocalDateTime localDateTime74 = localDateTime68.withPeriodAdded(readablePeriod72, 6);
        long long76 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime74, 11L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L + "'", long36 == 100L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
    }

    @Test
    public void test07242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07242");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone1.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 0, dateTimeZone1);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = localDateTime4.getFields();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property6.setCopy(12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType10 = localDateTime8.getFieldType(81976385);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 81976385");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test07243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07243");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add((long) (byte) 100, 10L, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.hourOfHalfday();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        int int41 = dateTimeZone37.getStandardOffset(999L);
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale43);
        java.util.Locale locale47 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.lang.String str49 = locale47.getDisplayLanguage(locale48);
        java.lang.String str50 = locale43.getDisplayName(locale47);
        java.lang.String str51 = dateTimeZone37.getName(35L, locale43);
        org.joda.time.Chronology chronology52 = zonedChronology28.withZone(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology28.millisOfDay();
        java.lang.String str55 = zonedChronology28.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L + "'", long33 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "+00:00_KOR");
        org.junit.Assert.assertEquals(locale47.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u65e5\u672c" + "'", str49, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00 (KOR)" + "'", str50, "+00:00 (KOR)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str55, "ZonedChronology[ISOChronology[UTC], UTC]");
    }

    @Test
    public void test07244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07244");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeZone dateTimeZone31 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withYearOfCentury(2);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusMinutes(36060000);
        int int39 = localDateTime36.getYearOfCentury();
        long long41 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime36, 1899L);
        org.joda.time.DateTimeField dateTimeField43 = localDateTime36.getField(1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1013420964220L + "'", long41 == 1013420964220L);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test07245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07245");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, chronology17);
        java.lang.String str20 = localDateTime18.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = localDateTime18.toString(dateTimeFormatter21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.monthOfYear();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundCeilingCopy();
        int int25 = localDateTime24.getMonthOfYear();
        int int26 = localDateTime24.getEra();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.withDurationAdded(readableDuration27, 52100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusMonths(5);
        int int32 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.secondOfMinute();
        java.lang.String str34 = property33.toString();
        org.joda.time.LocalDateTime localDateTime35 = property33.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u65e5\u672c" + "'", str20, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.000" + "'", str22, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Property[secondOfMinute]" + "'", str34, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test07246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07246");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        long long32 = dateTimeZone30.previousTransition(100L);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withYearOfEra(1970);
        org.joda.time.DateTime dateTime41 = localDateTime40.toDateTime();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(0L, chronology43);
        int int45 = localDateTime44.getWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withYearOfEra(1970);
        org.joda.time.DateTime dateTime48 = localDateTime47.toDateTime();
        int int49 = dateTime41.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime50 = localDateTime34.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime34.plus(readableDuration51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withPeriodAdded(readablePeriod53, (int) (byte) 10);
        int[] intArray57 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime52, (long) (-1));
        java.util.Date date58 = localDateTime52.toDate();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime52.withMillisOfDay(3570);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L + "'", long32 == 100L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime60);
    }

    @Test
    public void test07247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07247");
        java.util.Locale locale1 = new java.util.Locale("2022-02-11T09:43:46.892");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.lang.String str3 = locale1.getScript();
        java.lang.String str4 = locale1.getDisplayVariant();
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-11t09:43:46.892");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-11t09:43:46.892");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test07248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07248");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.lang.String str4 = locale2.getDisplayCountry(locale3);
        java.util.Locale.Builder builder5 = builder1.setLocale(locale3);
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder8 = builder5.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder8.setLanguage("January");
        java.util.Locale locale11 = builder8.build();
        java.util.Locale locale12 = locale11.stripExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "january_KR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "january_KR");
    }

    @Test
    public void test07249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07249");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int5 = timeZone3.getRawOffset();
        boolean boolean6 = timeZone1.hasSameRules(timeZone3);
        java.lang.String str7 = timeZone1.getID();
        java.lang.String str8 = timeZone1.getID();
        boolean boolean9 = timeZone1.observesDaylightTime();
        boolean boolean10 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT" + "'", str7, "GMT");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GMT" + "'", str8, "GMT");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07250");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.centuries();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        java.lang.String str36 = localDateTime34.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = localDateTime34.toString(dateTimeFormatter37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime34.monthOfYear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(0L, chronology41);
        java.lang.String str44 = localDateTime42.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = localDateTime42.toString(dateTimeFormatter45);
        boolean boolean47 = localDateTime34.isAfter((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime42.plusYears((int) (short) -1);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minus(readableDuration50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = localDateTime49.toString(dateTimeFormatter52);
        int[] intArray55 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime49, (long) 1964);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime49.minusMinutes(840);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.centuryOfEra();
        int int59 = property58.getLeapAmount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.000" + "'", str38, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u65e5\u672c" + "'", str44, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01T00:00:00.000" + "'", str46, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1969-01-01T00:00:00.000" + "'", str53, "1969-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1970, 1, 1, 1964]");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test07251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07251");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.weekOfWeekyear();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test07252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07252");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("", (double) 39L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=39.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07253");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("");
        org.joda.time.DateTimeZone dateTimeZone8 = provider0.getZone("");
        org.joda.time.DateTimeZone dateTimeZone10 = provider0.getZone("");
        java.util.Set<java.lang.String> strSet11 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet13 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strSet13);
    }

    @Test
    public void test07254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07254");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime4.getMinuteOfHour();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale11 = java.util.Locale.JAPAN;
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        java.lang.String str14 = locale11.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.lang.String str17 = locale15.getDisplayCountry(locale16);
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str19 = locale16.getDisplayName(locale18);
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.lang.String str23 = locale20.getDisplayName();
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.lang.String str26 = locale24.getDisplayCountry(locale25);
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.lang.String str31 = locale29.getDisplayCountry(locale30);
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.lang.String str35 = locale33.getDisplayCountry(locale34);
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale11, locale16, locale20, locale24, locale27, locale28, locale29, locale32, locale33 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList37);
        boolean boolean40 = localDateTime4.equals((java.lang.Object) localeList37);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime4.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property43 = localDateTime4.millisOfSecond();
        int int44 = property43.getMaximumValue();
        org.joda.time.DurationField durationField45 = property43.getRangeDurationField();
        java.lang.String str46 = property43.getAsString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u672c" + "'", str13, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str14, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u672c" + "'", str17, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str19, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u65e5\u672c" + "'", str22, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str23, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u65e5\u672c" + "'", str26, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u65e5\u672c" + "'", str31, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u65e5\u672c" + "'", str35, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 999 + "'", int44 == 999);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100" + "'", str46, "100");
    }

    @Test
    public void test07255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07255");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-11T09:47:51.766");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:47:51.766");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07256");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.minuteOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology32.centuries();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.Chronology chronology37 = zonedChronology32.withZone(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology40 = zonedChronology32.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology32.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology32.yearOfEra();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology32.millisOfSecond();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(0L, chronology45);
        int int47 = localDateTime46.getWeekyear();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withMillisOfSecond(100);
        org.joda.time.Chronology chronology50 = localDateTime46.getChronology();
        java.lang.String str51 = localDateTime46.toString();
        int int52 = localDateTime46.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime46.withCenturyOfEra((int) ' ');
        long long56 = zonedChronology32.set((org.joda.time.ReadablePartial) localDateTime54, (long) 169);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01T00:00:00.000" + "'", str51, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 70 + "'", int52 == 70);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 41024102400000L + "'", long56 == 41024102400000L);
    }

    @Test
    public void test07257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07257");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        int int12 = property7.getMaximumTextLength(locale11);
        org.joda.time.LocalDateTime localDateTime13 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMillis(8);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withWeekyear((int) 'u');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.minusYears(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = localDateTime15.withSecondOfMinute(366);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 366 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test07258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07258");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusDays(4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plus(readableDuration10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readableDuration12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test07259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07259");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.weekOfWeekyear();
        org.joda.time.Chronology chronology36 = zonedChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.weekyear();
        org.joda.time.DurationField durationField38 = zonedChronology28.minutes();
        org.joda.time.DurationField durationField39 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.year();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology28.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone42 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology28.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long49 = zonedChronology28.getDateTimeMillis(3404847047L, 53, (-2719), 40, (int) 'x');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test07260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07260");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plus(readableDuration18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plus(readablePeriod21);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test07261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07261");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strMap35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strMap37);
        boolean boolean39 = zonedChronology28.equals((java.lang.Object) strMap37);
        org.joda.time.DateTimeZone dateTimeZone40 = zonedChronology28.getZone();
        org.joda.time.DurationField durationField41 = zonedChronology28.millis();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology28.year();
        java.lang.String str43 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology28.weekyear();
        org.joda.time.DurationField durationField45 = zonedChronology28.years();
        // The following exception was thrown during execution in test generation
        try {
            long long50 = zonedChronology28.getDateTimeMillis((int) (short) 100, 27236744, 8, (-100));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -100 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str43, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
    }

    @Test
    public void test07262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07262");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property7.getFieldType();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        java.util.Locale locale15 = java.util.Locale.US;
        boolean boolean16 = localDateTime14.equals((java.lang.Object) locale15);
        java.lang.String str17 = locale15.toLanguageTag();
        int int18 = property7.getMaximumTextLength(locale15);
        java.lang.String str19 = locale15.getISO3Language();
        java.lang.String str21 = locale15.getExtension('x');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = locale15.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en-US" + "'", str17, "en-US");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "eng" + "'", str19, "eng");
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test07263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07263");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1644572694666L);
    }

    @Test
    public void test07264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07264");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property7.getFieldType();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        java.util.Locale locale15 = java.util.Locale.US;
        boolean boolean16 = localDateTime14.equals((java.lang.Object) locale15);
        java.lang.String str17 = locale15.toLanguageTag();
        int int18 = property7.getMaximumTextLength(locale15);
        int int19 = property7.getMaximumValue();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en-US" + "'", str17, "en-US");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
    }

    @Test
    public void test07265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07265");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        long long9 = dateTimeZone7.previousTransition(100L);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(0L, chronology20);
        int int22 = localDateTime21.getWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYearOfEra(1970);
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        int int26 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        boolean boolean28 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology29 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long38 = chronology29.getDateTimeMillis((-49L), 53, 27236748, (int) (byte) -1, 1964);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test07266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07266");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField33 = zonedChronology28.halfdays();
        org.joda.time.DurationField durationField34 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.minuteOfHour();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(0L, chronology39);
        int int41 = localDateTime40.getWeekyear();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withMillisOfSecond(100);
        org.joda.time.Chronology chronology44 = localDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        long long48 = dateTimeZone46.previousTransition(0L);
        long long50 = dateTimeZone46.nextTransition((long) (-1));
        org.joda.time.Chronology chronology51 = chronology44.withZone(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (short) 10, chronology44);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusMillis(20);
        long long56 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime54, 1970L);
        org.joda.time.DateTimeField dateTimeField57 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField58 = zonedChronology28.monthOfYear();
        org.joda.time.DurationField durationField59 = zonedChronology28.halfdays();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 30L + "'", long56 == 30L);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
    }

    @Test
    public void test07267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07267");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.weekOfWeekyear();
        org.joda.time.Chronology chronology36 = zonedChronology28.withUTC();
        long long44 = zonedChronology28.getDateTimeMillis((int) (byte) -1, 12, 9, 1, (int) (byte) 1, (int) (short) 1, 5);
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology28.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long51 = zonedChronology28.getDateTimeMillis(1439016, 35162287, (-100), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35162287 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-62169202738995L) + "'", long44 == (-62169202738995L));
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
    }

    @Test
    public void test07268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07268");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale6 = new java.util.Locale("UTC");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale locale8 = builder4.build();
        java.util.Locale.Builder builder10 = builder4.setScript("");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder11.build();
        org.joda.time.tz.NameProvider nameProvider13 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider13);
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.lang.String str19 = nameProvider13.getName(locale16, "0", "venerd\354");
        java.util.Locale.Builder builder20 = null; // flaky: builder11.setLocale(locale16);
        java.lang.String str21 = locale16.toLanguageTag();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals(locale6.toString(), "utc");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "utc");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "utc");
        org.junit.Assert.assertNotNull(nameProvider13);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNull(str19);
// flaky:         org.junit.Assert.assertNotNull(builder20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ja-JP" + "'", str21, "ja-JP");
    }

    @Test
    public void test07269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07269");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        long long37 = zonedChronology28.add((long) 9, 35L, (int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray40 = zonedChronology28.get(readablePeriod38, (-60518361599823L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 44L + "'", long37 == 44L);
    }

    @Test
    public void test07270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07270");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone1.previousTransition(0L);
        long long5 = dateTimeZone1.convertUTCToLocal(1L);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        long long10 = dateTimeZone1.getMillisKeepLocal(dateTimeZone8, (long) (-1));
        int int12 = dateTimeZone1.getStandardOffset((long) '4');
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(0L, chronology15);
        java.lang.String str18 = localDateTime16.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = localDateTime16.toString(dateTimeFormatter19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.monthOfYear();
        org.joda.time.Interval interval22 = property21.toInterval();
        long long23 = property21.remainder();
        org.joda.time.LocalDateTime localDateTime24 = property21.roundHalfFloorCopy();
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        int int26 = property21.getMaximumTextLength(locale25);
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.lang.String str28 = locale27.getCountry();
        int int29 = property21.getMaximumTextLength(locale27);
        java.lang.String str30 = dateTimeZone1.getShortName((-625L), locale27);
        long long33 = dateTimeZone1.convertLocalToUTC((long) 3, true);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(9L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        boolean boolean39 = dateTimeZone37.isLocalDateTimeGap(localDateTime38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(0L, chronology41);
        java.lang.String str44 = localDateTime42.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = localDateTime42.toString(dateTimeFormatter45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime42.monthOfYear();
        org.joda.time.LocalDateTime localDateTime48 = property47.roundCeilingCopy();
        boolean boolean49 = dateTimeZone37.isLocalDateTimeGap(localDateTime48);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone37);
        java.lang.String str51 = dateTimeZone37.getID();
        long long53 = dateTimeZone37.nextTransition((long) 999);
        java.lang.String str55 = dateTimeZone37.getShortName(19L);
        java.lang.String str56 = dateTimeZone37.getID();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(0L, chronology59);
        int int61 = localDateTime60.getWeekyear();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.withMillisOfSecond(100);
        org.joda.time.Chronology chronology64 = localDateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.yearOfCentury();
        org.joda.time.DurationField durationField66 = chronology64.millis();
        org.joda.time.DurationField durationField67 = chronology64.months();
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now(chronology64);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = localDateTime68.getFieldTypes();
        org.joda.time.LocalDateTime.Property property70 = localDateTime68.era();
        java.util.Locale locale71 = java.util.Locale.US;
        java.lang.String str72 = locale71.getLanguage();
        int int73 = property70.getMaximumShortTextLength(locale71);
        java.lang.String str74 = dateTimeZone37.getName(1900L, locale71);
        java.util.Locale.setDefault(locale71);
        java.lang.String str76 = dateTimeZone1.getShortName((long) (byte) 100, locale71);
        java.lang.String str77 = locale71.getDisplayScript();
        java.util.Locale locale78 = locale71.stripExtensions();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c" + "'", str18, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T00:00:00.000" + "'", str20, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "CN" + "'", str28, "CN");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 3L + "'", long33 == 3L);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u65e5\u672c" + "'", str44, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01T00:00:00.000" + "'", str46, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 999L + "'", long53 == 999L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1970 + "'", int61 == 1970);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "en" + "'", str72, "en");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00" + "'", str74, "+00:00");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00" + "'", str76, "+00:00");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_US");
    }

    @Test
    public void test07271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07271");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = timeZone1.getOffset((long) (byte) 10);
        int int5 = timeZone1.getRawOffset();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone1.hasSameRules(timeZone6);
        timeZone1.setID("2022");
        int int11 = timeZone1.getOffset((long) 575);
        timeZone1.setID("Deutsch");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test07272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07272");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfSecond();
        int int7 = property6.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property6.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMinutes(3);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusWeeks((int) (short) -1);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plus(readableDuration13);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 999 + "'", int7 == 999);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test07273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07273");
        java.util.Locale locale1 = new java.util.Locale("44");
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale1.getDisplayCountry();
        org.junit.Assert.assertEquals(locale1.toString(), "44");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "44" + "'", str2, "44");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test07274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07274");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(0L, chronology4);
        java.lang.String str7 = localDateTime5.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = localDateTime5.toString(dateTimeFormatter8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.monthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundCeilingCopy();
        boolean boolean12 = dateTimeZone0.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusMillis((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime14.toString(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u65e5\u672c" + "'", str7, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.000" + "'", str9, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.010" + "'", str16, "1970-01-01T00:00:00.010");
    }

    @Test
    public void test07275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07275");
        java.util.Locale locale1 = new java.util.Locale("\u97d3\u56fd\u8a9e");
        org.junit.Assert.assertEquals(locale1.toString(), "\u97d3\u56fd\u8a9e");
    }

    @Test
    public void test07276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07276");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone32 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.centuryOfEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        java.util.Locale locale38 = java.util.Locale.US;
        boolean boolean39 = localDateTime37.equals((java.lang.Object) locale38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(0L, chronology43);
        int int45 = localDateTime44.getWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime37.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusMinutes(100);
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str54 = localDateTime49.toString("\u4e2d\u56fd\u8a9e", locale53);
        int[] intArray56 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime49, (long) 52100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = localDateTime49.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime49.plusWeeks(20);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.year();
        org.joda.time.LocalDateTime localDateTime61 = property60.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime62 = property60.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str54, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1970, 1, 1, 52100]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
    }

    @Test
    public void test07277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07277");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMonths(9);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDateTime11.getFields();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test07278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07278");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        java.lang.String str12 = localDateTime10.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = localDateTime10.toString(dateTimeFormatter13);
        boolean boolean15 = localDateTime2.isAfter((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.plusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks(999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMonthOfYear(48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 48 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u672c" + "'", str12, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.000" + "'", str14, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test07279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07279");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = zonedChronology32.getZone();
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        long long38 = dateTimeZone36.previousTransition(100L);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(0L, chronology42);
        int int44 = localDateTime43.getWeekyear();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withYearOfEra(1970);
        org.joda.time.DateTime dateTime47 = localDateTime46.toDateTime();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(0L, chronology49);
        int int51 = localDateTime50.getWeekyear();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withYearOfEra(1970);
        org.joda.time.DateTime dateTime54 = localDateTime53.toDateTime();
        int int55 = dateTime47.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime56 = localDateTime40.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime40.plus(readableDuration57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(0L, chronology60);
        java.util.Locale locale62 = java.util.Locale.US;
        boolean boolean63 = localDateTime61.equals((java.lang.Object) locale62);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.dayOfWeek();
        int int65 = localDateTime61.getDayOfWeek();
        int int66 = localDateTime40.compareTo((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime40.minusYears(9);
        boolean boolean69 = dateTimeZone34.isLocalDateTimeGap(localDateTime40);
        org.joda.time.LocalDateTime.Property property70 = localDateTime40.dayOfMonth();
        java.util.Locale locale74 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale75 = java.util.Locale.ENGLISH;
        java.lang.String str76 = locale74.getDisplayLanguage(locale75);
        java.util.Locale locale79 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.lang.String str80 = locale75.getDisplayScript(locale79);
        java.lang.String str81 = locale79.getDisplayScript();
        java.util.Locale locale82 = locale79.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime83 = property70.setCopy("janv.", locale79);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"janv.\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L + "'", long38 == 100L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertEquals(locale74.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u65e5\u672c" + "'", str76, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale79.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "\u65e5\u672c_HI!");
    }

    @Test
    public void test07280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07280");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(0L, chronology4);
        int int6 = localDateTime5.getWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withDayOfMonth(10);
        int int13 = localDateTime10.getEra();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfWeek();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        boolean boolean16 = locale15.hasExtensions();
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleKeys();
        java.lang.String str18 = property14.getAsText(locale15);
        java.lang.String str19 = locale1.getDisplayLanguage(locale15);
        java.lang.String str20 = locale15.getDisplayScript();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "venerd\354" + "'", str18, "venerd\354");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test07281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07281");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        int int14 = localDateTime10.getDayOfYear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.dayOfYear();
        java.lang.String str16 = property15.getAsShortText();
        java.util.Locale locale20 = new java.util.Locale("GMT", "Jan", "2022-02-11T09:43:35.370");
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.lang.String str22 = locale20.getVariant();
        java.lang.String str23 = locale20.getDisplayCountry();
        int int24 = property15.getMaximumShortTextLength(locale20);
        java.util.Set<java.lang.String> strSet25 = locale20.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale20);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertEquals(locale20.toString(), "gmt_JAN_2022-02-11T09:43:35.370");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "gmt" + "'", str21, "gmt");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T09:43:35.370" + "'", str22, "2022-02-11T09:43:35.370");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JAN" + "'", str23, "JAN");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(strSet25);
    }

    @Test
    public void test07282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07282");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.minuteOfHour();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMillisOfSecond(0);
        int int15 = property4.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime16 = property4.roundHalfFloorCopy();
        boolean boolean17 = property4.isLeap();
        java.lang.String str18 = property4.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "49" + "'", str18, "49");
    }

    @Test
    public void test07283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07283");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(0L, chronology10);
        java.lang.String str13 = localDateTime11.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = localDateTime11.toString(dateTimeFormatter14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime11.monthOfYear();
        org.joda.time.Interval interval17 = property16.toInterval();
        long long18 = property16.remainder();
        org.joda.time.LocalDateTime localDateTime19 = property16.roundHalfFloorCopy();
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        int int21 = property16.getMaximumTextLength(locale20);
        org.joda.time.LocalDateTime localDateTime22 = property16.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfCentury();
        java.lang.String str24 = property23.getAsShortText();
        org.joda.time.LocalDateTime localDateTime25 = property23.withMinimumValue();
        int int26 = localDateTime25.getYear();
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime();
        int int28 = property7.getDifference((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.LocalDateTime localDateTime30 = property7.addWrapFieldToCopy(70);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays(2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = localDateTime32.getFieldTypes();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u672c" + "'", str13, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01T00:00:00.000" + "'", str15, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "70" + "'", str24, "70");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1900 + "'", int26 == 1900);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 840 + "'", int28 == 840);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
    }

    @Test
    public void test07284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07284");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusSeconds(2022);
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundFloorCopy();
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        java.lang.String str17 = property13.getAsShortText(locale15);
        java.lang.String str18 = locale15.getVariant();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale.Builder builder22 = builder19.setLanguage("");
        java.util.Locale.Builder builder23 = builder22.clearExtensions();
        java.util.Locale locale25 = new java.util.Locale("UTC");
        java.util.Locale.Builder builder26 = builder23.setLocale(locale25);
        java.util.Locale locale27 = builder23.build();
        java.util.Locale.Builder builder29 = builder23.setScript("");
        java.util.Locale.Builder builder30 = builder29.clearExtensions();
        java.util.Locale locale31 = builder30.build();
        java.lang.String str32 = locale31.getISO3Country();
        java.lang.String str33 = locale15.getDisplayVariant(locale31);
        java.lang.String str34 = locale15.getLanguage();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals(locale25.toString(), "utc");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "utc");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "utc");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ja" + "'", str34, "ja");
    }

    @Test
    public void test07285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07285");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        long long35 = dateTimeZone33.previousTransition(0L);
        long long37 = dateTimeZone33.nextTransition((long) (-1));
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone33);
        long long40 = dateTimeZone33.convertUTCToLocal((long) 20);
        org.joda.time.chrono.ZonedChronology zonedChronology41 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology28, dateTimeZone33);
        org.joda.time.DurationField durationField42 = zonedChronology28.halfdays();
        long long48 = zonedChronology28.getDateTimeMillis((long) '4', (int) (byte) 10, 5, 59, (int) 'x');
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology28.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology28);
        org.joda.time.DurationField durationField51 = zonedChronology28.years();
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology28.halfdayOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 20L + "'", long40 == 20L);
        org.junit.Assert.assertNotNull(zonedChronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 36359120L + "'", long48 == 36359120L);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test07286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07286");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, chronology11);
        java.lang.String str14 = localDateTime12.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime12.toString(dateTimeFormatter15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.monthOfYear();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.LocalDateTime localDateTime20 = property17.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property17.getFieldType();
        org.joda.time.LocalDateTime.Property property22 = localDateTime9.property(dateTimeFieldType21);
        int int23 = property22.getMinimumValueOverall();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(0L, chronology25);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withYearOfEra(1970);
        org.joda.time.DateTime dateTime30 = localDateTime29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone31.previousTransition(100L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        int int39 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYearOfEra(1970);
        org.joda.time.DateTime dateTime42 = localDateTime41.toDateTime();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(0L, chronology44);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withYearOfEra(1970);
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        int int50 = dateTime42.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = localDateTime35.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean52 = dateTime30.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology53 = dateTime30.getChronology();
        long long54 = property22.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DurationField durationField55 = property22.getDurationField();
        org.joda.time.LocalDateTime localDateTime56 = property22.withMaximumValue();
        org.joda.time.DurationField durationField57 = property22.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.000" + "'", str16, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L + "'", long33 == 100L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(durationField57);
    }

    @Test
    public void test07287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07287");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.minuteOfHour();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        java.util.Locale locale8 = java.util.Locale.US;
        boolean boolean9 = localDateTime7.equals((java.lang.Object) locale8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withEra((int) (short) 0);
        int int22 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime3.minusWeeks(2);
        org.joda.time.LocalDateTime.Property property25 = localDateTime3.dayOfYear();
        int[] intArray26 = localDateTime3.getValues();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(intArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[2022, 2, 11, 35365459]");
    }

    @Test
    public void test07288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07288");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfDay();
        long long39 = zonedChronology28.getDateTimeMillis(0, 1, (int) (byte) 1, 20);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology28.millisOfDay();
        org.joda.time.Chronology chronology43 = zonedChronology28.withUTC();
        org.joda.time.DateTimeZone dateTimeZone44 = zonedChronology28.getZone();
        org.joda.time.DateTimeZone dateTimeZone45 = zonedChronology28.getZone();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-62167219199980L) + "'", long39 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
    }

    @Test
    public void test07289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07289");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfEra(1970);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        int int19 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.plus(readableDuration21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(0L, chronology24);
        java.util.Locale locale26 = java.util.Locale.US;
        boolean boolean27 = localDateTime25.equals((java.lang.Object) locale26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.dayOfWeek();
        int int29 = localDateTime25.getDayOfWeek();
        int int30 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime4.minusYears(9);
        org.joda.time.LocalDateTime.Property property33 = localDateTime4.millisOfSecond();
        int int34 = property33.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test07290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07290");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeZone dateTimeZone31 = zonedChronology28.getZone();
        org.joda.time.DurationField durationField32 = zonedChronology28.centuries();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.era();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test07291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07291");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfMonth(10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, chronology11);
        int int13 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withYearOfEra(1970);
        boolean boolean16 = localDateTime9.equals((java.lang.Object) localDateTime12);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMillis(20);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.year();
        org.joda.time.LocalDateTime localDateTime20 = property19.withMinimumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test07292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07292");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("Coordinated Universal Time");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Coordinated Universal Time\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07293");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        java.lang.String str36 = localDateTime34.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = localDateTime34.toString(dateTimeFormatter37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime34.monthOfYear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.withMillisOfDay(100);
        long long43 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime41, (long) 59);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(0L, chronology45);
        int int47 = localDateTime46.getWeekyear();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withYearOfEra(1970);
        org.joda.time.DateTime dateTime50 = localDateTime49.toDateTime();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(0L, chronology52);
        int int54 = localDateTime53.getWeekyear();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withYearOfEra(1970);
        org.joda.time.DateTime dateTime57 = localDateTime56.toDateTime();
        int int58 = dateTime50.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime59 = localDateTime41.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime59.getZone();
        java.lang.String str61 = dateTimeZone60.toString();
        long long63 = dateTimeZone60.convertUTCToLocal((long) '4');
        java.util.Locale.Builder builder65 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder67 = builder65.setScript("");
        java.util.Locale.Builder builder69 = builder67.removeUnicodeLocaleAttribute("1970");
        java.util.Locale.Builder builder72 = builder69.setExtension('x', "2");
        java.util.Locale.Builder builder74 = builder72.setRegion("");
        java.util.Locale locale75 = builder72.build();
        java.lang.String str76 = dateTimeZone60.getShortName((long) (-292275054), locale75);
        java.lang.String str77 = locale75.getVariant();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.000" + "'", str38, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "UTC" + "'", str61, "UTC");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 52L + "'", long63 == 52L);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00" + "'", str76, "+00:00");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test07294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07294");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withDurationAdded(readableDuration7, (int) (short) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = property10.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test07295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07295");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test07296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07296");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        long long34 = dateTimeZone32.nextTransition((long) (byte) -1);
        org.joda.time.chrono.ZonedChronology zonedChronology35 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology28, dateTimeZone32);
        java.lang.String str36 = zonedChronology35.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(0L, chronology38);
        java.lang.String str41 = localDateTime39.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = localDateTime39.toString(dateTimeFormatter42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime39.monthOfYear();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withSecondOfMinute((int) '4');
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusWeeks(999);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.withDurationAdded(readableDuration51, 3);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime48.withDate((int) (short) -1, 7, 12);
        int[] intArray59 = zonedChronology35.get((org.joda.time.ReadablePartial) localDateTime48, (long) 31);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime48.withEra((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusSeconds(53);
        int int64 = localDateTime61.getMillisOfDay();
        org.joda.time.Chronology chronology65 = localDateTime61.getChronology();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNotNull(zonedChronology35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str36, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u65e5\u672c" + "'", str41, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01T00:00:00.000" + "'", str43, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1970, 1, 1, 31]");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52100 + "'", int64 == 52100);
        org.junit.Assert.assertNotNull(chronology65);
    }

    @Test
    public void test07297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07297");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMillisOfSecond(70);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfDay(59);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusSeconds(12);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks(0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test07298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07298");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology32.hourOfHalfday();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        int int39 = timeZone36.getOffset((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.Chronology chronology41 = zonedChronology32.withZone(dateTimeZone40);
        org.joda.time.DurationField durationField42 = zonedChronology32.years();
        org.joda.time.DateTimeZone dateTimeZone43 = zonedChronology32.getZone();
        org.joda.time.DurationField durationField44 = zonedChronology32.centuries();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(durationField44);
    }

    @Test
    public void test07299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07299");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("Korean");
        java.util.Locale.Builder builder6 = builder4.setLanguage("KR");
        java.util.Locale locale7 = builder4.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder4.setRegion("Property[secondOfMinute]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: Property[secondOfMinute] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "kr");
    }

    @Test
    public void test07300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07300");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getISO3Language();
        java.util.Locale locale11 = locale8.stripExtensions();
        int int12 = property7.getMaximumShortTextLength(locale8);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test07301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07301");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("\uc911\uad6d\uc5b4\uc911\uad6d)");
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.lang.String str11 = locale8.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str16 = locale13.getDisplayName(locale15);
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale17.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.lang.String str28 = locale26.getDisplayCountry(locale27);
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.util.Locale[] localeArray33 = new java.util.Locale[] { locale8, locale13, locale17, locale21, locale24, locale25, locale26, locale29, locale30 };
        java.util.ArrayList<java.util.Locale> localeList34 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList34, localeArray33);
        java.util.List<java.util.Locale> localeList36 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList34);
        java.lang.String[] strArray38 = new java.lang.String[] { "1970-01-01T00:00:00.000" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.Locale.FilteringMode filteringMode41 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList39, filteringMode41);
        java.util.Locale locale43 = java.util.Locale.CHINA;
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.util.Locale locale49 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale50 = locale49.stripExtensions();
        java.util.Locale locale51 = java.util.Locale.ITALIAN;
        java.util.Locale locale54 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale55 = locale54.stripExtensions();
        java.util.Locale locale58 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale59 = java.util.Locale.ENGLISH;
        java.lang.String str60 = locale58.getDisplayLanguage(locale59);
        java.util.Locale locale61 = java.util.Locale.JAPAN;
        java.util.Locale locale62 = java.util.Locale.JAPAN;
        java.lang.String str63 = locale61.getDisplayCountry(locale62);
        java.util.Locale locale66 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale67 = locale66.stripExtensions();
        java.util.Locale locale68 = java.util.Locale.getDefault();
        java.util.Locale locale70 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Locale locale71 = java.util.Locale.US;
        java.util.Locale locale72 = java.util.Locale.getDefault();
        java.util.Locale locale73 = java.util.Locale.CHINA;
        java.lang.String str74 = locale73.getCountry();
        java.util.Locale[] localeArray75 = new java.util.Locale[] { locale43, locale44, locale45, locale46, locale49, locale51, locale54, locale58, locale62, locale67, locale68, locale70, locale71, locale72, locale73 };
        java.util.ArrayList<java.util.Locale> localeList76 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList76, localeArray75);
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList76);
        java.util.Locale locale79 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet80 = locale79.getUnicodeLocaleAttributes();
        boolean boolean82 = strSet80.contains((java.lang.Object) "en_US");
        boolean boolean83 = strSet80.isEmpty();
        java.util.List<java.lang.String> strList84 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strSet80);
        java.util.Locale.LanguageRange[] languageRangeArray85 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList86 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList86, languageRangeArray85);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap88 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList89 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList86, strMap88);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap90 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList91 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList86, strMap90);
        java.util.Collection<java.util.Locale> localeCollection92 = null;
        java.util.Locale.FilteringMode filteringMode93 = null;
        java.util.List<java.util.Locale> localeList94 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList86, localeCollection92, filteringMode93);
        java.util.stream.Stream<java.util.Locale> localeStream95 = localeList94.parallelStream();
        java.util.List<java.util.Locale> localeList96 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList94);
        boolean boolean97 = strSet4.removeAll((java.util.Collection<java.util.Locale>) localeList96);
        java.util.stream.Stream<java.util.Locale> localeStream98 = localeList96.parallelStream();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u65e5\u672c" + "'", str10, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Japanese (Japan)" + "'", str11, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str16, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u65e5\u672c" + "'", str19, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Japanese (Japan)" + "'", str20, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u65e5\u672c" + "'", str28, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u65e5\u672c" + "'", str32, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localeList36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + filteringMode41 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode41.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale49.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it");
        org.junit.Assert.assertEquals(locale54.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals(locale58.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u65e5\u672c" + "'", str60, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u65e5\u672c" + "'", str63, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale66.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "gmt_JAN_2022-02-11T09:43:35.370");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "gmt_JAN_2022-02-11T09:43:35.370");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "CN" + "'", str74, "CN");
        org.junit.Assert.assertNotNull(localeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(languageRangeArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(languageRangeList89);
        org.junit.Assert.assertNotNull(languageRangeList91);
        org.junit.Assert.assertNotNull(localeList94);
        org.junit.Assert.assertNotNull(localeStream95);
        org.junit.Assert.assertNotNull(localeList96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(localeStream98);
    }

    @Test
    public void test07302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07302");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        long long34 = dateTimeZone32.nextTransition((long) (byte) -1);
        org.joda.time.chrono.ZonedChronology zonedChronology35 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology28, dateTimeZone32);
        java.lang.String str36 = zonedChronology35.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(0L, chronology38);
        java.lang.String str41 = localDateTime39.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = localDateTime39.toString(dateTimeFormatter42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime39.monthOfYear();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withSecondOfMinute((int) '4');
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusWeeks(999);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.withDurationAdded(readableDuration51, 3);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime48.withDate((int) (short) -1, 7, 12);
        int[] intArray59 = zonedChronology35.get((org.joda.time.ReadablePartial) localDateTime48, (long) 31);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime48.withEra((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusSeconds(53);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.minusSeconds(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withMonthOfYear(22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNotNull(zonedChronology35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str36, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u65e5\u672c" + "'", str41, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01T00:00:00.000" + "'", str43, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1970, 1, 1, 31]");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
    }

    @Test
    public void test07303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07303");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        boolean boolean11 = property7.isLeap();
        org.joda.time.ReadableInstant readableInstant12 = null;
        long long13 = property7.getDifferenceAsLong(readableInstant12);
        org.joda.time.DurationField durationField14 = property7.getDurationField();
        org.joda.time.DurationField durationField15 = property7.getLeapDurationField();
        org.joda.time.DurationField durationField16 = property7.getLeapDurationField();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(0L, chronology18);
        int int20 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYearOfEra(1970);
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        long long26 = dateTimeZone24.previousTransition(100L);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(0L, chronology30);
        int int32 = localDateTime31.getWeekyear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withYearOfEra(1970);
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        int int39 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYearOfEra(1970);
        org.joda.time.DateTime dateTime42 = localDateTime41.toDateTime();
        int int43 = dateTime35.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = localDateTime28.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        boolean boolean45 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime35);
        int int46 = property7.getDifference((org.joda.time.ReadableInstant) dateTime23);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-625L) + "'", long13 == (-625L));
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test07304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07304");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone32 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.centuryOfEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        java.util.Locale locale38 = java.util.Locale.US;
        boolean boolean39 = localDateTime37.equals((java.lang.Object) locale38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(0L, chronology43);
        int int45 = localDateTime44.getWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime37.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusMinutes(100);
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str54 = localDateTime49.toString("\u4e2d\u56fd\u8a9e", locale53);
        int[] intArray56 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime49, (long) 52100);
        org.joda.time.DurationField durationField57 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField58 = zonedChronology28.centuryOfEra();
        org.joda.time.DurationField durationField59 = zonedChronology28.hours();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str54, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1970, 1, 1, 52100]");
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
    }

    @Test
    public void test07305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07305");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra((int) (byte) 1);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusSeconds((int) '4');
        int int10 = localDateTime6.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusHours((int) '4');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra(1971);
        org.joda.time.DurationFieldType durationFieldType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime12.withFieldAdded(durationFieldType15, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test07306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07306");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long37 = zonedChronology28.getDateTimeMillis(91, 35142965, 43, 840);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35142965 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test07307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07307");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfSecond(0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone10.previousTransition(100L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(0L, chronology16);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYearOfEra(1970);
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(0L, chronology23);
        int int25 = localDateTime24.getWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withYearOfEra(1970);
        org.joda.time.DateTime dateTime28 = localDateTime27.toDateTime();
        int int29 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime30 = localDateTime14.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime14.plus(readableDuration31);
        boolean boolean33 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime7.minusDays(2022);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.minusMonths((int) (short) 10);
        org.joda.time.LocalDateTime.Property property40 = localDateTime35.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.minusYears(2);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withMillisOfDay(1970);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withMinuteOfHour(33);
        int int47 = localDateTime46.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = localDateTime46.toString("Inglese");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: I");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 62 + "'", int47 == 62);
    }

    @Test
    public void test07308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07308");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        java.lang.String str12 = localDateTime10.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = localDateTime10.toString(dateTimeFormatter13);
        boolean boolean15 = localDateTime2.isAfter((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.plusYears((int) (short) -1);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withPeriodAdded(readablePeriod18, 19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = localDateTime20.toString("chinois (Chine)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u672c" + "'", str12, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.000" + "'", str14, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test07309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07309");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField33 = zonedChronology28.halfdays();
        org.joda.time.DurationField durationField34 = zonedChronology28.seconds();
        java.lang.String str35 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.hourOfHalfday();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(0L, chronology38);
        java.lang.String str41 = localDateTime39.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = localDateTime39.toString(dateTimeFormatter42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime39.monthOfYear();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.withMillisOfDay(100);
        org.joda.time.LocalDateTime.Property property47 = localDateTime39.centuryOfEra();
        int int48 = localDateTime39.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime39.plusSeconds(3);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withHourOfDay(11);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withCenturyOfEra((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minus(readableDuration55);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now();
        boolean boolean59 = dateTimeZone57.isLocalDateTimeGap(localDateTime58);
        int[] intArray60 = localDateTime58.getValues();
        zonedChronology28.validate((org.joda.time.ReadablePartial) localDateTime54, intArray60);
        org.joda.time.LocalDateTime.Property property62 = localDateTime54.minuteOfHour();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str35, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u65e5\u672c" + "'", str41, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01T00:00:00.000" + "'", str43, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[2022, 2, 11, 35366138]");
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test07310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07310");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str5 = nameProvider0.getShortName(locale2, "", "hi!");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        java.util.Locale locale11 = java.util.Locale.US;
        boolean boolean12 = localDateTime10.equals((java.lang.Object) locale11);
        java.lang.String str13 = locale11.toLanguageTag();
        java.lang.String str16 = nameProvider0.getShortName(locale11, "2022-02-11T09:44:17.426", "");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.tz.NameProvider nameProvider18 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str23 = nameProvider18.getShortName(locale20, "", "hi!");
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str27 = nameProvider18.getName(locale24, "CN", "\u65e5\u672c");
        java.lang.String str28 = locale24.getISO3Language();
        java.lang.String str31 = nameProvider0.getName(locale24, "\u610f\u5927\u5229\u6587", "ISOChronology[UTC]");
        java.util.Locale locale35 = new java.util.Locale("2022-02-11T09:43:35.370", "\u4e2d\u56fd", "\u4e2d\u56fd\u8a9e");
        java.lang.String str38 = nameProvider0.getShortName(locale35, "Property[millisOfSecond]", "English");
        java.lang.String str39 = locale35.getLanguage();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en-US" + "'", str13, "en-US");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(nameProvider18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "deu" + "'", str28, "deu");
        org.junit.Assert.assertNull(str31);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "\u4e2d\u56fd\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-11t09:43:35.370" + "'", str39, "2022-02-11t09:43:35.370");
    }

    @Test
    public void test07311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07311");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfEra(1970);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        int int19 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.plus(readableDuration21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withPeriodAdded(readablePeriod23, (int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = localDateTime25.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusSeconds(70);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(0L, chronology30);
        int int32 = localDateTime31.getWeekyear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withYearOfEra(1970);
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        long long38 = dateTimeZone36.previousTransition(100L);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(0L, chronology42);
        int int44 = localDateTime43.getWeekyear();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withYearOfEra(1970);
        org.joda.time.DateTime dateTime47 = localDateTime46.toDateTime();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(0L, chronology49);
        int int51 = localDateTime50.getWeekyear();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withYearOfEra(1970);
        org.joda.time.DateTime dateTime54 = localDateTime53.toDateTime();
        int int55 = dateTime47.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime56 = localDateTime40.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean57 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime58 = localDateTime28.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        long long59 = dateTime58.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L + "'", long38 == 100L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-69900L) + "'", long59 == (-69900L));
    }

    @Test
    public void test07312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07312");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("UTC");
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder12 = builder9.addUnicodeLocaleAttribute("Deutsch");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test07313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07313");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 4);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone2.previousTransition(100L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withHourOfDay((int) (short) 0);
        int int9 = localDateTime8.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withCenturyOfEra(0);
        int int12 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.dayOfMonth();
        int int14 = localDateTime11.getDayOfYear();
        int int15 = localDateTime11.getYearOfEra();
        int int16 = localDateTime11.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property17 = localDateTime11.era();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L + "'", long4 == 100L);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 70 + "'", int15 == 70);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test07314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07314");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusDays(4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plus(readableDuration10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readableDuration12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy((-100));
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = localDateTime16.getFields();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
    }

    @Test
    public void test07315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07315");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.centuryOfEra();
        org.joda.time.DurationField durationField36 = zonedChronology28.seconds();
        org.joda.time.DurationField durationField37 = zonedChronology28.centuries();
        org.joda.time.DurationField durationField38 = zonedChronology28.weekyears();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test07316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07316");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withSecondOfMinute((int) '4');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(999);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(0L, chronology15);
        java.lang.String str18 = localDateTime16.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = localDateTime16.toString(dateTimeFormatter19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.monthOfYear();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withHourOfDay(0);
        java.util.Date date25 = localDateTime22.toDate();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.fromDateFields(date25);
        boolean boolean27 = localDateTime13.isAfter((org.joda.time.ReadablePartial) localDateTime26);
        int int28 = localDateTime13.getMonthOfYear();
        org.joda.time.ReadablePartial readablePartial29 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = localDateTime13.isBefore(readablePartial29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c" + "'", str18, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T00:00:00.000" + "'", str20, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 11 + "'", int28 == 11);
    }

    @Test
    public void test07317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07317");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plus(readableDuration11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        boolean boolean15 = dateTimeZone13.isLocalDateTimeGap(localDateTime14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, chronology17);
        java.lang.String str20 = localDateTime18.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = localDateTime18.toString(dateTimeFormatter21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.monthOfYear();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundCeilingCopy();
        boolean boolean25 = dateTimeZone13.isLocalDateTimeGap(localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusMillis((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone28.previousTransition(100L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withHourOfDay((int) (short) 0);
        int int35 = localDateTime34.getEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(0L, chronology39);
        java.lang.String str42 = localDateTime40.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = localDateTime40.toString(dateTimeFormatter43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime40.monthOfYear();
        org.joda.time.Interval interval46 = property45.toInterval();
        org.joda.time.LocalDateTime localDateTime48 = property45.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property45.getFieldType();
        org.joda.time.LocalDateTime.Property property50 = localDateTime37.property(dateTimeFieldType49);
        boolean boolean51 = localDateTime27.isSupported(dateTimeFieldType49);
        org.joda.time.LocalDateTime.Property property52 = localDateTime10.property(dateTimeFieldType49);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(0L, chronology54);
        int int56 = localDateTime55.getWeekyear();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withYearOfEra(1970);
        org.joda.time.DateTime dateTime59 = localDateTime58.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        long long62 = dateTimeZone60.previousTransition(100L);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology63);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(0L, chronology66);
        int int68 = localDateTime67.getWeekyear();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.withYearOfEra(1970);
        org.joda.time.DateTime dateTime71 = localDateTime70.toDateTime();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime(0L, chronology73);
        int int75 = localDateTime74.getWeekyear();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime74.withYearOfEra(1970);
        org.joda.time.DateTime dateTime78 = localDateTime77.toDateTime();
        int int79 = dateTime71.compareTo((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateTime dateTime80 = localDateTime64.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean81 = dateTime59.isEqual((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Chronology chronology82 = dateTime59.getChronology();
        long long83 = property52.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime59);
        long long84 = dateTime59.getMillis();
        org.joda.time.DateTimeZone dateTimeZone85 = dateTime59.getZone();
        java.lang.String str87 = dateTimeZone85.getName((-2932745291L));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u65e5\u672c" + "'", str20, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.000" + "'", str22, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u65e5\u672c" + "'", str42, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01T00:00:00.000" + "'", str44, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 100L + "'", long62 == 100L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1970 + "'", int68 == 1970);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1970 + "'", int75 == 1970);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+00:00" + "'", str87, "+00:00");
    }

    @Test
    public void test07318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07318");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        int int14 = localDateTime10.getDayOfYear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.dayOfYear();
        int int16 = property15.getMinimumValue();
        java.lang.String str17 = property15.getAsText();
        int int18 = property15.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime19 = property15.roundCeilingCopy();
        int int20 = localDateTime19.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test07319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07319");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.DurationField durationField10 = property7.getDurationField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, chronology12);
        int int14 = localDateTime13.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withYearOfEra(1970);
        org.joda.time.DateTime dateTime17 = localDateTime16.toDateTime();
        int int18 = property7.getDifference((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(0L, chronology20);
        java.lang.String str23 = localDateTime21.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = localDateTime21.toString(dateTimeFormatter24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime21.monthOfYear();
        org.joda.time.Interval interval27 = property26.toInterval();
        long long28 = property26.remainder();
        org.joda.time.LocalDateTime localDateTime29 = property26.roundHalfFloorCopy();
        boolean boolean30 = property26.isLeap();
        org.joda.time.ReadableInstant readableInstant31 = null;
        long long32 = property26.getDifferenceAsLong(readableInstant31);
        org.joda.time.DurationField durationField33 = property26.getDurationField();
        org.joda.time.DurationField durationField34 = property26.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime36 = property26.addToCopy(19);
        java.util.Date date37 = localDateTime36.toDate();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        long long40 = dateTimeZone38.previousTransition(100L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(0L, chronology44);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withYearOfEra(1970);
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(0L, chronology51);
        int int53 = localDateTime52.getWeekyear();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withYearOfEra(1970);
        org.joda.time.DateTime dateTime56 = localDateTime55.toDateTime();
        int int57 = dateTime49.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime58 = localDateTime42.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        java.lang.String str59 = dateTime49.toString();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(0L, chronology61);
        java.lang.String str64 = localDateTime62.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = null;
        java.lang.String str66 = localDateTime62.toString(dateTimeFormatter65);
        org.joda.time.LocalDateTime.Property property67 = localDateTime62.monthOfYear();
        org.joda.time.Interval interval68 = property67.toInterval();
        long long69 = property67.remainder();
        org.joda.time.LocalDateTime localDateTime70 = property67.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.plus(readableDuration71);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime(0L, chronology74);
        java.lang.String str77 = localDateTime75.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = null;
        java.lang.String str79 = localDateTime75.toString(dateTimeFormatter78);
        org.joda.time.LocalDateTime.Property property80 = localDateTime75.monthOfYear();
        org.joda.time.Interval interval81 = property80.toInterval();
        long long82 = property80.remainder();
        org.joda.time.LocalDateTime localDateTime83 = property80.roundHalfFloorCopy();
        java.lang.String str84 = property80.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = property80.getFieldType();
        boolean boolean86 = localDateTime70.isSupported(dateTimeFieldType85);
        int int87 = dateTime49.get(dateTimeFieldType85);
        int int88 = localDateTime36.get(dateTimeFieldType85);
        boolean boolean89 = dateTime17.isSupported(dateTimeFieldType85);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01T00:00:00.000" + "'", str25, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-625L) + "'", long32 == (-625L));
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Aug 01 00:00:00 GMT 1971");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 100L + "'", long40 == 100L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str59, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u65e5\u672c" + "'", str64, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01T00:00:00.000" + "'", str66, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u65e5\u672c" + "'", str77, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1970-01-01T00:00:00.000" + "'", str79, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(localDateTime83);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "1" + "'", str84, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 8 + "'", int88 == 8);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test07320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07320");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfMonth(10);
        int int10 = localDateTime7.getEra();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.dayOfWeek();
        java.lang.String str13 = localDateTime7.toString("\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str13, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
    }

    @Test
    public void test07321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07321");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.era();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = zonedChronology28.getZone();
        long long33 = dateTimeZone31.convertUTCToLocal((long) 'x');
        java.util.TimeZone timeZone34 = dateTimeZone31.toTimeZone();
        java.lang.String str36 = dateTimeZone31.getShortName(1925L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 120L + "'", long33 == 120L);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
    }

    @Test
    public void test07322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07322");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMinutes(100);
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str19 = localDateTime14.toString("\u4e2d\u56fd\u8a9e", locale18);
        java.lang.String str20 = locale18.getDisplayVariant();
        java.lang.String str21 = locale18.getScript();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str19, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test07323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07323");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone8.previousTransition(0L);
        long long12 = dateTimeZone8.nextTransition((long) (-1));
        org.joda.time.Chronology chronology13 = chronology6.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField14 = chronology6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology6);
        java.lang.String str17 = localDateTime15.toString("\u4e2d\u56fd");
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        org.joda.time.Interval interval19 = property18.toInterval();
        org.joda.time.DurationField durationField20 = property18.getDurationField();
        org.joda.time.LocalDateTime localDateTime21 = property18.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u56fd" + "'", str17, "\u4e2d\u56fd");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test07324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07324");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        java.util.Date date7 = localDateTime6.toDate();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusWeeks(7);
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime12 = property10.addWrapFieldToCopy(27236745);
        org.joda.time.tz.NameProvider nameProvider13 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str18 = nameProvider13.getShortName(locale15, "", "hi!");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider13);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider13);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(0L, chronology22);
        java.util.Locale locale24 = java.util.Locale.US;
        boolean boolean25 = localDateTime23.equals((java.lang.Object) locale24);
        java.lang.String str26 = locale24.toLanguageTag();
        java.lang.String str29 = nameProvider13.getShortName(locale24, "2022-02-11T09:44:17.426", "");
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.lang.String str33 = nameProvider13.getName(locale30, "zh-CN", "S\374dkorea");
        java.lang.String str34 = property10.getAsShortText(locale30);
        java.lang.String str35 = property10.getName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(nameProvider13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "en-US" + "'", str26, "en-US");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970" + "'", str34, "1970");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "year" + "'", str35, "year");
    }

    @Test
    public void test07325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07325");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        java.lang.String str9 = localDateTime7.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = localDateTime7.toString(dateTimeFormatter10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        boolean boolean14 = dateTimeZone2.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone2);
        int int17 = dateTimeZone2.getStandardOffset((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone2);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        org.joda.time.LocalDateTime localDateTime21 = property19.roundHalfFloorCopy();
        boolean boolean22 = property19.isLeap();
        org.joda.time.LocalDateTime localDateTime23 = property19.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c" + "'", str9, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.000" + "'", str11, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test07326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07326");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.minuteOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology32.centuries();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.Chronology chronology37 = zonedChronology32.withZone(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.Chronology chronology40 = zonedChronology32.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology32.millisOfSecond();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        int int46 = timeZone43.getOffset((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        int int49 = timeZone43.getOffset((-625L));
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.Chronology chronology52 = zonedChronology32.withZone(dateTimeZone51);
        org.joda.time.DurationField durationField53 = zonedChronology32.halfdays();
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology32.weekyear();
        org.joda.time.DurationField durationField55 = zonedChronology32.hours();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
    }

    @Test
    public void test07327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07327");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        java.lang.String str36 = localDateTime34.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = localDateTime34.toString(dateTimeFormatter37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime34.monthOfYear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.withMillisOfDay(100);
        long long43 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime41, (long) 59);
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology28.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long55 = zonedChronology28.getDateTimeMillis(421200000, 999, 263, (int) (short) 0, 641, (-174585600), 263);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 641 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.000" + "'", str38, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test07328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07328");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(9, (int) '4');
        org.joda.time.DateTime dateTime9 = localDateTime2.toDateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        java.lang.String str16 = localDateTime14.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = localDateTime14.toString(dateTimeFormatter17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime14.monthOfYear();
        org.joda.time.Interval interval20 = property19.toInterval();
        long long21 = property19.remainder();
        org.joda.time.LocalDateTime localDateTime22 = property19.roundHalfFloorCopy();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        int int24 = property19.getMaximumTextLength(locale23);
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.lang.String str26 = locale25.getCountry();
        int int27 = property19.getMaximumTextLength(locale25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(0L, chronology29);
        int int31 = localDateTime30.getWeekyear();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        long long36 = dateTimeZone34.previousTransition(100L);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withMillisOfSecond((int) (byte) 0);
        int int41 = localDateTime30.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        long long45 = dateTimeZone42.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime47 = localDateTime30.toDateTime(dateTimeZone42);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(0L, chronology49);
        java.lang.String str52 = localDateTime50.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = localDateTime50.toString(dateTimeFormatter53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(0L, chronology56);
        java.lang.String str59 = localDateTime57.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = localDateTime57.toString(dateTimeFormatter60);
        org.joda.time.LocalDateTime.Property property62 = localDateTime57.monthOfYear();
        org.joda.time.Interval interval63 = property62.toInterval();
        long long64 = property62.remainder();
        org.joda.time.LocalDateTime localDateTime65 = property62.roundHalfFloorCopy();
        java.lang.String str66 = property62.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property62.getFieldType();
        int int68 = localDateTime50.get(dateTimeFieldType67);
        int int69 = dateTime47.get(dateTimeFieldType67);
        int int70 = property19.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(0L, chronology72);
        int int74 = localDateTime73.getWeekyear();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.withMillisOfSecond(100);
        org.joda.time.Chronology chronology77 = localDateTime73.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.yearOfCentury();
        org.joda.time.DurationField durationField79 = chronology77.days();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.UTC;
        long long82 = dateTimeZone80.previousTransition(100L);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology83);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.withMillisOfSecond((int) (byte) 0);
        int[] intArray88 = chronology77.get((org.joda.time.ReadablePartial) localDateTime84, (long) (-1));
        org.joda.time.DateTimeField dateTimeField89 = chronology77.millisOfDay();
        org.joda.time.DateTimeField dateTimeField90 = chronology77.dayOfYear();
        org.joda.time.DateTimeField dateTimeField91 = chronology77.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField92 = chronology77.hourOfHalfday();
        boolean boolean93 = dateTime47.equals((java.lang.Object) dateTimeField92);
        int int94 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean95 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime47);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-35520000L) + "'", long10 == (-35520000L));
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u65e5\u672c" + "'", str16, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:00:00.000" + "'", str18, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CN" + "'", str26, "CN");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L + "'", long36 == 100L);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 100L + "'", long45 == 100L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u65e5\u672c" + "'", str52, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970-01-01T00:00:00.000" + "'", str54, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u65e5\u672c" + "'", str59, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970-01-01T00:00:00.000" + "'", str61, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(localDateTime65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1" + "'", str66, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1970 + "'", int74 == 1970);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 100L + "'", long82 == 100L);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test07329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07329");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-11T09:46:38.208");
        java.lang.String str2 = locale1.getCountry();
        java.util.Set<java.lang.Character> charSet3 = locale1.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
    }

    @Test
    public void test07330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07330");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str5 = nameProvider0.getShortName(locale2, "", "hi!");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        java.util.Locale locale11 = java.util.Locale.US;
        boolean boolean12 = localDateTime10.equals((java.lang.Object) locale11);
        java.lang.String str13 = locale11.toLanguageTag();
        java.lang.String str16 = nameProvider0.getShortName(locale11, "2022-02-11T09:44:17.426", "");
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.lang.String str20 = nameProvider0.getName(locale17, "zh-CN", "S\374dkorea");
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder21.clearExtensions();
        java.util.Locale.Builder builder24 = builder21.setLanguage("");
        java.util.Locale.Builder builder25 = builder24.clearExtensions();
        java.util.Locale locale27 = new java.util.Locale("UTC");
        java.util.Locale.Builder builder28 = builder25.setLocale(locale27);
        java.util.Locale locale29 = builder25.build();
        java.util.Locale.Builder builder31 = builder25.setScript("");
        java.util.Locale.Builder builder32 = builder31.clearExtensions();
        java.util.Locale locale33 = builder32.build();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(0L, chronology35);
        java.lang.String str38 = localDateTime36.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = localDateTime36.toString(dateTimeFormatter39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime36.monthOfYear();
        org.joda.time.Interval interval42 = property41.toInterval();
        long long43 = property41.remainder();
        org.joda.time.LocalDateTime localDateTime44 = property41.roundHalfFloorCopy();
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        int int46 = property41.getMaximumTextLength(locale45);
        java.util.Locale.Builder builder47 = builder32.setLocale(locale45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(0L, chronology49);
        java.lang.String str52 = localDateTime50.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = localDateTime50.toString(dateTimeFormatter53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime50.monthOfYear();
        org.joda.time.Interval interval56 = property55.toInterval();
        long long57 = property55.remainder();
        org.joda.time.LocalDateTime localDateTime58 = property55.roundHalfFloorCopy();
        java.util.Locale locale59 = java.util.Locale.ENGLISH;
        int int60 = property55.getMaximumTextLength(locale59);
        java.util.Locale locale61 = java.util.Locale.CHINA;
        java.lang.String str62 = locale61.getCountry();
        int int63 = property55.getMaximumTextLength(locale61);
        java.lang.String str64 = locale45.getDisplayCountry(locale61);
        java.lang.String str67 = nameProvider0.getName(locale45, "zh", "Property[yearOfCentury]");
        org.joda.time.tz.NameProvider nameProvider68 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale70 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str73 = nameProvider68.getShortName(locale70, "", "hi!");
        java.util.Locale locale74 = java.util.Locale.GERMAN;
        java.lang.String str77 = nameProvider68.getName(locale74, "CN", "\u65e5\u672c");
        java.util.Locale locale78 = java.util.Locale.US;
        java.lang.String str79 = locale78.getLanguage();
        java.lang.String str82 = nameProvider68.getName(locale78, "JP", "\u4e00\u6708");
        java.util.Locale locale84 = java.util.Locale.forLanguageTag("Ora media di Greenwich");
        java.util.Locale locale85 = locale84.stripExtensions();
        java.lang.String str88 = nameProvider68.getShortName(locale85, "en-US", "2022-02-11T09:44:15.081");
        java.lang.String str91 = nameProvider0.getShortName(locale85, "0070-01-01T00:00:00.100", "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        java.util.Locale locale95 = new java.util.Locale("fra", "ita", "\u4e2d\u56fd");
        java.lang.String str98 = nameProvider0.getShortName(locale95, "2021-12-30T09:45:51.827", "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en-US" + "'", str13, "en-US");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals(locale27.toString(), "utc");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "utc");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "utc");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u65e5\u672c" + "'", str38, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T00:00:00.000" + "'", str40, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u65e5\u672c" + "'", str52, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970-01-01T00:00:00.000" + "'", str54, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "CN" + "'", str62, "CN");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(nameProvider68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "en" + "'", str79, "en");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "");
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNull(str91);
// flaky:         org.junit.Assert.assertEquals(locale95.toString(), "\u4e2d\u56fd");
        org.junit.Assert.assertNull(str98);
    }

    @Test
    public void test07331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07331");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfEra(1970);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        int int19 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.plus(readableDuration21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withPeriodAdded(readablePeriod23, (int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = localDateTime25.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusSeconds(70);
        java.lang.String str29 = localDateTime25.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = localDateTime25.withSecondOfMinute(36000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36000000 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.100" + "'", str29, "1970-01-01T00:00:00.100");
    }

    @Test
    public void test07332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07332");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.yearOfCentury();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(0L, chronology35);
        int int37 = localDateTime36.getWeekyear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withMillisOfSecond(100);
        org.joda.time.Chronology chronology40 = localDateTime36.getChronology();
        java.lang.String str41 = localDateTime36.toString();
        int int42 = localDateTime36.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime36.withCenturyOfEra((int) ' ');
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusYears((int) 'u');
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withMillisOfDay(6);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(0L, chronology50);
        int int52 = localDateTime51.getWeekyear();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withMillisOfSecond(100);
        org.joda.time.Chronology chronology55 = localDateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.yearOfCentury();
        org.joda.time.DurationField durationField57 = chronology55.days();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        long long60 = dateTimeZone58.previousTransition(100L);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withMillisOfSecond((int) (byte) 0);
        int[] intArray66 = chronology55.get((org.joda.time.ReadablePartial) localDateTime62, (long) (-1));
        org.joda.time.DateTimeField dateTimeField67 = chronology55.millisOfDay();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(0L, chronology69);
        int int71 = localDateTime70.getWeekyear();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.withMillisOfSecond(100);
        int[] intArray75 = chronology55.get((org.joda.time.ReadablePartial) localDateTime70, 0L);
        zonedChronology28.validate((org.joda.time.ReadablePartial) localDateTime48, intArray75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime48.minusHours(1200000);
        java.lang.String str79 = localDateTime78.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T00:00:00.000" + "'", str41, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 70 + "'", int42 == 70);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1970 + "'", int71 == 1970);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "3250-02-08T00:00:00.006" + "'", str79, "3250-02-08T00:00:00.006");
    }

    @Test
    public void test07333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07333");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.secondOfDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        int int35 = localDateTime34.getWeekyear();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withYearOfEra(1970);
        org.joda.time.DateTime dateTime38 = localDateTime37.toDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plusHours(170);
        int[] intArray42 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime40, 36060000L);
        // The following exception was thrown during execution in test generation
        try {
            long long48 = zonedChronology28.getDateTimeMillis(0L, 169, (int) (short) 0, 33, 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 169 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 1, 36060000]");
    }

    @Test
    public void test07334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07334");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        int int12 = property7.getMaximumTextLength(locale11);
        org.joda.time.LocalDateTime localDateTime13 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfCentury();
        java.lang.String str15 = property14.getAsShortText();
        org.joda.time.LocalDateTime localDateTime16 = property14.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = property14.withMaximumValue();
        long long19 = property14.remainder();
        java.util.Locale locale22 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale23 = locale22.stripExtensions();
        java.util.Locale locale24 = locale22.stripExtensions();
        int int25 = property14.getMaximumShortTextLength(locale22);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "70" + "'", str15, "70");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertEquals(locale22.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test07335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07335");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withMillisOfDay(100);
        org.joda.time.LocalDateTime.Property property10 = localDateTime2.centuryOfEra();
        int int11 = localDateTime2.getMillisOfDay();
        org.joda.time.DateTime dateTime12 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime2.year();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withMillisOfDay(2000);
        org.joda.time.LocalDateTime.Property property16 = localDateTime2.dayOfWeek();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test07336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07336");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.weekOfWeekyear();
        java.lang.Object obj36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        boolean boolean40 = dateTimeZone38.isLocalDateTimeGap(localDateTime39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(0L, chronology42);
        java.lang.String str45 = localDateTime43.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = localDateTime43.toString(dateTimeFormatter46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime43.monthOfYear();
        org.joda.time.LocalDateTime localDateTime49 = property48.roundCeilingCopy();
        boolean boolean50 = dateTimeZone38.isLocalDateTimeGap(localDateTime49);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone38);
        java.lang.String str52 = dateTimeZone38.getID();
        boolean boolean54 = dateTimeZone38.equals((java.lang.Object) "eng");
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(obj36, dateTimeZone38);
        org.joda.time.Chronology chronology56 = zonedChronology28.withZone(dateTimeZone38);
        org.joda.time.DurationField durationField57 = zonedChronology28.weeks();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u65e5\u672c" + "'", str45, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01T00:00:00.000" + "'", str47, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
    }

    @Test
    public void test07337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07337");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 0);
        boolean boolean34 = dateTimeZone33.isFixed();
        org.joda.time.Chronology chronology35 = zonedChronology28.withZone(dateTimeZone33);
        long long37 = dateTimeZone33.convertUTCToLocal(30472L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 30472L + "'", long37 == 30472L);
    }

    @Test
    public void test07338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07338");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
        java.lang.String str3 = localDateTime1.toString();
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.centuryOfEra();
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.weekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withHourOfDay((int) (short) 0);
        int int13 = localDateTime12.getEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, chronology17);
        java.lang.String str20 = localDateTime18.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = localDateTime18.toString(dateTimeFormatter21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.monthOfYear();
        org.joda.time.Interval interval24 = property23.toInterval();
        org.joda.time.LocalDateTime localDateTime26 = property23.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property23.getFieldType();
        org.joda.time.LocalDateTime.Property property28 = localDateTime15.property(dateTimeFieldType27);
        int int29 = property28.getMinimumValueOverall();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(0L, chronology31);
        int int33 = localDateTime32.getWeekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withYearOfEra(1970);
        org.joda.time.DateTime dateTime36 = localDateTime35.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        long long39 = dateTimeZone37.previousTransition(100L);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(0L, chronology43);
        int int45 = localDateTime44.getWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withYearOfEra(1970);
        org.joda.time.DateTime dateTime48 = localDateTime47.toDateTime();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(0L, chronology50);
        int int52 = localDateTime51.getWeekyear();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withYearOfEra(1970);
        org.joda.time.DateTime dateTime55 = localDateTime54.toDateTime();
        int int56 = dateTime48.compareTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime57 = localDateTime41.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean58 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology59 = dateTime36.getChronology();
        long long60 = property28.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeZone dateTimeZone61 = dateTime36.getZone();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(0L, chronology63);
        java.lang.String str66 = localDateTime64.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = null;
        java.lang.String str68 = localDateTime64.toString(dateTimeFormatter67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime64.monthOfYear();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime64.withMillisOfDay(100);
        org.joda.time.LocalDateTime.Property property72 = localDateTime64.centuryOfEra();
        int int73 = localDateTime64.getMillisOfDay();
        org.joda.time.DateTime dateTime74 = localDateTime64.toDateTime();
        boolean boolean75 = dateTime36.isAfter((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTimeZone dateTimeZone76 = dateTime74.getZone();
        java.lang.String str77 = dateTime74.toString();
        int int78 = property5.compareTo((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DurationField durationField79 = property5.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime80 = property5.withMinimumValue();
        int int81 = localDateTime80.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11T09:49:26.997" + "'", str3, "2022-02-11T09:49:26.997");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u65e5\u672c" + "'", str20, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.000" + "'", str22, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u65e5\u672c" + "'", str66, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1970-01-01T00:00:00.000" + "'", str68, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str77, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 292275055 + "'", int81 == 292275055);
    }

    @Test
    public void test07339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07339");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.minuteOfHour();
        boolean boolean5 = property4.isLeap();
        int int6 = property4.get();
        java.lang.String str7 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime8 = property4.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = property4.getLocalDateTime();
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 49 + "'", int6 == 49);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "49" + "'", str7, "49");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test07340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07340");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfEra(1970);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        int int19 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.plus(readableDuration21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withPeriodAdded(readablePeriod23, (int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = localDateTime25.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusSeconds(70);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = localDateTime28.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withSecondOfMinute(20);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.yearOfCentury();
        int int33 = localDateTime31.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 58 + "'", int33 == 58);
    }

    @Test
    public void test07341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07341");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(0L, chronology2);
        int int4 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYearOfEra(1970);
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYearOfEra(1970);
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        int int15 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime14);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean18 = dateTime14.equals((java.lang.Object) timeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime14.getZone();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(419L, dateTimeZone19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
    }

    @Test
    public void test07342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07342");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.minuteOfDay();
        java.lang.Object obj35 = null;
        boolean boolean36 = zonedChronology28.equals(obj35);
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.weekyear();
        org.joda.time.DurationField durationField38 = zonedChronology28.weekyears();
        java.lang.String str39 = zonedChronology28.toString();
        org.joda.time.Chronology chronology40 = zonedChronology28.withUTC();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str39, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(chronology40);
    }

    @Test
    public void test07343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07343");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.lang.String str11 = locale9.getDisplayCountry(locale10);
        java.lang.String str12 = locale9.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.lang.String str15 = locale13.getDisplayCountry(locale14);
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str17 = locale14.getDisplayName(locale16);
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        java.lang.String str21 = locale18.getDisplayName();
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.lang.String str24 = locale22.getDisplayCountry(locale23);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.lang.String str29 = locale27.getDisplayCountry(locale28);
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.util.Locale locale32 = java.util.Locale.JAPAN;
        java.lang.String str33 = locale31.getDisplayCountry(locale32);
        java.util.Locale[] localeArray34 = new java.util.Locale[] { locale9, locale14, locale18, locale22, locale25, locale26, locale27, locale30, locale31 };
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList35);
        java.lang.String[] strArray39 = new java.lang.String[] { "1970-01-01T00:00:00.000" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.util.Locale.FilteringMode filteringMode42 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strList40, filteringMode42);
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.util.Locale locale45 = java.util.Locale.CHINA;
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        java.util.Locale locale50 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale51 = locale50.stripExtensions();
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.util.Locale locale55 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale56 = locale55.stripExtensions();
        java.util.Locale locale59 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        java.lang.String str61 = locale59.getDisplayLanguage(locale60);
        java.util.Locale locale62 = java.util.Locale.JAPAN;
        java.util.Locale locale63 = java.util.Locale.JAPAN;
        java.lang.String str64 = locale62.getDisplayCountry(locale63);
        java.util.Locale locale67 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale68 = locale67.stripExtensions();
        java.util.Locale locale69 = java.util.Locale.getDefault();
        java.util.Locale locale71 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Locale locale72 = java.util.Locale.US;
        java.util.Locale locale73 = java.util.Locale.getDefault();
        java.util.Locale locale74 = java.util.Locale.CHINA;
        java.lang.String str75 = locale74.getCountry();
        java.util.Locale[] localeArray76 = new java.util.Locale[] { locale44, locale45, locale46, locale47, locale50, locale52, locale55, locale59, locale63, locale68, locale69, locale71, locale72, locale73, locale74 };
        java.util.ArrayList<java.util.Locale> localeList77 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList77, localeArray76);
        java.util.List<java.util.Locale> localeList79 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList77);
        java.util.stream.Stream<java.util.Locale> localeStream80 = localeList79.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream81 = localeList79.stream();
        java.util.stream.Stream<java.util.Locale> localeStream82 = localeList79.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream83 = localeList79.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream84 = localeList79.parallelStream();
        boolean boolean85 = strSet5.containsAll((java.util.Collection<java.util.Locale>) localeList79);
        java.util.stream.Stream<java.util.Locale> localeStream86 = localeList79.stream();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c" + "'", str11, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str12, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u672c" + "'", str15, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str17, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u65e5\u672c" + "'", str20, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str21, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u65e5\u672c" + "'", str24, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u65e5\u672c" + "'", str29, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u65e5\u672c" + "'", str33, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localeList37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + filteringMode42 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode42.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale50.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it");
        org.junit.Assert.assertEquals(locale55.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals(locale59.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u65e5\u672c" + "'", str61, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u65e5\u672c" + "'", str64, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale67.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale69);
// flaky:         org.junit.Assert.assertEquals(locale69.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale73);
// flaky:         org.junit.Assert.assertEquals(locale73.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "CN" + "'", str75, "CN");
        org.junit.Assert.assertNotNull(localeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(localeList79);
        org.junit.Assert.assertNotNull(localeStream80);
        org.junit.Assert.assertNotNull(localeStream81);
        org.junit.Assert.assertNotNull(localeStream82);
        org.junit.Assert.assertNotNull(localeStream83);
        org.junit.Assert.assertNotNull(localeStream84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(localeStream86);
    }

    @Test
    public void test07344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07344");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder5 = builder0.setLanguage("CN");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder0.setScript("\u671d\u9c9c\u6587\u97e9\u56fd)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ??? (??) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test07345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07345");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone32 = zonedChronology28.getZone();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, chronology34);
        java.util.Locale locale36 = java.util.Locale.US;
        boolean boolean37 = localDateTime35.equals((java.lang.Object) locale36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.minus(readableDuration39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.minus(readableDuration41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(0L, chronology44);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withDayOfMonth(10);
        int int53 = localDateTime50.getEra();
        int[] intArray54 = localDateTime50.getValues();
        zonedChronology28.validate((org.joda.time.ReadablePartial) localDateTime42, intArray54);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        long long58 = dateTimeZone56.previousTransition(100L);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withHourOfDay((int) (short) 0);
        java.util.Date date63 = localDateTime62.toDate();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.minusWeeks(7);
        long long67 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime62, (long) (byte) 0);
        org.joda.time.DateTimeField dateTimeField68 = zonedChronology28.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField69 = zonedChronology28.era();
        java.lang.String str70 = zonedChronology28.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1970, 1, 2, 28800000]");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 100L + "'", long58 == 100L);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 100L + "'", long67 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str70, "ZonedChronology[ISOChronology[UTC], UTC]");
    }

    @Test
    public void test07346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07346");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("+00:00:00.070");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(0L, chronology5);
        java.lang.String str8 = localDateTime6.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = localDateTime6.toString(dateTimeFormatter9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime6.monthOfYear();
        org.joda.time.Interval interval12 = property11.toInterval();
        long long13 = property11.remainder();
        org.joda.time.LocalDateTime localDateTime14 = property11.roundHalfFloorCopy();
        boolean boolean15 = property11.isLeap();
        org.joda.time.ReadableInstant readableInstant16 = null;
        long long17 = property11.getDifferenceAsLong(readableInstant16);
        org.joda.time.DurationField durationField18 = property11.getDurationField();
        org.joda.time.DurationField durationField19 = property11.getLeapDurationField();
        long long20 = property11.remainder();
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.lang.String str22 = locale21.getCountry();
        java.lang.String str23 = locale21.getDisplayLanguage();
        java.lang.String str24 = locale21.getDisplayCountry();
        java.lang.String str25 = property11.getAsText(locale21);
        java.lang.String str26 = locale21.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = timeZone1.getDisplayName(false, 91, locale21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 91");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c" + "'", str8, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.000" + "'", str10, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-625L) + "'", long17 == (-625L));
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "CN" + "'", str22, "CN");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str23, "\u4e2d\u56fd\u8a9e");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str24, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u4e00\u6708" + "'", str25, "\u4e00\u6708");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CN" + "'", str26, "CN");
    }

    @Test
    public void test07347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07347");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, chronology11);
        java.lang.String str14 = localDateTime12.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime12.toString(dateTimeFormatter15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.monthOfYear();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.LocalDateTime localDateTime20 = property17.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property17.getFieldType();
        org.joda.time.LocalDateTime.Property property22 = localDateTime9.property(dateTimeFieldType21);
        int int23 = localDateTime9.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime9.plusDays((int) '#');
        int int26 = localDateTime25.getWeekyear();
        int int27 = localDateTime25.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.000" + "'", str16, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
    }

    @Test
    public void test07348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07348");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(53, 3, (-292275054), 91, 44, 2);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 91 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07349");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DurationField durationField32 = zonedChronology28.minutes();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, chronology34);
        java.util.Locale locale36 = java.util.Locale.US;
        boolean boolean37 = localDateTime35.equals((java.lang.Object) locale36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(0L, chronology41);
        int int43 = localDateTime42.getWeekyear();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusMinutes(100);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(0L, chronology52);
        int int54 = localDateTime53.getWeekyear();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withMillisOfSecond(100);
        org.joda.time.Chronology chronology57 = localDateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfCentury();
        org.joda.time.DurationField durationField59 = chronology57.days();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        long long62 = dateTimeZone60.previousTransition(100L);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withMillisOfSecond((int) (byte) 0);
        int[] intArray68 = chronology57.get((org.joda.time.ReadablePartial) localDateTime64, (long) (-1));
        org.joda.time.DateTimeField dateTimeField69 = chronology57.millisOfDay();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(0L, chronology71);
        int int73 = localDateTime72.getWeekyear();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withMillisOfSecond(100);
        int[] intArray77 = chronology57.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        zonedChronology28.validate((org.joda.time.ReadablePartial) localDateTime49, intArray77);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.UTC;
        long long81 = dateTimeZone79.previousTransition(100L);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology82);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.withHourOfDay((int) (short) 0);
        int int86 = localDateTime85.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime85.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime88.plusYears(0);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime90.minusHours((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property93 = localDateTime92.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime95 = localDateTime92.minusMonths((int) '#');
        org.joda.time.ReadablePeriod readablePeriod96 = null;
        org.joda.time.LocalDateTime localDateTime97 = localDateTime92.plus(readablePeriod96);
        long long99 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime92, 3624815L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 100L + "'", long62 == 100L);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1970 + "'", int73 == 1970);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 100L + "'", long81 == 100L);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 100 + "'", int86 == 100);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertNotNull(localDateTime97);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + (-59958147599900L) + "'", long99 == (-59958147599900L));
    }

    @Test
    public void test07350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07350");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("monthOfYear");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeZone5);
    }

    @Test
    public void test07351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07351");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long35 = zonedChronology28.getDateTimeMillis((int) ' ', 45, (-456825), 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 45 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test07352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07352");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = zonedChronology28.getZone();
        long long39 = dateTimeZone35.convertLocalToUTC((long) 9, true, (long) 6);
        int int41 = dateTimeZone35.getOffsetFromLocal(0L);
        long long43 = dateTimeZone35.previousTransition(90000000L);
        int int45 = dateTimeZone35.getOffsetFromLocal(23L);
        long long48 = dateTimeZone35.convertLocalToUTC((long) (short) 100, false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 9L + "'", long39 == 9L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 90000000L + "'", long43 == 90000000L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 100L + "'", long48 == 100L);
    }

    @Test
    public void test07353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07353");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(63780169528595L);
    }

    @Test
    public void test07354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07354");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(14, 53, 3570, 3570, 30, 6, 3387);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3570 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07355");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours((int) ' ');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withDayOfMonth(10);
        int int18 = localDateTime15.getEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.dayOfWeek();
        boolean boolean20 = localDateTime5.isEqual((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.minusMinutes(0);
        org.joda.time.DurationFieldType durationFieldType23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withFieldAdded(durationFieldType23, 35162287);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test07356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07356");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis((int) (short) 1);
        int int10 = localDateTime9.getYearOfEra();
        int int11 = localDateTime9.getDayOfYear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.weekyear();
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = localDateTime9.getFields();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
    }

    @Test
    public void test07357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07357");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("CN", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.lang.String str8 = locale6.getDisplayCountry(locale7);
        java.lang.String str9 = locale6.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.util.Locale locale11 = java.util.Locale.JAPAN;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str14 = locale11.getDisplayName(locale13);
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.lang.String str17 = locale15.getDisplayCountry(locale16);
        java.lang.String str18 = locale15.getDisplayName();
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        java.lang.String str21 = locale19.getDisplayCountry(locale20);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.lang.String str26 = locale24.getDisplayCountry(locale25);
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.lang.String str30 = locale28.getDisplayCountry(locale29);
        java.util.Locale[] localeArray31 = new java.util.Locale[] { locale6, locale11, locale15, locale19, locale22, locale23, locale24, locale27, locale28 };
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList32);
        java.lang.String[] strArray36 = new java.lang.String[] { "1970-01-01T00:00:00.000" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.util.Locale.FilteringMode filteringMode39 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList37, filteringMode39);
        java.util.Locale locale41 = java.util.Locale.CHINA;
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.util.Locale locale47 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale48 = locale47.stripExtensions();
        java.util.Locale locale49 = java.util.Locale.ITALIAN;
        java.util.Locale locale52 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale53 = locale52.stripExtensions();
        java.util.Locale locale56 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.lang.String str58 = locale56.getDisplayLanguage(locale57);
        java.util.Locale locale59 = java.util.Locale.JAPAN;
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.lang.String str61 = locale59.getDisplayCountry(locale60);
        java.util.Locale locale64 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale65 = locale64.stripExtensions();
        java.util.Locale locale66 = java.util.Locale.getDefault();
        java.util.Locale locale68 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Locale locale69 = java.util.Locale.US;
        java.util.Locale locale70 = java.util.Locale.getDefault();
        java.util.Locale locale71 = java.util.Locale.CHINA;
        java.lang.String str72 = locale71.getCountry();
        java.util.Locale[] localeArray73 = new java.util.Locale[] { locale41, locale42, locale43, locale44, locale47, locale49, locale52, locale56, locale60, locale65, locale66, locale68, locale69, locale70, locale71 };
        java.util.ArrayList<java.util.Locale> localeList74 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList74, localeArray73);
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList74);
        java.util.stream.Stream<java.util.Locale> localeStream77 = localeList76.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream78 = localeList76.stream();
        java.util.stream.Stream<java.util.Locale> localeStream79 = localeList76.parallelStream();
        java.util.Locale.FilteringMode filteringMode80 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList76, filteringMode80);
        java.util.stream.Stream<java.util.Locale> localeStream82 = localeList81.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream83 = localeList81.parallelStream();
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c" + "'", str8, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str9, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u672c" + "'", str12, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str14, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u672c" + "'", str17, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str18, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u65e5\u672c" + "'", str21, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u65e5\u672c" + "'", str26, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u65e5\u672c" + "'", str30, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + filteringMode39 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode39.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale47.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it");
        org.junit.Assert.assertEquals(locale52.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals(locale56.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u65e5\u672c" + "'", str58, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u65e5\u672c" + "'", str61, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale64.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale66);
// flaky:         org.junit.Assert.assertEquals(locale66.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale70);
// flaky:         org.junit.Assert.assertEquals(locale70.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "CN" + "'", str72, "CN");
        org.junit.Assert.assertNotNull(localeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(localeList76);
        org.junit.Assert.assertNotNull(localeStream77);
        org.junit.Assert.assertNotNull(localeStream78);
        org.junit.Assert.assertNotNull(localeStream79);
        org.junit.Assert.assertTrue("'" + filteringMode80 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode80.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList81);
        org.junit.Assert.assertNotNull(localeStream82);
        org.junit.Assert.assertNotNull(localeStream83);
    }

    @Test
    public void test07358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07358");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        long long9 = dateTimeZone7.previousTransition(100L);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(0L, chronology20);
        int int22 = localDateTime21.getWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYearOfEra(1970);
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        int int26 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime11.plus(readableDuration28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(0L, chronology31);
        java.util.Locale locale33 = java.util.Locale.US;
        boolean boolean34 = localDateTime32.equals((java.lang.Object) locale33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.dayOfWeek();
        int int36 = localDateTime32.getDayOfWeek();
        int int37 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime11.plusSeconds(43);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 2022);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(0L, chronology43);
        java.lang.String str46 = localDateTime44.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = localDateTime44.toString(dateTimeFormatter47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(0L, chronology50);
        java.lang.String str53 = localDateTime51.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = localDateTime51.toString(dateTimeFormatter54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime51.monthOfYear();
        org.joda.time.Interval interval57 = property56.toInterval();
        long long58 = property56.remainder();
        org.joda.time.LocalDateTime localDateTime59 = property56.roundHalfFloorCopy();
        java.lang.String str60 = property56.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property56.getFieldType();
        int int62 = localDateTime44.get(dateTimeFieldType61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime41.property(dateTimeFieldType61);
        org.joda.time.LocalDateTime.Property property64 = localDateTime39.property(dateTimeFieldType61);
        int int65 = dateTime6.get(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u65e5\u672c" + "'", str46, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T00:00:00.000" + "'", str48, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u65e5\u672c" + "'", str53, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01T00:00:00.000" + "'", str55, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(localDateTime59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1" + "'", str60, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
    }

    @Test
    public void test07359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07359");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setLanguageTag("2022-02-11T09:46:05.988");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test07360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07360");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, chronology11);
        java.lang.String str14 = localDateTime12.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime12.toString(dateTimeFormatter15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.monthOfYear();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.LocalDateTime localDateTime20 = property17.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property17.getFieldType();
        org.joda.time.LocalDateTime.Property property22 = localDateTime9.property(dateTimeFieldType21);
        int int23 = localDateTime9.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime9.plusDays((int) '#');
        int int26 = localDateTime9.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime9.withMillisOfDay((int) (short) 10);
        int int29 = localDateTime9.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.000" + "'", str16, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test07361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07361");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.weekOfWeekyear();
        org.joda.time.Chronology chronology36 = zonedChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.hourOfDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(0L, chronology40);
        java.util.Locale locale42 = java.util.Locale.US;
        boolean boolean43 = localDateTime41.equals((java.lang.Object) locale42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(9, (int) '4');
        org.joda.time.DateTime dateTime48 = localDateTime41.toDateTime(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime48.getZone();
        java.lang.String str51 = dateTimeZone49.getShortName(9L);
        org.joda.time.Chronology chronology52 = zonedChronology28.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField53 = chronology52.secondOfMinute();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+09:52" + "'", str51, "+09:52");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test07362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07362");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.lang.String str2 = timeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = timeZone1.getOffset(1899, (int) (short) 0, (-1), (int) (short) 0, 31, 24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone3);
    }

    @Test
    public void test07363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07363");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMillisOfSecond(100);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DurationField durationField43 = chronology41.millis();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '#', chronology41);
        int[] intArray47 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime45, (long) 1);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology28.era();
        org.joda.time.DurationField durationField50 = zonedChronology28.minutes();
        org.joda.time.Chronology chronology51 = zonedChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology28.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long60 = zonedChronology28.getDateTimeMillis(0, 35286275, 35080732, (-1970), 27236744, (-1970), (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1970 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1970, 1, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test07364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07364");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long41 = zonedChronology28.getDateTimeMillis((int) (short) -1, 0, 0, 201);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test07365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07365");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone8.previousTransition(0L);
        long long12 = dateTimeZone8.nextTransition((long) (-1));
        org.joda.time.Chronology chronology13 = chronology6.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField14 = chronology6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DurationField durationField16 = chronology6.minutes();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = chronology6.add(readablePeriod17, 1039L, (int) (short) 1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(0L, chronology22);
        java.lang.String str25 = localDateTime23.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = localDateTime23.toString(dateTimeFormatter26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime23.monthOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(0L, chronology30);
        java.lang.String str33 = localDateTime31.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = localDateTime31.toString(dateTimeFormatter34);
        boolean boolean36 = localDateTime23.isAfter((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.plusYears((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        long long42 = dateTimeZone40.previousTransition(0L);
        long long44 = dateTimeZone40.convertUTCToLocal(1L);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        long long49 = dateTimeZone40.getMillisKeepLocal(dateTimeZone47, (long) (-1));
        java.lang.String str51 = dateTimeZone47.getName((long) 70);
        java.util.Locale locale53 = java.util.Locale.JAPAN;
        java.util.Locale locale54 = java.util.Locale.JAPAN;
        java.lang.String str55 = locale53.getDisplayCountry(locale54);
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str57 = locale54.getDisplayName(locale56);
        java.lang.String str58 = dateTimeZone47.getShortName((long) 4, locale54);
        java.lang.String str59 = localDateTime31.toString("\u4e2d\u56fd\u8a9e", locale54);
        long long61 = chronology6.set((org.joda.time.ReadablePartial) localDateTime31, (long) 53);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime31.minusWeeks(51);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime31.plus(readablePeriod64);
        java.lang.String str66 = localDateTime31.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1039L + "'", long20 == 1039L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u65e5\u672c" + "'", str25, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T00:00:00.000" + "'", str27, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u65e5\u672c" + "'", str33, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T00:00:00.000" + "'", str35, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u65e5\u672c" + "'", str55, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str57, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str59, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01T00:00:00.000" + "'", str66, "1970-01-01T00:00:00.000");
    }

    @Test
    public void test07366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07366");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        int int14 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime13);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean17 = dateTime13.equals((java.lang.Object) timeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime13.getZone();
        int int20 = dateTimeZone18.getStandardOffset(1644572791776L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(0L, chronology22);
        java.lang.String str25 = localDateTime23.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = localDateTime23.toString(dateTimeFormatter26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime23.monthOfYear();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundCeilingCopy();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minus(readableDuration30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.plusSeconds(2022);
        org.joda.time.LocalDateTime.Property property34 = localDateTime29.weekOfWeekyear();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMillisOfSecond(100);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DurationField durationField43 = chronology41.eras();
        org.joda.time.Chronology chronology44 = chronology41.withUTC();
        java.lang.String str45 = chronology44.toString();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(chronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withSecondOfMinute(4);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        boolean boolean51 = dateTimeZone50.isFixed();
        long long54 = dateTimeZone50.adjustOffset((long) 'x', true);
        org.joda.time.DateTime dateTime55 = localDateTime46.toDateTime(dateTimeZone50);
        int int56 = property34.getDifference((org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime55);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u65e5\u672c" + "'", str25, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T00:00:00.000" + "'", str27, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[UTC]" + "'", str45, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 120L + "'", long54 == 120L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-2719) + "'", int56 == (-2719));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test07367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07367");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.yearOfCentury();
        org.joda.time.DurationField durationField33 = zonedChronology28.seconds();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(0L, chronology35);
        int int37 = localDateTime36.getWeekyear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withDayOfMonth(10);
        int int44 = localDateTime41.getEra();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        boolean boolean48 = dateTimeZone46.isLocalDateTimeGap(localDateTime47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(0L, chronology50);
        java.lang.String str53 = localDateTime51.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = localDateTime51.toString(dateTimeFormatter54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime51.monthOfYear();
        org.joda.time.LocalDateTime localDateTime57 = property56.roundCeilingCopy();
        boolean boolean58 = dateTimeZone46.isLocalDateTimeGap(localDateTime57);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone46);
        boolean boolean60 = dateTimeZone46.isFixed();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime41, dateTimeZone46);
        org.joda.time.Chronology chronology62 = zonedChronology28.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField63 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField64 = zonedChronology28.dayOfWeek();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u65e5\u672c" + "'", str53, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01T00:00:00.000" + "'", str55, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
    }

    @Test
    public void test07368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07368");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.hourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology28.years();
        org.joda.time.DurationField durationField35 = zonedChronology28.millis();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test07369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07369");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property7.getFieldType();
        long long12 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime13 = property7.roundHalfEvenCopy();
        java.util.Locale locale14 = java.util.Locale.ITALY;
        boolean boolean15 = locale14.hasExtensions();
        java.lang.String str16 = locale14.toLanguageTag();
        java.lang.String str17 = locale14.getDisplayScript();
        java.lang.String str18 = property7.getAsText(locale14);
        boolean boolean19 = locale14.hasExtensions();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(0L, chronology21);
        java.lang.String str24 = localDateTime22.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = localDateTime22.toString(dateTimeFormatter25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime22.monthOfYear();
        org.joda.time.Interval interval28 = property27.toInterval();
        long long29 = property27.remainder();
        org.joda.time.LocalDateTime localDateTime30 = property27.roundHalfFloorCopy();
        java.lang.String str31 = property27.getAsShortText();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        int int33 = property27.getMaximumTextLength(locale32);
        org.joda.time.LocalDateTime localDateTime35 = property27.addWrapFieldToCopy(100);
        org.joda.time.DurationField durationField36 = property27.getRangeDurationField();
        int int37 = property27.getMaximumValue();
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.lang.String str39 = property27.getAsText(locale38);
        java.lang.String str40 = locale38.getDisplayLanguage();
        java.lang.String str41 = locale14.getDisplayLanguage(locale38);
        java.lang.String str42 = locale38.getLanguage();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it-IT" + "'", str16, "it-IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "gennaio" + "'", str18, "gennaio");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u65e5\u672c" + "'", str24, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.000" + "'", str26, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 12 + "'", int37 == 12);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\uc6d4" + "'", str39, "\uc6d4");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u97d3\u56fd\u8a9e" + "'", str40, "\u97d3\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str41, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ko" + "'", str42, "ko");
    }

    @Test
    public void test07370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07370");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        boolean boolean10 = dateTimeZone9.isFixed();
        org.joda.time.Chronology chronology11 = chronology6.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField12 = chronology11.months();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.weekyearOfCentury();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test07371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07371");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = zonedChronology28.getZone();
        org.joda.time.DurationField durationField36 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField39 = zonedChronology28.centuries();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.minuteOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test07372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07372");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours((int) ' ');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withMillisOfSecond(100);
        org.joda.time.Chronology chronology14 = localDateTime10.getChronology();
        java.lang.String str15 = localDateTime10.toString();
        int int16 = localDateTime10.getYearOfCentury();
        int int17 = localDateTime10.getCenturyOfEra();
        boolean boolean18 = localDateTime7.isEqual((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        boolean boolean21 = dateTimeZone19.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(0L, chronology23);
        java.lang.String str26 = localDateTime24.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = localDateTime24.toString(dateTimeFormatter27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime24.monthOfYear();
        org.joda.time.LocalDateTime localDateTime30 = property29.roundCeilingCopy();
        boolean boolean31 = dateTimeZone19.isLocalDateTimeGap(localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusMillis((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        long long36 = dateTimeZone34.previousTransition(100L);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withHourOfDay((int) (short) 0);
        int int41 = localDateTime40.getEra();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(0L, chronology45);
        java.lang.String str48 = localDateTime46.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = localDateTime46.toString(dateTimeFormatter49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime46.monthOfYear();
        org.joda.time.Interval interval52 = property51.toInterval();
        org.joda.time.LocalDateTime localDateTime54 = property51.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property51.getFieldType();
        org.joda.time.LocalDateTime.Property property56 = localDateTime43.property(dateTimeFieldType55);
        boolean boolean57 = localDateTime33.isSupported(dateTimeFieldType55);
        int int58 = localDateTime7.get(dateTimeFieldType55);
        org.joda.time.LocalDateTime.Property property59 = localDateTime7.millisOfSecond();
        int int60 = localDateTime7.size();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01T00:00:00.000" + "'", str15, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 70 + "'", int16 == 70);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 19 + "'", int17 == 19);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u65e5\u672c" + "'", str26, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01T00:00:00.000" + "'", str28, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L + "'", long36 == 100L);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u65e5\u672c" + "'", str48, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01T00:00:00.000" + "'", str50, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
    }

    @Test
    public void test07373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07373");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.convertLocalToUTC(100L, true);
        long long6 = dateTimeZone0.convertLocalToUTC((long) 1970, false);
        java.lang.String str8 = dateTimeZone0.getName((-2208873600000L));
        java.util.Locale locale10 = java.util.Locale.CHINA;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.util.Set<java.lang.String> strSet13 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str14 = dateTimeZone0.getName(1644572694666L, locale10);
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.lang.String str17 = locale10.getDisplayCountry(locale16);
        java.util.Locale locale18 = locale10.stripExtensions();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1970L + "'", long6 == 1970L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str12, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str17, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
    }

    @Test
    public void test07374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07374");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusDays(4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plus(readableDuration10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readableDuration12);
        int int14 = localDateTime11.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withDayOfYear(45);
        int int19 = localDateTime18.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 70 + "'", int19 == 70);
    }

    @Test
    public void test07375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07375");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withMillisOfSecond(100);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.Chronology chronology18 = chronology13.withZone(dateTimeZone16);
        org.joda.time.DurationField durationField19 = chronology13.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(30, 263, 30, (-8096924), (int) (short) 1, 35080732, 4044, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -8096924 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test07376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07376");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra((int) (byte) 1);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusSeconds((int) '4');
        int int10 = localDateTime6.getDayOfMonth();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test07377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07377");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minus(readableDuration6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusHours((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusMillis((int) '#');
        org.joda.time.LocalDateTime.Property property13 = localDateTime7.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.plus(readablePeriod14);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test07378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07378");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField33 = zonedChronology28.halfdays();
        org.joda.time.DurationField durationField34 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.minuteOfHour();
        org.joda.time.Chronology chronology37 = zonedChronology28.withUTC();
        org.joda.time.DurationField durationField38 = zonedChronology28.weeks();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test07379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07379");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("UTC");
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale9);
        java.util.Locale.Builder builder11 = null; // flaky: builder8.setLocale(locale9);
        java.util.Locale.Builder builder12 = null; // flaky: builder11.clear();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.lang.String str14 = locale13.getDisplayCountry();
        java.lang.String str15 = locale13.getDisplayName();
        java.util.Locale.Builder builder16 = null; // flaky: builder11.setLocale(locale13);
        java.util.Locale.Builder builder19 = null; // flaky: builder11.setExtension('u', "year");
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        boolean boolean23 = dateTimeZone21.isLocalDateTimeGap(localDateTime22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(0L, chronology25);
        java.lang.String str28 = localDateTime26.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = localDateTime26.toString(dateTimeFormatter29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime26.monthOfYear();
        org.joda.time.LocalDateTime localDateTime32 = property31.roundCeilingCopy();
        boolean boolean33 = dateTimeZone21.isLocalDateTimeGap(localDateTime32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone21);
        java.lang.String str35 = dateTimeZone21.getID();
        long long37 = dateTimeZone21.nextTransition((long) 999);
        java.lang.String str39 = dateTimeZone21.getShortName(19L);
        java.lang.String str40 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(0L, chronology43);
        int int45 = localDateTime44.getWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withMillisOfSecond(100);
        org.joda.time.Chronology chronology48 = localDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfCentury();
        org.joda.time.DurationField durationField50 = chronology48.millis();
        org.joda.time.DurationField durationField51 = chronology48.months();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(chronology48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = localDateTime52.getFieldTypes();
        org.joda.time.LocalDateTime.Property property54 = localDateTime52.era();
        java.util.Locale locale55 = java.util.Locale.US;
        java.lang.String str56 = locale55.getLanguage();
        int int57 = property54.getMaximumShortTextLength(locale55);
        java.lang.String str58 = dateTimeZone21.getName(1900L, locale55);
        java.lang.String str59 = locale55.getScript();
        java.lang.String str60 = locale55.getVariant();
        java.util.Locale.Builder builder61 = null; // flaky: builder19.setLocale(locale55);
        java.util.Locale.Builder builder62 = null; // flaky: builder61.clearExtensions();
        java.util.Locale.Builder builder63 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder64 = builder63.clearExtensions();
        java.util.Locale locale65 = java.util.Locale.ENGLISH;
        java.util.Locale locale66 = java.util.Locale.ITALY;
        java.lang.String str67 = locale65.getDisplayCountry(locale66);
        java.util.Locale.Builder builder68 = builder64.setLocale(locale66);
        java.util.Locale locale69 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet70 = locale69.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder71 = builder68.setLocale(locale69);
        java.util.Locale.Builder builder73 = builder71.setLanguage("January");
        java.util.Locale locale74 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder75 = builder71.setLocale(locale74);
        java.util.Locale.setDefault(locale74);
        java.util.Locale.Builder builder77 = null; // flaky: builder61.setLocale(locale74);
        java.util.Locale.Builder builder79 = null; // flaky: builder77.setLanguage("und");
        java.util.Locale.Builder builder80 = null; // flaky: builder77.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertNotNull(builder11);
// flaky:         org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u5927\u97d3\u6c11\u56fd" + "'", str14, "\u5927\u97d3\u6c11\u56fd");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u97d3\u56fd\u8a9e\u5927\u97d3\u6c11\u56fd)" + "'", str15, "\u97d3\u56fd\u8a9e\u5927\u97d3\u6c11\u56fd)");
// flaky:         org.junit.Assert.assertNotNull(builder16);
// flaky:         org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u65e5\u672c" + "'", str28, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T00:00:00.000" + "'", str30, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 999L + "'", long37 == 999L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "en" + "'", str56, "en");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
// flaky:         org.junit.Assert.assertNotNull(builder61);
// flaky:         org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr");
        org.junit.Assert.assertNotNull(builder75);
// flaky:         org.junit.Assert.assertNotNull(builder77);
// flaky:         org.junit.Assert.assertNotNull(builder79);
// flaky:         org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test07380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07380");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfDay();
        long long39 = zonedChronology28.getDateTimeMillis(0, 1, (int) (byte) 1, 20);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology28.clockhourOfHalfday();
        org.joda.time.DurationField durationField43 = zonedChronology28.minutes();
        // The following exception was thrown during execution in test generation
        try {
            long long48 = zonedChronology28.getDateTimeMillis((int) '4', 35350951, 27236745, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35350951 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-62167219199980L) + "'", long39 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test07381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07381");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.era();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.dayOfYear();
        org.joda.time.DurationField durationField34 = zonedChronology28.minutes();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField36 = zonedChronology28.days();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test07382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07382");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.lang.String str11 = property7.getAsShortText();
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        int int13 = property7.getMaximumTextLength(locale12);
        org.joda.time.LocalDateTime localDateTime15 = property7.addWrapFieldToCopy(100);
        org.joda.time.DurationField durationField16 = property7.getRangeDurationField();
        int int17 = property7.getMaximumValue();
        long long18 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime20 = property7.addWrapFieldToCopy((int) 'u');
        java.lang.String str21 = property7.getAsText();
        java.lang.String str22 = property7.getAsText();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(0L, chronology24);
        java.lang.String str27 = localDateTime25.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = localDateTime25.toString(dateTimeFormatter28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime25.monthOfYear();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.plus(readableDuration31);
        org.joda.time.DateTime dateTime33 = localDateTime32.toDateTime();
        long long34 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime33);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "janv." + "'", str11, "janv.");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "janvier" + "'", str21, "janvier");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "janvier" + "'", str22, "janvier");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u672c" + "'", str27, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000" + "'", str29, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test07383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07383");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        long long15 = dateTimeZone13.previousTransition(100L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfSecond((int) (byte) 0);
        int int20 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long24 = dateTimeZone21.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime26 = localDateTime9.toDateTime(dateTimeZone21);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone28.previousTransition(0L);
        long long32 = dateTimeZone28.convertUTCToLocal(1L);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        long long37 = dateTimeZone28.getMillisKeepLocal(dateTimeZone35, (long) (-1));
        boolean boolean38 = dateTimeZone28.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology39 = org.joda.time.chrono.ZonedChronology.getInstance(chronology27, dateTimeZone28);
        org.joda.time.DurationField durationField40 = zonedChronology39.halfdays();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology39);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology39);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology39);
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology39.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(45, (-292275054), 6, 0, 49, 27236147, 27236744, (org.joda.time.Chronology) zonedChronology39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27236147 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(zonedChronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test07384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07384");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.era();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test07385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07385");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(0L, chronology2);
        int int4 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMillisOfSecond(100);
        org.joda.time.Chronology chronology7 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.eras();
        org.joda.time.Chronology chronology10 = chronology7.withUTC();
        java.lang.String str11 = chronology10.toString();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.weekyearOfCentury();
        org.joda.time.Chronology chronology13 = chronology10.withUTC();
        java.lang.String str14 = chronology10.toString();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.yearOfEra();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(1985817577056L, chronology10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays(44);
        int int19 = localDateTime16.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
    }

    @Test
    public void test07386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07386");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("UTC");
        boolean boolean2 = timeZone1.observesDaylightTime();
        boolean boolean3 = timeZone1.observesDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test07387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07387");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("UTC");
        java.util.Locale.Builder builder9 = builder6.clear();
        java.util.Locale.Builder builder11 = builder6.setLanguage("US");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        java.util.Locale locale15 = java.util.Locale.US;
        boolean boolean16 = localDateTime14.equals((java.lang.Object) locale15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plus(readablePeriod17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime14.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(0L, chronology21);
        int int23 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withMillisOfSecond(100);
        org.joda.time.Chronology chronology26 = localDateTime22.getChronology();
        int int27 = property19.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        boolean boolean28 = property19.isLeap();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(0L, chronology30);
        java.lang.String str33 = localDateTime31.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = localDateTime31.toString(dateTimeFormatter34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime31.monthOfYear();
        org.joda.time.Interval interval37 = property36.toInterval();
        long long38 = property36.remainder();
        org.joda.time.LocalDateTime localDateTime39 = property36.roundHalfFloorCopy();
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        int int41 = property36.getMaximumTextLength(locale40);
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.lang.String str43 = locale42.getCountry();
        int int44 = property36.getMaximumTextLength(locale42);
        java.lang.String str45 = property19.getAsText(locale42);
        java.lang.String str46 = locale42.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet47 = locale42.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder48 = builder6.setLocale(locale42);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder50 = builder48.addUnicodeLocaleAttribute("Property[hourOfDay]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Property[hourOfDay] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u65e5\u672c" + "'", str33, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T00:00:00.000" + "'", str35, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "CN" + "'", str43, "CN");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "chinois" + "'", str46, "chinois");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test07388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07388");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.millis();
        org.joda.time.DurationField durationField9 = chronology6.months();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusHours((int) '#');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusDays(3);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withDayOfYear(92);
        int int22 = localDateTime19.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
    }

    @Test
    public void test07389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07389");
        java.util.Locale locale1 = new java.util.Locale("2022-02-11T09:47:32.616");
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-11t09:47:32.616");
    }

    @Test
    public void test07390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07390");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(35199563);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test07391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07391");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone10.previousTransition(0L);
        org.joda.time.Chronology chronology13 = chronology6.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = chronology6.year();
        org.joda.time.DurationField durationField15 = chronology6.months();
        org.joda.time.Chronology chronology16 = chronology6.withUTC();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test07392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07392");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.millisOfSecond();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        java.lang.String str39 = localDateTime37.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = localDateTime37.toString(dateTimeFormatter40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime37.monthOfYear();
        org.joda.time.LocalDateTime localDateTime43 = property42.roundCeilingCopy();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minus(readableDuration44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.plusSeconds(2022);
        int[] intArray49 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime47, (long) 11);
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology28.era();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology28);
        // The following exception was thrown during execution in test generation
        try {
            long long59 = zonedChronology28.getDateTimeMillis(0, 1200000, 54, 36000000, 97, 0, 22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36000000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u65e5\u672c" + "'", str39, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T00:00:00.000" + "'", str41, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test07393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07393");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.lang.String str4 = locale2.getDisplayCountry(locale3);
        java.util.Locale.Builder builder5 = builder1.setLocale(locale3);
        java.util.Set<java.lang.String> strSet6 = locale3.getUnicodeLocaleAttributes();
        boolean boolean7 = strSet6.isEmpty();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYearOfEra(1970);
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(0L, chronology16);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYearOfEra(1970);
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        int int22 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(0L, chronology24);
        java.lang.String str27 = localDateTime25.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = localDateTime25.toString(dateTimeFormatter28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime25.monthOfYear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withSecondOfMinute((int) '4');
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        long long37 = dateTimeZone35.previousTransition(100L);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withHourOfDay((int) (short) 0);
        int int42 = localDateTime41.getEra();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(0L, chronology46);
        java.lang.String str49 = localDateTime47.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = localDateTime47.toString(dateTimeFormatter50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime47.monthOfYear();
        org.joda.time.Interval interval53 = property52.toInterval();
        org.joda.time.LocalDateTime localDateTime55 = property52.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property52.getFieldType();
        org.joda.time.LocalDateTime.Property property57 = localDateTime44.property(dateTimeFieldType56);
        int int58 = localDateTime32.indexOf(dateTimeFieldType56);
        boolean boolean59 = dateTime14.isSupported(dateTimeFieldType56);
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime14.getZone();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        long long64 = dateTimeZone61.convertLocalToUTC(100L, true);
        java.lang.String str66 = dateTimeZone61.getName(1L);
        java.util.Locale locale68 = null;
        java.lang.String str69 = dateTimeZone61.getShortName((long) (short) 100, locale68);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone61);
        long long72 = dateTimeZone60.getMillisKeepLocal(dateTimeZone61, (long) 23);
        java.util.TimeZone timeZone73 = dateTimeZone61.toTimeZone();
        boolean boolean74 = strSet6.remove((java.lang.Object) dateTimeZone61);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = strSet6.add("ora media di greenwich");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u672c" + "'", str27, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000" + "'", str29, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L + "'", long37 == 100L);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u65e5\u672c" + "'", str49, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01T00:00:00.000" + "'", str51, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L + "'", long64 == 100L);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00" + "'", str69, "+00:00");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 23L + "'", long72 == 23L);
        org.junit.Assert.assertNotNull(timeZone73);
// flaky:         org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test07394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07394");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        int int14 = localDateTime2.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property15 = localDateTime2.dayOfYear();
        int int16 = localDateTime2.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test07395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07395");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.plus(readableDuration8);
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, chronology12);
        java.util.Locale locale14 = java.util.Locale.US;
        boolean boolean15 = localDateTime13.equals((java.lang.Object) locale14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(9, (int) '4');
        org.joda.time.DateTime dateTime20 = localDateTime13.toDateTime(dateTimeZone19);
        int int21 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(0L, chronology23);
        int int25 = localDateTime24.getWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone28.previousTransition(100L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withMillisOfSecond((int) (byte) 0);
        int int35 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        long long39 = dateTimeZone36.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = localDateTime24.toDateTime(dateTimeZone36);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(0L, chronology43);
        int int45 = localDateTime44.getWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withYearOfEra(1970);
        org.joda.time.DateTime dateTime48 = localDateTime47.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        long long51 = dateTimeZone49.previousTransition(100L);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(0L, chronology55);
        int int57 = localDateTime56.getWeekyear();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withYearOfEra(1970);
        org.joda.time.DateTime dateTime60 = localDateTime59.toDateTime();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(0L, chronology62);
        int int64 = localDateTime63.getWeekyear();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withYearOfEra(1970);
        org.joda.time.DateTime dateTime67 = localDateTime66.toDateTime();
        int int68 = dateTime60.compareTo((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime69 = localDateTime53.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean70 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology71 = dateTime60.getChronology();
        int int72 = dateTime41.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime(0L, chronology74);
        int int76 = localDateTime75.getWeekyear();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime75.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.millisOfSecond();
        org.joda.time.LocalDateTime.Property property80 = localDateTime78.year();
        java.util.Locale locale81 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale81);
        java.util.Locale locale85 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale86 = java.util.Locale.ENGLISH;
        java.lang.String str87 = locale85.getDisplayLanguage(locale86);
        java.lang.String str88 = locale81.getDisplayName(locale85);
        java.lang.String str89 = property80.getAsShortText(locale85);
        java.util.Set<java.lang.String> strSet90 = locale85.getUnicodeLocaleKeys();
        boolean boolean91 = dateTime41.equals((java.lang.Object) strSet90);
        boolean boolean92 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone93 = dateTime20.getZone();
        java.lang.String str95 = dateTimeZone93.getNameKey(45L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L + "'", long51 == 100L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1970 + "'", int76 == 1970);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(locale81);
// flaky:         org.junit.Assert.assertEquals(locale81.toString(), "fr");
        org.junit.Assert.assertEquals(locale85.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "en");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\u65e5\u672c" + "'", str87, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "French" + "'", str88, "French");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1970" + "'", str89, "1970");
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(dateTimeZone93);
        org.junit.Assert.assertNull(str95);
    }

    @Test
    public void test07396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07396");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.minuteOfDay();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        int int39 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withMillisOfSecond(100);
        org.joda.time.Chronology chronology42 = localDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfCentury();
        org.joda.time.DurationField durationField44 = chronology42.days();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        long long47 = dateTimeZone45.previousTransition(100L);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withMillisOfSecond((int) (byte) 0);
        int[] intArray53 = chronology42.get((org.joda.time.ReadablePartial) localDateTime49, (long) (-1));
        org.joda.time.DateTimeField dateTimeField54 = chronology42.millisOfDay();
        org.joda.time.DurationField durationField55 = chronology42.hours();
        org.joda.time.DurationField durationField56 = chronology42.weeks();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        long long63 = dateTimeZone59.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology64 = org.joda.time.chrono.ZonedChronology.getInstance(chronology42, dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology64.halfdayOfDay();
        long long69 = zonedChronology64.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField70 = zonedChronology64.clockhourOfHalfday();
        java.lang.String str71 = zonedChronology64.toString();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        long long75 = dateTimeZone73.nextTransition(4363010L);
        org.joda.time.Chronology chronology76 = zonedChronology64.withZone(dateTimeZone73);
        org.joda.time.DateTimeZone dateTimeZone77 = zonedChronology64.getZone();
        org.joda.time.DateTimeField dateTimeField78 = zonedChronology64.era();
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology64);
        long long81 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime79, 1644572130785L);
        org.joda.time.DateTimeField dateTimeField82 = zonedChronology28.era();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10L + "'", long63 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-62167219199980L) + "'", long69 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str71, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 4363010L + "'", long75 == 4363010L);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(localDateTime79);
// flaky:         org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1644572968687L + "'", long81 == 1644572968687L);
        org.junit.Assert.assertNotNull(dateTimeField82);
    }

    @Test
    public void test07397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07397");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale6 = new java.util.Locale("UTC");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale locale8 = builder4.build();
        java.util.Locale.Builder builder10 = builder4.setScript("");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder11.build();
        java.util.Locale locale13 = builder11.build();
        java.util.Locale.Builder builder15 = builder11.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder11.setLanguageTag("1970-01-01T00:00:00.099");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 1970 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals(locale6.toString(), "utc");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "utc");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "utc");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "utc");
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test07398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07398");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        int int6 = dateTimeZone2.getStandardOffset(999L);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale8);
        java.util.Locale locale12 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.lang.String str15 = locale8.getDisplayName(locale12);
        java.lang.String str16 = dateTimeZone2.getName(35L, locale8);
        java.lang.String str18 = dateTimeZone2.getShortName((-69L));
        boolean boolean20 = dateTimeZone2.isStandardOffset((long) 25);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals(locale12.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "French" + "'", str15, "French");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test07399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07399");
        java.util.Locale locale2 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.lang.String str3 = locale2.getDisplayVariant();
        java.lang.String str4 = locale2.getVariant();
        java.util.Locale locale5 = locale2.stripExtensions();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("2022-02-11T09:43:35.370");
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(locale8);
        java.lang.String str10 = locale7.getDisplayName(locale8);
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(0L, chronology15);
        int int17 = localDateTime16.getWeekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withDayOfMonth(10);
        int int24 = localDateTime21.getEra();
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.dayOfWeek();
        java.util.Locale locale26 = java.util.Locale.ITALY;
        boolean boolean27 = locale26.hasExtensions();
        java.util.Set<java.lang.String> strSet28 = locale26.getUnicodeLocaleKeys();
        java.lang.String str29 = property25.getAsText(locale26);
        java.lang.String str30 = locale12.getDisplayLanguage(locale26);
        java.lang.String str31 = locale7.getDisplayVariant(locale12);
        java.util.Set<java.lang.Character> charSet32 = locale7.getExtensionKeys();
        java.util.Locale locale34 = new java.util.Locale("Property[yearOfEra]");
        java.lang.String str35 = locale7.getDisplayLanguage(locale34);
        java.util.Locale locale36 = locale34.stripExtensions();
        java.lang.String str37 = locale5.getDisplayScript(locale36);
        java.lang.String str38 = locale36.getDisplayVariant();
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale42 = new java.util.Locale("1", "hi!");
        java.util.Locale.setDefault(category39, locale42);
        java.util.Locale locale46 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.lang.String str48 = locale46.getDisplayLanguage(locale47);
        java.util.Locale.setDefault(category39, locale47);
        java.util.Locale locale52 = new java.util.Locale("", "\u4e2d\u56fd");
        java.util.Locale.setDefault(category39, locale52);
        java.util.Locale.setDefault(locale52);
        java.lang.String str55 = locale36.getDisplayLanguage(locale52);
        org.junit.Assert.assertEquals(locale2.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "venerd\354" + "'", str29, "venerd\354");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertEquals(locale34.toString(), "property[yearofera]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "property[yearofera]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category39.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale42.toString(), "1_HI!");
        org.junit.Assert.assertEquals(locale46.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u65e5\u672c" + "'", str48, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals(locale52.toString(), "\u4e2d\u56fd");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "property[yearofera]" + "'", str55, "property[yearofera]");
    }

    @Test
    public void test07400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07400");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readableDuration6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withSecondOfMinute(32);
        int int10 = localDateTime9.getCenturyOfEra();
        int int11 = localDateTime9.getMonthOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(1970);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        long long21 = dateTimeZone19.previousTransition(100L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(0L, chronology25);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withYearOfEra(1970);
        org.joda.time.DateTime dateTime30 = localDateTime29.toDateTime();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(0L, chronology32);
        int int34 = localDateTime33.getWeekyear();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withYearOfEra(1970);
        org.joda.time.DateTime dateTime37 = localDateTime36.toDateTime();
        int int38 = dateTime30.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime39 = localDateTime23.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean40 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology41 = dateTime18.getChronology();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(0L, chronology43);
        int int45 = localDateTime44.getWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withYearOfEra(1970);
        org.joda.time.DateTime dateTime48 = localDateTime47.toDateTime();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(0L, chronology50);
        int int52 = localDateTime51.getWeekyear();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withYearOfEra(1970);
        org.joda.time.DateTime dateTime55 = localDateTime54.toDateTime();
        int int56 = dateTime48.compareTo((org.joda.time.ReadableInstant) dateTime55);
        java.util.TimeZone timeZone58 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean59 = dateTime55.equals((java.lang.Object) timeZone58);
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime55.getZone();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(0L, chronology62);
        int int64 = localDateTime63.getWeekyear();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withYearOfEra(1970);
        org.joda.time.DateTime dateTime67 = localDateTime66.toDateTime();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(0L, chronology69);
        int int71 = localDateTime70.getWeekyear();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.withYearOfEra(1970);
        org.joda.time.DateTime dateTime74 = localDateTime73.toDateTime();
        int int75 = dateTime67.compareTo((org.joda.time.ReadableInstant) dateTime74);
        boolean boolean76 = dateTime55.isAfter((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(0L, chronology78);
        java.lang.String str81 = localDateTime79.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = null;
        java.lang.String str83 = localDateTime79.toString(dateTimeFormatter82);
        org.joda.time.LocalDateTime.Property property84 = localDateTime79.monthOfYear();
        org.joda.time.Interval interval85 = property84.toInterval();
        long long86 = property84.remainder();
        org.joda.time.LocalDateTime localDateTime87 = property84.roundHalfFloorCopy();
        java.lang.String str88 = property84.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = property84.getFieldType();
        int int90 = dateTime67.get(dateTimeFieldType89);
        int int91 = dateTime18.get(dateTimeFieldType89);
        boolean boolean92 = localDateTime9.isSupported(dateTimeFieldType89);
        org.joda.time.LocalDateTime.Property property93 = localDateTime9.yearOfEra();
        int int94 = property93.getMaximumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 19 + "'", int10 == 19);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1970 + "'", int71 == 1970);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u65e5\u672c" + "'", str81, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "1970-01-01T00:00:00.000" + "'", str83, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Jan" + "'", str88, "Jan");
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 292278993 + "'", int94 == 292278993);
    }

    @Test
    public void test07401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07401");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.weekOfWeekyear();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        java.lang.String str38 = timeZone37.getID();
        int int39 = timeZone37.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.Chronology chronology41 = zonedChronology28.withZone(dateTimeZone40);
        org.joda.time.DurationField durationField42 = zonedChronology28.weeks();
        // The following exception was thrown during execution in test generation
        try {
            long long48 = zonedChronology28.getDateTimeMillis(3L, 1970, 97, 2, 53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GMT" + "'", str38, "GMT");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test07402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07402");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.lang.String str4 = dateTimeZone1.getShortName(1013420765866L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-00:00:00.001" + "'", str4, "-00:00:00.001");
    }

    @Test
    public void test07403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07403");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = timeZone1.getOffset((long) (byte) 10);
        boolean boolean5 = timeZone1.observesDaylightTime();
        timeZone1.setRawOffset(20);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int10 = dateTimeZone8.getOffset(115200000L);
        java.util.TimeZone timeZone11 = dateTimeZone8.toTimeZone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test07404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07404");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfMonth(10);
        int int10 = localDateTime7.getEra();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.dayOfWeek();
        int int12 = localDateTime7.getYearOfCentury();
        int int13 = localDateTime7.getYear();
        org.joda.time.DateTime dateTime14 = localDateTime7.toDateTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 70 + "'", int12 == 70);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test07405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07405");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DurationField durationField32 = zonedChronology28.minutes();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, chronology34);
        java.util.Locale locale36 = java.util.Locale.US;
        boolean boolean37 = localDateTime35.equals((java.lang.Object) locale36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(0L, chronology41);
        int int43 = localDateTime42.getWeekyear();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusMinutes(100);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(0L, chronology52);
        int int54 = localDateTime53.getWeekyear();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withMillisOfSecond(100);
        org.joda.time.Chronology chronology57 = localDateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfCentury();
        org.joda.time.DurationField durationField59 = chronology57.days();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        long long62 = dateTimeZone60.previousTransition(100L);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withMillisOfSecond((int) (byte) 0);
        int[] intArray68 = chronology57.get((org.joda.time.ReadablePartial) localDateTime64, (long) (-1));
        org.joda.time.DateTimeField dateTimeField69 = chronology57.millisOfDay();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(0L, chronology71);
        int int73 = localDateTime72.getWeekyear();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withMillisOfSecond(100);
        int[] intArray77 = chronology57.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        zonedChronology28.validate((org.joda.time.ReadablePartial) localDateTime49, intArray77);
        org.joda.time.DateTimeField dateTimeField79 = zonedChronology28.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField80 = zonedChronology28.year();
        org.joda.time.DateTimeField dateTimeField81 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField82 = zonedChronology28.halfdays();
        org.joda.time.DurationField durationField83 = zonedChronology28.years();
        org.joda.time.DateTimeField dateTimeField84 = zonedChronology28.yearOfCentury();
        org.joda.time.DurationField durationField85 = zonedChronology28.seconds();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 100L + "'", long62 == 100L);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1970 + "'", int73 == 1970);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(durationField85);
    }

    @Test
    public void test07406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07406");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.millisOfSecond();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        java.lang.String str39 = localDateTime37.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = localDateTime37.toString(dateTimeFormatter40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime37.monthOfYear();
        org.joda.time.LocalDateTime localDateTime43 = property42.roundCeilingCopy();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minus(readableDuration44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.plusSeconds(2022);
        int[] intArray49 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime47, (long) 11);
        org.joda.time.DateTimeZone dateTimeZone50 = zonedChronology28.getZone();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone54);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone54);
        int int58 = dateTimeZone54.getStandardOffset(999L);
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale60);
        java.util.Locale locale64 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale65 = java.util.Locale.ENGLISH;
        java.lang.String str66 = locale64.getDisplayLanguage(locale65);
        java.lang.String str67 = locale60.getDisplayName(locale64);
        java.lang.String str68 = dateTimeZone54.getName(35L, locale60);
        java.util.Locale locale69 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet70 = locale69.getUnicodeLocaleAttributes();
        java.lang.String str71 = locale60.getDisplayLanguage(locale69);
        java.lang.String str72 = dateTimeZone50.getShortName(27236744L, locale69);
        int int74 = dateTimeZone50.getOffset(56516L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u65e5\u672c" + "'", str39, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T00:00:00.000" + "'", str41, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(locale60);
// flaky:         org.junit.Assert.assertEquals(locale60.toString(), "\uc911\uad6d\uc5b4\uc911\uad6d)_United States");
        org.junit.Assert.assertEquals(locale64.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u65e5\u672c" + "'", str66, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d),United States)" + "'", str67, "\uc911\uad6d\uc5b4\uc911\uad6d),United States)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00" + "'", str68, "+00:00");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00:00.059" + "'", str71, "+00:00:00.059");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test07407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07407");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(0L, chronology4);
        java.lang.String str7 = localDateTime5.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = localDateTime5.toString(dateTimeFormatter8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.monthOfYear();
        int int11 = localDateTime5.getMinuteOfHour();
        boolean boolean12 = dateTimeZone1.isLocalDateTimeGap(localDateTime5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int15 = dateTimeZone1.getStandardOffset(3600052L);
        int int17 = dateTimeZone1.getStandardOffset((long) 82045684);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u65e5\u672c" + "'", str7, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.000" + "'", str9, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test07408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07408");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(0L);
        long long4 = dateTimeZone0.nextTransition((long) (-1));
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        java.lang.String str12 = localDateTime10.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = localDateTime10.toString(dateTimeFormatter13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.monthOfYear();
        org.joda.time.Interval interval16 = property15.toInterval();
        long long17 = property15.remainder();
        org.joda.time.LocalDateTime localDateTime18 = property15.roundHalfFloorCopy();
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        int int20 = property15.getMaximumTextLength(locale19);
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.lang.String str22 = locale21.getCountry();
        int int23 = property15.getMaximumTextLength(locale21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(0L, chronology25);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        long long32 = dateTimeZone30.previousTransition(100L);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withMillisOfSecond((int) (byte) 0);
        int int37 = localDateTime26.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        long long41 = dateTimeZone38.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDateTime26.toDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(0L, chronology45);
        java.lang.String str48 = localDateTime46.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = localDateTime46.toString(dateTimeFormatter49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(0L, chronology52);
        java.lang.String str55 = localDateTime53.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = localDateTime53.toString(dateTimeFormatter56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime53.monthOfYear();
        org.joda.time.Interval interval59 = property58.toInterval();
        long long60 = property58.remainder();
        org.joda.time.LocalDateTime localDateTime61 = property58.roundHalfFloorCopy();
        java.lang.String str62 = property58.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = property58.getFieldType();
        int int64 = localDateTime46.get(dateTimeFieldType63);
        int int65 = dateTime43.get(dateTimeFieldType63);
        int int66 = property15.compareTo((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(0L, chronology68);
        int int70 = localDateTime69.getWeekyear();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.withMillisOfSecond(100);
        org.joda.time.Chronology chronology73 = localDateTime69.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.yearOfCentury();
        org.joda.time.DurationField durationField75 = chronology73.days();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.UTC;
        long long78 = dateTimeZone76.previousTransition(100L);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology79);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.withMillisOfSecond((int) (byte) 0);
        int[] intArray84 = chronology73.get((org.joda.time.ReadablePartial) localDateTime80, (long) (-1));
        org.joda.time.DateTimeField dateTimeField85 = chronology73.millisOfDay();
        org.joda.time.DateTimeField dateTimeField86 = chronology73.dayOfYear();
        org.joda.time.DateTimeField dateTimeField87 = chronology73.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField88 = chronology73.hourOfHalfday();
        boolean boolean89 = dateTime43.equals((java.lang.Object) dateTimeField88);
        org.joda.time.Instant instant90 = dateTime43.toInstant();
        boolean boolean91 = instant7.isAfter((org.joda.time.ReadableInstant) dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u672c" + "'", str12, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.000" + "'", str14, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "CN" + "'", str22, "CN");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L + "'", long32 == 100L);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L + "'", long41 == 100L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u65e5\u672c" + "'", str48, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01T00:00:00.000" + "'", str50, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u65e5\u672c" + "'", str55, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970-01-01T00:00:00.000" + "'", str57, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Jan" + "'", str62, "Jan");
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1970 + "'", int70 == 1970);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 100L + "'", long78 == 100L);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(instant90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test07409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07409");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DurationField durationField32 = zonedChronology28.minutes();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, chronology34);
        java.lang.String str37 = localDateTime35.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = localDateTime35.toString(dateTimeFormatter38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime35.monthOfYear();
        org.joda.time.LocalDateTime localDateTime41 = property40.withMinimumValue();
        org.joda.time.Interval interval42 = property40.toInterval();
        org.joda.time.LocalDateTime localDateTime43 = property40.getLocalDateTime();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = localDateTime43.getFieldTypes();
        int[] intArray46 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime43, (-3599883L));
        int int47 = localDateTime43.getEra();
        int int48 = localDateTime43.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u65e5\u672c" + "'", str37, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.000" + "'", str39, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1969, 12, 31, 82800117]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test07410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07410");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.era();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.weekOfWeekyear();
        org.joda.time.DurationField durationField34 = zonedChronology28.centuries();
        java.lang.String str35 = zonedChronology28.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        java.util.Locale locale39 = java.util.Locale.US;
        boolean boolean40 = localDateTime38.equals((java.lang.Object) locale39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(0L, chronology44);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime38.withFields((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.dayOfWeek();
        int int52 = localDateTime50.size();
        long long54 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime50, (long) 292278993);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        long long57 = dateTimeZone55.previousTransition(100L);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withHourOfDay((int) (short) 0);
        int int62 = localDateTime61.getEra();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(0L, chronology66);
        java.lang.String str69 = localDateTime67.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = null;
        java.lang.String str71 = localDateTime67.toString(dateTimeFormatter70);
        org.joda.time.LocalDateTime.Property property72 = localDateTime67.monthOfYear();
        org.joda.time.Interval interval73 = property72.toInterval();
        org.joda.time.LocalDateTime localDateTime75 = property72.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = property72.getFieldType();
        org.joda.time.LocalDateTime.Property property77 = localDateTime64.property(dateTimeFieldType76);
        org.joda.time.LocalDateTime.Property property78 = localDateTime50.property(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str35, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 100L + "'", long57 == 100L);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u65e5\u672c" + "'", str69, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1970-01-01T00:00:00.000" + "'", str71, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(property78);
    }

    @Test
    public void test07411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07411");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("Korean");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Korean\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07412");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.centuryOfEra();
        org.joda.time.DurationField durationField36 = zonedChronology28.weekyears();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 4);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        long long41 = dateTimeZone39.previousTransition(100L);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withHourOfDay((int) (short) 0);
        int int46 = localDateTime45.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withCenturyOfEra(0);
        int int49 = localDateTime38.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime48.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.plus(readablePeriod51);
        long long54 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime52, 457L);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.minus(readableDuration55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime52.plusWeeks(31);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L + "'", long41 == 100L);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-59958143999900L) + "'", long54 == (-59958143999900L));
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
    }

    @Test
    public void test07413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07413");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusHours((int) ' ');
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(0L, chronology16);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMillisOfSecond(100);
        org.joda.time.Chronology chronology21 = localDateTime17.getChronology();
        java.lang.String str22 = localDateTime17.toString();
        int int23 = localDateTime17.getYearOfCentury();
        int int24 = localDateTime17.getCenturyOfEra();
        boolean boolean25 = localDateTime14.isEqual((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(0L, chronology27);
        int int29 = localDateTime28.getWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withMillisOfSecond(100);
        org.joda.time.Chronology chronology32 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        long long36 = dateTimeZone34.previousTransition(0L);
        long long38 = dateTimeZone34.nextTransition((long) (-1));
        org.joda.time.Chronology chronology39 = chronology32.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField40 = chronology32.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology32);
        org.joda.time.DateTimeZone dateTimeZone42 = chronology32.getZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.Chronology chronology45 = chronology32.withZone(dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime14, chronology45);
        int int47 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        java.lang.String str48 = localDateTime6.toString();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime6.withMinuteOfHour(52);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime6.withWeekyear(40);
        org.joda.time.DurationFieldType durationFieldType53 = null;
        boolean boolean54 = localDateTime52.isSupported(durationFieldType53);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.000" + "'", str22, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 70 + "'", int23 == 70);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 19 + "'", int24 == 19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T00:00:00.100" + "'", str48, "1970-01-01T00:00:00.100");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test07414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07414");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        java.util.Date date7 = localDateTime6.toDate();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusWeeks(7);
        java.lang.String str10 = localDateTime9.toString();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1969-11-13T00:00:00.100" + "'", str10, "1969-11-13T00:00:00.100");
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test07415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07415");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("it-IT");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(0L, chronology5);
        java.lang.String str8 = localDateTime6.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = localDateTime6.toString(dateTimeFormatter9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime6.monthOfYear();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.LocalDateTime localDateTime14 = property11.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property11.getFieldType();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, chronology17);
        java.util.Locale locale19 = java.util.Locale.US;
        boolean boolean20 = localDateTime18.equals((java.lang.Object) locale19);
        java.lang.String str21 = locale19.toLanguageTag();
        int int22 = property11.getMaximumTextLength(locale19);
        org.joda.time.LocalDateTime localDateTime23 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime24 = property11.roundFloorCopy();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(0L, chronology26);
        int int28 = localDateTime27.getWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone31.previousTransition(100L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withMillisOfSecond((int) (byte) 0);
        int int38 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        long long42 = dateTimeZone39.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime44 = localDateTime27.toDateTime(dateTimeZone39);
        int int45 = property11.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDateTime localDateTime46 = property11.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = property11.getFieldType();
        org.joda.time.DurationField durationField48 = property11.getLeapDurationField();
        int int49 = property11.getMaximumValueOverall();
        boolean boolean50 = languageRange1.equals((java.lang.Object) property11);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c" + "'", str8, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.000" + "'", str10, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "en-US" + "'", str21, "en-US");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L + "'", long33 == 100L);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 100L + "'", long42 == 100L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 12 + "'", int49 == 12);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test07416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07416");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology32.weekyearOfCentury();
        org.joda.time.DurationField durationField35 = zonedChronology32.weeks();
        org.joda.time.Chronology chronology36 = zonedChronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology32.clockhourOfDay();
        org.joda.time.DurationField durationField38 = zonedChronology32.weeks();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test07417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07417");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        java.lang.String str9 = localDateTime7.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = localDateTime7.toString(dateTimeFormatter10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        boolean boolean14 = dateTimeZone2.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone2);
        boolean boolean16 = dateTimeZone2.isFixed();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 6, dateTimeZone2);
        long long21 = dateTimeZone2.convertLocalToUTC((-35519956L), true, 4363010L);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int24 = dateTimeZone2.getStandardOffset(39420L);
        java.lang.String str25 = dateTimeZone2.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c" + "'", str9, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.000" + "'", str11, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-35519956L) + "'", long21 == (-35519956L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
    }

    @Test
    public void test07418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07418");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(0L, chronology2);
        int int4 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMillisOfSecond(100);
        org.joda.time.Chronology chronology7 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.days();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone10.previousTransition(100L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfSecond((int) (byte) 0);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePartial) localDateTime14, (long) (-1));
        org.joda.time.DateTimeField dateTimeField19 = chronology7.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology7.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField23 = chronology7.years();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(12L, chronology7);
        org.joda.time.DateTimeField dateTimeField25 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology7.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField27 = chronology7.year();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test07419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07419");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfSecond();
        int int12 = property11.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime13 = property11.roundHalfCeilingCopy();
        int int14 = property11.getMaximumValueOverall();
        java.lang.String str15 = property11.toString();
        int int16 = property11.getMinimumValueOverall();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale.Builder builder20 = builder17.setLanguage("");
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        java.util.Locale.Builder builder22 = builder21.clearExtensions();
        java.util.Locale locale23 = java.util.Locale.ITALY;
        boolean boolean24 = locale23.hasExtensions();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.util.Locale locale26 = locale23.stripExtensions();
        java.lang.String str27 = locale26.getVariant();
        java.util.Locale.Builder builder28 = builder21.setLocale(locale26);
        java.lang.String str29 = property11.getAsShortText(locale26);
        org.joda.time.LocalDateTime localDateTime30 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime31 = property11.withMinimumValue();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 999 + "'", int14 == 999);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[millisOfSecond]" + "'", str15, "Property[millisOfSecond]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test07420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07420");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        java.lang.String str5 = locale3.toLanguageTag();
        org.joda.time.tz.NameProvider nameProvider6 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str11 = nameProvider6.getShortName(locale8, "", "hi!");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider6);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider6);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(0L, chronology15);
        java.util.Locale locale17 = java.util.Locale.US;
        boolean boolean18 = localDateTime16.equals((java.lang.Object) locale17);
        java.lang.String str19 = locale17.toLanguageTag();
        java.lang.String str22 = nameProvider6.getShortName(locale17, "2022-02-11T09:44:17.426", "");
        java.util.Locale.setDefault(locale17);
        java.lang.String str24 = locale3.getDisplayName(locale17);
        java.lang.Object obj25 = locale17.clone();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en-US" + "'", str5, "en-US");
        org.junit.Assert.assertNotNull(nameProvider6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "en-US" + "'", str19, "en-US");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English (United States)" + "'", str24, "English (United States)");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "en_US");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "en_US");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "en_US");
    }

    @Test
    public void test07421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07421");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology28);
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long44 = zonedChronology28.getDateTimeMillis(900, 3006970, 970, 10, (int) ' ', 263, 42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 263 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test07422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07422");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone21.previousTransition(0L);
        long long25 = dateTimeZone21.convertUTCToLocal(1L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        boolean boolean31 = dateTimeZone21.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone21);
        org.joda.time.DurationField durationField33 = zonedChronology32.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology32.secondOfMinute();
        org.joda.time.DurationField durationField36 = zonedChronology32.centuries();
        org.joda.time.DurationField durationField37 = zonedChronology32.hours();
        org.joda.time.Chronology chronology38 = zonedChronology32.withUTC();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(chronology38);
    }

    @Test
    public void test07423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07423");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(0L);
        long long4 = dateTimeZone0.convertUTCToLocal(1L);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, chronology6);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDayOfWeek(3);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusYears((int) 'u');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMinutes(35162287);
        boolean boolean15 = dateTimeZone0.isLocalDateTimeGap(localDateTime12);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        java.lang.String str18 = timeZone17.getID();
        int int19 = timeZone17.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        boolean boolean21 = dateTimeZone20.isFixed();
        java.lang.String str23 = dateTimeZone20.getNameKey((-1L));
        long long25 = dateTimeZone0.getMillisKeepLocal(dateTimeZone20, (-170207998016L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GMT" + "'", str18, "GMT");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-170207998016L) + "'", long25 == (-170207998016L));
    }

    @Test
    public void test07424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07424");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) '4');
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readablePeriod11);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate((int) (byte) 100, 10, 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundCeilingCopy();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(0L, chronology20);
        int int22 = localDateTime21.getWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYearOfEra(1970);
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(0L, chronology27);
        java.lang.String str30 = localDateTime28.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = localDateTime28.toString(dateTimeFormatter31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime28.monthOfYear();
        org.joda.time.Interval interval34 = property33.toInterval();
        org.joda.time.LocalDateTime localDateTime36 = property33.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property33.getFieldType();
        boolean boolean38 = dateTime25.isSupported(dateTimeFieldType37);
        int int39 = property17.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalDateTime localDateTime40 = property17.roundHalfFloorCopy();
        int int41 = property17.getMinimumValueOverall();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u65e5\u672c" + "'", str30, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01T00:00:00.000" + "'", str32, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test07425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07425");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        int int14 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime13);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        boolean boolean17 = dateTime13.equals((java.lang.Object) timeZone16);
        java.lang.String str18 = timeZone16.getID();
        timeZone16.setID("1970-01-08T02:00:00.000");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(0L, chronology24);
        java.lang.String str27 = localDateTime25.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = localDateTime25.toString(dateTimeFormatter28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime25.monthOfYear();
        org.joda.time.Interval interval31 = property30.toInterval();
        long long32 = property30.remainder();
        org.joda.time.LocalDateTime localDateTime33 = property30.roundHalfFloorCopy();
        java.lang.String str34 = property30.getAsShortText();
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        int int36 = property30.getMaximumTextLength(locale35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = timeZone16.getDisplayName(true, 1967, locale35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 1967");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GMT" + "'", str18, "GMT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u672c" + "'", str27, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000" + "'", str29, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Jan" + "'", str34, "Jan");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
    }

    @Test
    public void test07426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07426");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 4);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone2.previousTransition(100L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withHourOfDay((int) (short) 0);
        int int9 = localDateTime8.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withCenturyOfEra(0);
        int int12 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.dayOfMonth();
        int int14 = localDateTime11.getDayOfYear();
        int int15 = localDateTime11.getYearOfEra();
        int int16 = localDateTime11.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.minusDays((int) '#');
        java.lang.String str20 = localDateTime18.toString("47");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L + "'", long4 == 100L);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 70 + "'", int15 == 70);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "47" + "'", str20, "47");
    }

    @Test
    public void test07427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07427");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        java.lang.String str2 = timeZone1.getID();
        timeZone1.setRawOffset((-1));
        boolean boolean5 = timeZone1.observesDaylightTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = timeZone1.getDisplayName(false, 121);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 121");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test07428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07428");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale0);
        java.util.Locale locale4 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale0.getDisplayName(locale4);
        boolean boolean8 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet9 = locale0.getUnicodeLocaleKeys();
        java.lang.Object[] objArray10 = strSet9.toArray();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals(locale4.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u672c" + "'", str6, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English (United States)" + "'", str7, "English (United States)");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
    }

    @Test
    public void test07429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07429");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minus(readableDuration6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusHours((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusMillis((int) '#');
        org.joda.time.LocalDateTime.Property property13 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.withSecondOfMinute(8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, chronology17);
        int int19 = localDateTime18.getWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withMillisOfSecond(100);
        org.joda.time.Chronology chronology22 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        org.joda.time.DurationField durationField24 = chronology22.days();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        long long27 = dateTimeZone25.previousTransition(100L);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withMillisOfSecond((int) (byte) 0);
        int[] intArray33 = chronology22.get((org.joda.time.ReadablePartial) localDateTime29, (long) (-1));
        org.joda.time.DateTimeField dateTimeField34 = chronology22.millisOfDay();
        org.joda.time.DurationField durationField35 = chronology22.hours();
        org.joda.time.DurationField durationField36 = chronology22.weeks();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        long long43 = dateTimeZone39.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology44 = org.joda.time.chrono.ZonedChronology.getInstance(chronology22, dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology44.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology44.millisOfSecond();
        org.joda.time.DurationField durationField47 = zonedChronology44.months();
        org.joda.time.DurationField durationField48 = zonedChronology44.minutes();
        org.joda.time.DurationField durationField49 = zonedChronology44.halfdays();
        long long55 = zonedChronology44.getDateTimeMillis((long) (byte) 0, (int) (short) 1, 20, 32, (int) 'a');
        org.joda.time.DateTimeField dateTimeField56 = zonedChronology44.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone57 = zonedChronology44.getZone();
        org.joda.time.DateTimeField dateTimeField58 = zonedChronology44.millisOfSecond();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(0L, chronology60);
        java.util.Locale locale62 = java.util.Locale.US;
        boolean boolean63 = localDateTime61.equals((java.lang.Object) locale62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.plus(readablePeriod64);
        java.lang.String str66 = localDateTime65.toString();
        int[] intArray68 = zonedChronology44.get((org.joda.time.ReadablePartial) localDateTime65, 22984L);
        boolean boolean69 = localDateTime7.isEqual((org.joda.time.ReadablePartial) localDateTime65);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = localDateTime65.getValue(1939);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1939");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100L + "'", long27 == 100L);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 4832097L + "'", long55 == 4832097L);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01T00:00:00.000" + "'", str66, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1970, 1, 1, 22984]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test07430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07430");
        java.util.Locale locale2 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.lang.String str4 = locale2.getDisplayLanguage(locale3);
        java.util.Locale locale7 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.lang.String str8 = locale3.getDisplayScript(locale7);
        java.util.Locale.Category category9 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone10.previousTransition(0L);
        long long14 = dateTimeZone10.convertUTCToLocal(1L);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        long long19 = dateTimeZone10.getMillisKeepLocal(dateTimeZone17, (long) (-1));
        int int21 = dateTimeZone10.getStandardOffset((long) '4');
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(0L, chronology24);
        java.lang.String str27 = localDateTime25.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = localDateTime25.toString(dateTimeFormatter28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime25.monthOfYear();
        org.joda.time.Interval interval31 = property30.toInterval();
        long long32 = property30.remainder();
        org.joda.time.LocalDateTime localDateTime33 = property30.roundHalfFloorCopy();
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        int int35 = property30.getMaximumTextLength(locale34);
        java.util.Locale locale36 = java.util.Locale.CHINA;
        java.lang.String str37 = locale36.getCountry();
        int int38 = property30.getMaximumTextLength(locale36);
        java.lang.String str39 = dateTimeZone10.getShortName((-625L), locale36);
        java.util.Locale locale40 = locale36.stripExtensions();
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category9, locale40);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        long long46 = dateTimeZone43.convertLocalToUTC(100L, true);
        long long49 = dateTimeZone43.convertLocalToUTC((long) 1970, false);
        java.lang.String str51 = dateTimeZone43.getName((-2208873600000L));
        java.util.Locale locale53 = java.util.Locale.CHINA;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale53.getDisplayName(locale54);
        java.util.Set<java.lang.String> strSet56 = locale53.getUnicodeLocaleAttributes();
        java.lang.String str57 = dateTimeZone43.getName(1644572694666L, locale53);
        java.util.Locale.setDefault(category9, locale53);
        java.lang.String str59 = locale7.getDisplayVariant(locale53);
        java.lang.String str60 = locale7.getDisplayCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale7.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.FORMAT + "'", category9.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u672c" + "'", str27, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000" + "'", str29, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "CN" + "'", str37, "CN");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L + "'", long46 == 100L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1970L + "'", long49 == 1970L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str55, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "HI!" + "'", str60, "HI!");
    }

    @Test
    public void test07431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07431");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, chronology8);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMinutes(100);
        int int17 = localDateTime16.getMillisOfSecond();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test07432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07432");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        java.lang.String str8 = property7.getName();
        org.joda.time.DurationField durationField9 = property7.getDurationField();
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((int) 'a');
        org.joda.time.Interval interval12 = property7.toInterval();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.lang.String str14 = locale13.getVariant();
        java.lang.String str15 = property7.getAsShortText(locale13);
        java.lang.String str16 = property7.getAsShortText();
        org.joda.time.LocalDateTime localDateTime17 = property7.roundFloorCopy();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u4e00\u6708" + "'", str15, "\u4e00\u6708");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Jan" + "'", str16, "Jan");
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test07433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07433");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfSecond();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.year();
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale8);
        java.util.Locale locale12 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.lang.String str15 = locale8.getDisplayName(locale12);
        java.lang.String str16 = property7.getAsShortText(locale12);
        java.util.Set<java.lang.String> strSet17 = locale12.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.lang.String str24 = locale21.getDisplayName();
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str29 = locale26.getDisplayName(locale28);
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.lang.String str33 = locale30.getDisplayName();
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.util.Locale locale39 = java.util.Locale.JAPAN;
        java.util.Locale locale40 = java.util.Locale.JAPAN;
        java.lang.String str41 = locale39.getDisplayCountry(locale40);
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        java.util.Locale locale43 = java.util.Locale.JAPAN;
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.lang.String str45 = locale43.getDisplayCountry(locale44);
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale21, locale26, locale30, locale34, locale37, locale38, locale39, locale42, locale43 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList47);
        java.lang.String[] strArray51 = new java.lang.String[] { "1970-01-01T00:00:00.000" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.util.Locale.FilteringMode filteringMode54 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList52, filteringMode54);
        java.util.Locale locale56 = java.util.Locale.CHINA;
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        java.util.Locale locale62 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale63 = locale62.stripExtensions();
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        java.util.Locale locale67 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale68 = locale67.stripExtensions();
        java.util.Locale locale71 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale72 = java.util.Locale.ENGLISH;
        java.lang.String str73 = locale71.getDisplayLanguage(locale72);
        java.util.Locale locale74 = java.util.Locale.JAPAN;
        java.util.Locale locale75 = java.util.Locale.JAPAN;
        java.lang.String str76 = locale74.getDisplayCountry(locale75);
        java.util.Locale locale79 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale80 = locale79.stripExtensions();
        java.util.Locale locale81 = java.util.Locale.getDefault();
        java.util.Locale locale83 = java.util.Locale.forLanguageTag("Japanese (Japan)");
        java.util.Locale locale84 = java.util.Locale.US;
        java.util.Locale locale85 = java.util.Locale.getDefault();
        java.util.Locale locale86 = java.util.Locale.CHINA;
        java.lang.String str87 = locale86.getCountry();
        java.util.Locale[] localeArray88 = new java.util.Locale[] { locale56, locale57, locale58, locale59, locale62, locale64, locale67, locale71, locale75, locale80, locale81, locale83, locale84, locale85, locale86 };
        java.util.ArrayList<java.util.Locale> localeList89 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList89, localeArray88);
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList89);
        java.util.stream.Stream<java.util.Locale> localeStream92 = localeList91.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream93 = localeList91.stream();
        java.util.stream.Stream<java.util.Locale> localeStream94 = localeList91.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream95 = localeList91.stream();
        java.util.stream.Stream<java.util.Locale> localeStream96 = localeList91.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream97 = localeList91.stream();
        boolean boolean98 = strSet17.retainAll((java.util.Collection<java.util.Locale>) localeList91);
        java.util.stream.Stream<java.util.Locale> localeStream99 = localeList91.parallelStream();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertEquals(locale12.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English (United States)" + "'", str15, "English (United States)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970" + "'", str16, "1970");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Japanese (Japan)" + "'", str24, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u672c" + "'", str27, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str29, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u65e5\u672c" + "'", str32, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Japanese (Japan)" + "'", str33, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u65e5\u672c" + "'", str41, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u65e5\u672c" + "'", str45, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + filteringMode54 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode54.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale62.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it");
        org.junit.Assert.assertEquals(locale67.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals(locale71.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u65e5\u672c" + "'", str73, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u65e5\u672c" + "'", str76, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale79.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "CN" + "'", str87, "CN");
        org.junit.Assert.assertNotNull(localeArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertNotNull(localeStream92);
        org.junit.Assert.assertNotNull(localeStream93);
        org.junit.Assert.assertNotNull(localeStream94);
        org.junit.Assert.assertNotNull(localeStream95);
        org.junit.Assert.assertNotNull(localeStream96);
        org.junit.Assert.assertNotNull(localeStream97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(localeStream99);
    }

    @Test
    public void test07434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07434");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("Korean");
        java.util.Locale.Builder builder6 = builder4.setLanguage("KR");
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder7.setLanguage("");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale13 = new java.util.Locale("UTC");
        java.util.Locale.Builder builder14 = builder11.setLocale(locale13);
        java.util.Locale locale15 = builder11.build();
        java.util.Locale.Builder builder17 = builder11.setScript("");
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale locale21 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = locale21.getDisplayLanguage(locale22);
        java.util.Locale locale26 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.lang.String str27 = locale22.getDisplayScript(locale26);
        java.lang.String str28 = locale22.getScript();
        java.util.Locale.Builder builder29 = builder17.setLocale(locale22);
        java.util.Locale locale30 = builder17.build();
        java.util.Locale.Builder builder31 = builder4.setLocale(locale30);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder33 = builder4.setLanguageTag("1976-04-09T20:00:00.000");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 1976 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals(locale13.toString(), "utc");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "utc");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals(locale21.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
        org.junit.Assert.assertEquals(locale26.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test07435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07435");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        boolean boolean3 = strSet1.contains((java.lang.Object) "en_US");
        boolean boolean4 = strSet1.isEmpty();
        java.lang.Object[] objArray5 = strSet1.toArray();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int9 = timeZone7.getRawOffset();
        java.util.TimeZone timeZone10 = null;
        boolean boolean11 = timeZone7.hasSameRules(timeZone10);
        boolean boolean12 = strSet1.remove((java.lang.Object) timeZone10);
        java.util.Iterator<java.lang.String> strItor13 = strSet1.iterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strItor13);
    }

    @Test
    public void test07436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07436");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        java.lang.String str12 = localDateTime10.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = localDateTime10.toString(dateTimeFormatter13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.monthOfYear();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.LocalDateTime localDateTime18 = property15.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property15.getFieldType();
        long long20 = property15.remainder();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(0L, chronology22);
        int int24 = localDateTime23.getWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        long long29 = dateTimeZone27.previousTransition(100L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withMillisOfSecond((int) (byte) 0);
        int int34 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        long long38 = dateTimeZone35.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime40 = localDateTime23.toDateTime(dateTimeZone35);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(0L, chronology42);
        int int44 = localDateTime43.getWeekyear();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withYearOfEra(1970);
        org.joda.time.DateTime dateTime47 = localDateTime46.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        long long50 = dateTimeZone48.previousTransition(100L);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(0L, chronology54);
        int int56 = localDateTime55.getWeekyear();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withYearOfEra(1970);
        org.joda.time.DateTime dateTime59 = localDateTime58.toDateTime();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(0L, chronology61);
        int int63 = localDateTime62.getWeekyear();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withYearOfEra(1970);
        org.joda.time.DateTime dateTime66 = localDateTime65.toDateTime();
        int int67 = dateTime59.compareTo((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime68 = localDateTime52.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean69 = dateTime47.isEqual((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Chronology chronology70 = dateTime59.getChronology();
        int int71 = dateTime40.compareTo((org.joda.time.ReadableInstant) dateTime59);
        long long72 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime40);
        int int73 = instant7.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone74 = instant7.getZone();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u672c" + "'", str12, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.000" + "'", str14, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L + "'", long29 == 100L);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L + "'", long38 == 100L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1970 + "'", int63 == 1970);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone74);
    }

    @Test
    public void test07437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07437");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours((int) ' ');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 1971);
        int int11 = localDateTime7.size();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.util.Set<java.lang.Character> charSet16 = locale14.getExtensionKeys();
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = locale14.getDisplayName(locale17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = localDateTime7.toString("1970-01-04T00:00:00.000", locale14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str15, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str19, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u671d\u9c9c\u6587" + "'", str20, "\u671d\u9c9c\u6587");
    }

    @Test
    public void test07438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07438");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfDay();
        long long39 = zonedChronology28.getDateTimeMillis(0, 1, (int) (byte) 1, 20);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology28.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        long long46 = zonedChronology28.add(readablePeriod43, 1644572791776L, 35286275);
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology28.era();
        org.joda.time.DurationField durationField48 = zonedChronology28.days();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-62167219199980L) + "'", long39 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1644572791776L + "'", long46 == 1644572791776L);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
    }

    @Test
    public void test07439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07439");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfMonth(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusWeeks(2022);
        int int12 = localDateTime7.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property13 = localDateTime7.era();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusSeconds(1964);
        int int17 = localDateTime14.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test07440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07440");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("UTC");
        java.util.Locale.Builder builder9 = builder6.clear();
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("it-it");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder9.addUnicodeLocaleAttribute("-01:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: -01:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test07441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07441");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        long long38 = dateTimeZone36.previousTransition(0L);
        long long40 = dateTimeZone36.nextTransition((long) (-1));
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone36);
        long long43 = dateTimeZone36.convertUTCToLocal((long) 20);
        int int45 = dateTimeZone36.getStandardOffset(22L);
        org.joda.time.Chronology chronology46 = zonedChronology28.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.clockhourOfDay();
        org.joda.time.DurationField durationField48 = chronology46.weekyears();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 20L + "'", long43 == 20L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
    }

    @Test
    public void test07442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07442");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfSecond(0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone10.previousTransition(100L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(0L, chronology16);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYearOfEra(1970);
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(0L, chronology23);
        int int25 = localDateTime24.getWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withYearOfEra(1970);
        org.joda.time.DateTime dateTime28 = localDateTime27.toDateTime();
        int int29 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime30 = localDateTime14.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime14.plus(readableDuration31);
        boolean boolean33 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime7.minusDays(2022);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.minusMonths((int) (short) 10);
        org.joda.time.LocalDateTime.Property property40 = localDateTime35.centuryOfEra();
        java.util.Locale locale41 = null;
        int int42 = property40.getMaximumTextLength(locale41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime44 = property40.setCopy("de");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"de\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 7 + "'", int42 == 7);
    }

    @Test
    public void test07443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07443");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField32 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.dayOfYear();
        org.joda.time.DurationField durationField34 = zonedChronology28.millis();
        org.joda.time.Chronology chronology35 = zonedChronology28.withUTC();
        org.joda.time.Chronology chronology36 = zonedChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.weekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test07444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07444");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(0L);
        long long4 = dateTimeZone0.nextTransition((long) (-1));
        boolean boolean6 = dateTimeZone0.isStandardOffset((long) ' ');
        long long8 = dateTimeZone0.previousTransition(44L);
        java.lang.String str9 = dateTimeZone0.toString();
        java.lang.String str10 = dateTimeZone0.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 44L + "'", long8 == 44L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
    }

    @Test
    public void test07445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07445");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        java.lang.String str8 = property7.getName();
        java.lang.String str9 = property7.getName();
        int int10 = property7.getMinimumValueOverall();
        org.joda.time.DurationField durationField11 = property7.getDurationField();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T10:01:00.000" + "'", str6, "1970-01-01T10:01:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "monthOfYear" + "'", str9, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test07446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07446");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone31.previousTransition(100L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        int int39 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYearOfEra(1970);
        org.joda.time.DateTime dateTime42 = localDateTime41.toDateTime();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(0L, chronology44);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withYearOfEra(1970);
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        int int50 = dateTime42.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = localDateTime35.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime35.plus(readableDuration52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(0L, chronology55);
        java.util.Locale locale57 = java.util.Locale.US;
        boolean boolean58 = localDateTime56.equals((java.lang.Object) locale57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.dayOfWeek();
        int int60 = localDateTime56.getDayOfWeek();
        int int61 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        int[] intArray63 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime56, (long) 12);
        java.lang.String str64 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DurationField durationField67 = zonedChronology28.days();
        // The following exception was thrown during execution in test generation
        try {
            long long75 = zonedChronology28.getDateTimeMillis((int) (byte) 0, 35116539, 30, 63, 28, 52, 970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L + "'", long33 == 100L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1970, 1, 1, 12]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str64, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
    }

    @Test
    public void test07447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07447");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DurationField durationField32 = zonedChronology28.minutes();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, chronology34);
        java.util.Locale locale36 = java.util.Locale.US;
        boolean boolean37 = localDateTime35.equals((java.lang.Object) locale36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(0L, chronology41);
        int int43 = localDateTime42.getWeekyear();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusMinutes(100);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(0L, chronology52);
        int int54 = localDateTime53.getWeekyear();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withMillisOfSecond(100);
        org.joda.time.Chronology chronology57 = localDateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfCentury();
        org.joda.time.DurationField durationField59 = chronology57.days();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        long long62 = dateTimeZone60.previousTransition(100L);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withMillisOfSecond((int) (byte) 0);
        int[] intArray68 = chronology57.get((org.joda.time.ReadablePartial) localDateTime64, (long) (-1));
        org.joda.time.DateTimeField dateTimeField69 = chronology57.millisOfDay();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(0L, chronology71);
        int int73 = localDateTime72.getWeekyear();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withMillisOfSecond(100);
        int[] intArray77 = chronology57.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        zonedChronology28.validate((org.joda.time.ReadablePartial) localDateTime49, intArray77);
        org.joda.time.DateTimeField dateTimeField79 = zonedChronology28.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField80 = zonedChronology28.year();
        org.joda.time.DateTimeField dateTimeField81 = zonedChronology28.era();
        org.joda.time.DateTimeField dateTimeField82 = zonedChronology28.yearOfEra();
        org.joda.time.DurationField durationField83 = zonedChronology28.millis();
        // The following exception was thrown during execution in test generation
        try {
            long long89 = zonedChronology28.getDateTimeMillis(1644572136118L, 0, 1200000, 28800000, 23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1200000 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 100L + "'", long62 == 100L);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1970 + "'", int73 == 1970);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField83);
    }

    @Test
    public void test07448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07448");
        java.util.Locale locale1 = new java.util.Locale("45");
        java.util.Locale.setDefault(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "45");
    }

    @Test
    public void test07449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07449");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(0L);
        long long4 = dateTimeZone0.convertUTCToLocal(1L);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        long long9 = dateTimeZone0.getMillisKeepLocal(dateTimeZone7, (long) (-1));
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, chronology11);
        int int13 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfSecond(100);
        org.joda.time.Chronology chronology16 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfCentury();
        org.joda.time.DurationField durationField18 = chronology16.days();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        long long21 = dateTimeZone19.previousTransition(100L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMillisOfSecond((int) (byte) 0);
        int[] intArray27 = chronology16.get((org.joda.time.ReadablePartial) localDateTime23, (long) (-1));
        org.joda.time.DateTimeField dateTimeField28 = chronology16.millisOfDay();
        boolean boolean29 = dateTimeZone7.equals((java.lang.Object) chronology16);
        java.lang.String str30 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField31 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField32 = chronology16.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = chronology16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = chronology16.weekyear();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        long long37 = dateTimeZone35.previousTransition(0L);
        long long39 = dateTimeZone35.convertUTCToLocal(1L);
        long long41 = dateTimeZone35.convertUTCToLocal((long) (byte) 10);
        long long44 = dateTimeZone35.convertLocalToUTC((long) 44, false);
        long long46 = dateTimeZone35.nextTransition((long) 840);
        boolean boolean47 = dateTimeZone35.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology48 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        long long52 = dateTimeZone49.convertLocalToUTC(100L, true);
        long long55 = dateTimeZone49.convertLocalToUTC((long) 1970, false);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now();
        boolean boolean60 = dateTimeZone58.isLocalDateTimeGap(localDateTime59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(0L, chronology62);
        java.lang.String str65 = localDateTime63.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = localDateTime63.toString(dateTimeFormatter66);
        org.joda.time.LocalDateTime.Property property68 = localDateTime63.monthOfYear();
        org.joda.time.LocalDateTime localDateTime69 = property68.roundCeilingCopy();
        boolean boolean70 = dateTimeZone58.isLocalDateTimeGap(localDateTime69);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone58);
        boolean boolean72 = dateTimeZone58.isFixed();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 6, dateTimeZone58);
        long long75 = dateTimeZone49.getMillisKeepLocal(dateTimeZone58, 70L);
        java.lang.String str76 = dateTimeZone49.getID();
        org.joda.time.Chronology chronology77 = zonedChronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField78 = zonedChronology48.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField79 = zonedChronology48.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[UTC]" + "'", str30, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 44L + "'", long44 == 44L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 840L + "'", long46 == 840L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(zonedChronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L + "'", long52 == 100L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1970L + "'", long55 == 1970L);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u65e5\u672c" + "'", str65, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1970-01-01T10:01:00.000" + "'", str67, "1970-01-01T10:01:00.000");
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 70L + "'", long75 == 70L);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "UTC" + "'", str76, "UTC");
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
    }

    @Test
    public void test07450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07450");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        java.util.Date date7 = localDateTime6.toDate();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusWeeks(7);
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime12 = property10.addWrapFieldToCopy(27236745);
        long long13 = property10.remainder();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property10.getFieldType();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:01:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 60100L + "'", long13 == 60100L);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
    }

    @Test
    public void test07451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07451");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.era();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(0L, chronology31);
        int int33 = localDateTime32.getWeekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withDayOfMonth(10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(0L, chronology41);
        int int43 = localDateTime42.getWeekyear();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withMillisOfSecond(100);
        org.joda.time.Chronology chronology46 = localDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfCentury();
        org.joda.time.DurationField durationField48 = chronology46.days();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        long long51 = dateTimeZone49.previousTransition(100L);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withMillisOfSecond((int) (byte) 0);
        int[] intArray57 = chronology46.get((org.joda.time.ReadablePartial) localDateTime53, (long) (-1));
        zonedChronology28.validate((org.joda.time.ReadablePartial) localDateTime37, intArray57);
        org.joda.time.DateTimeField dateTimeField59 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField60 = zonedChronology28.hourOfDay();
        org.joda.time.DurationField durationField61 = zonedChronology28.centuries();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L + "'", long51 == 100L);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
    }

    @Test
    public void test07452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07452");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = timeZone1.getOffset((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int7 = timeZone1.getOffset((-625L));
        int int14 = timeZone1.getOffset(0, (int) (short) 100, 10, (int) (short) 1, 1, (int) ' ');
        java.time.ZoneId zoneId15 = timeZone1.toZoneId();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone(zoneId15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.Object obj18 = timeZone16.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test07453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07453");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = timeZone1.getOffset((long) (byte) 10);
        int int5 = timeZone1.getRawOffset();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone1.hasSameRules(timeZone6);
        timeZone6.setID("\u4e2d\u6587");
        boolean boolean10 = timeZone6.observesDaylightTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, chronology12);
        java.lang.String str15 = localDateTime13.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = localDateTime13.toString(dateTimeFormatter16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.monthOfYear();
        org.joda.time.Interval interval19 = property18.toInterval();
        long long20 = property18.remainder();
        org.joda.time.LocalDateTime localDateTime21 = property18.roundHalfFloorCopy();
        java.lang.String str22 = property18.getAsShortText();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        int int24 = property18.getMaximumTextLength(locale23);
        org.joda.time.LocalDateTime localDateTime26 = property18.addWrapFieldToCopy(100);
        int int27 = localDateTime26.size();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(0L, chronology29);
        int int31 = localDateTime30.getWeekyear();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withMillisOfSecond(100);
        org.joda.time.Chronology chronology34 = localDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.DurationField durationField36 = chronology34.days();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        long long39 = dateTimeZone37.previousTransition(100L);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withMillisOfSecond((int) (byte) 0);
        int[] intArray45 = chronology34.get((org.joda.time.ReadablePartial) localDateTime41, (long) (-1));
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        long long48 = dateTimeZone46.previousTransition(0L);
        long long50 = dateTimeZone46.convertUTCToLocal(1L);
        long long52 = dateTimeZone46.convertUTCToLocal((long) (byte) 10);
        org.joda.time.DateTime dateTime53 = localDateTime41.toDateTime(dateTimeZone46);
        long long56 = dateTimeZone46.adjustOffset(4363010L, false);
        org.joda.time.DateTime dateTime57 = localDateTime26.toDateTime(dateTimeZone46);
        java.util.Date date58 = localDateTime26.toDate();
        boolean boolean59 = timeZone6.inDaylightTime(date58);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u672c" + "'", str15, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T10:01:00.000" + "'", str17, "1970-01-01T10:01:00.000");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 36060000L + "'", long20 == 36060000L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Jan" + "'", str22, "Jan");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10L + "'", long52 == 10L);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 4363010L + "'", long56 == 4363010L);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(date58);
// flaky:         org.junit.Assert.assertEquals(date58.toString(), "Fri May 01 10:01:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test07454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07454");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = timeZone1.getOffset((long) (byte) 10);
        boolean boolean5 = timeZone1.observesDaylightTime();
        timeZone1.setRawOffset(20);
        timeZone1.setID("\u4e2d\u6587");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) "\u4e2d\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"??\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test07455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07455");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) '4');
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readablePeriod11);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate((int) (byte) 100, 10, 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundCeilingCopy();
        java.util.Locale locale21 = new java.util.Locale("", "\u4e2d\u56fd");
        java.lang.String str22 = property17.getAsText(locale21);
        org.joda.time.LocalDateTime localDateTime23 = property17.getLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = property17.addToCopy(1004068019673L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1004068019673 * 604800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T10:01:00.000" + "'", str6, "1970-01-01T10:01:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "\u4e2d\u56fd");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "39" + "'", str22, "39");
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test07456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07456");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        boolean boolean10 = dateTimeZone9.isFixed();
        org.joda.time.Chronology chronology11 = chronology6.withZone(dateTimeZone9);
        java.lang.String str12 = dateTimeZone9.getID();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone9);
        long long15 = dateTimeZone9.nextTransition((long) (short) 0);
        java.lang.String str17 = dateTimeZone9.getName(0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-00:00:00.001" + "'", str12, "-00:00:00.001");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-00:00:00.001" + "'", str17, "-00:00:00.001");
    }

    @Test
    public void test07457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07457");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("");
        org.joda.time.DateTimeZone dateTimeZone8 = provider0.getZone("");
        org.joda.time.DateTimeZone dateTimeZone10 = provider0.getZone("");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone13 = provider0.getZone("");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNull(dateTimeZone13);
    }

    @Test
    public void test07458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07458");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        int int9 = localDateTime8.getMonthOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, chronology11);
        int int13 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withYearOfEra(1970);
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(0L, chronology18);
        int int20 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYearOfEra(1970);
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        int int24 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(0L, chronology26);
        java.lang.String str29 = localDateTime27.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = localDateTime27.toString(dateTimeFormatter30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime27.monthOfYear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withSecondOfMinute((int) '4');
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        long long39 = dateTimeZone37.previousTransition(100L);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay((int) (short) 0);
        int int44 = localDateTime43.getEra();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(0L, chronology48);
        java.lang.String str51 = localDateTime49.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = localDateTime49.toString(dateTimeFormatter52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime49.monthOfYear();
        org.joda.time.Interval interval55 = property54.toInterval();
        org.joda.time.LocalDateTime localDateTime57 = property54.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property54.getFieldType();
        org.joda.time.LocalDateTime.Property property59 = localDateTime46.property(dateTimeFieldType58);
        int int60 = localDateTime34.indexOf(dateTimeFieldType58);
        boolean boolean61 = dateTime16.isSupported(dateTimeFieldType58);
        org.joda.time.LocalDateTime.Property property62 = localDateTime8.property(dateTimeFieldType58);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime8.withYear((int) '#');
        org.joda.time.LocalDateTime localDateTime66 = localDateTime8.minusHours(5);
        int int67 = localDateTime8.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime8.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime8.withWeekyear(263);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T10:01:00.000" + "'", str6, "1970-01-01T10:01:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u65e5\u672c" + "'", str29, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T10:01:00.000" + "'", str31, "1970-01-01T10:01:00.000");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u65e5\u672c" + "'", str51, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-01T10:01:00.000" + "'", str53, "1970-01-01T10:01:00.000");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
    }

    @Test
    public void test07459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07459");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone6.previousTransition(100L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (byte) 0);
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone14.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localDateTime2.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        long long21 = dateTime19.getMillis();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        boolean boolean24 = dateTimeZone22.isLocalDateTimeGap(localDateTime23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(0L, chronology26);
        java.lang.String str29 = localDateTime27.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = localDateTime27.toString(dateTimeFormatter30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime27.monthOfYear();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundCeilingCopy();
        boolean boolean34 = dateTimeZone22.isLocalDateTimeGap(localDateTime33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.plusMillis((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        long long39 = dateTimeZone37.previousTransition(100L);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay((int) (short) 0);
        int int44 = localDateTime43.getEra();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(0L, chronology48);
        java.lang.String str51 = localDateTime49.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = localDateTime49.toString(dateTimeFormatter52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime49.monthOfYear();
        org.joda.time.Interval interval55 = property54.toInterval();
        org.joda.time.LocalDateTime localDateTime57 = property54.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property54.getFieldType();
        org.joda.time.LocalDateTime.Property property59 = localDateTime46.property(dateTimeFieldType58);
        boolean boolean60 = localDateTime36.isSupported(dateTimeFieldType58);
        boolean boolean61 = dateTime19.isSupported(dateTimeFieldType58);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(0L, chronology63);
        int int65 = localDateTime64.getWeekyear();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.withMillisOfSecond(100);
        org.joda.time.Chronology chronology68 = localDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.yearOfCentury();
        org.joda.time.DurationField durationField70 = chronology68.eras();
        org.joda.time.Chronology chronology71 = chronology68.withUTC();
        java.lang.String str72 = chronology71.toString();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(chronology71);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(0L, chronology75);
        int int77 = localDateTime76.getWeekyear();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.UTC;
        long long82 = dateTimeZone80.previousTransition(100L);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology83);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.withMillisOfSecond((int) (byte) 0);
        int int87 = localDateTime76.compareTo((org.joda.time.ReadablePartial) localDateTime84);
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.UTC;
        long long91 = dateTimeZone88.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime92 = new org.joda.time.LocalDateTime(dateTimeZone88);
        org.joda.time.DateTime dateTime93 = localDateTime76.toDateTime(dateTimeZone88);
        org.joda.time.DateTime dateTime94 = localDateTime73.toDateTime((org.joda.time.ReadableInstant) dateTime93);
        boolean boolean95 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime94);
        org.joda.time.Instant instant96 = dateTime19.toInstant();
        long long97 = dateTime19.getMillis();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 36060000L + "'", long21 == 36060000L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u65e5\u672c" + "'", str29, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T10:01:00.000" + "'", str31, "1970-01-01T10:01:00.000");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u65e5\u672c" + "'", str51, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-01T10:01:00.000" + "'", str53, "1970-01-01T10:01:00.000");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1970 + "'", int65 == 1970);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ISOChronology[UTC]" + "'", str72, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1970 + "'", int77 == 1970);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 100L + "'", long82 == 100L);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 100L + "'", long91 == 100L);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(instant96);
// flaky:         org.junit.Assert.assertTrue("'" + long97 + "' != '" + 36060000L + "'", long97 == 36060000L);
    }

    @Test
    public void test07460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07460");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        java.lang.String str12 = localDateTime10.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = localDateTime10.toString(dateTimeFormatter13);
        boolean boolean15 = localDateTime2.isAfter((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.plusYears((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        long long21 = dateTimeZone19.previousTransition(0L);
        long long23 = dateTimeZone19.convertUTCToLocal(1L);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        long long28 = dateTimeZone19.getMillisKeepLocal(dateTimeZone26, (long) (-1));
        java.lang.String str30 = dateTimeZone26.getName((long) 70);
        java.util.Locale locale32 = java.util.Locale.JAPAN;
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.lang.String str34 = locale32.getDisplayCountry(locale33);
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str36 = locale33.getDisplayName(locale35);
        java.lang.String str37 = dateTimeZone26.getShortName((long) 4, locale33);
        java.lang.String str38 = localDateTime10.toString("\u4e2d\u56fd\u8a9e", locale33);
        java.lang.String str39 = locale33.getDisplayName();
        java.util.Locale locale40 = locale33.stripExtensions();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T10:01:00.000" + "'", str6, "1970-01-01T10:01:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u672c" + "'", str12, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T10:01:00.000" + "'", str14, "1970-01-01T10:01:00.000");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u65e5\u672c" + "'", str34, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str36, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str38, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Japanese (Japan)" + "'", str39, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja_JP");
    }

    @Test
    public void test07461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07461");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minus(readableDuration6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(0L, chronology10);
        int int12 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone15.previousTransition(100L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfSecond((int) (byte) 0);
        int int22 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        long long26 = dateTimeZone23.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime28 = localDateTime11.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(0L, chronology30);
        java.lang.String str33 = localDateTime31.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = localDateTime31.toString(dateTimeFormatter34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        java.lang.String str40 = localDateTime38.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = localDateTime38.toString(dateTimeFormatter41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime38.monthOfYear();
        org.joda.time.Interval interval44 = property43.toInterval();
        long long45 = property43.remainder();
        org.joda.time.LocalDateTime localDateTime46 = property43.roundHalfFloorCopy();
        java.lang.String str47 = property43.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property43.getFieldType();
        int int49 = localDateTime31.get(dateTimeFieldType48);
        int int50 = dateTime28.get(dateTimeFieldType48);
        long long51 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalDateTime localDateTime53 = property8.addToCopy(419L);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withCenturyOfEra(999);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withWeekyear(47);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u65e5\u672c" + "'", str33, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T10:01:00.000" + "'", str35, "1970-01-01T10:01:00.000");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u65e5\u672c" + "'", str40, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970-01-01T10:01:00.000" + "'", str42, "1970-01-01T10:01:00.000");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(interval44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 36060000L + "'", long45 == 36060000L);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Jan" + "'", str47, "Jan");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
    }

    @Test
    public void test07462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07462");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.lang.String str2 = locale1.getDisplayCountry();
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale1.getDisplayLanguage(locale3);
        java.lang.String str5 = locale1.getDisplayVariant();
        java.lang.String str6 = locale0.getDisplayVariant(locale1);
        java.lang.String str8 = locale1.getExtension('a');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "45");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "45" + "'", str4, "45");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test07463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07463");
        java.util.Locale locale3 = new java.util.Locale("TW", "\u30a4\u30bf\u30ea\u30a2\u8a9e", "weekOfWeekyear");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale3.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u30a4\u30bf\u30ea\u30a2\u8a9e_weekOfWeekyear");
    }

    @Test
    public void test07464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07464");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("");
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone7 = provider0.getZone("\u6708");
        java.util.Set<java.lang.String> strSet8 = provider0.getAvailableIDs();
        int int9 = strSet8.size();
        strSet8.clear();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 575 + "'", int9 == 575);
    }

    @Test
    public void test07465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07465");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.lang.String str11 = property7.getAsShortText();
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        int int13 = property7.getMaximumTextLength(locale12);
        org.joda.time.LocalDateTime localDateTime15 = property7.addWrapFieldToCopy(100);
        int int16 = localDateTime15.size();
        int int17 = localDateTime15.getDayOfYear();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T10:01:00.000" + "'", str6, "1970-01-01T10:01:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 36060000L + "'", long9 == 36060000L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 121 + "'", int17 == 121);
    }

    @Test
    public void test07466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07466");
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale locale4 = java.util.Locale.JAPAN;
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.lang.String str7 = locale4.getDisplayName();
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str12 = locale9.getDisplayName(locale11);
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.lang.String str15 = locale13.getDisplayCountry(locale14);
        java.lang.String str16 = locale13.getDisplayName();
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.lang.String str24 = locale22.getDisplayCountry(locale23);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.lang.String str28 = locale26.getDisplayCountry(locale27);
        java.util.Locale[] localeArray29 = new java.util.Locale[] { locale4, locale9, locale13, locale17, locale20, locale21, locale22, locale25, locale26 };
        java.util.ArrayList<java.util.Locale> localeList30 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList30, localeArray29);
        java.util.List<java.util.Locale> localeList32 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList30);
        java.lang.String[] strArray37 = new java.lang.String[] { "\u65e5\u6587\u65e5\u672c)", "CN", "\u4e2d\u6587", "\u65e5\u6587\u65e5\u672c)" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        boolean boolean40 = strSet38.isEmpty();
        java.util.Locale.FilteringMode filteringMode41 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet38, filteringMode41);
        java.util.Spliterator<java.lang.String> strSpliterator43 = strSet38.spliterator();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(0L, chronology45);
        int int47 = localDateTime46.getWeekyear();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withMillisOfSecond(100);
        org.joda.time.Chronology chronology50 = localDateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.yearOfCentury();
        org.joda.time.DurationField durationField52 = chronology50.days();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        long long55 = dateTimeZone53.previousTransition(100L);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withMillisOfSecond((int) (byte) 0);
        int[] intArray61 = chronology50.get((org.joda.time.ReadablePartial) localDateTime57, (long) (-1));
        org.joda.time.DateTimeField dateTimeField62 = chronology50.millisOfDay();
        org.joda.time.DurationField durationField63 = chronology50.hours();
        org.joda.time.DurationField durationField64 = chronology50.weeks();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        long long71 = dateTimeZone67.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology72 = org.joda.time.chrono.ZonedChronology.getInstance(chronology50, dateTimeZone67);
        org.joda.time.DateTimeField dateTimeField73 = zonedChronology72.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField74 = zonedChronology72.millisOfSecond();
        org.joda.time.DurationField durationField75 = zonedChronology72.weekyears();
        org.joda.time.DateTimeField dateTimeField76 = zonedChronology72.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField77 = zonedChronology72.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField78 = zonedChronology72.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField79 = zonedChronology72.weekOfWeekyear();
        org.joda.time.Chronology chronology80 = zonedChronology72.withUTC();
        boolean boolean81 = strSet38.remove((java.lang.Object) zonedChronology72);
        org.joda.time.DateTimeField dateTimeField82 = zonedChronology72.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.Chronology chronology84 = zonedChronology72.withZone(dateTimeZone83);
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime((-35519956L), (org.joda.time.Chronology) zonedChronology72);
        org.joda.time.DateTimeField dateTimeField86 = zonedChronology72.centuryOfEra();
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u672c" + "'", str6, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Japanese (Japan)" + "'", str7, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u65e5\u672c" + "'", str10, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str12, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u672c" + "'", str15, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Japanese (Japan)" + "'", str16, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u65e5\u672c" + "'", str19, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u65e5\u672c" + "'", str24, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u65e5\u672c" + "'", str28, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localeList32);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + filteringMode41 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode41.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strSpliterator43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L + "'", long55 == 100L);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 10L + "'", long71 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField86);
    }

    @Test
    public void test07467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07467");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        java.lang.String str36 = localDateTime34.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = localDateTime34.toString(dateTimeFormatter37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime34.monthOfYear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.withMillisOfDay(100);
        long long43 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime41, (long) 59);
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology28.millisOfSecond();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T10:01:00.000" + "'", str38, "1970-01-01T10:01:00.000");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test07468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07468");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfDay();
        long long39 = zonedChronology28.getDateTimeMillis(0, 1, (int) (byte) 1, 20);
        org.joda.time.DateTimeZone dateTimeZone40 = zonedChronology28.getZone();
        org.joda.time.Chronology chronology41 = zonedChronology28.withUTC();
        org.joda.time.DurationField durationField42 = zonedChronology28.centuries();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology28.year();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology28.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long52 = zonedChronology28.getDateTimeMillis((int) ' ', 30, 82045684, 77, 61, (int) 'x', (-100));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 77 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-62167219199980L) + "'", long39 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test07469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07469");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        long long33 = zonedChronology28.add(0L, (-62167219199980L), (int) (short) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, chronology36);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMillisOfSecond(100);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DurationField durationField43 = chronology41.millis();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '#', chronology41);
        int[] intArray47 = zonedChronology28.get((org.joda.time.ReadablePartial) localDateTime45, (long) 1);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology28.hourOfHalfday();
        org.joda.time.Chronology chronology50 = zonedChronology28.withUTC();
        org.joda.time.Chronology chronology51 = zonedChronology28.withUTC();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-62167219199980L) + "'", long33 == (-62167219199980L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1970, 1, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    public void test07470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07470");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(0L, chronology4);
        java.util.Locale locale6 = java.util.Locale.US;
        boolean boolean7 = localDateTime5.equals((java.lang.Object) locale6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minus(readableDuration9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, chronology13);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        long long20 = dateTimeZone18.previousTransition(100L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withMillisOfSecond((int) (byte) 0);
        int int25 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        long long29 = dateTimeZone26.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = localDateTime14.toDateTime(dateTimeZone26);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        java.lang.String str36 = localDateTime34.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = localDateTime34.toString(dateTimeFormatter37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(0L, chronology40);
        java.lang.String str43 = localDateTime41.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = localDateTime41.toString(dateTimeFormatter44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime41.monthOfYear();
        org.joda.time.Interval interval47 = property46.toInterval();
        long long48 = property46.remainder();
        org.joda.time.LocalDateTime localDateTime49 = property46.roundHalfFloorCopy();
        java.lang.String str50 = property46.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property46.getFieldType();
        int int52 = localDateTime34.get(dateTimeFieldType51);
        int int53 = dateTime31.get(dateTimeFieldType51);
        long long54 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime31);
        int int55 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime31);
        long long56 = dateTime31.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L + "'", long29 == 100L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T10:01:00.000" + "'", str38, "1970-01-01T10:01:00.000");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u65e5\u672c" + "'", str43, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01T10:01:00.000" + "'", str45, "1970-01-01T10:01:00.000");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(interval47);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 36060000L + "'", long48 == 36060000L);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Jan" + "'", str50, "Jan");
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 36060000L + "'", long56 == 36060000L);
    }

    @Test
    public void test07471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07471");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        boolean boolean35 = dateTimeZone33.isLocalDateTimeGap(localDateTime34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(0L, chronology37);
        java.lang.String str40 = localDateTime38.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = localDateTime38.toString(dateTimeFormatter41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime38.monthOfYear();
        org.joda.time.LocalDateTime localDateTime44 = property43.roundCeilingCopy();
        boolean boolean45 = dateTimeZone33.isLocalDateTimeGap(localDateTime44);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone33);
        java.lang.String str47 = dateTimeZone33.getID();
        boolean boolean49 = dateTimeZone33.equals((java.lang.Object) "eng");
        java.lang.String str51 = dateTimeZone33.getName(1644572123792L);
        org.joda.time.Chronology chronology52 = zonedChronology28.withZone(dateTimeZone33);
        int int54 = dateTimeZone33.getStandardOffset(2825921L);
        long long58 = dateTimeZone33.convertLocalToUTC(1644572123200L, false, 36359120L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u65e5\u672c" + "'", str40, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970-01-01T10:01:00.000" + "'", str42, "1970-01-01T10:01:00.000");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1644572123200L + "'", long58 == 1644572123200L);
    }

    @Test
    public void test07472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07472");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        java.lang.String str11 = property7.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property7.getFieldType();
        org.joda.time.LocalDateTime localDateTime13 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = property14.getLocalDateTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readableDuration16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withSecondOfMinute(3570);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3570 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T10:01:00.000" + "'", str6, "1970-01-01T10:01:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 36060000L + "'", long9 == 36060000L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test07473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07473");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis((int) (short) 1);
        int int10 = localDateTime9.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withEra((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.minusMinutes((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusYears((int) (byte) 0);
        int int17 = localDateTime14.getMonthOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(0L, chronology19);
        int int21 = localDateTime20.getWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withYearOfEra(1970);
        org.joda.time.DateTime dateTime24 = localDateTime23.toDateTime();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(0L, chronology26);
        int int28 = localDateTime27.getWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYearOfEra(1970);
        org.joda.time.DateTime dateTime31 = localDateTime30.toDateTime();
        int int32 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, chronology34);
        java.lang.String str37 = localDateTime35.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = localDateTime35.toString(dateTimeFormatter38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime35.monthOfYear();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withSecondOfMinute((int) '4');
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        long long47 = dateTimeZone45.previousTransition(100L);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withHourOfDay((int) (short) 0);
        int int52 = localDateTime51.getEra();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(0L, chronology56);
        java.lang.String str59 = localDateTime57.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = localDateTime57.toString(dateTimeFormatter60);
        org.joda.time.LocalDateTime.Property property62 = localDateTime57.monthOfYear();
        org.joda.time.Interval interval63 = property62.toInterval();
        org.joda.time.LocalDateTime localDateTime65 = property62.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property62.getFieldType();
        org.joda.time.LocalDateTime.Property property67 = localDateTime54.property(dateTimeFieldType66);
        int int68 = localDateTime42.indexOf(dateTimeFieldType66);
        boolean boolean69 = dateTime24.isSupported(dateTimeFieldType66);
        org.joda.time.DateTimeZone dateTimeZone70 = dateTime24.getZone();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.UTC;
        long long74 = dateTimeZone71.convertLocalToUTC(100L, true);
        java.lang.String str76 = dateTimeZone71.getName(1L);
        java.util.Locale locale78 = null;
        java.lang.String str79 = dateTimeZone71.getShortName((long) (short) 100, locale78);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone71);
        long long82 = dateTimeZone70.getMillisKeepLocal(dateTimeZone71, (long) 23);
        org.joda.time.DateTime dateTime83 = localDateTime14.toDateTime(dateTimeZone70);
        java.lang.String str84 = dateTimeZone70.getID();
        java.lang.String str85 = dateTimeZone70.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u65e5\u672c" + "'", str37, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T10:01:00.000" + "'", str39, "1970-01-01T10:01:00.000");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u65e5\u672c" + "'", str59, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970-01-01T10:01:00.000" + "'", str61, "1970-01-01T10:01:00.000");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 100L + "'", long74 == 100L);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00" + "'", str76, "+00:00");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00" + "'", str79, "+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + 36060023L + "'", long82 == 36060023L);
        org.junit.Assert.assertNotNull(dateTime83);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+10:01" + "'", str84, "+10:01");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+10:01" + "'", str85, "+10:01");
    }

    @Test
    public void test07474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07474");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.clockhourOfDay();
        long long39 = zonedChronology28.getDateTimeMillis(0, 1, (int) (byte) 1, 20);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology28.millisOfDay();
        org.joda.time.Chronology chronology43 = zonedChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology28.hourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology28.yearOfCentury();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-62167219199980L) + "'", long39 == (-62167219199980L));
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
    }

    @Test
    public void test07475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07475");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        java.lang.String str12 = localDateTime10.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = localDateTime10.toString(dateTimeFormatter13);
        long long16 = chronology6.set((org.joda.time.ReadablePartial) localDateTime10, (long) '4');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime10.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime10.plusWeeks((int) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDateTime10.getFieldTypes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u672c" + "'", str12, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.000" + "'", str14, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
    }

    @Test
    public void test07476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07476");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 0);
        boolean boolean3 = dateTimeZone2.isFixed();
        int int5 = dateTimeZone2.getOffsetFromLocal((long) 'u');
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(0L, chronology7);
        java.lang.String str10 = localDateTime8.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = localDateTime8.toString(dateTimeFormatter11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.monthOfYear();
        org.joda.time.Interval interval14 = property13.toInterval();
        long long15 = property13.remainder();
        org.joda.time.LocalDateTime localDateTime16 = property13.roundHalfFloorCopy();
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        int int18 = property13.getMaximumTextLength(locale17);
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.lang.String str20 = locale19.getCountry();
        int int21 = property13.getMaximumTextLength(locale19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(0L, chronology23);
        int int25 = localDateTime24.getWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone28.previousTransition(100L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withMillisOfSecond((int) (byte) 0);
        int int35 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        long long39 = dateTimeZone36.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = localDateTime24.toDateTime(dateTimeZone36);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(0L, chronology43);
        java.lang.String str46 = localDateTime44.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = localDateTime44.toString(dateTimeFormatter47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(0L, chronology50);
        java.lang.String str53 = localDateTime51.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = localDateTime51.toString(dateTimeFormatter54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime51.monthOfYear();
        org.joda.time.Interval interval57 = property56.toInterval();
        long long58 = property56.remainder();
        org.joda.time.LocalDateTime localDateTime59 = property56.roundHalfFloorCopy();
        java.lang.String str60 = property56.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property56.getFieldType();
        int int62 = localDateTime44.get(dateTimeFieldType61);
        int int63 = dateTime41.get(dateTimeFieldType61);
        int int64 = property13.compareTo((org.joda.time.ReadableInstant) dateTime41);
        int int65 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u65e5\u672c" + "'", str10, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T00:00:00.000" + "'", str12, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "CN" + "'", str20, "CN");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u65e5\u672c" + "'", str46, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T00:00:00.000" + "'", str48, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u65e5\u672c" + "'", str53, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01T00:00:00.000" + "'", str55, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Jan" + "'", str60, "Jan");
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test07477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07477");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("+00:00:00.020");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=+00:00:00.020");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07478");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("");
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        boolean boolean6 = strSet5.isEmpty();
        java.util.Iterator<java.lang.String> strItor7 = strSet5.iterator();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strItor7);
    }

    @Test
    public void test07479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07479");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(0L, chronology2);
        int int4 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMillisOfSecond(100);
        org.joda.time.Chronology chronology7 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.days();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone10.previousTransition(100L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfSecond((int) (byte) 0);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePartial) localDateTime14, (long) (-1));
        org.joda.time.DateTimeField dateTimeField19 = chronology7.millisOfDay();
        org.joda.time.DurationField durationField20 = chronology7.hours();
        org.joda.time.DurationField durationField21 = chronology7.weeks();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        long long28 = dateTimeZone24.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology29 = org.joda.time.chrono.ZonedChronology.getInstance(chronology7, dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology29.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology29.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology29.hourOfHalfday();
        org.joda.time.DurationField durationField34 = zonedChronology29.years();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        long long38 = zonedChronology29.add(readablePeriod35, (long) 29, 170);
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology29.millisOfDay();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(0L, (org.joda.time.Chronology) zonedChronology29);
        int int41 = localDateTime40.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 29L + "'", long38 == 29L);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test07480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07480");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-11T09:47:40.457");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test07481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07481");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        java.util.Date date7 = localDateTime6.toDate();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusWeeks(7);
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime12 = property10.addWrapFieldToCopy(27236745);
        long long13 = property10.remainder();
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("");
        int int16 = property10.getMaximumShortTextLength(locale15);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
    }

    @Test
    public void test07482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07482");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("0001-01-01T00:00:00.000");
        java.lang.String str5 = nameProvider0.getShortName(locale2, "", "hi!");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale9 = new java.util.Locale("JP");
        java.lang.String str12 = nameProvider0.getName(locale9, "\u6708", "43");
        java.util.Locale locale15 = new java.util.Locale("\u65e5\u672c", "hi!");
        java.util.Locale locale16 = locale15.stripExtensions();
        java.util.Locale locale17 = locale15.stripExtensions();
        java.lang.String str18 = locale15.getLanguage();
        java.lang.String str21 = nameProvider0.getName(locale15, "2022-02-11T09:46:05.988", "1964-06-20T08:00:00.000");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals(locale9.toString(), "jp");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals(locale15.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "\u65e5\u672c_HI!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c" + "'", str18, "\u65e5\u672c");
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test07483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07483");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long2 = dateTimeZone0.previousTransition(100L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay((int) (short) 0);
        int int7 = localDateTime6.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusDays(4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plus(readableDuration10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readableDuration12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = property14.addWrapFieldToCopy(1938);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays(82045684);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test07484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07484");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.weekyear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(0L, chronology33);
        java.lang.String str36 = localDateTime34.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = localDateTime34.toString(dateTimeFormatter37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime34.monthOfYear();
        org.joda.time.LocalDateTime localDateTime40 = property39.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withHourOfDay(0);
        java.util.Date date43 = localDateTime40.toDate();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.fromDateFields(date43);
        long long46 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime44, 100L);
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        boolean boolean51 = dateTimeZone49.isLocalDateTimeGap(localDateTime50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(0L, chronology53);
        java.lang.String str56 = localDateTime54.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = null;
        java.lang.String str58 = localDateTime54.toString(dateTimeFormatter57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime54.monthOfYear();
        org.joda.time.LocalDateTime localDateTime60 = property59.roundCeilingCopy();
        boolean boolean61 = dateTimeZone49.isLocalDateTimeGap(localDateTime60);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone49);
        org.joda.time.Chronology chronology63 = zonedChronology28.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField64 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology28.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long73 = zonedChronology28.getDateTimeMillis(263, 86399999, 1967, (int) (byte) 10, (int) (byte) -1, 365, 86399999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c" + "'", str36, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.000" + "'", str38, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u65e5\u672c" + "'", str56, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970-01-01T00:00:00.000" + "'", str58, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test07485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07485");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        java.lang.String str2 = timeZone1.getID();
        java.util.TimeZone.setDefault(timeZone1);
        boolean boolean4 = timeZone1.observesDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test07486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07486");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(0L, chronology3);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withMillisOfSecond(100);
        org.joda.time.Chronology chronology8 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfCentury();
        org.joda.time.DurationField durationField10 = chronology8.days();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        long long13 = dateTimeZone11.previousTransition(100L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) (byte) 0);
        int[] intArray19 = chronology8.get((org.joda.time.ReadablePartial) localDateTime15, (long) (-1));
        org.joda.time.DateTimeField dateTimeField20 = chronology8.millisOfDay();
        org.joda.time.DurationField durationField21 = chronology8.hours();
        org.joda.time.DurationField durationField22 = chronology8.weeks();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long29 = dateTimeZone25.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology30 = org.joda.time.chrono.ZonedChronology.getInstance(chronology8, dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology30.halfdayOfDay();
        long long35 = zonedChronology30.add((long) (byte) 100, 10L, (int) (byte) 0);
        org.joda.time.Chronology chronology36 = zonedChronology30.withUTC();
        boolean boolean37 = strSet1.remove((java.lang.Object) chronology36);
        boolean boolean38 = strSet1.isEmpty();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test07487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07487");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.convertLocalToUTC(100L, true);
        java.lang.String str5 = dateTimeZone0.getName(1L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(0L, chronology7);
        int int9 = localDateTime8.getWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withMillisOfSecond(100);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology12.days();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone15.previousTransition(100L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfSecond((int) (byte) 0);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePartial) localDateTime19, (long) (-1));
        org.joda.time.DateTimeField dateTimeField24 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField25 = chronology12.hours();
        org.joda.time.DurationField durationField26 = chronology12.weeks();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        long long33 = dateTimeZone29.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology34 = org.joda.time.chrono.ZonedChronology.getInstance(chronology12, dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology34.millisOfSecond();
        org.joda.time.DurationField durationField37 = zonedChronology34.months();
        java.lang.String str38 = zonedChronology34.toString();
        java.lang.String str39 = zonedChronology34.toString();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology34.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology34.weekOfWeekyear();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        java.lang.String str44 = timeZone43.getID();
        int int45 = timeZone43.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.Chronology chronology47 = zonedChronology34.withZone(dateTimeZone46);
        long long49 = dateTimeZone0.getMillisKeepLocal(dateTimeZone46, (long) 39);
        long long52 = dateTimeZone0.adjustOffset(20L, true);
        java.lang.String str54 = dateTimeZone0.getNameKey(35155686L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str38, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str39, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "GMT" + "'", str44, "GMT");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 39L + "'", long49 == 39L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 20L + "'", long52 == 20L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "UTC" + "'", str54, "UTC");
    }

    @Test
    public void test07488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07488");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(0L, chronology3);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfEra(1970);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withSecondOfMinute(32);
        boolean boolean12 = localDateTime0.isAfter((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusDays(5);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfSecond();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2022 + "'", int1 == 2022);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test07489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07489");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.util.Locale locale4 = java.util.Locale.JAPAN;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale3.getDisplayName();
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.String str15 = locale12.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale3, locale8, locale12, locale16, locale19, locale20, locale21, locale24, locale25 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList29);
        java.util.stream.Stream<java.util.Locale> localeStream32 = localeList29.parallelStream();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, chronology34);
        int int36 = localDateTime35.getWeekyear();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withMillisOfSecond(100);
        org.joda.time.Chronology chronology39 = localDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfCentury();
        org.joda.time.DurationField durationField41 = chronology39.days();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        long long44 = dateTimeZone42.previousTransition(100L);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withMillisOfSecond((int) (byte) 0);
        int[] intArray50 = chronology39.get((org.joda.time.ReadablePartial) localDateTime46, (long) (-1));
        org.joda.time.DateTimeField dateTimeField51 = chronology39.millisOfDay();
        org.joda.time.DurationField durationField52 = chronology39.hours();
        org.joda.time.DurationField durationField53 = chronology39.weeks();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        long long60 = dateTimeZone56.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology61 = org.joda.time.chrono.ZonedChronology.getInstance(chronology39, dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField62 = zonedChronology61.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField63 = zonedChronology61.millisOfSecond();
        org.joda.time.DurationField durationField64 = zonedChronology61.months();
        java.lang.String str65 = zonedChronology61.toString();
        java.lang.String str66 = zonedChronology61.toString();
        org.joda.time.DateTimeField dateTimeField67 = zonedChronology61.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.UTC;
        long long72 = dateTimeZone69.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 1, dateTimeZone69);
        org.joda.time.Chronology chronology74 = zonedChronology61.withZone(dateTimeZone69);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((java.lang.Object) localeList29, chronology74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.ArrayList");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u65e5\u672c" + "'", str5, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Japanese (Japan)" + "'", str6, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c" + "'", str9, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str11, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c" + "'", str14, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Japanese (Japan)" + "'", str15, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c" + "'", str18, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u672c" + "'", str27, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(localeStream32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L + "'", long44 == 100L);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10L + "'", long60 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str65, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str66, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 100L + "'", long72 == 100L);
        org.junit.Assert.assertNotNull(chronology74);
    }

    @Test
    public void test07490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07490");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        long long9 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfSecond();
        int int12 = property11.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime13 = property11.roundHalfCeilingCopy();
        int int14 = property11.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property11.getFieldType();
        org.joda.time.DateTimeField dateTimeField16 = property11.getField();
        int int17 = property11.getMinimumValueOverall();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000" + "'", str6, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 999 + "'", int14 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test07491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07491");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        java.lang.String str32 = zonedChronology28.toString();
        java.lang.String str33 = zonedChronology28.toString();
        long long37 = zonedChronology28.add((long) 9, 35L, (int) (short) 1);
        org.joda.time.Chronology chronology38 = zonedChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology28.hourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = zonedChronology28.getZone();
        org.joda.time.DurationField durationField42 = zonedChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology28.era();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology28.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology28.year();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str32, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str33, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 44L + "'", long37 == 44L);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test07492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07492");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(1970);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readableDuration6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology9);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYearOfEra(1970);
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime15 = localDateTime5.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime5.minuteOfHour();
        org.joda.time.LocalDateTime.Property property17 = localDateTime5.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(0L, chronology19);
        int int21 = localDateTime20.getWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withMillisOfSecond(100);
        org.joda.time.Chronology chronology24 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfCentury();
        org.joda.time.DurationField durationField26 = chronology24.eras();
        org.joda.time.Chronology chronology27 = chronology24.withUTC();
        java.lang.String str28 = chronology27.toString();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(0L, chronology31);
        int int33 = localDateTime32.getWeekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        long long38 = dateTimeZone36.previousTransition(100L);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withMillisOfSecond((int) (byte) 0);
        int int43 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        long long47 = dateTimeZone44.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(dateTimeZone44);
        org.joda.time.DateTime dateTime49 = localDateTime32.toDateTime(dateTimeZone44);
        org.joda.time.DateTime dateTime50 = localDateTime29.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Instant instant51 = dateTime49.toInstant();
        org.joda.time.Chronology chronology52 = dateTime49.getChronology();
        int int53 = property17.getDifference((org.joda.time.ReadableInstant) dateTime49);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[UTC]" + "'", str28, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L + "'", long38 == 100L);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test07493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07493");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.millis();
        org.joda.time.DurationField durationField9 = chronology6.months();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.era();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(0L, chronology14);
        int int16 = localDateTime15.getWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withMillisOfSecond(100);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        long long21 = dateTimeZone19.previousTransition(100L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMillisOfSecond((int) (byte) 0);
        int int26 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone27.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = localDateTime15.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        long long34 = dateTime32.getMillis();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        boolean boolean37 = dateTimeZone35.isLocalDateTimeGap(localDateTime36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(0L, chronology39);
        java.lang.String str42 = localDateTime40.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = localDateTime40.toString(dateTimeFormatter43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime40.monthOfYear();
        org.joda.time.LocalDateTime localDateTime46 = property45.roundCeilingCopy();
        boolean boolean47 = dateTimeZone35.isLocalDateTimeGap(localDateTime46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.plusMillis((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        long long52 = dateTimeZone50.previousTransition(100L);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withHourOfDay((int) (short) 0);
        int int57 = localDateTime56.getEra();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.minusMillis((int) (short) 1);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(0L, chronology61);
        java.lang.String str64 = localDateTime62.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = null;
        java.lang.String str66 = localDateTime62.toString(dateTimeFormatter65);
        org.joda.time.LocalDateTime.Property property67 = localDateTime62.monthOfYear();
        org.joda.time.Interval interval68 = property67.toInterval();
        org.joda.time.LocalDateTime localDateTime70 = property67.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property67.getFieldType();
        org.joda.time.LocalDateTime.Property property72 = localDateTime59.property(dateTimeFieldType71);
        boolean boolean73 = localDateTime49.isSupported(dateTimeFieldType71);
        boolean boolean74 = dateTime32.isSupported(dateTimeFieldType71);
        boolean boolean75 = localDateTime10.isSupported(dateTimeFieldType71);
        int int76 = localDateTime10.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u65e5\u672c" + "'", str42, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01T00:00:00.000" + "'", str44, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L + "'", long52 == 100L);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u65e5\u672c" + "'", str64, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01T00:00:00.000" + "'", str66, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 49 + "'", int76 == 49);
    }

    @Test
    public void test07494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07494");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("\u30ab\u30ca\u30c0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '????' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07495");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.util.Locale locale3 = java.util.Locale.US;
        boolean boolean4 = localDateTime2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(9, (int) '4');
        org.joda.time.DateTime dateTime9 = localDateTime2.toDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, chronology12);
        java.lang.String str15 = localDateTime13.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = localDateTime13.toString(dateTimeFormatter16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.monthOfYear();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.plus(readableDuration19);
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime21.getZone();
        boolean boolean23 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime21);
        java.lang.String str24 = dateTime9.toString();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u672c" + "'", str15, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.000" + "'", str17, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.000+09:52" + "'", str24, "1970-01-01T00:00:00.000+09:52");
    }

    @Test
    public void test07496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07496");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.minuteOfDay();
        org.joda.time.DurationField durationField33 = zonedChronology28.halfdays();
        org.joda.time.DurationField durationField34 = zonedChronology28.seconds();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.minuteOfHour();
        org.joda.time.Chronology chronology37 = zonedChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.millisOfDay();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology28);
        org.joda.time.DurationField durationField40 = zonedChronology28.weeks();
        // The following exception was thrown during execution in test generation
        try {
            long long48 = zonedChronology28.getDateTimeMillis(0, 1963, 1899, 32, 35319436, 3006970, 1975);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test07497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07497");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone32 = zonedChronology28.getZone();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, chronology34);
        java.util.Locale locale36 = java.util.Locale.US;
        boolean boolean37 = localDateTime35.equals((java.lang.Object) locale36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.minus(readableDuration39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.minus(readableDuration41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(0L, chronology44);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withDayOfMonth(10);
        int int53 = localDateTime50.getEra();
        int[] intArray54 = localDateTime50.getValues();
        zonedChronology28.validate((org.joda.time.ReadablePartial) localDateTime42, intArray54);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        long long58 = dateTimeZone56.previousTransition(100L);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withHourOfDay((int) (short) 0);
        java.util.Date date63 = localDateTime62.toDate();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.minusWeeks(7);
        long long67 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime62, (long) (byte) 0);
        org.joda.time.DateTimeField dateTimeField68 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField69 = zonedChronology28.era();
        org.joda.time.DateTimeField dateTimeField70 = zonedChronology28.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 0);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.UTC;
        long long76 = dateTimeZone73.getMillisKeepLocal(dateTimeZone74, 120L);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.UTC;
        long long79 = dateTimeZone77.previousTransition(0L);
        long long81 = dateTimeZone77.convertUTCToLocal(1L);
        java.util.TimeZone timeZone83 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forTimeZone(timeZone83);
        long long86 = dateTimeZone77.getMillisKeepLocal(dateTimeZone84, (long) (-1));
        long long90 = dateTimeZone77.convertLocalToUTC((long) 19, true, (long) '4');
        long long92 = dateTimeZone74.getMillisKeepLocal(dateTimeZone77, (long) (short) 100);
        org.joda.time.Chronology chronology93 = zonedChronology28.withZone(dateTimeZone74);
        org.joda.time.DateTimeField dateTimeField94 = chronology93.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(intArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1970, 1, 13, 14760000]");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 100L + "'", long58 == 100L);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Sun Jan 11 00:06:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 864360100L + "'", long67 == 864360100L);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 120L + "'", long76 == 120L);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertNotNull(timeZone83);
// flaky:         org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-1L) + "'", long86 == (-1L));
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 19L + "'", long90 == 19L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 100L + "'", long92 == 100L);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(dateTimeField94);
    }

    @Test
    public void test07498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07498");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        java.lang.String str4 = localDateTime2.toString("\u65e5\u672c");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime2.toString(dateTimeFormatter5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withSecondOfMinute((int) '4');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(999);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withDurationAdded(readableDuration14, 3);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime11.withDate((int) (short) -1, 7, 12);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime11.withMillisOfDay(2022);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusDays(1963);
        int[] intArray25 = localDateTime22.getValues();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c" + "'", str4, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-11T20:06:00.000" + "'", str6, "1970-01-11T20:06:00.000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 11, 2022]");
    }

    @Test
    public void test07499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07499");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField9 = chronology6.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField11 = chronology6.centuries();
        org.joda.time.DurationField durationField12 = chronology6.minutes();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.weekyearOfCentury();
        org.joda.time.Chronology chronology14 = chronology6.withUTC();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(0L, chronology16);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMillisOfSecond(100);
        org.joda.time.Chronology chronology21 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DurationField durationField23 = chronology21.days();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        long long26 = dateTimeZone24.previousTransition(100L);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withMillisOfSecond((int) (byte) 0);
        int[] intArray32 = chronology21.get((org.joda.time.ReadablePartial) localDateTime28, (long) (-1));
        org.joda.time.DateTimeField dateTimeField33 = chronology21.millisOfDay();
        org.joda.time.DurationField durationField34 = chronology21.hours();
        org.joda.time.DurationField durationField35 = chronology21.weeks();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology43 = org.joda.time.chrono.ZonedChronology.getInstance(chronology21, dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology43.yearOfEra();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology43.monthOfYear();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology43.centuryOfEra();
        org.joda.time.DurationField durationField47 = zonedChronology43.months();
        org.joda.time.DateTimeZone dateTimeZone48 = zonedChronology43.getZone();
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray53 = zonedChronology49.get(readablePeriod50, (long) (short) -1, 10368000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(zonedChronology49);
    }

    @Test
    public void test07500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07500");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, chronology1);
        int int3 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(100);
        org.joda.time.Chronology chronology6 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone9.previousTransition(100L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond((int) (byte) 0);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology6.hours();
        org.joda.time.DurationField durationField20 = chronology6.weeks();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u65e5\u672c");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 10, true, (long) '#');
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.millisOfSecond();
        org.joda.time.DurationField durationField31 = zonedChronology28.months();
        org.joda.time.DurationField durationField32 = zonedChronology28.minutes();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, chronology34);
        java.util.Locale locale36 = java.util.Locale.US;
        boolean boolean37 = localDateTime35.equals((java.lang.Object) locale36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(0L, chronology41);
        int int43 = localDateTime42.getWeekyear();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withYearOfEra(1970);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusMinutes(100);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(0L, chronology52);
        int int54 = localDateTime53.getWeekyear();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withMillisOfSecond(100);
        org.joda.time.Chronology chronology57 = localDateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfCentury();
        org.joda.time.DurationField durationField59 = chronology57.days();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        long long62 = dateTimeZone60.previousTransition(100L);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((java.lang.Object) 100L, chronology63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withMillisOfSecond((int) (byte) 0);
        int[] intArray68 = chronology57.get((org.joda.time.ReadablePartial) localDateTime64, (long) (-1));
        org.joda.time.DateTimeField dateTimeField69 = chronology57.millisOfDay();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(0L, chronology71);
        int int73 = localDateTime72.getWeekyear();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withMillisOfSecond(100);
        int[] intArray77 = chronology57.get((org.joda.time.ReadablePartial) localDateTime72, 0L);
        zonedChronology28.validate((org.joda.time.ReadablePartial) localDateTime49, intArray77);
        org.joda.time.DateTimeField dateTimeField79 = zonedChronology28.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField80 = zonedChronology28.year();
        org.joda.time.DateTimeField dateTimeField81 = zonedChronology28.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology28);
        org.joda.time.DurationField durationField83 = zonedChronology28.years();
        org.joda.time.Chronology chronology84 = zonedChronology28.withUTC();
        org.joda.time.DurationField durationField85 = zonedChronology28.months();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 100L + "'", long62 == 100L);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1970 + "'", int73 == 1970);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(durationField85);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test00501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00501");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        int int3 = empiricalDistributionImpl0.getBinCount();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000);
    }

    @Test
    public void test00502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00502");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double7 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double12 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long16 = variance15.getN();
        double[] doubleArray22 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double24 = variance15.evaluate(doubleArray22, (double) 'a');
        double double25 = variance13.evaluate(doubleArray22);
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance13);
        double double27 = variance13.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics28 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double29 = summaryStatistics28.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean30.increment((double) 0);
        double double33 = mean30.getResult();
        long long34 = mean30.getN();
        mean30.clear();
        summaryStatistics28.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean30);
        double double37 = summaryStatistics28.getMean();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean38 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean38.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long43 = variance42.getN();
        double[] doubleArray49 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double51 = variance42.evaluate(doubleArray49, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long57 = variance56.getN();
        double[] doubleArray63 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double65 = variance56.evaluate(doubleArray63, (double) 'a');
        mean54.incrementAll(doubleArray63);
        double double68 = variance42.evaluate(doubleArray63, (double) (byte) 1);
        geometricMean38.incrementAll(doubleArray63);
        summaryStatistics28.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long73 = variance72.getN();
        double[] doubleArray79 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double81 = variance72.evaluate(doubleArray79, (double) 'a');
        variance72.clear();
        double[] doubleArray86 = new double[] { (byte) 0, (short) 0, 299098734592L };
        double double88 = variance72.evaluate(doubleArray86, (double) 1);
        double double89 = geometricMean38.evaluate(doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = variance13.evaluate(doubleArray86, (double) 299098722304L, (-11), (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 19.43999999999942d + "'", double24 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 19.44d + "'", double25 == 19.44d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 19.43999999999942d + "'", double51 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 19.43999999999942d + "'", double65 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 19.44d + "'", double68 == 19.44d);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 19.43999999999942d + "'", double81 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 0.0, 2.99098734592E11]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.988001178545237E22d + "'", double88 == 1.988001178545237E22d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    }

    @Test
    public void test00503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00503");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL3 = new java.net.URL("/hi!2278368850039680439:", "/hi!3061471582456786922:", "/hi!3512468337870064505:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!2278368850039680439:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00504");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSum();
        double double4 = summaryStatistics0.getGeometricMean();
        double double5 = summaryStatistics0.getSum();
        double double6 = summaryStatistics0.getMax();
        java.lang.String str7 = summaryStatistics0.toString();
        double double8 = summaryStatistics0.getMean();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str7, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test00505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00505");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min0.clear();
        min0.clear();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl4 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long11 = variance10.getN();
        double[] doubleArray17 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double19 = variance10.evaluate(doubleArray17, (double) 'a');
        mean8.incrementAll(doubleArray17);
        empiricalDistributionImpl5.load(doubleArray17);
        empiricalDistributionImpl4.load(doubleArray17);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = min0.evaluate(doubleArray17, (int) (short) 100, 24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 19.43999999999942d + "'", double19 == 19.43999999999942d);
    }

    @Test
    public void test00506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00506");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = summaryStatistics0.getSummary();
        double double5 = summaryStatistics0.getStandardDeviation();
        double double6 = summaryStatistics0.getStandardDeviation();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(statisticalSummary4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test00507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00507");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        double double2 = sum0.getResult();
        sum0.clear();
        sum0.increment((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs6 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double7 = sumOfLogs6.getResult();
        long long8 = sumOfLogs6.getN();
        org.apache.commons.math.stat.descriptive.rank.Min min9 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min9.clear();
        double[] doubleArray16 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double17 = min9.evaluate(doubleArray16);
        double double20 = sumOfLogs6.evaluate(doubleArray16, 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = sum0.evaluate(doubleArray16, (int) ':', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 4.060443010546419d + "'", double20 == 4.060443010546419d);
    }

    @Test
    public void test00508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00508");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean1.increment((double) (short) 100);
        geometricMean1.increment((double) (-1L));
        geometricMean1.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean8 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean8.increment((double) (short) 100);
        geometricMean8.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        double double24 = geometricMean8.evaluate(doubleArray21);
        double double25 = geometricMean1.evaluate(doubleArray21);
        double double28 = sum0.evaluate(doubleArray21, 0, 0);
        double double29 = sum0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance31.increment((double) (byte) 100);
        java.io.File file36 = new java.io.File("/hi!4420905478953568698:", "/experiment/hi!2169115775229245488");
        boolean boolean37 = variance31.equals((java.lang.Object) "/hi!4420905478953568698:");
        boolean boolean38 = variance31.isBiasCorrected();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl39.getSampleStats();
        java.io.File file44 = new java.io.File("");
        java.io.File file45 = java.io.File.createTempFile("hi!", ":", file44);
        java.lang.String str46 = file45.getCanonicalPath();
        boolean boolean47 = file45.createNewFile();
        empiricalDistributionImpl39.load(file45);
        double[] doubleArray49 = empiricalDistributionImpl39.getUpperBounds();
        double double52 = variance31.evaluate(doubleArray49, (int) ':', 1);
        // The following exception was thrown during execution in test generation
        try {
            double double55 = sum0.evaluate(doubleArray49, (-6), 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2.51188643150958d + "'", double24 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2.51188643150958d + "'", double25 == 2.51188643150958d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertEquals(file36.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file36.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(statisticalSummary40);
        org.junit.Assert.assertNull("file44.getParent() == null", file44.getParent());
        org.junit.Assert.assertEquals(file44.toString(), "");
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file45.toString(), "/hi!6950032100451565699:");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "/hi!6950032100451565699:" + "'", str46, "/hi!6950032100451565699:");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    }

    @Test
    public void test00509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00509");
        java.io.File file1 = new java.io.File("/hi!8445959589238482488:");
        boolean boolean2 = file1.setReadOnly();
        org.junit.Assert.assertEquals(file1.getParent(), "/");
        org.junit.Assert.assertEquals(file1.toString(), "/hi!8445959589238482488:");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test00510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00510");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        boolean boolean3 = empiricalDistributionImpl0.isLoaded();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00511");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        double double1 = max0.getResult();
        max0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double4 = secondMoment3.getResult();
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment3);
        mean7.clear();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares9 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long10 = sumOfSquares9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        double double27 = variance12.evaluate(doubleArray21, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double30 = sumOfSquares9.evaluate(doubleArray21, (int) (short) 1, 0);
        double double33 = mean7.evaluate(doubleArray21, (int) (byte) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = max0.evaluate(doubleArray21, (-2), (int) ':');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
    }

    @Test
    public void test00512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00512");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.io.File file9 = file1.getParentFile();
        long long10 = file1.getUsableSpace();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = file1.createNewFile();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No such file or directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(file9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test00513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00513");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = new java.net.URL("/hi!3772792150792173750:", "hi!1432018149275177116", (-27), "/hi!585200003762659678:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: Invalid port number :-27");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00514");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        java.lang.String str5 = file4.getCanonicalPath();
        boolean boolean6 = file4.mkdir();
        java.io.File file8 = new java.io.File("");
        boolean boolean11 = file8.setWritable(true, true);
        boolean boolean12 = file8.setReadOnly();
        boolean boolean15 = file8.setWritable(true, false);
        boolean boolean17 = file8.setExecutable(true);
        boolean boolean18 = file8.exists();
        boolean boolean19 = file8.canRead();
        long long20 = file8.getUsableSpace();
        java.io.File file21 = file8.getCanonicalFile();
        boolean boolean22 = file21.canWrite();
        int int23 = file4.compareTo(file21);
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!3385667703620167206:");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/hi!3385667703620167206:" + "'", str5, "/hi!3385667703620167206:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(file21);
// flaky:         org.junit.Assert.assertEquals(file21.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file21.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
    }

    @Test
    public void test00515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00515");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        double double2 = sumOfLogs0.getResult();
        sumOfLogs0.clear();
        long long4 = sumOfLogs0.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean5 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        geometricMean5.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean5.getSumLogImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
    }

    @Test
    public void test00516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00516");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean1.increment((double) (short) 100);
        geometricMean1.increment((double) (-1L));
        geometricMean1.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean8 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean8.increment((double) (short) 100);
        geometricMean8.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        double double24 = geometricMean8.evaluate(doubleArray21);
        double double25 = geometricMean1.evaluate(doubleArray21);
        double double28 = sum0.evaluate(doubleArray21, 0, 0);
        sum0.increment((double) 1645454026000L);
        sum0.clear();
        sum0.increment((double) (-3));
        org.apache.commons.math.stat.descriptive.summary.Sum sum34 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean35 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean35.increment((double) (short) 100);
        geometricMean35.increment((double) (-1L));
        geometricMean35.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean42 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean42.increment((double) (short) 100);
        geometricMean42.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long49 = variance48.getN();
        double[] doubleArray55 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double57 = variance48.evaluate(doubleArray55, (double) 'a');
        double double58 = geometricMean42.evaluate(doubleArray55);
        double double59 = geometricMean35.evaluate(doubleArray55);
        double double62 = sum34.evaluate(doubleArray55, 0, 0);
        sum34.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long65 = mean64.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double67 = secondMoment66.getResult();
        secondMoment66.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment66);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean70 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean70.increment((double) (short) 100);
        geometricMean70.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long77 = variance76.getN();
        double[] doubleArray83 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double85 = variance76.evaluate(doubleArray83, (double) 'a');
        double double86 = geometricMean70.evaluate(doubleArray83);
        double double87 = variance69.evaluate(doubleArray83);
        double double88 = mean64.evaluate(doubleArray83);
        double double89 = sum34.evaluate(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = sum0.evaluate(doubleArray83, (int) (byte) 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2.51188643150958d + "'", double24 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2.51188643150958d + "'", double25 == 2.51188643150958d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 19.43999999999942d + "'", double57 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2.51188643150958d + "'", double58 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2.51188643150958d + "'", double59 == 2.51188643150958d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 19.43999999999942d + "'", double85 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2.51188643150958d + "'", double86 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 24.3d + "'", double87 == 24.3d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 4.6d + "'", double88 == 4.6d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 23.0d + "'", double89 == 23.0d);
    }

    @Test
    public void test00517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00517");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl4 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl4.getSampleStats();
        boolean boolean6 = empiricalDistributionImpl4.isLoaded();
        boolean boolean7 = empiricalDistributionImpl4.isLoaded();
        java.util.List list8 = empiricalDistributionImpl4.getBinStats();
        int int9 = empiricalDistributionImpl4.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long16 = variance15.getN();
        double[] doubleArray22 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double24 = variance15.evaluate(doubleArray22, (double) 'a');
        mean13.incrementAll(doubleArray22);
        empiricalDistributionImpl10.load(doubleArray22);
        empiricalDistributionImpl4.load(doubleArray22);
        boolean boolean28 = empiricalDistributionImpl4.isLoaded();
        java.util.List list29 = empiricalDistributionImpl4.getBinStats();
        double[] doubleArray30 = empiricalDistributionImpl4.getUpperBounds();
        int int31 = empiricalDistributionImpl4.getBinCount();
        double[] doubleArray32 = empiricalDistributionImpl4.getUpperBounds();
        // The following exception was thrown during execution in test generation
        try {
            double double35 = variance3.evaluate(doubleArray32, 57, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1000 + "'", int9 == 1000);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 19.43999999999942d + "'", double24 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1000 + "'", int31 == 1000);
        org.junit.Assert.assertNotNull(doubleArray32);
    }

    @Test
    public void test00518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00518");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.lang.String str5 = uRL3.getUserInfo();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getUserInfo();
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        java.lang.String str12 = uRL11.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler14 = null;
        java.net.URL uRL15 = new java.net.URL(uRL11, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler14);
        boolean boolean16 = uRL3.sameFile(uRL15);
        java.net.URI uRI17 = uRL15.toURI();
        java.io.File file18 = new java.io.File(uRI17);
        boolean boolean19 = file18.canRead();
        java.lang.String str20 = file18.toString();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(uRL15.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(uRI17);
        org.junit.Assert.assertEquals(file18.getParent(), "/experiment/hi!2169115775229245488");
        org.junit.Assert.assertEquals(file18.toString(), "/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str20, "/experiment/hi!2169115775229245488/hi!");
    }

    @Test
    public void test00519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00519");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = summaryStatistics0.getSummary();
        double double5 = summaryStatistics0.getMax();
        summaryStatistics0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(statisticalSummary4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test00520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00520");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        long long6 = secondMoment1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test00521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00521");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        sumOfLogs0.increment((double) (-3));
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        geometricMean4.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
    }

    @Test
    public void test00522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00522");
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException("hi!", throwable2);
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.io.IOException iOException5 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException3);
        java.lang.Throwable throwable8 = null;
        java.io.IOException iOException9 = new java.io.IOException("hi!", throwable8);
        java.io.IOException iOException10 = new java.io.IOException(throwable8);
        java.io.IOException iOException11 = new java.io.IOException("/hi!8130836485477920045:", (java.lang.Throwable) iOException10);
        iOException5.addSuppressed((java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException11);
        java.lang.Throwable throwable16 = null;
        java.io.IOException iOException17 = new java.io.IOException("hi!", throwable16);
        java.io.IOException iOException18 = new java.io.IOException(throwable16);
        java.io.IOException iOException19 = new java.io.IOException("/hi!8130836485477920045:", (java.lang.Throwable) iOException18);
        iOException11.addSuppressed((java.lang.Throwable) iOException18);
        java.lang.Throwable[] throwableArray21 = iOException18.getSuppressed();
        java.lang.String str22 = iOException18.toString();
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.io.IOException" + "'", str22, "java.io.IOException");
    }

    @Test
    public void test00523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00523");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        boolean boolean10 = file1.setExecutable(true);
        boolean boolean11 = file1.exists();
        boolean boolean12 = file1.canRead();
        long long13 = file1.getUsableSpace();
        java.io.File file14 = file1.getCanonicalFile();
        java.nio.file.Path path15 = file14.toPath();
        java.io.File file16 = file14.getCanonicalFile();
        java.io.File file18 = new java.io.File("/hi!4533436540036848542:");
        boolean boolean19 = file18.canExecute();
        int int20 = file14.compareTo(file18);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(file14);
// flaky:         org.junit.Assert.assertEquals(file14.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/experiment");
        org.junit.Assert.assertNotNull(path15);
        org.junit.Assert.assertNotNull(file16);
// flaky:         org.junit.Assert.assertEquals(file16.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file16.toString(), "/experiment");
        org.junit.Assert.assertEquals(file18.getParent(), "/");
        org.junit.Assert.assertEquals(file18.toString(), "/hi!4533436540036848542:");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
    }

    @Test
    public void test00524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00524");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = new java.net.URL("/hi!3772792150792173750:", "/hi!1245110116910934768:", (int) (short) 10, "");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!3772792150792173750:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00525");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMax();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.Mean mean6 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean6.increment((double) 10.0f);
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean6);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long11 = mean10.getN();
        mean10.increment(100.0d);
        boolean boolean14 = summaryStatistics0.equals((java.lang.Object) mean10);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs15 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double16 = sumOfLogs15.getResult();
        double double17 = sumOfLogs15.getResult();
        sumOfLogs15.clear();
        long long19 = sumOfLogs15.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean20 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs15);
        double double21 = geometricMean20.getResult();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean20);
        geometricMean20.clear();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic24 = geometricMean20.getSumLogImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic24);
    }

    @Test
    public void test00526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00526");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler6 = null;
        java.net.URL uRL7 = new java.net.URL(uRL3, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler6);
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        boolean boolean12 = uRL3.sameFile(uRL11);
        java.net.URL uRL14 = new java.net.URL(uRL11, "/hi!4129638666993068054:");
        java.lang.String str15 = uRL14.toExternalForm();
        java.lang.String str16 = uRL14.toString();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "file:/hi!4129638666993068054:" + "'", str15, "file:/hi!4129638666993068054:");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "file:/hi!4129638666993068054:" + "'", str16, "file:/hi!4129638666993068054:");
    }

    @Test
    public void test00527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00527");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("/hi!4420905478953568698:/experiment/hi!2169115775229245488", "/hi!7935439372482340905:");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/hi!21691157752292454885769467803140820104/hi!7935439372482340905:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00528");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "");
        java.io.File file5 = java.io.File.createTempFile("hi!", "");
        boolean boolean7 = file5.setLastModified((long) '#');
        java.io.File file8 = file5.getCanonicalFile();
        boolean boolean9 = file8.canWrite();
        java.nio.file.Path path10 = file8.toPath();
        int int11 = file2.compareTo(file8);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488");
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/tmp/hi!5758902085152485531");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/tmp/hi!5758902085152485531");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(path10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 57 + "'", int11 == 57);
    }

    @Test
    public void test00529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00529");
        java.io.File file4 = new java.io.File("/hi!2756764035548942023:", ":");
        java.io.File file5 = file4.getParentFile();
        java.io.File file7 = new java.io.File(file4, "/hi!8130836485477920045:");
        java.io.File file8 = file7.getCanonicalFile();
        java.nio.file.Path path9 = file8.toPath();
        java.io.File file12 = new java.io.File("/hi!4420905478953568698:", "/experiment/hi!2169115775229245488");
        java.lang.String str13 = file12.getPath();
        boolean boolean14 = file8.renameTo(file12);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file15 = java.io.File.createTempFile("/hi!5248138899844219862:", "", file8);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file4.getParent(), "/hi!2756764035548942023:");
        org.junit.Assert.assertEquals(file4.toString(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/");
        org.junit.Assert.assertEquals(file5.toString(), "/hi!2756764035548942023:");
        org.junit.Assert.assertEquals(file7.getParent(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertEquals(file7.toString(), "/hi!2756764035548942023:/:/hi!8130836485477920045:");
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertEquals(file8.toString(), "/hi!2756764035548942023:/:/hi!8130836485477920045:");
        org.junit.Assert.assertNotNull(path9);
        org.junit.Assert.assertEquals(file12.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file12.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "/hi!4420905478953568698:/experiment/hi!2169115775229245488" + "'", str13, "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00530");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("/hi!7369237896365310890:", "/hi!3399820819083206588:", 100, "/hi!6640395411434487558:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!7369237896365310890:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00531");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.lang.String str6 = uRL3.toExternalForm();
        java.io.File file9 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL10 = file9.toURL();
        java.lang.String str11 = uRL10.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler13 = null;
        java.net.URL uRL14 = new java.net.URL(uRL10, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler13);
        boolean boolean15 = uRL3.sameFile(uRL14);
        java.net.URLStreamHandler uRLStreamHandler17 = null;
        java.net.URL uRL18 = new java.net.URL(uRL14, "/hi!8304360505110833158:", uRLStreamHandler17);
        java.lang.Object obj19 = null;
        boolean boolean20 = uRL14.equals(obj19);
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str6, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file9.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file9.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL10);
// flaky:         org.junit.Assert.assertEquals(uRL10.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals(uRL18.toString(), "file:/hi!8304360505110833158:");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test00532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00532");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("/hi!4376954783929028723:", "/hi!5568135344369657420:", (int) (byte) 10, "/hi!4955609996634267188:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!4376954783929028723:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00533");
        java.io.File file1 = new java.io.File("/hi!7373904328399805796:");
        boolean boolean2 = file1.isHidden();
        org.junit.Assert.assertEquals(file1.getParent(), "/");
        org.junit.Assert.assertEquals(file1.toString(), "/hi!7373904328399805796:");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test00534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00534");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL1 = new java.net.URL("/hi!4108939907517973775:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no protocol: /hi!4108939907517973775:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00535");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long4 = variance3.getN();
        long long5 = variance3.getN();
        boolean boolean6 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs7 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        long long8 = sumOfLogs7.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean9 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs7);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares10 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long11 = sumOfSquares10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long16 = variance15.getN();
        double[] doubleArray22 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double24 = variance15.evaluate(doubleArray22, (double) 'a');
        double double28 = variance13.evaluate(doubleArray22, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double31 = sumOfSquares10.evaluate(doubleArray22, (int) (short) 1, 0);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics32 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double33 = summaryStatistics32.getMin();
        double double34 = summaryStatistics32.getStandardDeviation();
        double double35 = summaryStatistics32.getMean();
        double double36 = summaryStatistics32.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min37 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics32.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min37);
        double[] doubleArray39 = new double[] {};
        min37.incrementAll(doubleArray39);
        double double41 = sumOfSquares10.evaluate(doubleArray39);
        geometricMean9.incrementAll(doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            double double45 = variance3.evaluate(doubleArray39, 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 19.43999999999942d + "'", double24 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double41));
    }

    @Test
    public void test00536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00536");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.clear();
        long long2 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long5 = variance4.getN();
        double[] doubleArray11 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double13 = variance4.evaluate(doubleArray11, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long19 = variance18.getN();
        double[] doubleArray25 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double27 = variance18.evaluate(doubleArray25, (double) 'a');
        mean16.incrementAll(doubleArray25);
        double double30 = variance4.evaluate(doubleArray25, (double) (byte) 1);
        secondMoment0.incrementAll(doubleArray25);
        double double32 = secondMoment0.getResult();
        secondMoment0.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares35 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long36 = sumOfSquares35.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long41 = variance40.getN();
        double[] doubleArray47 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double49 = variance40.evaluate(doubleArray47, (double) 'a');
        double double53 = variance38.evaluate(doubleArray47, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double56 = sumOfSquares35.evaluate(doubleArray47, (int) (short) 1, 0);
        double double57 = sumOfSquares35.getResult();
        long long58 = sumOfSquares35.getN();
        sumOfSquares35.clear();
        sumOfSquares35.increment((double) (short) 100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl62 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary63 = empiricalDistributionImpl62.getSampleStats();
        java.io.File file67 = new java.io.File("");
        java.io.File file68 = java.io.File.createTempFile("hi!", ":", file67);
        java.lang.String str69 = file68.getCanonicalPath();
        boolean boolean70 = file68.createNewFile();
        empiricalDistributionImpl62.load(file68);
        double[] doubleArray72 = empiricalDistributionImpl62.getUpperBounds();
        double[] doubleArray73 = empiricalDistributionImpl62.getUpperBounds();
        sumOfSquares35.incrementAll(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            double double77 = secondMoment0.evaluate(doubleArray73, 0, (-50));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 19.43999999999942d + "'", double13 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 19.43999999999942d + "'", double27 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 19.44d + "'", double30 == 19.44d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 97.2d + "'", double32 == 97.2d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 19.43999999999942d + "'", double49 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNull(statisticalSummary63);
        org.junit.Assert.assertNull("file67.getParent() == null", file67.getParent());
        org.junit.Assert.assertEquals(file67.toString(), "");
        org.junit.Assert.assertNotNull(file68);
        org.junit.Assert.assertEquals(file68.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file68.toString(), "/hi!2609958412588995770:");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "/hi!2609958412588995770:" + "'", str69, "/hi!2609958412588995770:");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
    }

    @Test
    public void test00537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00537");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long6 = variance5.getN();
        double[] doubleArray12 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double14 = variance5.evaluate(doubleArray12, (double) 'a');
        variance5.clear();
        double[] doubleArray19 = new double[] { (byte) 0, (short) 0, 299098734592L };
        double double21 = variance5.evaluate(doubleArray19, (double) 1);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics22 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics22.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean23);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean25 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean25.increment((double) (short) 100);
        geometricMean25.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic30 = geometricMean25.getSumLogImpl();
        summaryStatistics22.setMinImpl(storelessUnivariateStatistic30);
        double double32 = summaryStatistics22.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics22.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean36.increment((double) 0);
        double double39 = mean36.getResult();
        mean36.clear();
        double[] doubleArray41 = new double[] {};
        mean36.incrementAll(doubleArray41);
        variance34.incrementAll(doubleArray41);
        double double45 = variance5.evaluate(doubleArray41, 100.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double49 = variance2.evaluate(doubleArray41, (double) 1000, (int) '#', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 19.43999999999942d + "'", double14 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 2.99098734592E11]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.988001178545237E22d + "'", double21 == 1.988001178545237E22d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
    }

    @Test
    public void test00538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00538");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler6 = null;
        java.net.URL uRL7 = new java.net.URL(uRL3, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler6);
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        java.lang.String str12 = uRL11.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler14 = null;
        java.net.URL uRL15 = new java.net.URL(uRL11, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler14);
        boolean boolean16 = uRL3.sameFile(uRL11);
        java.lang.String str17 = uRL11.getUserInfo();
        java.net.Proxy proxy18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection19 = uRL11.openConnection(proxy18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(uRL15.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test00539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00539");
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException("hi!", throwable3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException4);
        java.lang.Throwable throwable9 = null;
        java.io.IOException iOException10 = new java.io.IOException("hi!", throwable9);
        java.io.IOException iOException11 = new java.io.IOException(throwable9);
        java.io.IOException iOException12 = new java.io.IOException("/hi!8130836485477920045:", (java.lang.Throwable) iOException11);
        iOException6.addSuppressed((java.lang.Throwable) iOException12);
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.io.IOException iOException15 = new java.io.IOException("/hi!6244728997591896465:", (java.lang.Throwable) iOException14);
        java.lang.String str16 = iOException14.toString();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: java.io.IOException: /hi!4533436540036848542:" + "'", str16, "java.io.IOException: java.io.IOException: /hi!4533436540036848542:");
    }

    @Test
    public void test00540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00540");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double7 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double12 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long16 = variance15.getN();
        double[] doubleArray22 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double24 = variance15.evaluate(doubleArray22, (double) 'a');
        double double25 = variance13.evaluate(doubleArray22);
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance13);
        long long27 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics28 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double29 = summaryStatistics28.getVariance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = summaryStatistics28.getSummary();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment31.clear();
        long long33 = secondMoment31.getN();
        secondMoment31.clear();
        double double35 = secondMoment31.getResult();
        summaryStatistics28.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment31);
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment31);
        secondMoment31.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 19.43999999999942d + "'", double24 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 19.44d + "'", double25 == 19.44d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test00541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00541");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean2 = variance1.isBiasCorrected();
        variance1.clear();
        variance1.increment((double) 1645454030000L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test00542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00542");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics1 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double2 = summaryStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean3.increment((double) 0);
        double double6 = mean3.getResult();
        long long7 = mean3.getN();
        mean3.clear();
        summaryStatistics1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean3);
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean3);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs11 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        long long12 = sumOfLogs11.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean13 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs11);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares14 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long15 = sumOfSquares14.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long20 = variance19.getN();
        double[] doubleArray26 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double28 = variance19.evaluate(doubleArray26, (double) 'a');
        double double32 = variance17.evaluate(doubleArray26, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double35 = sumOfSquares14.evaluate(doubleArray26, (int) (short) 1, 0);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics36 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double37 = summaryStatistics36.getMin();
        double double38 = summaryStatistics36.getStandardDeviation();
        double double39 = summaryStatistics36.getMean();
        double double40 = summaryStatistics36.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min41 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics36.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min41);
        double[] doubleArray43 = new double[] {};
        min41.incrementAll(doubleArray43);
        double double45 = sumOfSquares14.evaluate(doubleArray43);
        geometricMean13.incrementAll(doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            double double49 = mean3.evaluate(doubleArray43, (int) (byte) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 19.43999999999942d + "'", double28 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
    }

    @Test
    public void test00543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00543");
        java.io.File file4 = new java.io.File("/hi!2756764035548942023:", ":");
        java.io.File file5 = file4.getParentFile();
        java.io.File file7 = new java.io.File(file4, "/hi!8130836485477920045:");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file8 = java.io.File.createTempFile("/hi!4747017562393892512:", "/hi!5109198882610218107:", file7);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /hi!2756764035548942023:/:/hi!8130836485477920045:/hi!4747017562393892512:6492438222040339652/hi!5109198882610218107:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file4.getParent(), "/hi!2756764035548942023:");
        org.junit.Assert.assertEquals(file4.toString(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/");
        org.junit.Assert.assertEquals(file5.toString(), "/hi!2756764035548942023:");
        org.junit.Assert.assertEquals(file7.getParent(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertEquals(file7.toString(), "/hi!2756764035548942023:/:/hi!8130836485477920045:");
    }

    @Test
    public void test00544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00544");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        int int3 = empiricalDistributionImpl0.getBinCount();
        java.io.File file7 = new java.io.File("");
        java.io.File file8 = java.io.File.createTempFile("hi!", ":", file7);
        java.lang.String str9 = file8.getCanonicalPath();
        boolean boolean10 = file8.createNewFile();
        boolean boolean11 = file8.createNewFile();
        empiricalDistributionImpl0.load(file8);
        boolean boolean13 = file8.isAbsolute();
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000);
        org.junit.Assert.assertNull("file7.getParent() == null", file7.getParent());
        org.junit.Assert.assertEquals(file7.toString(), "");
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/hi!2866285172399944296:");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/hi!2866285172399944296:" + "'", str9, "/hi!2866285172399944296:");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test00545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00545");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        boolean boolean3 = false; // flaky: file2.createNewFile();
        boolean boolean4 = file2.setReadOnly();
        boolean boolean6 = file2.setExecutable(false);
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test00546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00546");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl3.getSampleStats();
        boolean boolean5 = empiricalDistributionImpl3.isLoaded();
        boolean boolean6 = empiricalDistributionImpl3.isLoaded();
        boolean boolean7 = empiricalDistributionImpl3.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int9 = empiricalDistributionImpl8.getBinCount();
        boolean boolean10 = empiricalDistributionImpl8.isLoaded();
        java.util.List list11 = empiricalDistributionImpl8.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean12 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean12.increment((double) (short) 100);
        geometricMean12.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic17 = geometricMean12.getSumLogImpl();
        long long18 = geometricMean12.getN();
        double double19 = geometricMean12.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics20 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double21 = summaryStatistics20.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min22 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics20.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min22);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean24 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean24.increment((double) (short) 100);
        geometricMean24.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long31 = variance30.getN();
        double[] doubleArray37 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double39 = variance30.evaluate(doubleArray37, (double) 'a');
        double double40 = geometricMean24.evaluate(doubleArray37);
        min22.incrementAll(doubleArray37);
        geometricMean12.incrementAll(doubleArray37);
        empiricalDistributionImpl8.load(doubleArray37);
        empiricalDistributionImpl3.load(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = mean1.evaluate(doubleArray37, (int) ' ', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1000 + "'", int9 == 1000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 19.43999999999942d + "'", double39 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2.51188643150958d + "'", double40 == 2.51188643150958d);
    }

    @Test
    public void test00547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00547");
        java.io.File file1 = new java.io.File("/hi!2756764035548942023:");
        boolean boolean2 = file1.isAbsolute();
        org.junit.Assert.assertEquals(file1.getParent(), "/");
        org.junit.Assert.assertEquals(file1.toString(), "/hi!2756764035548942023:");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test00548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00548");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.net.URL uRL7 = new java.net.URL(uRL3, "hi!2169115775229245488");
        java.lang.String str8 = uRL3.toString();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!2169115775229245488");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str8, "file:/experiment/hi!2169115775229245488/hi!");
    }

    @Test
    public void test00549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00549");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max0.clear();
        double double2 = max0.getResult();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares3 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long4 = sumOfSquares3.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long9 = variance8.getN();
        double[] doubleArray15 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double17 = variance8.evaluate(doubleArray15, (double) 'a');
        double double21 = variance6.evaluate(doubleArray15, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double24 = sumOfSquares3.evaluate(doubleArray15, (int) (short) 1, 0);
        double double27 = max0.evaluate(doubleArray15, (int) (short) 1, (int) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long30 = variance29.getN();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl31.getSampleStats();
        java.io.File file36 = new java.io.File("");
        java.io.File file37 = java.io.File.createTempFile("hi!", ":", file36);
        java.lang.String str38 = file37.getCanonicalPath();
        boolean boolean39 = file37.createNewFile();
        empiricalDistributionImpl31.load(file37);
        double[] doubleArray41 = empiricalDistributionImpl31.getUpperBounds();
        double[] doubleArray42 = empiricalDistributionImpl31.getUpperBounds();
        double double45 = variance29.evaluate(doubleArray42, 10, 0);
        // The following exception was thrown during execution in test generation
        try {
            max0.incrementAll(doubleArray42, (int) ' ', (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 19.43999999999942d + "'", double17 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNull("file36.getParent() == null", file36.getParent());
        org.junit.Assert.assertEquals(file36.toString(), "");
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file37.toString(), "/hi!6467999254332519855:");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "/hi!6467999254332519855:" + "'", str38, "/hi!6467999254332519855:");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
    }

    @Test
    public void test00550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00550");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        boolean boolean3 = empiricalDistributionImpl0.isLoaded();
        java.util.List list4 = empiricalDistributionImpl0.getBinStats();
        java.io.File file7 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL8 = file7.toURL();
        java.lang.String str9 = uRL8.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler11 = null;
        java.net.URL uRL12 = new java.net.URL(uRL8, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler11);
        java.io.File file15 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL16 = file15.toURL();
        boolean boolean17 = uRL8.sameFile(uRL16);
        java.net.URL uRL19 = new java.net.URL(uRL16, "/hi!4129638666993068054:");
        java.lang.String str20 = uRL16.getQuery();
        java.lang.String str21 = uRL16.getQuery();
        java.io.File file24 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL25 = file24.toURL();
        java.lang.String str26 = uRL25.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler28 = null;
        java.net.URL uRL29 = new java.net.URL(uRL25, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler28);
        java.lang.String str30 = uRL25.toExternalForm();
        java.net.URL uRL32 = new java.net.URL(uRL25, "/hi!6147520189804127628:");
        boolean boolean33 = uRL16.sameFile(uRL25);
        int int34 = uRL25.getDefaultPort();
        // The following exception was thrown during execution in test generation
{ // flaky:         try {
// flaky:             empiricalDistributionImpl0.load(uRL25);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: URL file:/experiment/hi!2169115775229245488/hi! contains no data");
// flaky:         } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file7.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL8);
// flaky:         org.junit.Assert.assertEquals(uRL8.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals(uRL12.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file15.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file15.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL16);
// flaky:         org.junit.Assert.assertEquals(uRL16.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals(uRL19.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file24.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL25);
// flaky:         org.junit.Assert.assertEquals(uRL25.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals(uRL29.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str30, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(uRL32.toString(), "file:/hi!6147520189804127628:");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test00551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00551");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double double1 = sum0.getResult();
        double[] doubleArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            sum0.incrementAll(doubleArray2, 0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
    }

    @Test
    public void test00552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00552");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean0.increment((double) 0);
        double double3 = mean0.getResult();
        mean0.clear();
        mean0.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics6 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double7 = summaryStatistics6.getMin();
        double double8 = summaryStatistics6.getStandardDeviation();
        double double9 = summaryStatistics6.getSum();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares10 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long11 = sumOfSquares10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long16 = variance15.getN();
        double[] doubleArray22 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double24 = variance15.evaluate(doubleArray22, (double) 'a');
        double double28 = variance13.evaluate(doubleArray22, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double31 = sumOfSquares10.evaluate(doubleArray22, (int) (short) 1, 0);
        double double32 = sumOfSquares10.getResult();
        long long33 = sumOfSquares10.getN();
        sumOfSquares10.clear();
        summaryStatistics6.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares10);
        sumOfSquares10.clear();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long43 = variance42.getN();
        double[] doubleArray49 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double51 = variance42.evaluate(doubleArray49, (double) 'a');
        mean40.incrementAll(doubleArray49);
        empiricalDistributionImpl37.load(doubleArray49);
        sumOfSquares10.incrementAll(doubleArray49, 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double59 = mean0.evaluate(doubleArray49, (int) (byte) 0, (-11));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 19.43999999999942d + "'", double24 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 19.43999999999942d + "'", double51 == 19.43999999999942d);
    }

    @Test
    public void test00553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00553");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        boolean boolean10 = file1.setExecutable(true);
        boolean boolean11 = file1.exists();
        boolean boolean12 = file1.canRead();
        long long13 = file1.getUsableSpace();
        java.io.File file14 = file1.getCanonicalFile();
        boolean boolean15 = file14.canWrite();
        java.io.File file16 = file14.getParentFile();
        boolean boolean17 = file14.isHidden();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(file14);
// flaky:         org.junit.Assert.assertEquals(file14.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(file16);
// flaky:         org.junit.Assert.assertNull("file16.getParent() == null", file16.getParent());
// flaky:         org.junit.Assert.assertEquals(file16.toString(), "/");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00554");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        java.lang.String str5 = file4.getAbsolutePath();
        boolean boolean6 = file4.setReadOnly();
        boolean boolean8 = file4.setWritable(false);
        java.net.URI uRI9 = file4.toURI();
        java.lang.String str10 = file4.getPath();
        long long11 = file4.lastModified();
        boolean boolean12 = file4.isHidden();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!4079062762323983636:");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/hi!4079062762323983636:" + "'", str5, "/hi!4079062762323983636:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(uRI9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/hi!4079062762323983636:" + "'", str10, "/hi!4079062762323983636:");
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645454070000L + "'", long11 == 1645454070000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00555");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("/hi!6958078764891925810:", "/hi!7644059860405527722:", (int) '4', "/hi!478369189998597994:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!6958078764891925810:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00556");
        java.io.File file1 = new java.io.File("");
        boolean boolean3 = file1.setReadable(true);
        long long4 = file1.lastModified();
        java.io.File file6 = new java.io.File(file1, "/hi!8130836485477920045:");
        boolean boolean8 = file6.setExecutable(true);
        long long9 = file6.getUsableSpace();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
        org.junit.Assert.assertEquals(file6.toString(), "/hi!8130836485477920045:");
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 280499585024L + "'", long9 == 280499585024L);
    }

    @Test
    public void test00557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00557");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: 10.0\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n", "/hi!7812823599566898616:", (int) (byte) -1, "/hi!3000120908364902124:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: summarystatistics:?n: 0?min: nan?max: nan?mean: nan?geometric mean: 10.0?variance: nan?sum of squares: nan?standard deviation: nan?sum of logs: nan?");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00558");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long2 = variance1.getN();
        double[] doubleArray8 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double10 = variance1.evaluate(doubleArray8, (double) 'a');
        variance1.clear();
        double[] doubleArray15 = new double[] { (byte) 0, (short) 0, 299098734592L };
        double double17 = variance1.evaluate(doubleArray15, (double) 1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double20 = secondMoment19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long29 = variance28.getN();
        double[] doubleArray35 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double37 = variance28.evaluate(doubleArray35, (double) 'a');
        mean26.incrementAll(doubleArray35);
        empiricalDistributionImpl23.load(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long44 = variance43.getN();
        double[] doubleArray50 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double52 = variance43.evaluate(doubleArray50, (double) 'a');
        double double56 = variance41.evaluate(doubleArray50, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        empiricalDistributionImpl23.load(doubleArray50);
        double double59 = variance22.evaluate(doubleArray50, (double) '/');
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray50, (int) (short) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 19.43999999999942d + "'", double10 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 0.0, 2.99098734592E11]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.988001178545237E22d + "'", double17 == 1.988001178545237E22d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 19.43999999999942d + "'", double37 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 19.43999999999942d + "'", double52 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 24.300000000000182d + "'", double59 == 24.300000000000182d);
    }

    @Test
    public void test00559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00559");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        long long7 = file4.getFreeSpace();
        java.net.URI uRI8 = file4.toURI();
        java.io.File file9 = file4.getParentFile();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = file9.getUsableSpace();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertNull(file9);
    }

    @Test
    public void test00560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00560");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean4.increment((double) (short) 100);
        geometricMean4.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long11 = variance10.getN();
        double[] doubleArray17 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double19 = variance10.evaluate(doubleArray17, (double) 'a');
        double double20 = geometricMean4.evaluate(doubleArray17);
        min2.incrementAll(doubleArray17);
        long long22 = min2.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics23 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics23.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean24);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean26 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean26.increment((double) (short) 100);
        geometricMean26.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic31 = geometricMean26.getSumLogImpl();
        summaryStatistics23.setMinImpl(storelessUnivariateStatistic31);
        double double33 = summaryStatistics23.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics23.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean37.increment((double) 0);
        double double40 = mean37.getResult();
        mean37.clear();
        double[] doubleArray42 = new double[] {};
        mean37.incrementAll(doubleArray42);
        variance35.incrementAll(doubleArray42);
        long long45 = variance35.getN();
        org.apache.commons.math.stat.descriptive.rank.Max max46 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max46.clear();
        max46.increment((double) (-1L));
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl50 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int51 = empiricalDistributionImpl50.getBinCount();
        boolean boolean52 = empiricalDistributionImpl50.isLoaded();
        java.util.List list53 = empiricalDistributionImpl50.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean54 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean54.increment((double) (short) 100);
        geometricMean54.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic59 = geometricMean54.getSumLogImpl();
        long long60 = geometricMean54.getN();
        double double61 = geometricMean54.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics62 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double63 = summaryStatistics62.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min64 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics62.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min64);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean66 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean66.increment((double) (short) 100);
        geometricMean66.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long73 = variance72.getN();
        double[] doubleArray79 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double81 = variance72.evaluate(doubleArray79, (double) 'a');
        double double82 = geometricMean66.evaluate(doubleArray79);
        min64.incrementAll(doubleArray79);
        geometricMean54.incrementAll(doubleArray79);
        empiricalDistributionImpl50.load(doubleArray79);
        double[] doubleArray86 = empiricalDistributionImpl50.getUpperBounds();
        double double89 = max46.evaluate(doubleArray86, (int) 'a', 10);
        double double90 = variance35.evaluate(doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = min2.evaluate(doubleArray86, (-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 19.43999999999942d + "'", double19 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2.51188643150958d + "'", double20 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 5L + "'", long22 == 5L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1000 + "'", int51 == 1000);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 2L + "'", long60 == 2L);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 19.43999999999942d + "'", double81 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2.51188643150958d + "'", double82 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.6d + "'", double89 == 0.6d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.5984000000000001E-4d + "'", double90 == 1.5984000000000001E-4d);
    }

    @Test
    public void test00561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00561");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSum();
        double double4 = summaryStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMeanImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
    }

    @Test
    public void test00562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00562");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.lang.String str6 = uRL3.toExternalForm();
        java.io.File file9 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL10 = file9.toURL();
        java.lang.String str11 = uRL10.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler13 = null;
        java.net.URL uRL14 = new java.net.URL(uRL10, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler13);
        boolean boolean15 = uRL3.sameFile(uRL14);
        java.net.URLConnection uRLConnection16 = uRL3.openConnection();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double18 = secondMoment17.getResult();
        secondMoment17.increment((double) 1);
        long long21 = secondMoment17.getN();
        boolean boolean22 = uRL3.equals((java.lang.Object) long21);
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str6, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file9.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file9.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL10);
// flaky:         org.junit.Assert.assertEquals(uRL10.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(uRLConnection16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test00563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00563");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = summaryStatistics0.getSummary();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.clear();
        long long5 = secondMoment3.getN();
        secondMoment3.clear();
        double double7 = secondMoment3.getResult();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment3);
        double double9 = secondMoment3.getResult();
        secondMoment3.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test00564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00564");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL7 = file6.toURL();
        java.lang.String str8 = uRL7.getAuthority();
        int int9 = uRL7.getPort();
        java.lang.String str10 = uRL7.toExternalForm();
        java.io.File file13 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL14 = file13.toURL();
        java.lang.String str15 = uRL14.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler17 = null;
        java.net.URL uRL18 = new java.net.URL(uRL14, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler17);
        boolean boolean19 = uRL7.sameFile(uRL18);
        java.lang.String str20 = uRL18.getQuery();
        java.io.File file23 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL24 = file23.toURL();
        java.lang.String str25 = uRL24.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler27 = null;
        java.net.URL uRL28 = new java.net.URL(uRL24, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler27);
        java.io.File file31 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL32 = file31.toURL();
        boolean boolean33 = uRL24.sameFile(uRL32);
        java.net.URL uRL35 = new java.net.URL(uRL32, "/hi!4129638666993068054:");
        java.lang.Class[] classArray36 = new java.lang.Class[] {};
        java.lang.Object obj37 = uRL35.getContent(classArray36);
        java.lang.Object obj38 = null; // flaky: uRL18.getContent(classArray36);
        java.lang.Object obj39 = null; // flaky: uRL3.getContent(classArray36);
        java.io.File file42 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL43 = file42.toURL();
        java.lang.String str44 = uRL43.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler46 = null;
        java.net.URL uRL47 = new java.net.URL(uRL43, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler46);
        java.lang.String str48 = uRL43.getUserInfo();
        boolean boolean49 = uRL3.sameFile(uRL43);
        java.net.URLStreamHandler uRLStreamHandler51 = null;
        java.net.URL uRL52 = new java.net.URL(uRL3, "hi!8353785860681946886:", uRLStreamHandler51);
        java.lang.String str53 = uRL3.toString();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file6.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file6.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str10, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file13.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file13.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL14);
// flaky:         org.junit.Assert.assertEquals(uRL14.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals(uRL18.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file23.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL24);
// flaky:         org.junit.Assert.assertEquals(uRL24.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(uRL28.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file31.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file31.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL32);
// flaky:         org.junit.Assert.assertEquals(uRL32.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals(uRL35.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file42.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL43);
// flaky:         org.junit.Assert.assertEquals(uRL43.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals(uRL47.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertEquals(uRL52.toString(), "file:/experiment/hi!2169115775229245488/hi!8353785860681946886:");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str53, "file:/experiment/hi!2169115775229245488/hi!");
    }

    @Test
    public void test00565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00565");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max12.clear();
        double double14 = max12.getResult();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares15 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long16 = sumOfSquares15.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long21 = variance20.getN();
        double[] doubleArray27 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double29 = variance20.evaluate(doubleArray27, (double) 'a');
        double double33 = variance18.evaluate(doubleArray27, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double36 = sumOfSquares15.evaluate(doubleArray27, (int) (short) 1, 0);
        double double39 = max12.evaluate(doubleArray27, (int) (short) 1, (int) (short) 0);
        long long40 = max12.getN();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        max12.increment(24.300000000000182d);
        max12.increment(1.645454028E12d);
        double double46 = max12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long49 = variance48.getN();
        long long50 = variance48.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double52 = secondMoment51.getResult();
        secondMoment51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean55 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean55.increment((double) (short) 100);
        geometricMean55.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long62 = variance61.getN();
        double[] doubleArray68 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double70 = variance61.evaluate(doubleArray68, (double) 'a');
        double double71 = geometricMean55.evaluate(doubleArray68);
        double double72 = variance54.evaluate(doubleArray68);
        double double73 = variance48.evaluate(doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = max12.evaluate(doubleArray68, (int) 'a', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 19.43999999999942d + "'", double29 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.645454028E12d + "'", double46 == 1.645454028E12d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 19.43999999999942d + "'", double70 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2.51188643150958d + "'", double71 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 24.3d + "'", double72 == 24.3d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 19.44d + "'", double73 == 19.44d);
    }

    @Test
    public void test00566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00566");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file5 = new java.io.File("");
        java.io.File file6 = java.io.File.createTempFile("hi!", ":", file5);
        java.lang.String str7 = file6.getCanonicalPath();
        boolean boolean8 = file6.createNewFile();
        empiricalDistributionImpl0.load(file6);
        boolean boolean10 = empiricalDistributionImpl0.isLoaded();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics11 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double12 = summaryStatistics11.getMin();
        double double13 = summaryStatistics11.getStandardDeviation();
        double double14 = summaryStatistics11.getMean();
        double double15 = summaryStatistics11.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double18 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment17);
        summaryStatistics11.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        summaryStatistics11.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean24.increment((double) 0);
        double double27 = mean24.getResult();
        mean24.clear();
        double[] doubleArray29 = new double[] {};
        mean24.incrementAll(doubleArray29);
        double double31 = variance22.evaluate(doubleArray29);
        empiricalDistributionImpl0.load(doubleArray29);
        java.io.File file35 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL36 = file35.toURL();
        java.lang.String str37 = uRL36.getAuthority();
        int int38 = uRL36.getPort();
        java.net.URL uRL40 = new java.net.URL(uRL36, "/experiment");
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(uRL40);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: For input string: \"-\"");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/hi!4169464461871901105:");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/hi!4169464461871901105:" + "'", str7, "/hi!4169464461871901105:");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertEquals(file35.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file35.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL36);
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertEquals(uRL40.toString(), "file:/experiment");
    }

    @Test
    public void test00567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00567");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) (-1L));
        geometricMean0.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean7 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean7.increment((double) (short) 100);
        geometricMean7.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long14 = variance13.getN();
        double[] doubleArray20 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double22 = variance13.evaluate(doubleArray20, (double) 'a');
        double double23 = geometricMean7.evaluate(doubleArray20);
        double double24 = geometricMean0.evaluate(doubleArray20);
        long long25 = geometricMean0.getN();
        geometricMean0.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic28 = geometricMean0.getSumLogImpl();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 19.43999999999942d + "'", double22 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2.51188643150958d + "'", double23 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2.51188643150958d + "'", double24 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3L + "'", long25 == 3L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic28);
    }

    @Test
    public void test00568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00568");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max0.increment((double) '#');
        max0.clear();
        double double4 = max0.getResult();
        max0.clear();
        max0.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics7 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double8 = summaryStatistics7.getMin();
        double double9 = summaryStatistics7.getStandardDeviation();
        double double10 = summaryStatistics7.getSum();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares11 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long12 = sumOfSquares11.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long17 = variance16.getN();
        double[] doubleArray23 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double25 = variance16.evaluate(doubleArray23, (double) 'a');
        double double29 = variance14.evaluate(doubleArray23, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double32 = sumOfSquares11.evaluate(doubleArray23, (int) (short) 1, 0);
        double double33 = sumOfSquares11.getResult();
        long long34 = sumOfSquares11.getN();
        sumOfSquares11.clear();
        summaryStatistics7.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares11);
        double double37 = sumOfSquares11.getResult();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares38 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares38.increment((double) (byte) 1);
        double double41 = sumOfSquares38.getResult();
        sumOfSquares38.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double44 = secondMoment43.getResult();
        secondMoment43.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment43);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment48.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment48);
        secondMoment48.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment48);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long58 = variance57.getN();
        double[] doubleArray64 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double66 = variance57.evaluate(doubleArray64, (double) 'a');
        mean55.incrementAll(doubleArray64);
        double double68 = variance52.evaluate(doubleArray64);
        double double69 = secondMoment43.evaluate(doubleArray64);
        double double70 = sumOfSquares38.evaluate(doubleArray64);
        sumOfSquares11.incrementAll(doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            double double74 = max0.evaluate(doubleArray64, (int) '#', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 19.43999999999942d + "'", double25 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 19.43999999999942d + "'", double66 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 24.3d + "'", double68 == 24.3d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 97.2d + "'", double69 == 97.2d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 203.0d + "'", double70 == 203.0d);
    }

    @Test
    public void test00569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00569");
        java.io.File file2 = new java.io.File("/hi!2756764035548942023:", ":");
        java.io.File file3 = file2.getParentFile();
        java.io.File file5 = new java.io.File(file2, "/hi!8130836485477920045:");
        boolean boolean7 = file5.setExecutable(true);
        org.apache.commons.math.stat.descriptive.rank.Max max8 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max8.clear();
        max8.increment((double) (-1L));
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int13 = empiricalDistributionImpl12.getBinCount();
        boolean boolean14 = empiricalDistributionImpl12.isLoaded();
        java.util.List list15 = empiricalDistributionImpl12.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean16 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean16.increment((double) (short) 100);
        geometricMean16.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic21 = geometricMean16.getSumLogImpl();
        long long22 = geometricMean16.getN();
        double double23 = geometricMean16.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics24 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double25 = summaryStatistics24.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min26 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics24.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min26);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean28 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean28.increment((double) (short) 100);
        geometricMean28.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long35 = variance34.getN();
        double[] doubleArray41 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double43 = variance34.evaluate(doubleArray41, (double) 'a');
        double double44 = geometricMean28.evaluate(doubleArray41);
        min26.incrementAll(doubleArray41);
        geometricMean16.incrementAll(doubleArray41);
        empiricalDistributionImpl12.load(doubleArray41);
        double[] doubleArray48 = empiricalDistributionImpl12.getUpperBounds();
        double double51 = max8.evaluate(doubleArray48, (int) 'a', 10);
        long long52 = max8.getN();
        boolean boolean53 = file5.equals((java.lang.Object) long52);
        org.junit.Assert.assertEquals(file2.getParent(), "/hi!2756764035548942023:");
        org.junit.Assert.assertEquals(file2.toString(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/");
        org.junit.Assert.assertEquals(file3.toString(), "/hi!2756764035548942023:");
        org.junit.Assert.assertEquals(file5.getParent(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertEquals(file5.toString(), "/hi!2756764035548942023:/:/hi!8130836485477920045:");
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1000 + "'", int13 == 1000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2L + "'", long22 == 2L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 19.43999999999942d + "'", double43 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2.51188643150958d + "'", double44 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.6d + "'", double51 == 0.6d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test00570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00570");
        java.io.File file5 = new java.io.File("");
        java.io.File file6 = java.io.File.createTempFile("hi!", ":", file5);
        java.net.URI uRI7 = file6.toURI();
        boolean boolean9 = file6.setReadable(false);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file10 = java.io.File.createTempFile("/hi!6147520189804127628:", "/hi!5946226624167744923:", file6);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /hi!9073265787366972596:/hi!6147520189804127628:8883216708280922845/hi!5946226624167744923:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/hi!9073265787366972596:");
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test00571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00571");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL7 = file6.toURL();
        java.lang.String str8 = uRL7.getAuthority();
        int int9 = uRL7.getPort();
        java.lang.String str10 = uRL7.toExternalForm();
        java.io.File file13 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL14 = file13.toURL();
        java.lang.String str15 = uRL14.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler17 = null;
        java.net.URL uRL18 = new java.net.URL(uRL14, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler17);
        boolean boolean19 = uRL7.sameFile(uRL18);
        java.lang.String str20 = uRL18.getQuery();
        java.io.File file23 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL24 = file23.toURL();
        java.lang.String str25 = uRL24.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler27 = null;
        java.net.URL uRL28 = new java.net.URL(uRL24, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler27);
        java.io.File file31 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL32 = file31.toURL();
        boolean boolean33 = uRL24.sameFile(uRL32);
        java.net.URL uRL35 = new java.net.URL(uRL32, "/hi!4129638666993068054:");
        java.lang.Class[] classArray36 = new java.lang.Class[] {};
        java.lang.Object obj37 = uRL35.getContent(classArray36);
        java.lang.Object obj38 = null; // flaky: uRL18.getContent(classArray36);
        java.lang.Object obj39 = null; // flaky: uRL3.getContent(classArray36);
        java.lang.String str40 = uRL3.toString();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file6.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file6.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str10, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file13.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file13.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL14);
// flaky:         org.junit.Assert.assertEquals(uRL14.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals(uRL18.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file23.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL24);
// flaky:         org.junit.Assert.assertEquals(uRL24.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(uRL28.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file31.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file31.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL32);
// flaky:         org.junit.Assert.assertEquals(uRL32.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals(uRL35.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str40, "file:/experiment/hi!2169115775229245488/hi!");
    }

    @Test
    public void test00572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00572");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.increment((double) '#');
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean4.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double8 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment12);
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long22 = variance21.getN();
        double[] doubleArray28 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double30 = variance21.evaluate(doubleArray28, (double) 'a');
        mean19.incrementAll(doubleArray28);
        double double32 = variance16.evaluate(doubleArray28);
        double double33 = secondMoment7.evaluate(doubleArray28);
        mean4.incrementAll(doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray28, (int) (byte) 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 19.43999999999942d + "'", double30 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 24.3d + "'", double32 == 24.3d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 97.2d + "'", double33 == 97.2d);
    }

    @Test
    public void test00573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00573");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        java.lang.String str5 = file4.getCanonicalPath();
        boolean boolean6 = file4.mkdir();
        java.lang.String str7 = file4.getName();
        java.io.File file11 = new java.io.File("");
        java.io.File file12 = java.io.File.createTempFile("hi!", ":", file11);
        boolean boolean14 = file12.setWritable(true);
        boolean boolean15 = file12.canExecute();
        java.io.File file17 = new java.io.File("");
        boolean boolean20 = file17.setWritable(true, true);
        boolean boolean21 = file17.setReadOnly();
        boolean boolean24 = file17.setWritable(true, false);
        java.net.URI uRI25 = file17.toURI();
        boolean boolean26 = file17.mkdir();
        java.io.File file27 = file17.getCanonicalFile();
        boolean boolean28 = file12.renameTo(file17);
        boolean boolean31 = file17.setWritable(true, true);
        boolean boolean32 = file4.renameTo(file17);
        java.lang.String str33 = file4.getParent();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!8004869517018842683:");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/hi!8004869517018842683:" + "'", str5, "/hi!8004869517018842683:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!8004869517018842683:" + "'", str7, "hi!8004869517018842683:");
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "");
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/hi!2215450460116755847:");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(uRI25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(file27);
// flaky:         org.junit.Assert.assertEquals(file27.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file27.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "/" + "'", str33, "/");
    }

    @Test
    public void test00574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00574");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        java.lang.String str5 = file4.getAbsolutePath();
        boolean boolean6 = file4.setReadOnly();
        boolean boolean8 = file4.setWritable(false);
        boolean boolean9 = file4.isHidden();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!5827105985648662477:");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/hi!5827105985648662477:" + "'", str5, "/hi!5827105985648662477:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00575");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("java.io.IOException: :", "/hi!4873743748311825875:");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/java.io.IOException: :6017366103375205730/hi!4873743748311825875:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00576");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        boolean boolean3 = empiricalDistributionImpl0.isLoaded();
        boolean boolean4 = empiricalDistributionImpl0.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int6 = empiricalDistributionImpl5.getBinCount();
        boolean boolean7 = empiricalDistributionImpl5.isLoaded();
        java.util.List list8 = empiricalDistributionImpl5.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean9 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean9.increment((double) (short) 100);
        geometricMean9.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic14 = geometricMean9.getSumLogImpl();
        long long15 = geometricMean9.getN();
        double double16 = geometricMean9.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics17 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double18 = summaryStatistics17.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min19 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics17.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min19);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean21 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean21.increment((double) (short) 100);
        geometricMean21.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long28 = variance27.getN();
        double[] doubleArray34 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double36 = variance27.evaluate(doubleArray34, (double) 'a');
        double double37 = geometricMean21.evaluate(doubleArray34);
        min19.incrementAll(doubleArray34);
        geometricMean9.incrementAll(doubleArray34);
        empiricalDistributionImpl5.load(doubleArray34);
        empiricalDistributionImpl0.load(doubleArray34);
        java.util.List list42 = empiricalDistributionImpl0.getBinStats();
        java.io.File file44 = new java.io.File("");
        boolean boolean47 = file44.setWritable(true, true);
        java.net.URL uRL48 = file44.toURL();
        int int49 = uRL48.getDefaultPort();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(uRL48);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: For input string: \"-\"");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1000 + "'", int6 == 1000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 19.43999999999942d + "'", double36 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2.51188643150958d + "'", double37 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(list42);
        org.junit.Assert.assertNull("file44.getParent() == null", file44.getParent());
        org.junit.Assert.assertEquals(file44.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(uRL48);
// flaky:         org.junit.Assert.assertEquals(uRL48.toString(), "file:/experiment");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test00577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00577");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double7 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        double double24 = variance14.getResult();
        boolean boolean25 = variance14.isBiasCorrected();
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance14);
        variance14.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test00578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00578");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        boolean boolean10 = file1.setExecutable(true);
        boolean boolean11 = file1.exists();
        boolean boolean12 = file1.canRead();
        long long13 = file1.getUsableSpace();
        java.io.File file14 = file1.getCanonicalFile();
        java.nio.file.Path path15 = file14.toPath();
        boolean boolean16 = file14.exists();
        java.lang.String str17 = file14.getAbsolutePath();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(file14);
// flaky:         org.junit.Assert.assertEquals(file14.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/experiment");
        org.junit.Assert.assertNotNull(path15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "/experiment" + "'", str17, "/experiment");
    }

    @Test
    public void test00579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00579");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics12 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double13 = summaryStatistics12.getMin();
        double double14 = summaryStatistics12.getStandardDeviation();
        double double15 = summaryStatistics12.getMean();
        double double16 = summaryStatistics12.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long18 = mean17.getN();
        summaryStatistics12.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean17);
        mean17.increment((double) (-27));
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean17);
        double double23 = summaryStatistics0.getMean();
        summaryStatistics0.clear();
        long long25 = summaryStatistics0.getN();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test00580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00580");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        java.lang.Class<?> wildcardClass7 = secondMoment1.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics8 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance((java.lang.Class) wildcardClass7);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.descriptive.moment.SecondMoment cannot be cast to org.apache.commons.math.stat.descriptive.SummaryStatistics");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test00581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00581");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long5 = variance4.getN();
        double[] doubleArray11 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double13 = variance4.evaluate(doubleArray11, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long19 = variance18.getN();
        double[] doubleArray25 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double27 = variance18.evaluate(doubleArray25, (double) 'a');
        mean16.incrementAll(doubleArray25);
        double double30 = variance4.evaluate(doubleArray25, (double) (byte) 1);
        geometricMean0.incrementAll(doubleArray25);
        geometricMean0.clear();
        org.apache.commons.math.stat.descriptive.summary.Sum sum33 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long34 = sum33.getN();
        double double35 = sum33.getResult();
        geometricMean0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum33);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics37 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double38 = summaryStatistics37.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean39.increment((double) 0);
        double double42 = mean39.getResult();
        long long43 = mean39.getN();
        mean39.clear();
        summaryStatistics37.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean39);
        double double46 = summaryStatistics37.getMean();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean47 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean47.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long52 = variance51.getN();
        double[] doubleArray58 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double60 = variance51.evaluate(doubleArray58, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment61);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long66 = variance65.getN();
        double[] doubleArray72 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double74 = variance65.evaluate(doubleArray72, (double) 'a');
        mean63.incrementAll(doubleArray72);
        double double77 = variance51.evaluate(doubleArray72, (double) (byte) 1);
        geometricMean47.incrementAll(doubleArray72);
        summaryStatistics37.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean47);
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long82 = variance81.getN();
        double[] doubleArray88 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double90 = variance81.evaluate(doubleArray88, (double) 'a');
        variance81.clear();
        double[] doubleArray95 = new double[] { (byte) 0, (short) 0, 299098734592L };
        double double97 = variance81.evaluate(doubleArray95, (double) 1);
        double double98 = geometricMean47.evaluate(doubleArray95);
        geometricMean0.incrementAll(doubleArray95);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 19.43999999999942d + "'", double13 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 19.43999999999942d + "'", double27 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 19.44d + "'", double30 == 19.44d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 19.43999999999942d + "'", double60 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 19.43999999999942d + "'", double74 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 19.44d + "'", double77 == 19.44d);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 19.43999999999942d + "'", double90 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[0.0, 0.0, 2.99098734592E11]");
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 1.988001178545237E22d + "'", double97 == 1.988001178545237E22d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
    }

    @Test
    public void test00582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00582");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.canWrite();
        boolean boolean6 = file1.isAbsolute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test00583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00583");
        java.io.File file3 = new java.io.File("");
        boolean boolean5 = file3.setReadable(true);
        long long6 = file3.lastModified();
        java.io.File file8 = new java.io.File(file3, "/hi!8130836485477920045:");
        boolean boolean11 = file3.setExecutable(false, false);
        java.lang.String str12 = file3.getParent();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file13 = java.io.File.createTempFile("hi!2232411813602606403:", "/hi!4420905478953568698:", file3);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /hi!2232411813602606403:6781284438755172860/hi!4420905478953568698:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
        org.junit.Assert.assertEquals(file8.toString(), "/hi!8130836485477920045:");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test00584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00584");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getMax();
        double double5 = summaryStatistics0.getMean();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test00585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00585");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("/hi!8695361449339891175:", "/hi!8006782212060794659:", (int) (short) 1, "/hi!8695361449339891175:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!8695361449339891175:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00586");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        int int3 = empiricalDistributionImpl0.getBinCount();
        int int4 = empiricalDistributionImpl0.getBinCount();
        boolean boolean5 = empiricalDistributionImpl0.isLoaded();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00587");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double19 = geometricMean3.evaluate(doubleArray16);
        empiricalDistributionImpl0.load(doubleArray16);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file25 = new java.io.File("");
        java.io.File file26 = java.io.File.createTempFile("hi!", ":", file25);
        java.lang.String str27 = file26.getCanonicalPath();
        boolean boolean29 = file26.setExecutable(false);
        boolean boolean31 = file26.setWritable(true);
        boolean boolean32 = file26.mkdirs();
        boolean boolean35 = file26.setExecutable(true, false);
        empiricalDistributionImpl0.load(file26);
        boolean boolean37 = file26.mkdirs();
        java.io.File file40 = new java.io.File("/hi!2625591491386671483:", "/hi!3772792150792173750:");
        int int41 = file26.compareTo(file40);
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.51188643150958d + "'", double19 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNull("file25.getParent() == null", file25.getParent());
        org.junit.Assert.assertEquals(file25.toString(), "");
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/hi!4902629864105712484:");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "/hi!4902629864105712484:" + "'", str27, "/hi!4902629864105712484:");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals(file40.getParent(), "/hi!2625591491386671483:");
        org.junit.Assert.assertEquals(file40.toString(), "/hi!2625591491386671483:/hi!3772792150792173750:");
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
    }

    @Test
    public void test00588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00588");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double4 = secondMoment0.getResult();
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double8 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double11 = secondMoment7.getResult();
        double double12 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        boolean boolean14 = variance6.equals((java.lang.Object) variance13);
        long long15 = variance6.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test00589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00589");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        long long7 = file4.getUsableSpace();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!5411201523519984990:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 280499589120L + "'", long7 == 280499589120L);
    }

    @Test
    public void test00590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00590");
        java.io.File file2 = new java.io.File("/hi!2756764035548942023:", ":");
        java.io.File file3 = file2.getParentFile();
        java.net.URL uRL4 = file2.toURL();
        java.lang.String str5 = uRL4.getUserInfo();
        java.lang.String str6 = uRL4.getPath();
        java.lang.String str7 = uRL4.getUserInfo();
        org.junit.Assert.assertEquals(file2.getParent(), "/hi!2756764035548942023:");
        org.junit.Assert.assertEquals(file2.toString(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/");
        org.junit.Assert.assertEquals(file3.toString(), "/hi!2756764035548942023:");
        org.junit.Assert.assertNotNull(uRL4);
// flaky:         org.junit.Assert.assertEquals(uRL4.toString(), "file:/hi!2756764035548942023:/:");
        org.junit.Assert.assertNull(str5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/hi!2756764035548942023:/:" + "'", str6, "/hi!2756764035548942023:/:");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test00591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00591");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        long long2 = sum0.getN();
        sum0.clear();
        sum0.clear();
        sum0.increment(1.988001178545237E22d);
        sum0.increment(6.907755278982137d);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics9 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics9.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean10);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean12 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean12.increment((double) (short) 100);
        geometricMean12.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic17 = geometricMean12.getSumLogImpl();
        summaryStatistics9.setMinImpl(storelessUnivariateStatistic17);
        double double19 = summaryStatistics9.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics9.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance21);
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean23.increment((double) 0);
        double double26 = mean23.getResult();
        mean23.clear();
        double[] doubleArray28 = new double[] {};
        mean23.incrementAll(doubleArray28);
        variance21.incrementAll(doubleArray28);
        long long31 = variance21.getN();
        org.apache.commons.math.stat.descriptive.rank.Max max32 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max32.clear();
        max32.increment((double) (-1L));
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int37 = empiricalDistributionImpl36.getBinCount();
        boolean boolean38 = empiricalDistributionImpl36.isLoaded();
        java.util.List list39 = empiricalDistributionImpl36.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean40 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean40.increment((double) (short) 100);
        geometricMean40.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic45 = geometricMean40.getSumLogImpl();
        long long46 = geometricMean40.getN();
        double double47 = geometricMean40.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics48 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double49 = summaryStatistics48.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min50 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics48.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min50);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean52 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean52.increment((double) (short) 100);
        geometricMean52.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long59 = variance58.getN();
        double[] doubleArray65 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double67 = variance58.evaluate(doubleArray65, (double) 'a');
        double double68 = geometricMean52.evaluate(doubleArray65);
        min50.incrementAll(doubleArray65);
        geometricMean40.incrementAll(doubleArray65);
        empiricalDistributionImpl36.load(doubleArray65);
        double[] doubleArray72 = empiricalDistributionImpl36.getUpperBounds();
        double double75 = max32.evaluate(doubleArray72, (int) 'a', 10);
        double double76 = variance21.evaluate(doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            double double79 = sum0.evaluate(doubleArray72, (int) '4', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1000 + "'", int37 == 1000);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(list39);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 2L + "'", long46 == 2L);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 19.43999999999942d + "'", double67 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2.51188643150958d + "'", double68 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.6d + "'", double75 == 0.6d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.5984000000000001E-4d + "'", double76 == 1.5984000000000001E-4d);
    }

    @Test
    public void test00592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00592");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMean();
        double double2 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics3 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double4 = summaryStatistics3.getMin();
        double double5 = summaryStatistics3.getStandardDeviation();
        double double6 = summaryStatistics3.getMean();
        double double7 = summaryStatistics3.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long9 = mean8.getN();
        summaryStatistics3.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        mean8.increment((double) (-27));
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        summaryStatistics0.addValue((double) 280499609600L);
        double double16 = summaryStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double18 = secondMoment17.getResult();
        secondMoment17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        long long21 = variance20.getN();
        long long22 = variance20.getN();
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementations must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.402498047865E11d + "'", double16 == 1.402498047865E11d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test00593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00593");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        int int6 = uRL3.getDefaultPort();
        java.net.URI uRI7 = uRL3.toURI();
        java.lang.String str8 = uRL3.getFile();
        java.net.Proxy proxy9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection10 = uRL3.openConnection(proxy9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(uRI7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str8, "/experiment/hi!2169115775229245488/hi!");
    }

    @Test
    public void test00594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00594");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean1.increment((double) (short) 100);
        geometricMean1.increment((double) (-1L));
        geometricMean1.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean8 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean8.increment((double) (short) 100);
        geometricMean8.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        double double24 = geometricMean8.evaluate(doubleArray21);
        double double25 = geometricMean1.evaluate(doubleArray21);
        double double28 = sum0.evaluate(doubleArray21, 0, 0);
        sum0.increment((double) 1645454026000L);
        sum0.clear();
        sum0.increment((double) (-3));
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long36 = variance35.getN();
        double[] doubleArray42 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double44 = variance35.evaluate(doubleArray42, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long50 = variance49.getN();
        double[] doubleArray56 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double58 = variance49.evaluate(doubleArray56, (double) 'a');
        mean47.incrementAll(doubleArray56);
        double double61 = variance35.evaluate(doubleArray56, (double) (byte) 1);
        variance35.increment((double) 1.0f);
        boolean boolean64 = variance35.isBiasCorrected();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl65 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment66.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment66);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long71 = variance70.getN();
        double[] doubleArray77 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double79 = variance70.evaluate(doubleArray77, (double) 'a');
        mean68.incrementAll(doubleArray77);
        empiricalDistributionImpl65.load(doubleArray77);
        variance35.incrementAll(doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = sum0.evaluate(doubleArray77, (int) (byte) 100, (int) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2.51188643150958d + "'", double24 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2.51188643150958d + "'", double25 == 2.51188643150958d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 19.43999999999942d + "'", double44 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 19.43999999999942d + "'", double58 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 19.44d + "'", double61 == 19.44d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 19.43999999999942d + "'", double79 == 19.43999999999942d);
    }

    @Test
    public void test00595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00595");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min0.clear();
        double[] doubleArray7 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double8 = min0.evaluate(doubleArray7);
        long long9 = min0.getN();
        min0.increment((double) 1000);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance13.increment((double) (byte) 100);
        java.io.File file18 = new java.io.File("/hi!4420905478953568698:", "/experiment/hi!2169115775229245488");
        boolean boolean19 = variance13.equals((java.lang.Object) "/hi!4420905478953568698:");
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean20.increment((double) 0);
        double double23 = mean20.getResult();
        mean20.clear();
        double[] doubleArray25 = new double[] {};
        mean20.incrementAll(doubleArray25);
        double double28 = variance13.evaluate(doubleArray25, (double) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = min0.evaluate(doubleArray25, (int) (byte) 10, (int) ':');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals(file18.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file18.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test00596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00596");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean2.increment((double) (short) 100);
        geometricMean2.increment(0.0d);
        geometricMean2.clear();
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean2);
        summaryStatistics0.clear();
        double double10 = summaryStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getMinImpl();
        double double12 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics13 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double14 = summaryStatistics13.getMin();
        double double15 = summaryStatistics13.getStandardDeviation();
        double double16 = summaryStatistics13.getMax();
        double double17 = summaryStatistics13.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic18 = summaryStatistics13.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long20 = mean19.getN();
        summaryStatistics13.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean19);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.clear();
        double double24 = secondMoment22.getResult();
        summaryStatistics13.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment22);
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment22);
        double double27 = summaryStatistics0.getMax();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test00597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00597");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long1 = mean0.getN();
        mean0.increment(100.0d);
        double double4 = mean0.getResult();
        mean0.increment((double) 280499601408L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double8 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl10.getSampleStats();
        java.io.File file15 = new java.io.File("");
        java.io.File file16 = java.io.File.createTempFile("hi!", ":", file15);
        java.lang.String str17 = file16.getCanonicalPath();
        boolean boolean18 = file16.createNewFile();
        empiricalDistributionImpl10.load(file16);
        double[] doubleArray20 = empiricalDistributionImpl10.getUpperBounds();
        double[] doubleArray21 = empiricalDistributionImpl10.getUpperBounds();
        double double24 = variance9.evaluate(doubleArray21, (int) (short) 1, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = mean0.evaluate(doubleArray21, 2, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNull(statisticalSummary11);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "");
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file16.toString(), "/hi!7617765574611328463:");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "/hi!7617765574611328463:" + "'", str17, "/hi!7617765574611328463:");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test00598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00598");
        java.io.File file4 = java.io.File.createTempFile("hi!", "");
        boolean boolean6 = file4.setLastModified((long) '#');
        java.io.File file7 = file4.getCanonicalFile();
        boolean boolean8 = file7.canWrite();
        java.nio.file.Path path9 = file7.toPath();
        boolean boolean10 = file7.exists();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file11 = java.io.File.createTempFile("/hi!7535711402918086741:", "/hi!4015697275580729832:", file7);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/hi!8046051985252886217/hi!7535711402918086741:3887928308733115351/hi!4015697275580729832:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/tmp/hi!8046051985252886217");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/tmp/hi!8046051985252886217");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(path9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test00599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00599");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean3 = empiricalDistributionImpl0.isLoaded();
        java.util.List list4 = empiricalDistributionImpl0.getBinStats();
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(list4);
    }

    @Test
    public void test00600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00600");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        java.lang.String str5 = file4.getCanonicalPath();
        boolean boolean6 = file4.mkdir();
        java.lang.String str7 = file4.getName();
        java.io.File file11 = new java.io.File("");
        java.io.File file12 = java.io.File.createTempFile("hi!", ":", file11);
        boolean boolean14 = file12.setWritable(true);
        boolean boolean15 = file12.canExecute();
        java.io.File file17 = new java.io.File("");
        boolean boolean20 = file17.setWritable(true, true);
        boolean boolean21 = file17.setReadOnly();
        boolean boolean24 = file17.setWritable(true, false);
        java.net.URI uRI25 = file17.toURI();
        boolean boolean26 = file17.mkdir();
        java.io.File file27 = file17.getCanonicalFile();
        boolean boolean28 = file12.renameTo(file17);
        boolean boolean31 = file17.setWritable(true, true);
        boolean boolean32 = file4.renameTo(file17);
        boolean boolean34 = file4.setReadable(false);
        java.lang.Throwable throwable37 = null;
        java.io.IOException iOException38 = new java.io.IOException("hi!", throwable37);
        java.io.IOException iOException39 = new java.io.IOException(throwable37);
        java.lang.Throwable throwable42 = null;
        java.io.IOException iOException43 = new java.io.IOException("hi!", throwable42);
        java.io.IOException iOException44 = new java.io.IOException((java.lang.Throwable) iOException43);
        java.io.IOException iOException45 = new java.io.IOException("hi!2169115775229245488", (java.lang.Throwable) iOException44);
        iOException39.addSuppressed((java.lang.Throwable) iOException44);
        java.lang.Throwable throwable49 = null;
        java.io.IOException iOException50 = new java.io.IOException("hi!", throwable49);
        java.io.IOException iOException51 = new java.io.IOException((java.lang.Throwable) iOException50);
        java.io.IOException iOException52 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException50);
        iOException39.addSuppressed((java.lang.Throwable) iOException52);
        java.io.IOException iOException54 = new java.io.IOException("/hi!6201492263311768395:", (java.lang.Throwable) iOException52);
        java.lang.Throwable throwable57 = null;
        java.io.IOException iOException58 = new java.io.IOException("hi!", throwable57);
        java.io.IOException iOException59 = new java.io.IOException((java.lang.Throwable) iOException58);
        java.io.IOException iOException60 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException58);
        iOException52.addSuppressed((java.lang.Throwable) iOException58);
        java.io.IOException iOException62 = new java.io.IOException((java.lang.Throwable) iOException52);
        java.lang.Throwable throwable66 = null;
        java.io.IOException iOException67 = new java.io.IOException("hi!", throwable66);
        java.io.IOException iOException68 = new java.io.IOException((java.lang.Throwable) iOException67);
        java.io.IOException iOException69 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException67);
        java.lang.Throwable throwable72 = null;
        java.io.IOException iOException73 = new java.io.IOException("hi!", throwable72);
        java.io.IOException iOException74 = new java.io.IOException(throwable72);
        java.io.IOException iOException75 = new java.io.IOException("/hi!8130836485477920045:", (java.lang.Throwable) iOException74);
        iOException69.addSuppressed((java.lang.Throwable) iOException75);
        java.io.IOException iOException77 = new java.io.IOException((java.lang.Throwable) iOException69);
        java.io.IOException iOException78 = new java.io.IOException("/hi!6244728997591896465:", (java.lang.Throwable) iOException77);
        iOException52.addSuppressed((java.lang.Throwable) iOException78);
        boolean boolean80 = file4.equals((java.lang.Object) iOException78);
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!6856840584807237595:");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/hi!6856840584807237595:" + "'", str5, "/hi!6856840584807237595:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!6856840584807237595:" + "'", str7, "hi!6856840584807237595:");
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "");
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/hi!7563267143692052845:");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(uRI25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(file27);
// flaky:         org.junit.Assert.assertEquals(file27.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file27.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test00601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00601");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.lang.String str6 = uRL3.toExternalForm();
        java.io.File file9 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL10 = file9.toURL();
        java.lang.String str11 = uRL10.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler13 = null;
        java.net.URL uRL14 = new java.net.URL(uRL10, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler13);
        boolean boolean15 = uRL3.sameFile(uRL14);
        java.lang.String str16 = uRL14.getQuery();
        java.io.File file19 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL20 = file19.toURL();
        java.lang.String str21 = uRL20.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler23 = null;
        java.net.URL uRL24 = new java.net.URL(uRL20, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler23);
        java.io.File file27 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL28 = file27.toURL();
        boolean boolean29 = uRL20.sameFile(uRL28);
        java.net.URL uRL31 = new java.net.URL(uRL28, "/hi!4129638666993068054:");
        java.lang.Class[] classArray32 = new java.lang.Class[] {};
        java.lang.Object obj33 = uRL31.getContent(classArray32);
        java.lang.Object obj34 = null; // flaky: uRL14.getContent(classArray32);
        java.lang.String str35 = uRL14.getQuery();
        java.io.InputStream inputStream36 = null; // flaky: uRL14.openStream();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double39 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment38);
        secondMoment38.increment((double) (byte) 10);
        secondMoment38.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment38);
        boolean boolean46 = uRL14.equals((java.lang.Object) secondMoment38);
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str6, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file9.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file9.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL10);
// flaky:         org.junit.Assert.assertEquals(uRL10.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file19.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL20);
// flaky:         org.junit.Assert.assertEquals(uRL20.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals(uRL24.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file27.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file27.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL28);
// flaky:         org.junit.Assert.assertEquals(uRL28.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals(uRL31.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(str35);
// flaky:         org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test00602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00602");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        boolean boolean3 = false; // flaky: file2.createNewFile();
        java.net.URL uRL4 = file2.toURL();
        java.io.File file7 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL8 = file7.toURL();
        java.lang.String str9 = uRL8.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler11 = null;
        java.net.URL uRL12 = new java.net.URL(uRL8, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler11);
        java.io.File file15 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL16 = file15.toURL();
        boolean boolean17 = uRL8.sameFile(uRL16);
        java.io.File file20 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL21 = file20.toURL();
        java.lang.String str22 = uRL21.getAuthority();
        java.lang.String str23 = uRL21.getUserInfo();
        int int24 = uRL21.getDefaultPort();
        java.lang.String str25 = uRL21.getUserInfo();
        java.io.File file28 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL29 = file28.toURL();
        java.lang.String str30 = uRL29.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler32 = null;
        java.net.URL uRL33 = new java.net.URL(uRL29, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler32);
        boolean boolean34 = uRL21.sameFile(uRL33);
        boolean boolean35 = uRL16.sameFile(uRL33);
        java.lang.String str36 = uRL16.getPath();
        boolean boolean37 = uRL4.sameFile(uRL16);
        java.lang.String str38 = uRL4.toString();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(uRL4);
// flaky:         org.junit.Assert.assertEquals(uRL4.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file7.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file7.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL8);
// flaky:         org.junit.Assert.assertEquals(uRL8.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals(uRL12.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file15.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file15.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL16);
// flaky:         org.junit.Assert.assertEquals(uRL16.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals(file20.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file20.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL21);
// flaky:         org.junit.Assert.assertEquals(uRL21.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file28.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL29);
// flaky:         org.junit.Assert.assertEquals(uRL29.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals(uRL33.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str36, "/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str38, "file:/experiment/hi!2169115775229245488/hi!");
    }

    @Test
    public void test00603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00603");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.net.URI uRI4 = uRL3.toURI();
        java.lang.String str5 = uRL3.getUserInfo();
        java.net.URLStreamHandler uRLStreamHandler7 = null;
        java.net.URL uRL8 = new java.net.URL(uRL3, "hi!2169115775229245488", uRLStreamHandler7);
        java.lang.Object obj9 = null; // flaky: uRL3.getContent();
        boolean boolean11 = uRL3.equals((java.lang.Object) (-1));
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRI4);
        org.junit.Assert.assertNull(str5);
// flaky:         org.junit.Assert.assertEquals(uRL8.toString(), "file:/experiment/hi!2169115775229245488/hi!2169115775229245488");
// flaky:         org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00604");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int1 = empiricalDistributionImpl0.getBinCount();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        java.util.List list3 = empiricalDistributionImpl0.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean4.increment((double) (short) 100);
        geometricMean4.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = geometricMean4.getSumLogImpl();
        long long10 = geometricMean4.getN();
        double double11 = geometricMean4.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics12 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double13 = summaryStatistics12.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min14 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics12.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min14);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean16 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean16.increment((double) (short) 100);
        geometricMean16.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long23 = variance22.getN();
        double[] doubleArray29 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double31 = variance22.evaluate(doubleArray29, (double) 'a');
        double double32 = geometricMean16.evaluate(doubleArray29);
        min14.incrementAll(doubleArray29);
        geometricMean4.incrementAll(doubleArray29);
        empiricalDistributionImpl0.load(doubleArray29);
        double[] doubleArray36 = empiricalDistributionImpl0.getUpperBounds();
        int int37 = empiricalDistributionImpl0.getBinCount();
        java.io.File file40 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL41 = file40.toURL();
        java.lang.String str42 = uRL41.getProtocol();
        java.io.File file45 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL46 = file45.toURL();
        java.lang.String str47 = uRL46.getAuthority();
        java.lang.String str48 = uRL46.getUserInfo();
        int int49 = uRL46.getDefaultPort();
        java.lang.String str50 = uRL46.getUserInfo();
        java.io.File file53 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL54 = file53.toURL();
        java.lang.String str55 = uRL54.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler57 = null;
        java.net.URL uRL58 = new java.net.URL(uRL54, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler57);
        boolean boolean59 = uRL46.sameFile(uRL58);
        int int60 = uRL46.getPort();
        java.io.File file63 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL64 = file63.toURL();
        java.lang.String str65 = uRL64.getAuthority();
        java.lang.String str66 = uRL64.getUserInfo();
        int int67 = uRL64.getDefaultPort();
        java.lang.String str68 = uRL64.getUserInfo();
        java.io.File file71 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL72 = file71.toURL();
        java.lang.String str73 = uRL72.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler75 = null;
        java.net.URL uRL76 = new java.net.URL(uRL72, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler75);
        boolean boolean77 = uRL64.sameFile(uRL76);
        java.io.File file80 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL81 = file80.toURL();
        java.lang.String str82 = uRL81.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler84 = null;
        java.net.URL uRL85 = new java.net.URL(uRL81, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler84);
        java.io.File file88 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL89 = file88.toURL();
        boolean boolean90 = uRL81.sameFile(uRL89);
        java.net.URL uRL92 = new java.net.URL(uRL89, "/hi!4129638666993068054:");
        java.lang.Class[] classArray93 = new java.lang.Class[] {};
        java.lang.Object obj94 = uRL92.getContent(classArray93);
        java.lang.Object obj95 = null; // flaky: uRL76.getContent(classArray93);
        java.lang.Object obj96 = null; // flaky: uRL46.getContent(classArray93);
        java.lang.Object obj97 = null; // flaky: uRL41.getContent(classArray93);
        // The following exception was thrown during execution in test generation
{ // flaky:         try {
// flaky:             empiricalDistributionImpl0.load(uRL41);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: URL file:/experiment/hi!2169115775229245488/hi! contains no data");
// flaky:         } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1000 + "'", int1 == 1000);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2L + "'", long10 == 2L);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 19.43999999999942d + "'", double31 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2.51188643150958d + "'", double32 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1000 + "'", int37 == 1000);
        org.junit.Assert.assertEquals(file40.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file40.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL41);
// flaky:         org.junit.Assert.assertEquals(uRL41.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "file" + "'", str42, "file");
        org.junit.Assert.assertEquals(file45.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file45.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL46);
// flaky:         org.junit.Assert.assertEquals(uRL46.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals(file53.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file53.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL54);
// flaky:         org.junit.Assert.assertEquals(uRL54.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals(uRL58.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertEquals(file63.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file63.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL64);
// flaky:         org.junit.Assert.assertEquals(uRL64.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals(file71.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file71.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL72);
// flaky:         org.junit.Assert.assertEquals(uRL72.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals(uRL76.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals(file80.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file80.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL81);
// flaky:         org.junit.Assert.assertEquals(uRL81.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals(uRL85.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file88.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file88.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL89);
// flaky:         org.junit.Assert.assertEquals(uRL89.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertEquals(uRL92.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertNull(obj96);
        org.junit.Assert.assertNull(obj97);
    }

    @Test
    public void test00605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00605");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min0.clear();
        double[] doubleArray7 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double8 = min0.evaluate(doubleArray7);
        long long9 = min0.getN();
        min0.increment((double) 1000);
        min0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long15 = variance14.getN();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl16.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl16.getSampleStats();
        java.util.List list19 = empiricalDistributionImpl16.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl16.getSampleStats();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs21 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean22 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs21);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl23.getSampleStats();
        boolean boolean25 = empiricalDistributionImpl23.isLoaded();
        boolean boolean26 = empiricalDistributionImpl23.isLoaded();
        java.util.List list27 = empiricalDistributionImpl23.getBinStats();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics28 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics28.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean29);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean31 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean31.increment((double) (short) 100);
        geometricMean31.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic36 = geometricMean31.getSumLogImpl();
        summaryStatistics28.setMinImpl(storelessUnivariateStatistic36);
        double double38 = summaryStatistics28.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics28.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance40);
        org.apache.commons.math.stat.descriptive.rank.Min min42 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min42.clear();
        double[] doubleArray49 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double50 = min42.evaluate(doubleArray49);
        variance40.incrementAll(doubleArray49);
        empiricalDistributionImpl23.load(doubleArray49);
        geometricMean22.incrementAll(doubleArray49, (int) (byte) 0, (int) (byte) 1);
        empiricalDistributionImpl16.load(doubleArray49);
        double double59 = variance14.evaluate(doubleArray49, (int) (short) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = min0.evaluate(doubleArray49, 100, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNull(statisticalSummary17);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNull(statisticalSummary20);
        org.junit.Assert.assertNull(statisticalSummary24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic36);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
    }

    @Test
    public void test00606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00606");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler6 = null;
        java.net.URL uRL7 = new java.net.URL(uRL3, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler6);
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        boolean boolean12 = uRL3.sameFile(uRL11);
        java.net.URL uRL14 = new java.net.URL(uRL11, "/hi!4129638666993068054:");
        int int15 = uRL14.getPort();
        java.lang.String str16 = uRL14.getAuthority();
        java.io.File file20 = new java.io.File("");
        java.io.File file21 = java.io.File.createTempFile("hi!", ":", file20);
        boolean boolean22 = file21.canWrite();
        boolean boolean23 = uRL14.equals((java.lang.Object) file21);
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull("file20.getParent() == null", file20.getParent());
        org.junit.Assert.assertEquals(file20.toString(), "");
        org.junit.Assert.assertNotNull(file21);
        org.junit.Assert.assertEquals(file21.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file21.toString(), "/hi!2299624366413570424:");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test00607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00607");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.lang.String str9 = file1.getName();
        long long10 = file1.length();
        boolean boolean11 = file1.canRead();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = file1.createNewFile();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No such file or directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00608");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean2.increment((double) 0);
        double double5 = mean2.getResult();
        long long6 = mean2.getN();
        mean2.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean2);
        double double9 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean10 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean10.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long29 = variance28.getN();
        double[] doubleArray35 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double37 = variance28.evaluate(doubleArray35, (double) 'a');
        mean26.incrementAll(doubleArray35);
        double double40 = variance14.evaluate(doubleArray35, (double) (byte) 1);
        geometricMean10.incrementAll(doubleArray35);
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean10);
        geometricMean10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long46 = variance45.getN();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl47 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary48 = empiricalDistributionImpl47.getSampleStats();
        java.io.File file52 = new java.io.File("");
        java.io.File file53 = java.io.File.createTempFile("hi!", ":", file52);
        java.lang.String str54 = file53.getCanonicalPath();
        boolean boolean55 = file53.createNewFile();
        empiricalDistributionImpl47.load(file53);
        double[] doubleArray57 = empiricalDistributionImpl47.getUpperBounds();
        double[] doubleArray58 = empiricalDistributionImpl47.getUpperBounds();
        double double61 = variance45.evaluate(doubleArray58, 10, 0);
        double double62 = geometricMean10.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean63.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double67 = secondMoment66.getResult();
        secondMoment66.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment66);
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment66);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment71 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment71.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean73 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment71);
        secondMoment71.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment71);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment76 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment76.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean78 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment76);
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long81 = variance80.getN();
        double[] doubleArray87 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double89 = variance80.evaluate(doubleArray87, (double) 'a');
        mean78.incrementAll(doubleArray87);
        double double91 = variance75.evaluate(doubleArray87);
        double double92 = secondMoment66.evaluate(doubleArray87);
        mean63.incrementAll(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = geometricMean10.evaluate(doubleArray87, (int) ' ', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 19.43999999999942d + "'", double37 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 19.44d + "'", double40 == 19.44d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNull(statisticalSummary48);
        org.junit.Assert.assertNull("file52.getParent() == null", file52.getParent());
        org.junit.Assert.assertEquals(file52.toString(), "");
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file53.toString(), "/hi!6917645025699296463:");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "/hi!6917645025699296463:" + "'", str54, "/hi!6917645025699296463:");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 19.43999999999942d + "'", double89 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 24.3d + "'", double91 == 24.3d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 97.2d + "'", double92 == 97.2d);
    }

    @Test
    public void test00609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00609");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        boolean boolean10 = file1.setExecutable(true);
        boolean boolean11 = file1.exists();
        java.io.File file13 = new java.io.File(file1, "/hi!7644059860405527722:");
        java.net.URI uRI14 = file1.toURI();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals(file13.getParent(), "/");
        org.junit.Assert.assertEquals(file13.toString(), "/hi!7644059860405527722:");
        org.junit.Assert.assertNotNull(uRI14);
    }

    @Test
    public void test00610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00610");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL1 = new java.net.URL("/hi!4153277665236235893:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no protocol: /hi!4153277665236235893:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00611");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        double double1 = min0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
    }

    @Test
    public void test00612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00612");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) 0);
        double double5 = geometricMean0.getResult();
        geometricMean0.clear();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean7 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean7.increment((double) (short) 100);
        long long10 = geometricMean7.getN();
        geometricMean7.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics12 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics12.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean13);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean15 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean15.increment((double) (short) 100);
        geometricMean15.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic20 = geometricMean15.getSumLogImpl();
        summaryStatistics12.setMinImpl(storelessUnivariateStatistic20);
        double double22 = summaryStatistics12.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double25 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment24);
        summaryStatistics12.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment24);
        geometricMean7.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment24);
        long long29 = secondMoment24.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance32.increment((double) (byte) 100);
        java.io.File file37 = new java.io.File("/hi!4420905478953568698:", "/experiment/hi!2169115775229245488");
        boolean boolean38 = variance32.equals((java.lang.Object) "/hi!4420905478953568698:");
        boolean boolean39 = variance32.isBiasCorrected();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long46 = variance45.getN();
        double[] doubleArray52 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double54 = variance45.evaluate(doubleArray52, (double) 'a');
        mean43.incrementAll(doubleArray52);
        empiricalDistributionImpl40.load(doubleArray52);
        java.util.List list57 = empiricalDistributionImpl40.getBinStats();
        double[] doubleArray58 = empiricalDistributionImpl40.getUpperBounds();
        double double62 = variance32.evaluate(doubleArray58, (double) (short) 1, (int) (short) 10, (int) '4');
        secondMoment24.incrementAll(doubleArray58, (int) (byte) 10, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double68 = geometricMean0.evaluate(doubleArray58, (-50), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertEquals(file37.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file37.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 19.43999999999942d + "'", double54 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(list57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2.7328566760003855E-16d + "'", double62 == 2.7328566760003855E-16d);
    }

    @Test
    public void test00613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00613");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long13 = variance12.getN();
        double[] doubleArray19 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double21 = variance12.evaluate(doubleArray19, (double) 'a');
        mean10.incrementAll(doubleArray19);
        double double23 = variance7.evaluate(doubleArray19);
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance7);
        variance7.setBiasCorrected(false);
        double double27 = variance7.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl28 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl28.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = empiricalDistributionImpl28.getSampleStats();
        int int31 = empiricalDistributionImpl28.getBinCount();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.clear();
        long long34 = secondMoment32.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long37 = variance36.getN();
        double[] doubleArray43 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double45 = variance36.evaluate(doubleArray43, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment46);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long51 = variance50.getN();
        double[] doubleArray57 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double59 = variance50.evaluate(doubleArray57, (double) 'a');
        mean48.incrementAll(doubleArray57);
        double double62 = variance36.evaluate(doubleArray57, (double) (byte) 1);
        secondMoment32.incrementAll(doubleArray57);
        empiricalDistributionImpl28.load(doubleArray57);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = variance7.evaluate(doubleArray57, (int) '4', 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 19.43999999999942d + "'", double21 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 24.3d + "'", double23 == 24.3d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNull(statisticalSummary29);
        org.junit.Assert.assertNull(statisticalSummary30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1000 + "'", int31 == 1000);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 19.43999999999942d + "'", double45 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 19.43999999999942d + "'", double59 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 19.44d + "'", double62 == 19.44d);
    }

    @Test
    public void test00614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00614");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.canExecute();
        long long8 = file4.getFreeSpace();
        java.io.File file9 = file4.getParentFile();
        boolean boolean10 = file9.mkdir();
        boolean boolean13 = file9.setWritable(true, true);
        boolean boolean14 = file9.exists();
        java.lang.String str15 = file9.getPath();
        boolean boolean16 = file9.isDirectory();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!4077541685651943817:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 299098701824L + "'", long8 == 299098701824L);
        org.junit.Assert.assertNotNull(file9);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "/");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "/" + "'", str15, "/");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00615");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double2 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00616");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        long long5 = file4.lastModified();
        file4.deleteOnExit();
        java.net.URI uRI7 = file4.toURI();
        boolean boolean8 = file4.isFile();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!1618563733727101653:");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645454075000L + "'", long5 == 1645454075000L);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test00617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00617");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("/hi!756638498028713835:", "/hi!9116240588780943281:");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/hi!756638498028713835:4160727575433675635/hi!9116240588780943281:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00618");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics1 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double2 = summaryStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean3.increment((double) 0);
        double double6 = mean3.getResult();
        long long7 = mean3.getN();
        mean3.clear();
        summaryStatistics1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean3);
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean3);
        mean3.clear();
        double double12 = mean3.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test00619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00619");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("/hi!2756764035548942023:", "/hi!756638498028713835:");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/hi!2756764035548942023:8395200859182297072/hi!756638498028713835:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00620");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        double double2 = sumOfLogs0.getResult();
        long long3 = sumOfLogs0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long6 = variance5.getN();
        double[] doubleArray12 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double14 = variance5.evaluate(doubleArray12, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long20 = variance19.getN();
        double[] doubleArray26 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double28 = variance19.evaluate(doubleArray26, (double) 'a');
        mean17.incrementAll(doubleArray26);
        double double31 = variance5.evaluate(doubleArray26, (double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = sumOfLogs0.evaluate(doubleArray26, (int) 'a', 24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 19.43999999999942d + "'", double14 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 19.43999999999942d + "'", double28 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 19.44d + "'", double31 == 19.44d);
    }

    @Test
    public void test00621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00621");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file5 = new java.io.File("");
        java.io.File file6 = java.io.File.createTempFile("hi!", ":", file5);
        java.lang.String str7 = file6.getCanonicalPath();
        boolean boolean8 = file6.createNewFile();
        empiricalDistributionImpl0.load(file6);
        java.io.File file12 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL13 = file12.toURL();
        java.io.File file16 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL17 = file16.toURL();
        java.lang.String str18 = uRL17.getAuthority();
        int int19 = uRL17.getPort();
        java.lang.String str20 = uRL17.toExternalForm();
        java.io.File file23 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL24 = file23.toURL();
        java.lang.String str25 = uRL24.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler27 = null;
        java.net.URL uRL28 = new java.net.URL(uRL24, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler27);
        boolean boolean29 = uRL17.sameFile(uRL28);
        java.lang.String str30 = uRL28.getQuery();
        java.io.File file33 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL34 = file33.toURL();
        java.lang.String str35 = uRL34.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler37 = null;
        java.net.URL uRL38 = new java.net.URL(uRL34, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler37);
        java.io.File file41 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL42 = file41.toURL();
        boolean boolean43 = uRL34.sameFile(uRL42);
        java.net.URL uRL45 = new java.net.URL(uRL42, "/hi!4129638666993068054:");
        java.lang.Class[] classArray46 = new java.lang.Class[] {};
        java.lang.Object obj47 = uRL45.getContent(classArray46);
        java.lang.Object obj48 = null; // flaky: uRL28.getContent(classArray46);
        java.lang.Object obj49 = null; // flaky: uRL13.getContent(classArray46);
        java.io.File file52 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL53 = file52.toURL();
        java.lang.String str54 = uRL53.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler56 = null;
        java.net.URL uRL57 = new java.net.URL(uRL53, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler56);
        java.lang.String str58 = uRL53.getUserInfo();
        boolean boolean59 = uRL13.sameFile(uRL53);
        java.net.URLStreamHandler uRLStreamHandler61 = null;
        java.net.URL uRL62 = new java.net.URL(uRL13, "hi!8353785860681946886:", uRLStreamHandler61);
        // The following exception was thrown during execution in test generation
{ // flaky:         try {
// flaky:             empiricalDistributionImpl0.load(uRL13);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: URL file:/experiment/hi!2169115775229245488/hi! contains no data");
// flaky:         } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/hi!3993342826715568399:");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/hi!3993342826715568399:" + "'", str7, "/hi!3993342826715568399:");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals(file12.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file12.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL13);
// flaky:         org.junit.Assert.assertEquals(uRL13.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file16.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file16.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL17);
// flaky:         org.junit.Assert.assertEquals(uRL17.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str20, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file23.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file23.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL24);
// flaky:         org.junit.Assert.assertEquals(uRL24.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(uRL28.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals(file33.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file33.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL34);
// flaky:         org.junit.Assert.assertEquals(uRL34.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals(uRL38.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file41.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file41.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL42);
// flaky:         org.junit.Assert.assertEquals(uRL42.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals(uRL45.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals(file52.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file52.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL53);
// flaky:         org.junit.Assert.assertEquals(uRL53.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals(uRL57.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
// flaky:         org.junit.Assert.assertEquals(uRL62.toString(), "file:/experiment/hi!2169115775229245488/hi!8353785860681946886:");
    }

    @Test
    public void test00622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00622");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double19 = geometricMean3.evaluate(doubleArray16);
        empiricalDistributionImpl0.load(doubleArray16);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file25 = new java.io.File("");
        java.io.File file26 = java.io.File.createTempFile("hi!", ":", file25);
        java.lang.String str27 = file26.getCanonicalPath();
        boolean boolean29 = file26.setExecutable(false);
        boolean boolean31 = file26.setWritable(true);
        boolean boolean32 = file26.mkdirs();
        boolean boolean35 = file26.setExecutable(true, false);
        empiricalDistributionImpl0.load(file26);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: No bin selected");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.51188643150958d + "'", double19 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNull("file25.getParent() == null", file25.getParent());
        org.junit.Assert.assertEquals(file25.toString(), "");
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/hi!8492055000411426928:");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "/hi!8492055000411426928:" + "'", str27, "/hi!8492055000411426928:");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test00623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00623");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min5 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min5);
        double[] doubleArray7 = new double[] {};
        min5.incrementAll(doubleArray7);
        min5.increment((double) 1645454029000L);
        long long11 = min5.getN();
        min5.increment((-1.0913936421275139E-11d));
        min5.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test00624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00624");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        summaryStatistics0.addValue(19.44d);
        double double9 = summaryStatistics0.getMax();
        double double10 = summaryStatistics0.getStandardDeviation();
        double double11 = summaryStatistics0.getVariance();
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 19.44d + "'", double9 == 19.44d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test00625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00625");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.net.URI uRI4 = uRL3.toURI();
        java.lang.String str5 = uRL3.getUserInfo();
        java.lang.String str6 = uRL3.getFile();
        java.lang.String str7 = uRL3.getAuthority();
        java.lang.String str8 = uRL3.getFile();
        java.lang.String str9 = uRL3.getHost();
        java.lang.Class[] classArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = null; // flaky: uRL3.getContent(classArray10);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRI4);
        org.junit.Assert.assertNull(str5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str6, "/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str8, "/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test00626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00626");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        java.net.URL uRL6 = file1.toURL();
        int int7 = uRL6.getPort();
        java.io.InputStream inputStream8 = uRL6.openStream();
        java.net.Proxy proxy9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection10 = uRL6.openConnection(proxy9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(uRL6);
// flaky:         org.junit.Assert.assertEquals(uRL6.toString(), "file:/experiment");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(inputStream8);
    }

    @Test
    public void test00627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00627");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        boolean boolean3 = empiricalDistributionImpl0.isLoaded();
        java.util.List list4 = empiricalDistributionImpl0.getBinStats();
        int int5 = empiricalDistributionImpl0.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long12 = variance11.getN();
        double[] doubleArray18 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double20 = variance11.evaluate(doubleArray18, (double) 'a');
        mean9.incrementAll(doubleArray18);
        empiricalDistributionImpl6.load(doubleArray18);
        empiricalDistributionImpl0.load(doubleArray18);
        boolean boolean24 = empiricalDistributionImpl0.isLoaded();
        java.util.List list25 = empiricalDistributionImpl0.getBinStats();
        double[] doubleArray26 = empiricalDistributionImpl0.getUpperBounds();
        double[] doubleArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(doubleArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: null");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1000 + "'", int5 == 1000);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 19.43999999999942d + "'", double20 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test00628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00628");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = new java.net.URL("", "hi!8353785860681946886:", 1, "/hi!8792442551214365153:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: ");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00629");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double double1 = sum0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double3 = secondMoment2.getResult();
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Mean mean6 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long17 = variance16.getN();
        double[] doubleArray23 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double25 = variance16.evaluate(doubleArray23, (double) 'a');
        mean14.incrementAll(doubleArray23);
        double double27 = variance11.evaluate(doubleArray23);
        double double28 = secondMoment2.evaluate(doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = sum0.evaluate(doubleArray23, (-11), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 19.43999999999942d + "'", double25 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 24.3d + "'", double27 == 24.3d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 97.2d + "'", double28 == 97.2d);
    }

    @Test
    public void test00630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00630");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        boolean boolean9 = file1.canExecute();
        java.io.File file12 = new java.io.File("/hi!1995299374527999331:", "java.io.IOException: /hi!4420905478953568698:");
        boolean boolean14 = file12.setWritable(true);
        int int15 = file1.compareTo(file12);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals(file12.getParent(), "/hi!1995299374527999331:/java.io.IOException: ");
        org.junit.Assert.assertEquals(file12.toString(), "/hi!1995299374527999331:/java.io.IOException: /hi!4420905478953568698:");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-70) + "'", int15 == (-70));
    }

    @Test
    public void test00631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00631");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file5 = new java.io.File("");
        java.io.File file6 = java.io.File.createTempFile("hi!", ":", file5);
        java.lang.String str7 = file6.getCanonicalPath();
        boolean boolean8 = file6.createNewFile();
        empiricalDistributionImpl0.load(file6);
        boolean boolean10 = file6.setReadOnly();
        java.io.File file11 = file6.getAbsoluteFile();
        boolean boolean12 = file11.isFile();
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/hi!3364929129341128992:");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/hi!3364929129341128992:" + "'", str7, "/hi!3364929129341128992:");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/hi!3364929129341128992:");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test00632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00632");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL3 = new java.net.URL("/hi!8004869517018842683:", "/hi!4448593953119077413:", "/hi!3399820819083206588:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!8004869517018842683:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00633");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("/hi!7692830521395659731:", "/tmp/hi!4562167846147254095");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/hi!7692830521395659731:4706890322689857602/tmp/hi!4562167846147254095");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00634");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("/hi!8304360505110833158:", "/tmp/hi!3424111480641751587");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/hi!8304360505110833158:5967247496304455247/tmp/hi!3424111480641751587");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00635");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        boolean boolean10 = file1.setExecutable(true);
        boolean boolean11 = file1.exists();
        java.net.URI uRI12 = file1.toURI();
        boolean boolean13 = file1.isDirectory();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(uRI12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00636");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double7 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double12 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long16 = variance15.getN();
        double[] doubleArray22 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double24 = variance15.evaluate(doubleArray22, (double) 'a');
        double double25 = variance13.evaluate(doubleArray22);
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance13);
        summaryStatistics0.addValue((double) (-1));
        double double29 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long32 = variance31.getN();
        long long33 = variance31.getN();
        variance31.clear();
        double double35 = variance31.getResult();
        boolean boolean36 = variance31.isBiasCorrected();
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementations must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 19.43999999999942d + "'", double24 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 19.44d + "'", double25 == 19.44d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00637");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long1 = sumOfSquares0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long6 = variance5.getN();
        double[] doubleArray12 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double14 = variance5.evaluate(doubleArray12, (double) 'a');
        double double18 = variance3.evaluate(doubleArray12, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double21 = sumOfSquares0.evaluate(doubleArray12, (int) (short) 1, 0);
        long long22 = sumOfSquares0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 19.43999999999942d + "'", double14 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test00638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00638");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl4 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl4.getSampleStats();
        java.io.File file9 = new java.io.File("");
        java.io.File file10 = java.io.File.createTempFile("hi!", ":", file9);
        java.lang.String str11 = file10.getCanonicalPath();
        boolean boolean12 = file10.createNewFile();
        empiricalDistributionImpl4.load(file10);
        double[] doubleArray14 = empiricalDistributionImpl4.getUpperBounds();
        double[] doubleArray15 = empiricalDistributionImpl4.getUpperBounds();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = variance3.evaluate(doubleArray15, (-3), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertNotNull(file10);
        org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/hi!5885819593623695756:");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/hi!5885819593623695756:" + "'", str11, "/hi!5885819593623695756:");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
    }

    @Test
    public void test00639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00639");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double19 = geometricMean3.evaluate(doubleArray16);
        empiricalDistributionImpl0.load(doubleArray16);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl0.getSampleStats();
        java.util.List list23 = empiricalDistributionImpl0.getBinStats();
        boolean boolean24 = empiricalDistributionImpl0.isLoaded();
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.51188643150958d + "'", double19 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test00640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00640");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl2 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long8 = variance7.getN();
        double[] doubleArray14 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double16 = variance7.evaluate(doubleArray14, (double) 'a');
        mean5.incrementAll(doubleArray14);
        empiricalDistributionImpl2.load(doubleArray14);
        empiricalDistributionImpl1.load(doubleArray14);
        java.io.File file21 = new java.io.File("/hi!4533436540036848542:");
        boolean boolean23 = file21.setReadable(true);
        java.io.File file24 = file21.getCanonicalFile();
// flaky:         empiricalDistributionImpl1.load(file21);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 19.43999999999942d + "'", double16 == 19.43999999999942d);
        org.junit.Assert.assertEquals(file21.getParent(), "/");
        org.junit.Assert.assertEquals(file21.toString(), "/hi!4533436540036848542:");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "/");
        org.junit.Assert.assertEquals(file24.toString(), "/hi!4533436540036848542:");
    }

    @Test
    public void test00641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00641");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        int int3 = empiricalDistributionImpl0.getBinCount();
        java.io.File file6 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL7 = file6.toURL();
        java.lang.String str8 = uRL7.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler10 = null;
        java.net.URL uRL11 = new java.net.URL(uRL7, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler10);
        java.io.File file14 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL15 = file14.toURL();
        boolean boolean16 = uRL7.sameFile(uRL15);
        java.net.URL uRL18 = new java.net.URL(uRL15, "/hi!4129638666993068054:");
        java.lang.String str19 = uRL15.getQuery();
        java.lang.String str20 = uRL15.getQuery();
        java.io.File file23 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL24 = file23.toURL();
        java.lang.String str25 = uRL24.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler27 = null;
        java.net.URL uRL28 = new java.net.URL(uRL24, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler27);
        java.lang.String str29 = uRL24.toExternalForm();
        java.net.URL uRL31 = new java.net.URL(uRL24, "/hi!6147520189804127628:");
        boolean boolean32 = uRL15.sameFile(uRL24);
        int int33 = uRL24.getDefaultPort();
        // The following exception was thrown during execution in test generation
{ // flaky:         try {
// flaky:             empiricalDistributionImpl0.load(uRL24);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: URL file:/experiment/hi!2169115775229245488/hi! contains no data");
// flaky:         } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000);
        org.junit.Assert.assertEquals(file6.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file6.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file14.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file14.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL15);
// flaky:         org.junit.Assert.assertEquals(uRL15.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals(uRL18.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file23.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL24);
// flaky:         org.junit.Assert.assertEquals(uRL24.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(uRL28.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str29, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(uRL31.toString(), "file:/hi!6147520189804127628:");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test00642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00642");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.clear();
        long long2 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        mean3.increment((double) (-1));
        long long6 = mean3.getN();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl7.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl7.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl7.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl7.getSampleStats();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs12 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean13 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs12);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl14.getSampleStats();
        boolean boolean16 = empiricalDistributionImpl14.isLoaded();
        boolean boolean17 = empiricalDistributionImpl14.isLoaded();
        java.util.List list18 = empiricalDistributionImpl14.getBinStats();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics19 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics19.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean20);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean22 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean22.increment((double) (short) 100);
        geometricMean22.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic27 = geometricMean22.getSumLogImpl();
        summaryStatistics19.setMinImpl(storelessUnivariateStatistic27);
        double double29 = summaryStatistics19.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics19.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance31);
        org.apache.commons.math.stat.descriptive.rank.Min min33 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min33.clear();
        double[] doubleArray40 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double41 = min33.evaluate(doubleArray40);
        variance31.incrementAll(doubleArray40);
        empiricalDistributionImpl14.load(doubleArray40);
        geometricMean13.incrementAll(doubleArray40, (int) (byte) 0, (int) (byte) 1);
        empiricalDistributionImpl7.load(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            double double50 = mean3.evaluate(doubleArray40, 2, (-3));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNull(statisticalSummary8);
        org.junit.Assert.assertNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNull(statisticalSummary11);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
    }

    @Test
    public void test00643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00643");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        java.util.List list1 = empiricalDistributionImpl0.getBinStats();
        int int2 = empiricalDistributionImpl0.getBinCount();
        java.io.File file3 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(list1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1000 + "'", int2 == 1000);
    }

    @Test
    public void test00644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00644");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        boolean boolean4 = file2.canWrite();
        boolean boolean5 = file2.isFile();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test00645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00645");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = new java.net.URL("/tmp/hi!5558372097558186219", "/hi!5717070577926663016:", (int) '/', "/hi!5717070577926663016:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /tmp/hi!5558372097558186219");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00646");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double19 = geometricMean3.evaluate(doubleArray16);
        empiricalDistributionImpl0.load(doubleArray16);
        java.io.File file23 = java.io.File.createTempFile("hi!", "");
        boolean boolean25 = file23.setLastModified((long) '#');
        java.io.File file26 = file23.getCanonicalFile();
        empiricalDistributionImpl0.load(file23);
        java.net.URI uRI28 = file23.toURI();
        java.io.File file29 = file23.getAbsoluteFile();
        java.lang.String str30 = file29.getParent();
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.51188643150958d + "'", double19 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file23.toString(), "/tmp/hi!2079742830692513125");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/tmp/hi!2079742830692513125");
        org.junit.Assert.assertNotNull(uRI28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file29.toString(), "/tmp/hi!2079742830692513125");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/tmp" + "'", str30, "/tmp");
    }

    @Test
    public void test00647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00647");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        java.net.URI uRI5 = file4.toURI();
        boolean boolean7 = file4.setReadable(false);
        boolean boolean8 = file4.isAbsolute();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!5581663201421563342:");
        org.junit.Assert.assertNotNull(uRI5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test00648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00648");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        java.util.List list2 = empiricalDistributionImpl1.getBinStats();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertNull(statisticalSummary4);
    }

    @Test
    public void test00649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00649");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getGeoMeanImpl();
        double double6 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = summaryStatistics0.getSummary();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = summaryStatistics0.getGeoMeanImpl();
        summaryStatistics0.addValue(2.99098755072E11d);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean11 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean11.increment((double) (short) 100);
        geometricMean11.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = geometricMean11.getSumLogImpl();
        long long17 = geometricMean11.getN();
        long long18 = geometricMean11.getN();
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementations must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
    }

    @Test
    public void test00650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00650");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        boolean boolean3 = empiricalDistributionImpl0.isLoaded();
        boolean boolean4 = empiricalDistributionImpl0.isLoaded();
        boolean boolean5 = empiricalDistributionImpl0.isLoaded();
        java.io.File file9 = new java.io.File("");
        java.io.File file10 = java.io.File.createTempFile("hi!", ":", file9);
        java.lang.String str11 = file10.getAbsolutePath();
        boolean boolean12 = file10.setReadOnly();
        boolean boolean14 = file10.setLastModified(364740218880L);
        empiricalDistributionImpl0.load(file10);
        boolean boolean16 = file10.canExecute();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics17 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double18 = summaryStatistics17.getVariance();
        double double19 = summaryStatistics17.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics20 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double21 = summaryStatistics20.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic22 = summaryStatistics20.getGeoMeanImpl();
        summaryStatistics17.setGeoMeanImpl(storelessUnivariateStatistic22);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic24 = summaryStatistics17.getMinImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics25 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double26 = summaryStatistics25.getVariance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = summaryStatistics25.getSummary();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.clear();
        long long30 = secondMoment28.getN();
        secondMoment28.clear();
        double double32 = secondMoment28.getResult();
        summaryStatistics25.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment28);
        secondMoment28.clear();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl35 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int36 = empiricalDistributionImpl35.getBinCount();
        boolean boolean37 = empiricalDistributionImpl35.isLoaded();
        java.util.List list38 = empiricalDistributionImpl35.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean39 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean39.increment((double) (short) 100);
        geometricMean39.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic44 = geometricMean39.getSumLogImpl();
        long long45 = geometricMean39.getN();
        double double46 = geometricMean39.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics47 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double48 = summaryStatistics47.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min49 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics47.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min49);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean51 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean51.increment((double) (short) 100);
        geometricMean51.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long58 = variance57.getN();
        double[] doubleArray64 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double66 = variance57.evaluate(doubleArray64, (double) 'a');
        double double67 = geometricMean51.evaluate(doubleArray64);
        min49.incrementAll(doubleArray64);
        geometricMean39.incrementAll(doubleArray64);
        empiricalDistributionImpl35.load(doubleArray64);
        double double73 = secondMoment28.evaluate(doubleArray64, (int) (byte) 1, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment28);
        mean74.increment((double) 3);
        summaryStatistics17.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean74);
        boolean boolean78 = file10.equals((java.lang.Object) summaryStatistics17);
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertNotNull(file10);
        org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/hi!825511304588964336:");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/hi!825511304588964336:" + "'", str11, "/hi!825511304588964336:");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic22);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1000 + "'", int36 == 1000);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 2L + "'", long45 == 2L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 19.43999999999942d + "'", double66 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2.51188643150958d + "'", double67 == 2.51188643150958d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test00651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00651");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        boolean boolean3 = empiricalDistributionImpl0.isLoaded();
        boolean boolean4 = empiricalDistributionImpl0.isLoaded();
        boolean boolean5 = empiricalDistributionImpl0.isLoaded();
        int int6 = empiricalDistributionImpl0.getBinCount();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1000 + "'", int6 == 1000);
    }

    @Test
    public void test00652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00652");
        java.io.File file1 = new java.io.File("");
        boolean boolean3 = file1.setReadable(true);
        boolean boolean5 = file1.setReadable(false);
        java.lang.String str6 = file1.getCanonicalPath();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/experiment" + "'", str6, "/experiment");
    }

    @Test
    public void test00653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00653");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long6 = variance5.getN();
        double[] doubleArray12 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double14 = variance5.evaluate(doubleArray12, (double) 'a');
        mean3.incrementAll(doubleArray12);
        empiricalDistributionImpl0.load(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long21 = variance20.getN();
        double[] doubleArray27 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double29 = variance20.evaluate(doubleArray27, (double) 'a');
        double double33 = variance18.evaluate(doubleArray27, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        empiricalDistributionImpl0.load(doubleArray27);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary35 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file37 = new java.io.File("");
        boolean boolean40 = file37.setWritable(true, true);
        boolean boolean41 = file37.setReadOnly();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file37);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 19.43999999999942d + "'", double14 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 19.43999999999942d + "'", double29 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(statisticalSummary35);
        org.junit.Assert.assertNull("file37.getParent() == null", file37.getParent());
        org.junit.Assert.assertEquals(file37.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test00654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00654");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int1 = empiricalDistributionImpl0.getBinCount();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        int int3 = empiricalDistributionImpl0.getBinCount();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean4.increment((double) 0);
        double double7 = mean4.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean8.increment((double) 0);
        double double11 = mean8.getResult();
        mean8.clear();
        double[] doubleArray13 = new double[] {};
        mean8.incrementAll(doubleArray13);
        double double15 = mean4.evaluate(doubleArray13);
        empiricalDistributionImpl0.load(doubleArray13);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: No bin selected");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1000 + "'", int1 == 1000);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test00655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00655");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL3 = new java.net.URL("/hi!2278368850039680439:", "/hi!5726258740526437017:", "/hi!4420905478953568698:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!2278368850039680439:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00656");
        java.io.IOException iOException1 = new java.io.IOException("/hi!632387485957745443:");
    }

    @Test
    public void test00657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00657");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int1 = empiricalDistributionImpl0.getBinCount();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file6 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL7 = file6.toURL();
        java.lang.String str8 = uRL7.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler10 = null;
        java.net.URL uRL11 = new java.net.URL(uRL7, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler10);
        java.io.File file14 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL15 = file14.toURL();
        boolean boolean16 = uRL7.sameFile(uRL15);
        java.lang.String str17 = uRL15.getAuthority();
        // The following exception was thrown during execution in test generation
{ // flaky:         try {
// flaky:             empiricalDistributionImpl0.load(uRL15);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: URL file:/experiment/hi!2169115775229245488/hi! contains no data");
// flaky:         } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1000 + "'", int1 == 1000);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertEquals(file6.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file6.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file14.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file14.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL15);
// flaky:         org.junit.Assert.assertEquals(uRL15.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test00658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00658");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        long long3 = geometricMean0.getN();
        geometricMean0.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics5 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean6 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics5.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean6);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean8 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean8.increment((double) (short) 100);
        geometricMean8.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = geometricMean8.getSumLogImpl();
        summaryStatistics5.setMinImpl(storelessUnivariateStatistic13);
        double double15 = summaryStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double18 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment17);
        summaryStatistics5.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment17);
        geometricMean0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance23.increment((double) (byte) 100);
        java.io.File file28 = new java.io.File("/hi!4420905478953568698:", "/experiment/hi!2169115775229245488");
        boolean boolean29 = variance23.equals((java.lang.Object) "/hi!4420905478953568698:");
        boolean boolean30 = variance23.isBiasCorrected();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl31.getSampleStats();
        java.io.File file36 = new java.io.File("");
        java.io.File file37 = java.io.File.createTempFile("hi!", ":", file36);
        java.lang.String str38 = file37.getCanonicalPath();
        boolean boolean39 = file37.createNewFile();
        empiricalDistributionImpl31.load(file37);
        double[] doubleArray41 = empiricalDistributionImpl31.getUpperBounds();
        double double44 = variance23.evaluate(doubleArray41, (int) ':', 1);
        double double47 = geometricMean0.evaluate(doubleArray41, 0, 1);
        long long48 = geometricMean0.getN();
        double[] doubleArray55 = new double[] { (byte) -1, 23.0d, 100.0d, 1000000.0d, 0, 1645454034000L };
        // The following exception was thrown during execution in test generation
        try {
            double double58 = geometricMean0.evaluate(doubleArray55, (-11), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertEquals(file28.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file28.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNull("file36.getParent() == null", file36.getParent());
        org.junit.Assert.assertEquals(file36.toString(), "");
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file37.toString(), "/hi!7058901616306916370:");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "/hi!7058901616306916370:" + "'", str38, "/hi!7058901616306916370:");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 23.0, 100.0, 1000000.0, 0.0, 1.645454034E12]");
    }

    @Test
    public void test00659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00659");
        java.io.File file2 = new java.io.File("/hi!4060689751378876827:", "/hi!4201210329362459719:");
        java.io.File file6 = new java.io.File("");
        java.io.File file7 = java.io.File.createTempFile("hi!", ":", file6);
        boolean boolean9 = file7.setWritable(true);
        boolean boolean10 = file7.canExecute();
        java.io.File file12 = new java.io.File("");
        boolean boolean15 = file12.setWritable(true, true);
        boolean boolean16 = file12.setReadOnly();
        boolean boolean19 = file12.setWritable(true, false);
        java.net.URI uRI20 = file12.toURI();
        boolean boolean21 = file12.mkdir();
        java.io.File file22 = file12.getCanonicalFile();
        boolean boolean23 = file7.renameTo(file12);
        boolean boolean26 = file12.setWritable(true, true);
        boolean boolean29 = file12.setWritable(false, false);
        boolean boolean30 = file12.canWrite();
        int int31 = file2.compareTo(file12);
        org.junit.Assert.assertEquals(file2.getParent(), "/hi!4060689751378876827:");
        org.junit.Assert.assertEquals(file2.toString(), "/hi!4060689751378876827:/hi!4201210329362459719:");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "");
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/hi!147109208831553433:");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull("file12.getParent() == null", file12.getParent());
        org.junit.Assert.assertEquals(file12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(uRI20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(file22);
// flaky:         org.junit.Assert.assertEquals(file22.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file22.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 48 + "'", int31 == 48);
    }

    @Test
    public void test00660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00660");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.net.URL uRL6 = new java.net.URL(uRL3, "/hi!2756764035548942023:");
        java.lang.Object obj7 = uRL6.getContent();
        int int8 = uRL6.getDefaultPort();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(uRL6.toString(), "file:/hi!2756764035548942023:");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test00661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00661");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long1 = sumOfSquares0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long6 = variance5.getN();
        double[] doubleArray12 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double14 = variance5.evaluate(doubleArray12, (double) 'a');
        double double18 = variance3.evaluate(doubleArray12, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double21 = sumOfSquares0.evaluate(doubleArray12, (int) (short) 1, 0);
        sumOfSquares0.increment(0.0d);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl24.getSampleStats();
        java.io.File file29 = new java.io.File("");
        java.io.File file30 = java.io.File.createTempFile("hi!", ":", file29);
        java.lang.String str31 = file30.getCanonicalPath();
        boolean boolean32 = file30.createNewFile();
        empiricalDistributionImpl24.load(file30);
        double[] doubleArray34 = empiricalDistributionImpl24.getUpperBounds();
        double double37 = sumOfSquares0.evaluate(doubleArray34, 100, (int) (short) 1);
        sumOfSquares0.clear();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs39 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double40 = sumOfLogs39.getResult();
        long long41 = sumOfLogs39.getN();
        org.apache.commons.math.stat.descriptive.rank.Min min42 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min42.clear();
        double[] doubleArray49 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double50 = min42.evaluate(doubleArray49);
        double double53 = sumOfLogs39.evaluate(doubleArray49, 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            sumOfSquares0.incrementAll(doubleArray49, 0, (-50));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 19.43999999999942d + "'", double14 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNull(statisticalSummary25);
        org.junit.Assert.assertNull("file29.getParent() == null", file29.getParent());
        org.junit.Assert.assertEquals(file29.toString(), "");
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file30.toString(), "/hi!483203314511491827:");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "/hi!483203314511491827:" + "'", str31, "/hi!483203314511491827:");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 4.060443010546419d + "'", double53 == 4.060443010546419d);
    }

    @Test
    public void test00662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00662");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) (-1L));
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = geometricMean0.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics6 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double7 = summaryStatistics6.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min8 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics6.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min8);
        java.lang.Object obj10 = null;
        boolean boolean11 = summaryStatistics6.equals(obj10);
        summaryStatistics6.clear();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics6.getMinImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics14 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double15 = summaryStatistics14.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min16 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics14.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min16);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic18 = summaryStatistics14.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic19 = summaryStatistics14.getMinImpl();
        storelessUnivariateStatistic19.increment((double) (-1L));
        summaryStatistics6.setMinImpl(storelessUnivariateStatistic19);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic23 = summaryStatistics6.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.rank.Min min24 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min24.clear();
        long long26 = min24.getN();
        min24.clear();
        summaryStatistics6.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min24);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics29 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double30 = summaryStatistics29.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean31.increment((double) 0);
        double double34 = mean31.getResult();
        long long35 = mean31.getN();
        mean31.clear();
        summaryStatistics29.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean31);
        double double38 = summaryStatistics29.getMean();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean39 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean39.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long44 = variance43.getN();
        double[] doubleArray50 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double52 = variance43.evaluate(doubleArray50, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long58 = variance57.getN();
        double[] doubleArray64 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double66 = variance57.evaluate(doubleArray64, (double) 'a');
        mean55.incrementAll(doubleArray64);
        double double69 = variance43.evaluate(doubleArray64, (double) (byte) 1);
        geometricMean39.incrementAll(doubleArray64);
        summaryStatistics29.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long74 = variance73.getN();
        double[] doubleArray80 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double82 = variance73.evaluate(doubleArray80, (double) 'a');
        variance73.clear();
        double[] doubleArray87 = new double[] { (byte) 0, (short) 0, 299098734592L };
        double double89 = variance73.evaluate(doubleArray87, (double) 1);
        double double90 = geometricMean39.evaluate(doubleArray87);
        boolean boolean91 = min24.equals((java.lang.Object) double90);
        double double92 = min24.getResult();
        // The following exception was thrown during execution in test generation
        try {
            geometricMean0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementation must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic18);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic19);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 19.43999999999942d + "'", double52 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 19.43999999999942d + "'", double66 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 19.44d + "'", double69 == 19.44d);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 19.43999999999942d + "'", double82 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0, 2.99098734592E11]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1.988001178545237E22d + "'", double89 == 1.988001178545237E22d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
    }

    @Test
    public void test00663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00663");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL3 = new java.net.URL("/hi!3000120908364902124:", "/hi!4376954783929028723:", "/hi!8060871916403243474:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!3000120908364902124:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00664");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        java.io.File file10 = new java.io.File(uRI9);
        java.io.File file11 = file10.getCanonicalFile();
        boolean boolean12 = file10.canWrite();
        java.lang.String str13 = file10.getParent();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
// flaky:         org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/experiment");
        org.junit.Assert.assertNotNull(file11);
// flaky:         org.junit.Assert.assertEquals(file11.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "/" + "'", str13, "/");
    }

    @Test
    public void test00665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00665");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("/hi!8792442551214365153:", "/hi!3000120908364902124:");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/hi!8792442551214365153:56527427649584116/hi!3000120908364902124:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00666");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file5 = new java.io.File("");
        java.io.File file6 = java.io.File.createTempFile("hi!", ":", file5);
        java.lang.String str7 = file6.getCanonicalPath();
        boolean boolean8 = file6.createNewFile();
        empiricalDistributionImpl0.load(file6);
        boolean boolean10 = empiricalDistributionImpl0.isLoaded();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics11 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double12 = summaryStatistics11.getMin();
        double double13 = summaryStatistics11.getStandardDeviation();
        double double14 = summaryStatistics11.getMean();
        double double15 = summaryStatistics11.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double18 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment17);
        summaryStatistics11.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        summaryStatistics11.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean24.increment((double) 0);
        double double27 = mean24.getResult();
        mean24.clear();
        double[] doubleArray29 = new double[] {};
        mean24.incrementAll(doubleArray29);
        double double31 = variance22.evaluate(doubleArray29);
        empiricalDistributionImpl0.load(doubleArray29);
        int int33 = empiricalDistributionImpl0.getBinCount();
        java.io.File file36 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL37 = file36.toURL();
        java.lang.String str38 = uRL37.getAuthority();
        java.lang.String str39 = uRL37.getUserInfo();
        int int40 = uRL37.getDefaultPort();
        java.lang.String str41 = uRL37.getUserInfo();
        java.lang.String str42 = uRL37.toExternalForm();
        // The following exception was thrown during execution in test generation
{ // flaky:         try {
// flaky:             empiricalDistributionImpl0.load(uRL37);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: URL file:/experiment/hi!2169115775229245488/hi! contains no data");
// flaky:         } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/hi!3337084001176885734:");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/hi!3337084001176885734:" + "'", str7, "/hi!3337084001176885734:");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1000 + "'", int33 == 1000);
        org.junit.Assert.assertEquals(file36.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file36.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL37);
// flaky:         org.junit.Assert.assertEquals(uRL37.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNull(str41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str42, "file:/experiment/hi!2169115775229245488/hi!");
    }

    @Test
    public void test00667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00667");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long6 = variance5.getN();
        double[] doubleArray12 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double14 = variance5.evaluate(doubleArray12, (double) 'a');
        mean3.incrementAll(doubleArray12);
        empiricalDistributionImpl0.load(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long21 = variance20.getN();
        double[] doubleArray27 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double29 = variance20.evaluate(doubleArray27, (double) 'a');
        double double33 = variance18.evaluate(doubleArray27, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        empiricalDistributionImpl0.load(doubleArray27);
        java.util.List list35 = empiricalDistributionImpl0.getBinStats();
        java.io.File file38 = new java.io.File("/hi!2756764035548942023:", ":");
        java.io.File file39 = file38.getParentFile();
        java.io.File file41 = new java.io.File(file38, "/hi!8130836485477920045:");
        boolean boolean43 = file41.setExecutable(true);
        java.io.File file45 = new java.io.File(file41, "/hi!5946226624167744923:");
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file45);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /hi!2756764035548942023:/:/hi!8130836485477920045:/hi!5946226624167744923: (Not a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 19.43999999999942d + "'", double14 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 19.43999999999942d + "'", double29 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertEquals(file38.getParent(), "/hi!2756764035548942023:");
        org.junit.Assert.assertEquals(file38.toString(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertEquals(file39.getParent(), "/");
        org.junit.Assert.assertEquals(file39.toString(), "/hi!2756764035548942023:");
        org.junit.Assert.assertEquals(file41.getParent(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertEquals(file41.toString(), "/hi!2756764035548942023:/:/hi!8130836485477920045:");
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals(file45.getParent(), "/hi!2756764035548942023:/:/hi!8130836485477920045:");
        org.junit.Assert.assertEquals(file45.toString(), "/hi!2756764035548942023:/:/hi!8130836485477920045:/hi!5946226624167744923:");
    }

    @Test
    public void test00668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00668");
        java.io.File file3 = new java.io.File("");
        boolean boolean6 = file3.setWritable(true, true);
        boolean boolean7 = file3.setReadOnly();
        boolean boolean10 = file3.setWritable(true, false);
        java.lang.String str11 = file3.getName();
        long long12 = file3.length();
        java.nio.file.Path path13 = file3.toPath();
        boolean boolean16 = file3.setExecutable(true, true);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file17 = java.io.File.createTempFile("/hi!2438329511057242483:", "/hi!7692830521395659731:", file3);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /hi!2438329511057242483:4887104646411870903/hi!7692830521395659731:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test00669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00669");
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException("hi!", throwable3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException4);
        java.lang.Throwable[] throwableArray7 = iOException4.getSuppressed();
        java.io.IOException iOException8 = new java.io.IOException("/hi!4420905478953568698:/experiment/hi!2169115775229245488", (java.lang.Throwable) iOException4);
        java.lang.String str9 = iOException4.toString();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.io.IOException: hi!" + "'", str9, "java.io.IOException: hi!");
    }

    @Test
    public void test00670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00670");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler6 = null;
        java.net.URL uRL7 = new java.net.URL(uRL3, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler6);
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        boolean boolean12 = uRL3.sameFile(uRL11);
        java.net.URL uRL14 = new java.net.URL(uRL11, "/hi!4129638666993068054:");
        java.lang.Class[] classArray15 = new java.lang.Class[] {};
        java.lang.Object obj16 = uRL14.getContent(classArray15);
        java.lang.String str17 = uRL14.toExternalForm();
        java.io.InputStream inputStream18 = uRL14.openStream();
        java.lang.String str19 = uRL14.getProtocol();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "file:/hi!4129638666993068054:" + "'", str17, "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "file" + "'", str19, "file");
    }

    @Test
    public void test00671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00671");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        boolean boolean3 = false; // flaky: file2.createNewFile();
        long long4 = file2.getFreeSpace();
        long long5 = file2.lastModified();
        boolean boolean6 = file2.isDirectory();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 299098669056L + "'", long4 == 299098669056L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645454057000L + "'", long5 == 1645454057000L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test00672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00672");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        java.lang.Object obj4 = null;
        boolean boolean5 = summaryStatistics0.equals(obj4);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getMaxImpl();
        double double7 = summaryStatistics0.getVariance();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test00673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00673");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.clear();
        secondMoment1.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance5.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs8 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        long long9 = sumOfLogs8.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean10 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs8);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares11 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long12 = sumOfSquares11.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long17 = variance16.getN();
        double[] doubleArray23 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double25 = variance16.evaluate(doubleArray23, (double) 'a');
        double double29 = variance14.evaluate(doubleArray23, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double32 = sumOfSquares11.evaluate(doubleArray23, (int) (short) 1, 0);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics33 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double34 = summaryStatistics33.getMin();
        double double35 = summaryStatistics33.getStandardDeviation();
        double double36 = summaryStatistics33.getMean();
        double double37 = summaryStatistics33.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min38 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics33.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min38);
        double[] doubleArray40 = new double[] {};
        min38.incrementAll(doubleArray40);
        double double42 = sumOfSquares11.evaluate(doubleArray40);
        geometricMean10.incrementAll(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            double double46 = variance5.evaluate(doubleArray40, (int) (short) 0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 19.43999999999942d + "'", double25 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double42));
    }

    @Test
    public void test00674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00674");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getProtocol();
        java.lang.String str5 = uRL3.getQuery();
        java.lang.String str6 = uRL3.getPath();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "file" + "'", str4, "file");
        org.junit.Assert.assertNull(str5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str6, "/experiment/hi!2169115775229245488/hi!");
    }

    @Test
    public void test00675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00675");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMax();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.Mean mean6 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean6.increment((double) 10.0f);
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean6);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long11 = mean10.getN();
        mean10.increment(100.0d);
        boolean boolean14 = summaryStatistics0.equals((java.lang.Object) mean10);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics16 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double17 = summaryStatistics16.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic18 = summaryStatistics16.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment19);
        secondMoment19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long29 = variance28.getN();
        double[] doubleArray35 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double37 = variance28.evaluate(doubleArray35, (double) 'a');
        mean26.incrementAll(doubleArray35);
        double double39 = variance23.evaluate(doubleArray35);
        summaryStatistics16.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance23);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic41 = summaryStatistics16.getSumLogImpl();
        summaryStatistics0.setMaxImpl(storelessUnivariateStatistic41);
        double double43 = summaryStatistics0.getSumsq();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic18);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 19.43999999999942d + "'", double37 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 24.3d + "'", double39 == 24.3d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
    }

    @Test
    public void test00676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00676");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file5 = new java.io.File("");
        java.io.File file6 = java.io.File.createTempFile("hi!", ":", file5);
        java.lang.String str7 = file6.getCanonicalPath();
        boolean boolean8 = file6.createNewFile();
        empiricalDistributionImpl0.load(file6);
        double[] doubleArray10 = empiricalDistributionImpl0.getUpperBounds();
        int int11 = empiricalDistributionImpl0.getBinCount();
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/hi!1165824177731642685:");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/hi!1165824177731642685:" + "'", str7, "/hi!1165824177731642685:");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000);
    }

    @Test
    public void test00677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00677");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.canWrite();
        java.io.File file7 = new java.io.File("");
        boolean boolean10 = file7.setWritable(true, true);
        boolean boolean11 = file7.setReadOnly();
        boolean boolean14 = file7.setWritable(true, false);
        boolean boolean16 = file7.setExecutable(true);
        boolean boolean17 = file7.exists();
        java.net.URI uRI18 = file7.toURI();
        boolean boolean21 = file7.setExecutable(false, true);
        boolean boolean22 = file1.renameTo(file7);
        java.nio.file.Path path23 = file7.toPath();
        java.lang.String str24 = file7.getParent();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull("file7.getParent() == null", file7.getParent());
        org.junit.Assert.assertEquals(file7.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(uRI18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(path23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test00678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00678");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("", "/hi!8792442551214365153:");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Prefix string too short");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00679");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        java.net.URL uRL5 = file1.toURL();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics7 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double8 = summaryStatistics7.getMin();
        double double9 = summaryStatistics7.getStandardDeviation();
        double double10 = summaryStatistics7.getMean();
        double double11 = summaryStatistics7.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double14 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        summaryStatistics7.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double19 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long23 = variance22.getN();
        double[] doubleArray29 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double31 = variance22.evaluate(doubleArray29, (double) 'a');
        double double32 = variance20.evaluate(doubleArray29);
        summaryStatistics7.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance20);
        long long34 = summaryStatistics7.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics35 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double36 = summaryStatistics35.getVariance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary37 = summaryStatistics35.getSummary();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.clear();
        long long40 = secondMoment38.getN();
        secondMoment38.clear();
        double double42 = secondMoment38.getResult();
        summaryStatistics35.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment38);
        summaryStatistics7.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        long long46 = secondMoment38.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment38);
        boolean boolean48 = uRL5.equals((java.lang.Object) variance47);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(uRL5);
// flaky:         org.junit.Assert.assertEquals(uRL5.toString(), "file:/experiment");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 19.43999999999942d + "'", double31 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 19.44d + "'", double32 == 19.44d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(statisticalSummary37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test00680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00680");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file5 = new java.io.File("");
        java.io.File file6 = java.io.File.createTempFile("hi!", ":", file5);
        java.lang.String str7 = file6.getCanonicalPath();
        boolean boolean8 = file6.createNewFile();
        empiricalDistributionImpl0.load(file6);
        double[] doubleArray10 = empiricalDistributionImpl0.getUpperBounds();
        java.io.File file12 = new java.io.File("");
        boolean boolean15 = file12.setWritable(true, true);
        java.net.URL uRL16 = file12.toURL();
        boolean boolean18 = file12.setLastModified((long) '/');
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file12);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/hi!4103259224043600617:");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/hi!4103259224043600617:" + "'", str7, "/hi!4103259224043600617:");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNull("file12.getParent() == null", file12.getParent());
        org.junit.Assert.assertEquals(file12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(uRL16);
// flaky:         org.junit.Assert.assertEquals(uRL16.toString(), "file:/experiment");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test00681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00681");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean2.increment((double) 0);
        double double5 = mean2.getResult();
        long long6 = mean2.getN();
        mean2.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean2);
        double double9 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean10 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean10.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long29 = variance28.getN();
        double[] doubleArray35 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double37 = variance28.evaluate(doubleArray35, (double) 'a');
        mean26.incrementAll(doubleArray35);
        double double40 = variance14.evaluate(doubleArray35, (double) (byte) 1);
        geometricMean10.incrementAll(doubleArray35);
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean10);
        long long43 = geometricMean10.getN();
        geometricMean10.clear();
        geometricMean10.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics46 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double47 = summaryStatistics46.getVariance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary48 = summaryStatistics46.getSummary();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.clear();
        long long51 = secondMoment49.getN();
        secondMoment49.clear();
        double double53 = secondMoment49.getResult();
        summaryStatistics46.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment49);
        secondMoment49.clear();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int57 = empiricalDistributionImpl56.getBinCount();
        boolean boolean58 = empiricalDistributionImpl56.isLoaded();
        java.util.List list59 = empiricalDistributionImpl56.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean60 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean60.increment((double) (short) 100);
        geometricMean60.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic65 = geometricMean60.getSumLogImpl();
        long long66 = geometricMean60.getN();
        double double67 = geometricMean60.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics68 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double69 = summaryStatistics68.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min70 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics68.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min70);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean72 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean72.increment((double) (short) 100);
        geometricMean72.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long79 = variance78.getN();
        double[] doubleArray85 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double87 = variance78.evaluate(doubleArray85, (double) 'a');
        double double88 = geometricMean72.evaluate(doubleArray85);
        min70.incrementAll(doubleArray85);
        geometricMean60.incrementAll(doubleArray85);
        empiricalDistributionImpl56.load(doubleArray85);
        double double94 = secondMoment49.evaluate(doubleArray85, (int) (byte) 1, 0);
        double double95 = geometricMean10.evaluate(doubleArray85);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 19.43999999999942d + "'", double37 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 19.44d + "'", double40 == 19.44d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 6L + "'", long43 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(statisticalSummary48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1000 + "'", int57 == 1000);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(list59);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 2L + "'", long66 == 2L);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 19.43999999999942d + "'", double87 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2.51188643150958d + "'", double88 == 2.51188643150958d);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 2.51188643150958d + "'", double95 == 2.51188643150958d);
    }

    @Test
    public void test00682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00682");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        java.util.List list2 = empiricalDistributionImpl1.getBinStats();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        java.io.File file5 = new java.io.File("");
        java.lang.String str6 = file5.getParent();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file5);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "");
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test00683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00683");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        double double2 = sum0.getResult();
        sum0.clear();
        sum0.clear();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long11 = variance10.getN();
        double[] doubleArray17 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double19 = variance10.evaluate(doubleArray17, (double) 'a');
        mean8.incrementAll(doubleArray17);
        empiricalDistributionImpl5.load(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long26 = variance25.getN();
        double[] doubleArray32 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double34 = variance25.evaluate(doubleArray32, (double) 'a');
        double double38 = variance23.evaluate(doubleArray32, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        empiricalDistributionImpl5.load(doubleArray32);
        double double42 = sum0.evaluate(doubleArray32, 1, 1);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics43 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double44 = summaryStatistics43.getMin();
        double double45 = summaryStatistics43.getStandardDeviation();
        double double46 = summaryStatistics43.getMean();
        double double47 = summaryStatistics43.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double50 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment49);
        summaryStatistics43.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        summaryStatistics43.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance54);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean56.increment((double) 0);
        double double59 = mean56.getResult();
        mean56.clear();
        double[] doubleArray61 = new double[] {};
        mean56.incrementAll(doubleArray61);
        double double63 = variance54.evaluate(doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = sum0.evaluate(doubleArray61, (-2), 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 19.43999999999942d + "'", double19 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 19.43999999999942d + "'", double34 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double63));
    }

    @Test
    public void test00684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00684");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = new java.net.URL("/hi!7535711402918086741:", "/hi!3834700093484896059:", (int) '#', "/hi!585200003762659678:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!7535711402918086741:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00685");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = new java.net.URL("hi!2945187134723039715:", "hi!6911561251336680767", 100, "java.io.IOException: java.io.IOException: hi!");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: hi!2945187134723039715:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00686");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getPath();
        java.net.URLStreamHandler uRLStreamHandler9 = null;
        java.net.URL uRL10 = new java.net.URL(uRL3, "/hi!8304360505110833158:", uRLStreamHandler9);
        java.io.InputStream inputStream11 = uRL10.openStream();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str7, "/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/hi!8304360505110833158:");
        org.junit.Assert.assertNotNull(inputStream11);
    }

    @Test
    public void test00687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00687");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.lang.String str5 = uRL3.getUserInfo();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getUserInfo();
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        java.lang.String str12 = uRL11.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler14 = null;
        java.net.URL uRL15 = new java.net.URL(uRL11, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler14);
        boolean boolean16 = uRL3.sameFile(uRL15);
        int int17 = uRL3.getPort();
        java.io.File file20 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL21 = file20.toURL();
        java.lang.String str22 = uRL21.getAuthority();
        java.lang.String str23 = uRL21.getUserInfo();
        int int24 = uRL21.getDefaultPort();
        java.lang.String str25 = uRL21.getUserInfo();
        java.io.File file28 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL29 = file28.toURL();
        java.lang.String str30 = uRL29.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler32 = null;
        java.net.URL uRL33 = new java.net.URL(uRL29, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler32);
        boolean boolean34 = uRL21.sameFile(uRL33);
        java.io.File file37 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL38 = file37.toURL();
        java.lang.String str39 = uRL38.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler41 = null;
        java.net.URL uRL42 = new java.net.URL(uRL38, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler41);
        java.io.File file45 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL46 = file45.toURL();
        boolean boolean47 = uRL38.sameFile(uRL46);
        java.net.URL uRL49 = new java.net.URL(uRL46, "/hi!4129638666993068054:");
        java.lang.Class[] classArray50 = new java.lang.Class[] {};
        java.lang.Object obj51 = uRL49.getContent(classArray50);
        java.lang.Object obj52 = null; // flaky: uRL33.getContent(classArray50);
        java.lang.Object obj53 = null; // flaky: uRL3.getContent(classArray50);
        java.lang.String str54 = uRL3.getAuthority();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(uRL15.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals(file20.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file20.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL21);
// flaky:         org.junit.Assert.assertEquals(uRL21.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file28.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL29);
// flaky:         org.junit.Assert.assertEquals(uRL29.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals(uRL33.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals(file37.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file37.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL38);
// flaky:         org.junit.Assert.assertEquals(uRL38.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals(uRL42.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file45.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file45.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL46);
// flaky:         org.junit.Assert.assertEquals(uRL46.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals(uRL49.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test00688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00688");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file5 = new java.io.File("");
        java.io.File file6 = java.io.File.createTempFile("hi!", ":", file5);
        java.lang.String str7 = file6.getCanonicalPath();
        boolean boolean8 = file6.createNewFile();
        empiricalDistributionImpl0.load(file6);
        double[] doubleArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: null");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/hi!4924552317123068837:");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/hi!4924552317123068837:" + "'", str7, "/hi!4924552317123068837:");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00689");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getPath();
        int int8 = uRL3.getPort();
        java.lang.Object obj9 = null; // flaky: uRL3.getContent();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str7, "/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
// flaky:         org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test00690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00690");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        // The following exception was thrown during execution in test generation
        try {
            double double2 = variance1.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00691");
        java.io.File file2 = java.io.File.createTempFile("hi!", "");
        boolean boolean4 = file2.setLastModified((long) '#');
        java.io.File file5 = file2.getCanonicalFile();
        boolean boolean7 = file2.setLastModified((long) 1);
        boolean boolean8 = file2.canWrite();
        boolean boolean9 = file2.setReadOnly();
        boolean boolean10 = file2.isDirectory();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/hi!3436340260335699658");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/tmp/hi!3436340260335699658");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00692");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler6 = null;
        java.net.URL uRL7 = new java.net.URL(uRL3, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler6);
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        boolean boolean12 = uRL3.sameFile(uRL11);
        java.io.File file15 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL16 = file15.toURL();
        java.lang.String str17 = uRL16.getAuthority();
        java.lang.String str18 = uRL16.getUserInfo();
        int int19 = uRL16.getDefaultPort();
        java.lang.String str20 = uRL16.getUserInfo();
        java.io.File file23 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL24 = file23.toURL();
        java.lang.String str25 = uRL24.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler27 = null;
        java.net.URL uRL28 = new java.net.URL(uRL24, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler27);
        boolean boolean29 = uRL16.sameFile(uRL28);
        boolean boolean30 = uRL11.sameFile(uRL28);
        java.lang.String str31 = uRL28.getPath();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double34 = secondMoment33.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long43 = variance42.getN();
        double[] doubleArray49 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double51 = variance42.evaluate(doubleArray49, (double) 'a');
        mean40.incrementAll(doubleArray49);
        empiricalDistributionImpl37.load(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long58 = variance57.getN();
        double[] doubleArray64 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double66 = variance57.evaluate(doubleArray64, (double) 'a');
        double double70 = variance55.evaluate(doubleArray64, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        empiricalDistributionImpl37.load(doubleArray64);
        double double73 = variance36.evaluate(doubleArray64, (double) '/');
        boolean boolean74 = uRL28.equals((java.lang.Object) double73);
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(file15.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file15.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL16);
// flaky:         org.junit.Assert.assertEquals(uRL16.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file23.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL24);
// flaky:         org.junit.Assert.assertEquals(uRL24.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(uRL28.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str31, "/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 19.43999999999942d + "'", double51 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 19.43999999999942d + "'", double66 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 24.300000000000182d + "'", double73 == 24.300000000000182d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test00693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00693");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max12.clear();
        double double14 = max12.getResult();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares15 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long16 = sumOfSquares15.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long21 = variance20.getN();
        double[] doubleArray27 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double29 = variance20.evaluate(doubleArray27, (double) 'a');
        double double33 = variance18.evaluate(doubleArray27, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double36 = sumOfSquares15.evaluate(doubleArray27, (int) (short) 1, 0);
        double double39 = max12.evaluate(doubleArray27, (int) (short) 1, (int) (short) 0);
        long long40 = max12.getN();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics42 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double43 = summaryStatistics42.getVariance();
        double double44 = summaryStatistics42.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics45 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double46 = summaryStatistics45.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic47 = summaryStatistics45.getGeoMeanImpl();
        summaryStatistics42.setGeoMeanImpl(storelessUnivariateStatistic47);
        long long49 = storelessUnivariateStatistic47.getN();
        summaryStatistics0.setSumImpl(storelessUnivariateStatistic47);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 19.43999999999942d + "'", double29 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
    }

    @Test
    public void test00694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00694");
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException("hi!", throwable2);
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.io.IOException iOException5 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException3);
        java.lang.Throwable throwable8 = null;
        java.io.IOException iOException9 = new java.io.IOException("hi!", throwable8);
        java.io.IOException iOException10 = new java.io.IOException(throwable8);
        java.io.IOException iOException11 = new java.io.IOException("/hi!8130836485477920045:", (java.lang.Throwable) iOException10);
        iOException5.addSuppressed((java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException11);
        java.lang.Throwable throwable16 = null;
        java.io.IOException iOException17 = new java.io.IOException("hi!", throwable16);
        java.io.IOException iOException18 = new java.io.IOException(throwable16);
        java.io.IOException iOException19 = new java.io.IOException("/hi!8130836485477920045:", (java.lang.Throwable) iOException18);
        iOException11.addSuppressed((java.lang.Throwable) iOException18);
        java.lang.String str21 = iOException18.toString();
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.io.IOException" + "'", str21, "java.io.IOException");
    }

    @Test
    public void test00695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00695");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        // The following exception was thrown during execution in test generation
        try {
            double double2 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
    }

    @Test
    public void test00696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00696");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = new java.net.URL("/hi!8081651984539215826:", "/hi!770052040063289124:", (int) (byte) 10, "/hi!7562571041818304391:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!8081651984539215826:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00697");
        java.io.File file1 = new java.io.File("");
        boolean boolean3 = file1.setReadable(true);
        long long4 = file1.lastModified();
        java.io.File file6 = new java.io.File(file1, "/hi!8130836485477920045:");
        boolean boolean9 = file1.setExecutable(false, false);
        boolean boolean12 = file1.setExecutable(true, false);
        java.io.File file13 = file1.getParentFile();
        java.lang.String str14 = file1.toString();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
        org.junit.Assert.assertEquals(file6.toString(), "/hi!8130836485477920045:");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(file13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test00698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00698");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) 'a');
        java.util.List list2 = empiricalDistributionImpl1.getBinStats();
        // The following exception was thrown during execution in test generation
        try {
            double double3 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(list2);
    }

    @Test
    public void test00699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00699");
        java.io.IOException iOException1 = new java.io.IOException("/hi!4902629864105712484:");
    }

    @Test
    public void test00700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00700");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double19 = geometricMean3.evaluate(doubleArray16);
        empiricalDistributionImpl0.load(doubleArray16);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl0.getSampleStats();
        double double22 = statisticalSummary21.getVariance();
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.51188643150958d + "'", double19 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 24.3d + "'", double22 == 24.3d);
    }

    @Test
    public void test00701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00701");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = summaryStatistics0.getSummary();
        double double5 = summaryStatistics0.getStandardDeviation();
        double double6 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.clear();
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment7);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = summaryStatistics0.getSummary();
        java.lang.Class<?> wildcardClass11 = statisticalSummary10.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics12 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance((java.lang.Class) wildcardClass11);
            org.junit.Assert.fail("Expected exception of type java.lang.InstantiationException; message: org.apache.commons.math.stat.descriptive.StatisticalSummaryValues");
        } catch (java.lang.InstantiationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(statisticalSummary4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test00702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00702");
        java.io.IOException iOException1 = new java.io.IOException("/hi!1075154936755815594:");
        java.lang.String str2 = iOException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.io.IOException: /hi!1075154936755815594:" + "'", str2, "java.io.IOException: /hi!1075154936755815594:");
    }

    @Test
    public void test00703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00703");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("/hi!3399820819083206588:", "/hi!4533436540036848542:", (-3), "/hi!4955609996634267188:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: Invalid port number :-3");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00704");
        java.io.File file2 = new java.io.File("file", "hi!8858262046242226862:");
        boolean boolean4 = file2.setWritable(true);
        boolean boolean5 = file2.isFile();
        org.junit.Assert.assertEquals(file2.getParent(), "file");
        org.junit.Assert.assertEquals(file2.toString(), "file/hi!8858262046242226862:");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00705");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        double double2 = sumOfLogs0.getResult();
        long long3 = sumOfLogs0.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics4 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics4.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean5);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean7 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean7.increment((double) (short) 100);
        geometricMean7.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = geometricMean7.getSumLogImpl();
        summaryStatistics4.setMinImpl(storelessUnivariateStatistic12);
        double double14 = summaryStatistics4.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics4.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance16);
        org.apache.commons.math.stat.descriptive.rank.Min min18 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min18.clear();
        double[] doubleArray25 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double26 = min18.evaluate(doubleArray25);
        variance16.incrementAll(doubleArray25);
        sumOfLogs0.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double31 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment30);
        boolean boolean33 = sumOfLogs0.equals((java.lang.Object) variance32);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean34 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics35 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics35.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean36);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean38 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean38.increment((double) (short) 100);
        geometricMean38.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic43 = geometricMean38.getSumLogImpl();
        summaryStatistics35.setMinImpl(storelessUnivariateStatistic43);
        double double45 = summaryStatistics35.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics35.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance47);
        org.apache.commons.math.stat.descriptive.rank.Min min49 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min49.clear();
        double[] doubleArray56 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double57 = min49.evaluate(doubleArray56);
        variance47.incrementAll(doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            double double61 = sumOfLogs0.evaluate(doubleArray56, (int) (byte) -1, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic43);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1.0d) + "'", double57 == (-1.0d));
    }

    @Test
    public void test00706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00706");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        java.net.URI uRI5 = file4.toURI();
        long long6 = file4.getUsableSpace();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!5725393680325172513:");
        org.junit.Assert.assertNotNull(uRI5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 280499552256L + "'", long6 == 280499552256L);
    }

    @Test
    public void test00707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00707");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("/experiment/hi!2169115775229245488", "/hi!7075435653623516444:", 1000, "/hi!1863279692134305425:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /experiment/hi!2169115775229245488");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00708");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min0.clear();
        double[] doubleArray7 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double8 = min0.evaluate(doubleArray7);
        long long9 = min0.getN();
        long long10 = min0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.clear();
        long long13 = secondMoment11.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long16 = variance15.getN();
        double[] doubleArray22 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double24 = variance15.evaluate(doubleArray22, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long30 = variance29.getN();
        double[] doubleArray36 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double38 = variance29.evaluate(doubleArray36, (double) 'a');
        mean27.incrementAll(doubleArray36);
        double double41 = variance15.evaluate(doubleArray36, (double) (byte) 1);
        secondMoment11.incrementAll(doubleArray36);
        // The following exception was thrown during execution in test generation
        try {
            min0.incrementAll(doubleArray36, (int) (byte) 1, 24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 19.43999999999942d + "'", double24 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 19.43999999999942d + "'", double38 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 19.44d + "'", double41 == 19.44d);
    }

    @Test
    public void test00709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00709");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMean();
        double double2 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics3 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double4 = summaryStatistics3.getMin();
        double double5 = summaryStatistics3.getStandardDeviation();
        double double6 = summaryStatistics3.getMean();
        double double7 = summaryStatistics3.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long9 = mean8.getN();
        summaryStatistics3.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        mean8.increment((double) (-27));
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        summaryStatistics0.addValue((double) 280499609600L);
        double double16 = summaryStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean17 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean17.increment((double) (short) 100);
        long long20 = geometricMean17.getN();
        geometricMean17.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics22 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics22.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean23);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean25 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean25.increment((double) (short) 100);
        geometricMean25.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic30 = geometricMean25.getSumLogImpl();
        summaryStatistics22.setMinImpl(storelessUnivariateStatistic30);
        double double32 = summaryStatistics22.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double35 = secondMoment34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment34);
        summaryStatistics22.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment34);
        geometricMean17.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment34);
        double double39 = secondMoment34.getResult();
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementations must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.402498047865E11d + "'", double16 == 1.402498047865E11d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test00710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00710");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        java.util.List list3 = empiricalDistributionImpl0.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean5 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean5.increment((double) (short) 100);
        long long8 = geometricMean5.getN();
        geometricMean5.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics10 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics10.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean11);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean13 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean13.increment((double) (short) 100);
        geometricMean13.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic18 = geometricMean13.getSumLogImpl();
        summaryStatistics10.setMinImpl(storelessUnivariateStatistic18);
        double double20 = summaryStatistics10.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double23 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment22);
        summaryStatistics10.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment22);
        geometricMean5.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long32 = variance31.getN();
        double[] doubleArray38 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double40 = variance31.evaluate(doubleArray38, (double) 'a');
        double double44 = variance29.evaluate(doubleArray38, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        variance29.setBiasCorrected(true);
        variance29.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double50 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment49);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary53 = empiricalDistributionImpl52.getSampleStats();
        java.io.File file57 = new java.io.File("");
        java.io.File file58 = java.io.File.createTempFile("hi!", ":", file57);
        java.lang.String str59 = file58.getCanonicalPath();
        boolean boolean60 = file58.createNewFile();
        empiricalDistributionImpl52.load(file58);
        double[] doubleArray62 = empiricalDistributionImpl52.getUpperBounds();
        double[] doubleArray63 = empiricalDistributionImpl52.getUpperBounds();
        double double65 = variance51.evaluate(doubleArray63, 1.0d);
        boolean boolean66 = variance29.equals((java.lang.Object) variance51);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs67 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double68 = sumOfLogs67.getResult();
        double double69 = sumOfLogs67.getResult();
        long long70 = sumOfLogs67.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics71 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics71.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean72);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean74 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean74.increment((double) (short) 100);
        geometricMean74.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic79 = geometricMean74.getSumLogImpl();
        summaryStatistics71.setMinImpl(storelessUnivariateStatistic79);
        double double81 = summaryStatistics71.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics71.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance83);
        org.apache.commons.math.stat.descriptive.rank.Min min85 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min85.clear();
        double[] doubleArray92 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double93 = min85.evaluate(doubleArray92);
        variance83.incrementAll(doubleArray92);
        sumOfLogs67.incrementAll(doubleArray92);
        double double97 = variance29.evaluate(doubleArray92, 2.51188643150958d);
        double double98 = variance27.evaluate(doubleArray92);
        empiricalDistributionImpl0.load(doubleArray92);
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 19.43999999999942d + "'", double40 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNull(statisticalSummary53);
        org.junit.Assert.assertNull("file57.getParent() == null", file57.getParent());
        org.junit.Assert.assertEquals(file57.toString(), "");
        org.junit.Assert.assertNotNull(file58);
        org.junit.Assert.assertEquals(file58.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file58.toString(), "/hi!9072985495645401524:");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "/hi!9072985495645401524:" + "'", str59, "/hi!9072985495645401524:");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic79);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + (-1.0d) + "'", double93 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 673.3000000000001d + "'", double97 == 673.3000000000001d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 673.3000000000001d + "'", double98 == 673.3000000000001d);
    }

    @Test
    public void test00711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00711");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getPath();
        java.net.URLStreamHandler uRLStreamHandler9 = null;
        java.net.URL uRL10 = new java.net.URL(uRL3, "/hi!8304360505110833158:", uRLStreamHandler9);
        java.net.URI uRI11 = uRL3.toURI();
        org.apache.commons.math.stat.descriptive.rank.Min min12 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min12.clear();
        min12.increment(0.0d);
        min12.increment((double) 57);
        boolean boolean18 = uRL3.equals((java.lang.Object) 57);
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str7, "/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/hi!8304360505110833158:");
        org.junit.Assert.assertNotNull(uRI11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test00712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00712");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.clear();
        double double2 = secondMoment0.getResult();
        secondMoment0.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance5.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs8 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double9 = sumOfLogs8.getResult();
        double double10 = sumOfLogs8.getResult();
        long long11 = sumOfLogs8.getN();
        sumOfLogs8.increment((double) 1645454045000L);
        double double14 = sumOfLogs8.getResult();
        double double15 = sumOfLogs8.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl16.getSampleStats();
        boolean boolean18 = empiricalDistributionImpl16.isLoaded();
        boolean boolean19 = empiricalDistributionImpl16.isLoaded();
        boolean boolean20 = empiricalDistributionImpl16.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl21 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int22 = empiricalDistributionImpl21.getBinCount();
        boolean boolean23 = empiricalDistributionImpl21.isLoaded();
        java.util.List list24 = empiricalDistributionImpl21.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean25 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean25.increment((double) (short) 100);
        geometricMean25.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic30 = geometricMean25.getSumLogImpl();
        long long31 = geometricMean25.getN();
        double double32 = geometricMean25.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics33 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double34 = summaryStatistics33.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min35 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics33.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min35);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean37 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean37.increment((double) (short) 100);
        geometricMean37.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long44 = variance43.getN();
        double[] doubleArray50 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double52 = variance43.evaluate(doubleArray50, (double) 'a');
        double double53 = geometricMean37.evaluate(doubleArray50);
        min35.incrementAll(doubleArray50);
        geometricMean25.incrementAll(doubleArray50);
        empiricalDistributionImpl21.load(doubleArray50);
        empiricalDistributionImpl16.load(doubleArray50);
        double double60 = sumOfLogs8.evaluate(doubleArray50, (int) (byte) 0, 3);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = variance5.evaluate(doubleArray50, (int) ':', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 28.129037477258265d + "'", double14 == 28.129037477258265d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 28.129037477258265d + "'", double15 == 28.129037477258265d);
        org.junit.Assert.assertNull(statisticalSummary17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1000 + "'", int22 == 1000);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 2L + "'", long31 == 2L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 19.43999999999942d + "'", double52 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2.51188643150958d + "'", double53 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2.302585092994046d + "'", double60 == 2.302585092994046d);
    }

    @Test
    public void test00713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00713");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        java.lang.String str5 = file4.getAbsolutePath();
        java.io.File file6 = file4.getCanonicalFile();
        boolean boolean9 = file4.setWritable(false, true);
        boolean boolean10 = file4.isFile();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!6932163193945389563:");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/hi!6932163193945389563:" + "'", str5, "/hi!6932163193945389563:");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/hi!6932163193945389563:");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test00714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00714");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL1 = new java.net.URL("/hi!5551543289815605162:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no protocol: /hi!5551543289815605162:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00715");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min0.clear();
        double[] doubleArray7 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double8 = min0.evaluate(doubleArray7);
        long long9 = min0.getN();
        min0.increment((double) 1000);
        min0.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics13 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics13.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean14);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean16 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean16.increment((double) (short) 100);
        geometricMean16.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic21 = geometricMean16.getSumLogImpl();
        summaryStatistics13.setMinImpl(storelessUnivariateStatistic21);
        double double23 = summaryStatistics13.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics13.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance25);
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean27.increment((double) 0);
        double double30 = mean27.getResult();
        mean27.clear();
        double[] doubleArray32 = new double[] {};
        mean27.incrementAll(doubleArray32);
        variance25.incrementAll(doubleArray32);
        long long35 = variance25.getN();
        org.apache.commons.math.stat.descriptive.rank.Max max36 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max36.clear();
        max36.increment((double) (-1L));
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int41 = empiricalDistributionImpl40.getBinCount();
        boolean boolean42 = empiricalDistributionImpl40.isLoaded();
        java.util.List list43 = empiricalDistributionImpl40.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean44 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean44.increment((double) (short) 100);
        geometricMean44.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic49 = geometricMean44.getSumLogImpl();
        long long50 = geometricMean44.getN();
        double double51 = geometricMean44.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics52 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double53 = summaryStatistics52.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min54 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics52.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min54);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean56 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean56.increment((double) (short) 100);
        geometricMean56.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long63 = variance62.getN();
        double[] doubleArray69 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double71 = variance62.evaluate(doubleArray69, (double) 'a');
        double double72 = geometricMean56.evaluate(doubleArray69);
        min54.incrementAll(doubleArray69);
        geometricMean44.incrementAll(doubleArray69);
        empiricalDistributionImpl40.load(doubleArray69);
        double[] doubleArray76 = empiricalDistributionImpl40.getUpperBounds();
        double double79 = max36.evaluate(doubleArray76, (int) 'a', 10);
        double double80 = variance25.evaluate(doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = min0.evaluate(doubleArray76, (int) '4', (-70));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1000 + "'", int41 == 1000);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(list43);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 2L + "'", long50 == 2L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 19.43999999999942d + "'", double71 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2.51188643150958d + "'", double72 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.6d + "'", double79 == 0.6d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.5984000000000001E-4d + "'", double80 == 1.5984000000000001E-4d);
    }

    @Test
    public void test00716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00716");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL3 = new java.net.URL("", "/hi!7767182290482962267:", "/hi!5248138899844219862:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: ");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00717");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL3 = new java.net.URL("/hi!851020226130423905:", "/hi!1306851027237685264:", "/hi!3938804822785417105:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!851020226130423905:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00718");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        double double2 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics3 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double4 = summaryStatistics3.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics3.getGeoMeanImpl();
        summaryStatistics0.setGeoMeanImpl(storelessUnivariateStatistic5);
        long long7 = storelessUnivariateStatistic5.getN();
        long long8 = storelessUnivariateStatistic5.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test00719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00719");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min0.clear();
        min0.clear();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean6 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean6.increment((double) (short) 100);
        geometricMean6.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long13 = variance12.getN();
        double[] doubleArray19 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double21 = variance12.evaluate(doubleArray19, (double) 'a');
        double double22 = geometricMean6.evaluate(doubleArray19);
        empiricalDistributionImpl3.load(doubleArray19);
        double[] doubleArray24 = empiricalDistributionImpl3.getUpperBounds();
        // The following exception was thrown during execution in test generation
        try {
            double double27 = min0.evaluate(doubleArray24, 2, (-6));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 19.43999999999942d + "'", double21 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2.51188643150958d + "'", double22 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test00720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00720");
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException("hi!", throwable2);
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.io.IOException iOException5 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException3);
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.lang.String str7 = iOException6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.io.IOException: java.io.IOException: hi!" + "'", str7, "java.io.IOException: java.io.IOException: hi!");
    }

    @Test
    public void test00721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00721");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        boolean boolean10 = file1.mkdir();
        java.io.File file11 = file1.getCanonicalFile();
        boolean boolean12 = file11.canRead();
        java.lang.String str13 = file11.toString();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(file11);
// flaky:         org.junit.Assert.assertEquals(file11.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "/experiment" + "'", str13, "/experiment");
    }

    @Test
    public void test00722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00722");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL3 = new java.net.URL("/hi!1367451121206341241:", "hi!8858262046242226862:", "/hi!8356885577064363291:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!1367451121206341241:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00723");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file5 = new java.io.File("");
        java.io.File file6 = java.io.File.createTempFile("hi!", ":", file5);
        java.lang.String str7 = file6.getCanonicalPath();
        boolean boolean8 = file6.createNewFile();
        empiricalDistributionImpl0.load(file6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file14 = new java.io.File("");
        java.io.File file15 = java.io.File.createTempFile("hi!", ":", file14);
        java.lang.String str16 = file15.getCanonicalPath();
        boolean boolean18 = file15.setExecutable(false);
        boolean boolean20 = file15.setWritable(true);
        boolean boolean21 = file15.mkdirs();
        boolean boolean24 = file15.setExecutable(true, false);
        java.io.File file25 = file15.getAbsoluteFile();
        empiricalDistributionImpl0.load(file25);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: No bin selected");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/hi!2965224696206142323:");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/hi!2965224696206142323:" + "'", str7, "/hi!2965224696206142323:");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(statisticalSummary10);
        org.junit.Assert.assertNull("file14.getParent() == null", file14.getParent());
        org.junit.Assert.assertEquals(file14.toString(), "");
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file15.toString(), "/hi!212907778557013065:");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "/hi!212907778557013065:" + "'", str16, "/hi!212907778557013065:");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/hi!212907778557013065:");
    }

    @Test
    public void test00724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00724");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = geometricMean0.getSumLogImpl();
        long long6 = geometricMean0.getN();
        double double7 = geometricMean0.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics8 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double9 = summaryStatistics8.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min10 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics8.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min10);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean12 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean12.increment((double) (short) 100);
        geometricMean12.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long19 = variance18.getN();
        double[] doubleArray25 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double27 = variance18.evaluate(doubleArray25, (double) 'a');
        double double28 = geometricMean12.evaluate(doubleArray25);
        min10.incrementAll(doubleArray25);
        geometricMean0.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics31 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double32 = summaryStatistics31.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean33.increment((double) 0);
        double double36 = mean33.getResult();
        long long37 = mean33.getN();
        mean33.clear();
        summaryStatistics31.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean33);
        double double40 = summaryStatistics31.getMean();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean41 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean41.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long46 = variance45.getN();
        double[] doubleArray52 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double54 = variance45.evaluate(doubleArray52, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment55);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long60 = variance59.getN();
        double[] doubleArray66 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double68 = variance59.evaluate(doubleArray66, (double) 'a');
        mean57.incrementAll(doubleArray66);
        double double71 = variance45.evaluate(doubleArray66, (double) (byte) 1);
        geometricMean41.incrementAll(doubleArray66);
        summaryStatistics31.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean41);
        geometricMean41.clear();
        // The following exception was thrown during execution in test generation
        try {
            geometricMean0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementation must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 19.43999999999942d + "'", double27 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2.51188643150958d + "'", double28 == 2.51188643150958d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 19.43999999999942d + "'", double54 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 19.43999999999942d + "'", double68 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 19.44d + "'", double71 == 19.44d);
    }

    @Test
    public void test00725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00725");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        sumOfLogs0.increment((double) (-3));
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = empiricalDistributionImpl5.getSampleStats();
        boolean boolean7 = empiricalDistributionImpl5.isLoaded();
        int int8 = empiricalDistributionImpl5.getBinCount();
        boolean boolean9 = geometricMean4.equals((java.lang.Object) empiricalDistributionImpl5);
        java.io.File file12 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL13 = file12.toURL();
        java.lang.String str14 = uRL13.getAuthority();
        java.lang.String str15 = uRL13.getUserInfo();
        int int16 = uRL13.getDefaultPort();
        java.lang.String str17 = uRL13.getUserInfo();
        java.io.File file20 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL21 = file20.toURL();
        java.lang.String str22 = uRL21.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler24 = null;
        java.net.URL uRL25 = new java.net.URL(uRL21, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler24);
        boolean boolean26 = uRL13.sameFile(uRL25);
        java.io.File file29 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL30 = file29.toURL();
        java.lang.String str31 = uRL30.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler33 = null;
        java.net.URL uRL34 = new java.net.URL(uRL30, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler33);
        java.io.File file37 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL38 = file37.toURL();
        boolean boolean39 = uRL30.sameFile(uRL38);
        java.net.URL uRL41 = new java.net.URL(uRL38, "/hi!4129638666993068054:");
        java.lang.Class[] classArray42 = new java.lang.Class[] {};
        java.lang.Object obj43 = uRL41.getContent(classArray42);
        java.lang.Object obj44 = null; // flaky: uRL25.getContent(classArray42);
        java.lang.Object obj45 = null; // flaky: uRL25.getContent();
        java.lang.String str46 = uRL25.getRef();
        // The following exception was thrown during execution in test generation
{ // flaky:         try {
// flaky:             empiricalDistributionImpl5.load(uRL25);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: URL file:/experiment/hi!2169115775229245488/hi! contains no data");
// flaky:         } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNull(statisticalSummary6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals(file12.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file12.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL13);
// flaky:         org.junit.Assert.assertEquals(uRL13.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals(file20.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file20.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL21);
// flaky:         org.junit.Assert.assertEquals(uRL21.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals(uRL25.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file29.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL30);
// flaky:         org.junit.Assert.assertEquals(uRL30.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals(uRL34.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file37.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file37.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL38);
// flaky:         org.junit.Assert.assertEquals(uRL38.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals(uRL41.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj44);
// flaky:         org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test00726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00726");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("/tmp", "hi!5551543289815605162:", 1000, "hi!3424111480641751587", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /tmp");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00727");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        java.lang.String str5 = file4.getCanonicalPath();
        java.nio.file.Path path6 = file4.toPath();
        file4.deleteOnExit();
        boolean boolean8 = file4.mkdirs();
        long long9 = file4.getTotalSpace();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!5538372899390671555:");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/hi!5538372899390671555:" + "'", str5, "/hi!5538372899390671555:");
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 364740218880L + "'", long9 == 364740218880L);
    }

    @Test
    public void test00728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00728");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSum();
        double double4 = summaryStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics6 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double7 = summaryStatistics6.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean8.increment((double) 0);
        double double11 = mean8.getResult();
        long long12 = mean8.getN();
        mean8.clear();
        summaryStatistics6.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics16 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double17 = summaryStatistics16.getMin();
        double double18 = summaryStatistics16.getStandardDeviation();
        double double19 = summaryStatistics16.getMean();
        double double20 = summaryStatistics16.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min21 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics16.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min21);
        double[] doubleArray23 = new double[] {};
        min21.incrementAll(doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = mean8.evaluate(doubleArray23, (int) 'a', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
    }

    @Test
    public void test00729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00729");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        double double2 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics3 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double4 = summaryStatistics3.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics3.getGeoMeanImpl();
        summaryStatistics0.setGeoMeanImpl(storelessUnivariateStatistic5);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic7 = summaryStatistics0.getMinImpl();
        storelessUnivariateStatistic7.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic7);
    }

    @Test
    public void test00730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00730");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("/hi!1367451121206341241:", "/experiment/hi!2169115775229245488/hi!/", (-6), "/hi!585200003762659678:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: Invalid port number :-6");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00731");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = geometricMean0.getSumLogImpl();
        geometricMean0.clear();
        double double7 = geometricMean0.getResult();
        double double8 = geometricMean0.getResult();
        long long9 = geometricMean0.getN();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = geometricMean0.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics11 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double12 = summaryStatistics11.getMin();
        double double13 = summaryStatistics11.getStandardDeviation();
        double double14 = summaryStatistics11.getMean();
        double double15 = summaryStatistics11.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double18 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment17);
        summaryStatistics11.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        summaryStatistics11.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance22);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean24.increment((double) 0);
        double double27 = mean24.getResult();
        mean24.clear();
        double[] doubleArray29 = new double[] {};
        mean24.incrementAll(doubleArray29);
        double double31 = variance22.evaluate(doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = geometricMean0.evaluate(doubleArray29, (-2), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
    }

    @Test
    public void test00732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00732");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        double double2 = sum0.getResult();
        sum0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double6 = secondMoment5.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl9 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        mean12.incrementAll(doubleArray21);
        empiricalDistributionImpl9.load(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long30 = variance29.getN();
        double[] doubleArray36 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double38 = variance29.evaluate(doubleArray36, (double) 'a');
        double double42 = variance27.evaluate(doubleArray36, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        empiricalDistributionImpl9.load(doubleArray36);
        double double45 = variance8.evaluate(doubleArray36, (double) '/');
        // The following exception was thrown during execution in test generation
        try {
            double double48 = sum0.evaluate(doubleArray36, (-50), (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 19.43999999999942d + "'", double38 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 24.300000000000182d + "'", double45 == 24.300000000000182d);
    }

    @Test
    public void test00733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00733");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException("hi!", throwable1);
        java.io.IOException iOException3 = new java.io.IOException(throwable1);
        java.lang.Throwable throwable5 = null;
        java.io.IOException iOException6 = new java.io.IOException("hi!", throwable5);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.lang.Throwable[] throwableArray8 = iOException7.getSuppressed();
        iOException3.addSuppressed((java.lang.Throwable) iOException7);
        java.lang.String str10 = iOException7.toString();
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.io.IOException: java.io.IOException: hi!" + "'", str10, "java.io.IOException: java.io.IOException: hi!");
    }

    @Test
    public void test00734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00734");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("", "hi!8004869517018842683:", (int) (byte) 10, "/hi!4522751534539569216:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: ");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00735");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long4 = variance3.getN();
        variance3.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double8 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long17 = variance16.getN();
        double[] doubleArray23 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double25 = variance16.evaluate(doubleArray23, (double) 'a');
        mean14.incrementAll(doubleArray23);
        mean11.incrementAll(doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = variance3.evaluate(doubleArray23, (double) 1645454075000L, (int) (short) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 19.43999999999942d + "'", double25 == 19.43999999999942d);
    }

    @Test
    public void test00736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00736");
        java.io.IOException iOException2 = new java.io.IOException("/hi!4480358428447556126:");
        java.io.IOException iOException3 = new java.io.IOException("hi!2169115775229245488", (java.lang.Throwable) iOException2);
        java.lang.String str4 = iOException2.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.io.IOException: /hi!4480358428447556126:" + "'", str4, "java.io.IOException: /hi!4480358428447556126:");
    }

    @Test
    public void test00737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00737");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean2 = variance1.isBiasCorrected();
        double double3 = variance1.getResult();
        boolean boolean5 = variance1.equals((java.lang.Object) 'a');
        double double6 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double9 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long13 = variance12.getN();
        double[] doubleArray19 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double21 = variance12.evaluate(doubleArray19, (double) 'a');
        double double22 = variance10.evaluate(doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = variance1.evaluate(doubleArray19, 100, (int) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 19.43999999999942d + "'", double21 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 19.44d + "'", double22 == 19.44d);
    }

    @Test
    public void test00738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00738");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        double double11 = summaryStatistics0.getSum();
        java.io.File file14 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL15 = file14.toURL();
        boolean boolean16 = summaryStatistics0.equals((java.lang.Object) uRL15);
        java.lang.String str17 = uRL15.toString();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals(file14.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file14.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL15);
// flaky:         org.junit.Assert.assertEquals(uRL15.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str17, "file:/experiment/hi!2169115775229245488/hi!");
    }

    @Test
    public void test00739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00739");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        summaryStatistics0.addValue(19.44d);
        double double9 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics0.getMeanImpl();
        long long11 = summaryStatistics0.getN();
        double double12 = summaryStatistics0.getMean();
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 19.44d + "'", double9 == 19.44d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 19.44d + "'", double12 == 19.44d);
    }

    @Test
    public void test00740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00740");
        java.io.File file4 = java.io.File.createTempFile("hi!", "");
        boolean boolean6 = file4.setLastModified((long) '#');
        java.io.File file7 = file4.getCanonicalFile();
        java.io.File file8 = file4.getCanonicalFile();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file9 = java.io.File.createTempFile("/hi!7687468563058800479:", "/hi!9116240588780943281:", file8);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/hi!8178605092102003649/hi!7687468563058800479:3598953921930164282/hi!9116240588780943281:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/tmp/hi!8178605092102003649");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/tmp/hi!8178605092102003649");
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/tmp/hi!8178605092102003649");
    }

    @Test
    public void test00741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00741");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics11 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics11.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean12);
        java.io.File file15 = new java.io.File("");
        java.lang.String str16 = file15.getParent();
        boolean boolean17 = summaryStatistics11.equals((java.lang.Object) file15);
        summaryStatistics11.addValue(19.44d);
        double double20 = summaryStatistics11.getMax();
        double double21 = summaryStatistics11.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic22 = summaryStatistics11.getGeoMeanImpl();
        summaryStatistics0.setMeanImpl(storelessUnivariateStatistic22);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = summaryStatistics0.getSummary();
        long long25 = statisticalSummary24.getN();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 19.44d + "'", double20 == 19.44d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic22);
        org.junit.Assert.assertNotNull(statisticalSummary24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test00742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00742");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        summaryStatistics0.addValue(19.44d);
        double double9 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics0.getMeanImpl();
        double double11 = summaryStatistics0.getVariance();
        double double12 = summaryStatistics0.getSumOfLogs();
        double double13 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics14 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double15 = summaryStatistics14.getMin();
        double double16 = summaryStatistics14.getStandardDeviation();
        double double17 = summaryStatistics14.getSumsq();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = summaryStatistics14.getSummary();
        double double19 = summaryStatistics14.getMax();
        summaryStatistics14.addValue(58.0d);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic22 = summaryStatistics14.getMinImpl();
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.setSumImpl(storelessUnivariateStatistic22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementations must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 19.44d + "'", double9 == 19.44d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 19.44d + "'", double12 == 19.44d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 19.44d + "'", double13 == 19.44d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(statisticalSummary18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic22);
    }

    @Test
    public void test00743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00743");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        long long7 = file4.getFreeSpace();
        java.io.File file9 = new java.io.File(file4, "/hi!3523803642448568020:");
        boolean boolean12 = file4.setExecutable(false, true);
        boolean boolean14 = file4.setExecutable(false);
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals(file9.getParent(), "/");
        org.junit.Assert.assertEquals(file9.toString(), "/hi!3523803642448568020:");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00744");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        java.io.File file10 = new java.io.File(uRI9);
        boolean boolean11 = file10.canExecute();
        long long12 = file10.length();
        boolean boolean13 = file10.isFile();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
// flaky:         org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 20480L + "'", long12 == 20480L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00745");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        java.lang.String str5 = file4.getCanonicalPath();
        long long6 = file4.getTotalSpace();
        boolean boolean7 = file4.isAbsolute();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!6515818622143572101:");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/hi!6515818622143572101:" + "'", str5, "/hi!6515818622143572101:");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 364740218880L + "'", long6 == 364740218880L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test00746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00746");
        java.io.File file2 = java.io.File.createTempFile("hi!", "");
        boolean boolean4 = file2.setLastModified((long) '#');
        java.io.File file5 = file2.getCanonicalFile();
        boolean boolean8 = file5.setReadable(true, true);
        long long9 = file5.getTotalSpace();
        boolean boolean10 = file5.delete();
        boolean boolean11 = file5.canWrite();
        boolean boolean12 = file5.isHidden();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/hi!8339072978845683837");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/tmp/hi!8339072978845683837");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 364740218880L + "'", long9 == 364740218880L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00747");
        java.io.File file2 = new java.io.File("/tmp/hi!4562167846147254095", "/hi!6147520189804127628:");
        boolean boolean4 = file2.setReadable(true);
        java.lang.String str5 = file2.toString();
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp/hi!4562167846147254095");
        org.junit.Assert.assertEquals(file2.toString(), "/tmp/hi!4562167846147254095/hi!6147520189804127628:");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/tmp/hi!4562167846147254095/hi!6147520189804127628:" + "'", str5, "/tmp/hi!4562167846147254095/hi!6147520189804127628:");
    }

    @Test
    public void test00748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00748");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean1.increment((double) (short) 100);
        geometricMean1.increment((double) (-1L));
        geometricMean1.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean8 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean8.increment((double) (short) 100);
        geometricMean8.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        double double24 = geometricMean8.evaluate(doubleArray21);
        double double25 = geometricMean1.evaluate(doubleArray21);
        double double28 = sum0.evaluate(doubleArray21, 0, 0);
        sum0.clear();
        sum0.increment((double) 1645454033000L);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl32.getSampleStats();
        boolean boolean34 = empiricalDistributionImpl32.isLoaded();
        boolean boolean35 = empiricalDistributionImpl32.isLoaded();
        java.util.List list36 = empiricalDistributionImpl32.getBinStats();
        int int37 = empiricalDistributionImpl32.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long44 = variance43.getN();
        double[] doubleArray50 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double52 = variance43.evaluate(doubleArray50, (double) 'a');
        mean41.incrementAll(doubleArray50);
        empiricalDistributionImpl38.load(doubleArray50);
        empiricalDistributionImpl32.load(doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = sum0.evaluate(doubleArray50, (int) '#', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2.51188643150958d + "'", double24 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2.51188643150958d + "'", double25 == 2.51188643150958d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1000 + "'", int37 == 1000);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 19.43999999999942d + "'", double52 == 19.43999999999942d);
    }

    @Test
    public void test00749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00749");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file5 = new java.io.File("");
        java.io.File file6 = java.io.File.createTempFile("hi!", ":", file5);
        java.lang.String str7 = file6.getCanonicalPath();
        boolean boolean8 = file6.createNewFile();
        empiricalDistributionImpl0.load(file6);
        double[] doubleArray10 = empiricalDistributionImpl0.getUpperBounds();
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/hi!7786655036385760436:");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/hi!7786655036385760436:" + "'", str7, "/hi!7786655036385760436:");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
    }

    @Test
    public void test00750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00750");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long2 = variance1.getN();
        long long3 = variance1.getN();
        variance1.increment((double) 10.0f);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.rank.Max max7 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max7.clear();
        max7.increment((double) (-1L));
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int12 = empiricalDistributionImpl11.getBinCount();
        boolean boolean13 = empiricalDistributionImpl11.isLoaded();
        java.util.List list14 = empiricalDistributionImpl11.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean15 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean15.increment((double) (short) 100);
        geometricMean15.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic20 = geometricMean15.getSumLogImpl();
        long long21 = geometricMean15.getN();
        double double22 = geometricMean15.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics23 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double24 = summaryStatistics23.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min25 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics23.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min25);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean27 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean27.increment((double) (short) 100);
        geometricMean27.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long34 = variance33.getN();
        double[] doubleArray40 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double42 = variance33.evaluate(doubleArray40, (double) 'a');
        double double43 = geometricMean27.evaluate(doubleArray40);
        min25.incrementAll(doubleArray40);
        geometricMean15.incrementAll(doubleArray40);
        empiricalDistributionImpl11.load(doubleArray40);
        double[] doubleArray47 = empiricalDistributionImpl11.getUpperBounds();
        double double50 = max7.evaluate(doubleArray47, (int) 'a', 10);
        double double54 = variance1.evaluate(doubleArray47, (double) (short) 100, (int) (byte) 1, 24);
        variance1.increment((double) 4L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1000 + "'", int12 == 1000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(list14);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2L + "'", long21 == 2L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 19.43999999999942d + "'", double42 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2.51188643150958d + "'", double43 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.6d + "'", double50 == 0.6d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0913936421275139E-11d) + "'", double54 == (-1.0913936421275139E-11d));
    }

    @Test
    public void test00751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00751");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        boolean boolean3 = empiricalDistributionImpl0.isLoaded();
        boolean boolean4 = empiricalDistributionImpl0.isLoaded();
        boolean boolean5 = empiricalDistributionImpl0.isLoaded();
        java.io.File file9 = new java.io.File("");
        java.io.File file10 = java.io.File.createTempFile("hi!", ":", file9);
        java.lang.String str11 = file10.getAbsolutePath();
        boolean boolean12 = file10.setReadOnly();
        boolean boolean14 = file10.setLastModified(364740218880L);
        empiricalDistributionImpl0.load(file10);
        java.util.List list16 = empiricalDistributionImpl0.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl17.getSampleStats();
        boolean boolean19 = empiricalDistributionImpl17.isLoaded();
        boolean boolean20 = empiricalDistributionImpl17.isLoaded();
        java.util.List list21 = empiricalDistributionImpl17.getBinStats();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics22 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics22.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean23);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean25 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean25.increment((double) (short) 100);
        geometricMean25.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic30 = geometricMean25.getSumLogImpl();
        summaryStatistics22.setMinImpl(storelessUnivariateStatistic30);
        double double32 = summaryStatistics22.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics22.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance34);
        org.apache.commons.math.stat.descriptive.rank.Min min36 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min36.clear();
        double[] doubleArray43 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double44 = min36.evaluate(doubleArray43);
        variance34.incrementAll(doubleArray43);
        empiricalDistributionImpl17.load(doubleArray43);
        empiricalDistributionImpl0.load(doubleArray43);
        boolean boolean48 = empiricalDistributionImpl0.isLoaded();
        int int49 = empiricalDistributionImpl0.getBinCount();
        java.io.File file51 = new java.io.File("");
        boolean boolean54 = file51.setWritable(true, true);
        boolean boolean55 = file51.setReadOnly();
        boolean boolean58 = file51.setWritable(true, false);
        boolean boolean59 = file51.setReadOnly();
        boolean boolean62 = file51.setWritable(false, false);
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file51);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertNotNull(file10);
        org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/hi!7330752609331541415:");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/hi!7330752609331541415:" + "'", str11, "/hi!7330752609331541415:");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(list16);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1000 + "'", int49 == 1000);
        org.junit.Assert.assertNull("file51.getParent() == null", file51.getParent());
        org.junit.Assert.assertEquals(file51.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test00752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00752");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(1);
        java.io.File file4 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL5 = file4.toURL();
        java.lang.String str6 = uRL5.getAuthority();
        int int7 = uRL5.getPort();
        int int8 = uRL5.getDefaultPort();
        java.lang.String str9 = uRL5.getPath();
        java.net.URLStreamHandler uRLStreamHandler11 = null;
        java.net.URL uRL12 = new java.net.URL(uRL5, "/hi!8304360505110833158:", uRLStreamHandler11);
        java.net.URI uRI13 = uRL5.toURI();
        // The following exception was thrown during execution in test generation
{ // flaky:         try {
// flaky:             empiricalDistributionImpl1.load(uRL5);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: URL file:/experiment/hi!2169115775229245488/hi! contains no data");
// flaky:         } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file4.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file4.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL5);
// flaky:         org.junit.Assert.assertEquals(uRL5.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str9, "/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(uRL12.toString(), "file:/hi!8304360505110833158:");
        org.junit.Assert.assertNotNull(uRI13);
    }

    @Test
    public void test00753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00753");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.net.URI uRI4 = uRL3.toURI();
        java.net.URLConnection uRLConnection5 = uRL3.openConnection();
        java.net.URLStreamHandler uRLStreamHandler7 = null;
        java.net.URL uRL8 = new java.net.URL(uRL3, "", uRLStreamHandler7);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics9 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics9.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean10);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean12 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean12.increment((double) (short) 100);
        geometricMean12.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic17 = geometricMean12.getSumLogImpl();
        summaryStatistics9.setMinImpl(storelessUnivariateStatistic17);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic19 = summaryStatistics9.getVarianceImpl();
        double double20 = summaryStatistics9.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs21 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double22 = sumOfLogs21.getResult();
        long long23 = sumOfLogs21.getN();
        org.apache.commons.math.stat.descriptive.rank.Min min24 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min24.clear();
        double[] doubleArray31 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double32 = min24.evaluate(doubleArray31);
        double double35 = sumOfLogs21.evaluate(doubleArray31, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean36 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs21);
        summaryStatistics9.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfLogs21);
        boolean boolean38 = uRL3.equals((java.lang.Object) summaryStatistics9);
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRI4);
        org.junit.Assert.assertNotNull(uRLConnection5);
// flaky:         org.junit.Assert.assertEquals(uRL8.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic17);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 4.060443010546419d + "'", double35 == 4.060443010546419d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test00754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00754");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.lang.String str6 = uRL3.toExternalForm();
        int int7 = uRL3.getDefaultPort();
        java.net.URLStreamHandler uRLStreamHandler9 = null;
        java.net.URL uRL10 = new java.net.URL(uRL3, "/hi!8695361449339891175:", uRLStreamHandler9);
        java.net.Proxy proxy11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection12 = uRL10.openConnection(proxy11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str6, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/hi!8695361449339891175:");
    }

    @Test
    public void test00755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00755");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        summaryStatistics0.addValue(19.44d);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics10 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double11 = summaryStatistics10.getMin();
        double double12 = summaryStatistics10.getStandardDeviation();
        double double13 = summaryStatistics10.getMean();
        double double14 = summaryStatistics10.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min15 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics10.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min15);
        double[] doubleArray17 = new double[] {};
        min15.incrementAll(doubleArray17);
        min15.increment((double) 1645454029000L);
        min15.clear();
        double double22 = min15.getResult();
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementations must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test00756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00756");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double5 = variance4.getResult();
        boolean boolean6 = variance4.isBiasCorrected();
        variance4.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance10.increment((double) (byte) 100);
        java.io.File file15 = new java.io.File("/hi!4420905478953568698:", "/experiment/hi!2169115775229245488");
        boolean boolean16 = variance10.equals((java.lang.Object) "/hi!4420905478953568698:");
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean17.increment((double) 0);
        double double20 = mean17.getResult();
        mean17.clear();
        double[] doubleArray22 = new double[] {};
        mean17.incrementAll(doubleArray22);
        double double25 = variance10.evaluate(doubleArray22, (double) (short) 0);
        double double26 = variance4.evaluate(doubleArray22);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl27.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl27.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean30 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean30.increment((double) (short) 100);
        geometricMean30.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long37 = variance36.getN();
        double[] doubleArray43 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double45 = variance36.evaluate(doubleArray43, (double) 'a');
        double double46 = geometricMean30.evaluate(doubleArray43);
        empiricalDistributionImpl27.load(doubleArray43);
        double[] doubleArray48 = empiricalDistributionImpl27.getUpperBounds();
        // The following exception was thrown during execution in test generation
        try {
            double double51 = variance4.evaluate(doubleArray48, (-70), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals(file15.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file15.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNull(statisticalSummary29);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 19.43999999999942d + "'", double45 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2.51188643150958d + "'", double46 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(doubleArray48);
    }

    @Test
    public void test00757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00757");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean2.increment((double) 0);
        double double5 = mean2.getResult();
        long long6 = mean2.getN();
        mean2.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean2);
        double double9 = summaryStatistics0.getMean();
        double double10 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.rank.Min min11 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min11.clear();
        double[] doubleArray18 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double19 = min11.evaluate(doubleArray18);
        long long20 = min11.getN();
        min11.increment((double) 1000);
        min11.clear();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min11);
        min11.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test00758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00758");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = summaryStatistics0.getSummary();
        double double5 = summaryStatistics0.getMax();
        summaryStatistics0.addValue(58.0d);
        double double8 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics9 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double10 = summaryStatistics9.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min11 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics9.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min11);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics9.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic14 = summaryStatistics9.getMinImpl();
        double double15 = summaryStatistics9.getMin();
        double double16 = summaryStatistics9.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double18 = secondMoment17.getResult();
        secondMoment17.increment((double) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment17);
        summaryStatistics9.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment17);
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementations must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(statisticalSummary4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 58.0d + "'", double8 == 58.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test00759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00759");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        boolean boolean11 = file1.setExecutable(true);
        boolean boolean13 = file1.setWritable(true);
        java.io.File file16 = new java.io.File("/hi!2756764035548942023:", ":");
        java.io.File file17 = file16.getParentFile();
        java.net.URL uRL18 = file16.toURL();
        java.lang.String str19 = uRL18.getUserInfo();
        java.lang.String str20 = uRL18.getPath();
        boolean boolean21 = file1.equals((java.lang.Object) str20);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals(file16.getParent(), "/hi!2756764035548942023:");
        org.junit.Assert.assertEquals(file16.toString(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "/");
        org.junit.Assert.assertEquals(file17.toString(), "/hi!2756764035548942023:");
        org.junit.Assert.assertNotNull(uRL18);
// flaky:         org.junit.Assert.assertEquals(uRL18.toString(), "file:/hi!2756764035548942023:/:");
        org.junit.Assert.assertNull(str19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "/hi!2756764035548942023:/:" + "'", str20, "/hi!2756764035548942023:/:");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test00760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00760");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        java.lang.String str5 = file4.getCanonicalPath();
        boolean boolean6 = file4.createNewFile();
        java.io.File file10 = new java.io.File("");
        java.io.File file11 = java.io.File.createTempFile("hi!", ":", file10);
        boolean boolean13 = file11.setWritable(true);
        boolean boolean14 = file11.canExecute();
        java.io.File file16 = new java.io.File("");
        boolean boolean19 = file16.setWritable(true, true);
        boolean boolean20 = file16.setReadOnly();
        boolean boolean23 = file16.setWritable(true, false);
        java.net.URI uRI24 = file16.toURI();
        boolean boolean25 = file16.mkdir();
        java.io.File file26 = file16.getCanonicalFile();
        boolean boolean27 = file11.renameTo(file16);
        boolean boolean30 = file16.setWritable(true, true);
        boolean boolean33 = file16.setWritable(false, false);
        boolean boolean34 = file16.canWrite();
        boolean boolean37 = file16.setReadable(true, true);
        int int38 = file4.compareTo(file16);
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!8136600523484678604:");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/hi!8136600523484678604:" + "'", str5, "/hi!8136600523484678604:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull("file10.getParent() == null", file10.getParent());
        org.junit.Assert.assertEquals(file10.toString(), "");
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/hi!6124833314382888996:");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull("file16.getParent() == null", file16.getParent());
        org.junit.Assert.assertEquals(file16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(uRI24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(file26);
// flaky:         org.junit.Assert.assertEquals(file26.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 24 + "'", int38 == 24);
    }

    @Test
    public void test00761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00761");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = null;
        summaryStatistics0.setMaxImpl(storelessUnivariateStatistic4);
        long long6 = summaryStatistics0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test00762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00762");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        int int3 = empiricalDistributionImpl0.getBinCount();
        int int4 = empiricalDistributionImpl0.getBinCount();
        boolean boolean5 = empiricalDistributionImpl0.isLoaded();
        boolean boolean6 = empiricalDistributionImpl0.isLoaded();
        int int7 = empiricalDistributionImpl0.getBinCount();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1000 + "'", int4 == 1000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1000 + "'", int7 == 1000);
    }

    @Test
    public void test00763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00763");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = summaryStatistics0.getSummary();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs5 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        long long6 = sumOfLogs5.getN();
        long long7 = sumOfLogs5.getN();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfLogs5);
        sumOfLogs5.increment((double) 10);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares11 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long12 = sumOfSquares11.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long17 = variance16.getN();
        double[] doubleArray23 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double25 = variance16.evaluate(doubleArray23, (double) 'a');
        double double29 = variance14.evaluate(doubleArray23, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double32 = sumOfSquares11.evaluate(doubleArray23, (int) (short) 1, 0);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics33 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double34 = summaryStatistics33.getMin();
        double double35 = summaryStatistics33.getStandardDeviation();
        double double36 = summaryStatistics33.getMean();
        double double37 = summaryStatistics33.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min38 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics33.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min38);
        double[] doubleArray40 = new double[] {};
        min38.incrementAll(doubleArray40);
        double double42 = sumOfSquares11.evaluate(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            double double45 = sumOfLogs5.evaluate(doubleArray40, (int) (short) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(statisticalSummary4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 19.43999999999942d + "'", double25 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double42));
    }

    @Test
    public void test00764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00764");
        java.io.File file1 = new java.io.File("/hi!4533436540036848542:");
        boolean boolean3 = file1.setReadable(true);
        long long4 = file1.getFreeSpace();
        long long5 = file1.lastModified();
        boolean boolean8 = file1.setExecutable(false, false);
        java.lang.String str9 = file1.getPath();
        boolean boolean10 = file1.isDirectory();
        org.junit.Assert.assertEquals(file1.getParent(), "/");
        org.junit.Assert.assertEquals(file1.toString(), "/hi!4533436540036848542:");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 299098664960L + "'", long4 == 299098664960L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645454085000L + "'", long5 == 1645454085000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/hi!4533436540036848542:" + "'", str9, "/hi!4533436540036848542:");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test00765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00765");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double5 = secondMoment4.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment4);
        double double8 = secondMoment4.getResult();
        secondMoment4.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test00766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00766");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.clear();
        double double2 = geometricMean0.getResult();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs3 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double4 = sumOfLogs3.getResult();
        long long5 = sumOfLogs3.getN();
        org.apache.commons.math.stat.descriptive.rank.Min min6 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min6.clear();
        double[] doubleArray13 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double14 = min6.evaluate(doubleArray13);
        double double17 = sumOfLogs3.evaluate(doubleArray13, 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = geometricMean0.evaluate(doubleArray13, 1, (-70));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 4.060443010546419d + "'", double17 == 4.060443010546419d);
    }

    @Test
    public void test00767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00767");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = summaryStatistics0.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics13 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double14 = summaryStatistics13.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics13.getGeoMeanImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic15);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic17 = summaryStatistics0.getMinImpl();
        storelessUnivariateStatistic17.clear();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic17);
    }

    @Test
    public void test00768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00768");
        java.io.File file2 = java.io.File.createTempFile("hi!", "");
        long long3 = file2.getFreeSpace();
        boolean boolean4 = file2.canRead();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/hi!6580216363601598655");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 299098648576L + "'", long3 == 299098648576L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test00769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00769");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.clear();
        long long2 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean4.increment((double) (short) 100);
        geometricMean4.increment((double) (-1L));
        geometricMean4.increment((double) (byte) 1);
        geometricMean4.increment((double) 299098718208L);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares13 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long14 = sumOfSquares13.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long19 = variance18.getN();
        double[] doubleArray25 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double27 = variance18.evaluate(doubleArray25, (double) 'a');
        double double31 = variance16.evaluate(doubleArray25, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double34 = sumOfSquares13.evaluate(doubleArray25, (int) (short) 1, 0);
        sumOfSquares13.increment(0.0d);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl37 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl37.getSampleStats();
        java.io.File file42 = new java.io.File("");
        java.io.File file43 = java.io.File.createTempFile("hi!", ":", file42);
        java.lang.String str44 = file43.getCanonicalPath();
        boolean boolean45 = file43.createNewFile();
        empiricalDistributionImpl37.load(file43);
        double[] doubleArray47 = empiricalDistributionImpl37.getUpperBounds();
        double double50 = sumOfSquares13.evaluate(doubleArray47, 100, (int) (short) 1);
        double double51 = geometricMean4.evaluate(doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            double double54 = mean3.evaluate(doubleArray47, (-27), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 19.43999999999942d + "'", double27 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertNull("file42.getParent() == null", file42.getParent());
        org.junit.Assert.assertEquals(file42.toString(), "");
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertEquals(file43.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file43.toString(), "/hi!7428512679294576245:");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "/hi!7428512679294576245:" + "'", str44, "/hi!7428512679294576245:");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
    }

    @Test
    public void test00770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00770");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.lang.String str5 = uRL3.getUserInfo();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getAuthority();
        java.lang.String str8 = uRL3.getAuthority();
        java.lang.String str9 = uRL3.getUserInfo();
        java.net.URL uRL11 = new java.net.URL(uRL3, "hi!4533436540036848542:");
        java.net.URLConnection uRLConnection12 = uRL3.openConnection();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str9);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!4533436540036848542:");
        org.junit.Assert.assertNotNull(uRLConnection12);
    }

    @Test
    public void test00771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00771");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares0.increment((double) (byte) 1);
        double double3 = sumOfSquares0.getResult();
        sumOfSquares0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double6 = secondMoment5.getResult();
        secondMoment5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment10);
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long20 = variance19.getN();
        double[] doubleArray26 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double28 = variance19.evaluate(doubleArray26, (double) 'a');
        mean17.incrementAll(doubleArray26);
        double double30 = variance14.evaluate(doubleArray26);
        double double31 = secondMoment5.evaluate(doubleArray26);
        double double32 = sumOfSquares0.evaluate(doubleArray26);
        double double33 = sumOfSquares0.getResult();
        sumOfSquares0.increment(19.44d);
        double double36 = sumOfSquares0.getResult();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 19.43999999999942d + "'", double28 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 24.3d + "'", double30 == 24.3d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 97.2d + "'", double31 == 97.2d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 203.0d + "'", double32 == 203.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 377.91360000000003d + "'", double36 == 377.91360000000003d);
    }

    @Test
    public void test00772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00772");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long2 = variance1.getN();
        long long3 = variance1.getN();
        variance1.increment((double) 10.0f);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean7.increment((double) 0);
        double double10 = mean7.getResult();
        mean7.clear();
        double[] doubleArray12 = new double[] {};
        mean7.incrementAll(doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = variance1.evaluate(doubleArray12, (-3), 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
    }

    @Test
    public void test00773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00773");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double6 = secondMoment5.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl9 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        mean12.incrementAll(doubleArray21);
        empiricalDistributionImpl9.load(doubleArray21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long30 = variance29.getN();
        double[] doubleArray36 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double38 = variance29.evaluate(doubleArray36, (double) 'a');
        double double42 = variance27.evaluate(doubleArray36, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        empiricalDistributionImpl9.load(doubleArray36);
        double double45 = variance8.evaluate(doubleArray36, (double) '/');
        double double46 = variance3.evaluate(doubleArray36);
        variance3.setBiasCorrected(true);
        long long49 = variance3.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 19.43999999999942d + "'", double38 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 24.300000000000182d + "'", double45 == 24.300000000000182d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 24.3d + "'", double46 == 24.3d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
    }

    @Test
    public void test00774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00774");
        java.io.File file2 = java.io.File.createTempFile("hi!", "");
        boolean boolean4 = file2.setLastModified((long) '#');
        long long5 = file2.getFreeSpace();
        boolean boolean6 = file2.delete();
        boolean boolean7 = file2.isDirectory();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/hi!8008748333847427356");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 299098669056L + "'", long5 == 299098669056L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test00775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00775");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        boolean boolean9 = file1.setReadOnly();
        boolean boolean11 = file1.setWritable(false);
        java.io.File file14 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL15 = file14.toURL();
        java.lang.String str16 = uRL15.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler18 = null;
        java.net.URL uRL19 = new java.net.URL(uRL15, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler18);
        java.io.File file22 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL23 = file22.toURL();
        boolean boolean24 = uRL15.sameFile(uRL23);
        java.net.URL uRL26 = new java.net.URL(uRL23, "/hi!4129638666993068054:");
        java.lang.Class[] classArray27 = new java.lang.Class[] {};
        java.lang.Object obj28 = uRL26.getContent(classArray27);
        boolean boolean29 = file1.equals(obj28);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file14.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL15);
// flaky:         org.junit.Assert.assertEquals(uRL15.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals(uRL19.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file22.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file22.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL23);
// flaky:         org.junit.Assert.assertEquals(uRL23.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals(uRL26.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test00776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00776");
        java.io.IOException iOException1 = new java.io.IOException("/hi!4156082602607179852:");
    }

    @Test
    public void test00777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00777");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long13 = variance12.getN();
        double[] doubleArray19 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double21 = variance12.evaluate(doubleArray19, (double) 'a');
        mean10.incrementAll(doubleArray19);
        double double23 = variance7.evaluate(doubleArray19);
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance7);
        double double25 = summaryStatistics0.getSumsq();
        double double26 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics27 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double28 = summaryStatistics27.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min29 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics27.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min29);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean31 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean31.increment((double) (short) 100);
        long long34 = geometricMean31.getN();
        summaryStatistics27.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean31);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares36 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long37 = sumOfSquares36.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long42 = variance41.getN();
        double[] doubleArray48 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double50 = variance41.evaluate(doubleArray48, (double) 'a');
        double double54 = variance39.evaluate(doubleArray48, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double57 = sumOfSquares36.evaluate(doubleArray48, (int) (short) 1, 0);
        sumOfSquares36.increment(0.0d);
        double double60 = sumOfSquares36.getResult();
        summaryStatistics27.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares36);
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares36);
        java.lang.String str63 = summaryStatistics0.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 19.43999999999942d + "'", double21 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 24.3d + "'", double23 == 24.3d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 19.43999999999942d + "'", double50 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str63, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: NaN\n");
    }

    @Test
    public void test00778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00778");
        java.io.File file3 = new java.io.File("");
        boolean boolean6 = file3.setWritable(true, true);
        boolean boolean7 = file3.setReadOnly();
        boolean boolean10 = file3.setWritable(true, false);
        java.net.URI uRI11 = file3.toURI();
        boolean boolean13 = file3.setExecutable(false);
        boolean boolean16 = file3.setExecutable(true, false);
        java.io.File file17 = file3.getAbsoluteFile();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file18 = java.io.File.createTempFile("", "/hi!5911261983555729782:/hi!8774121864869923465:", file3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Prefix string too short");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(uRI11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(file17);
// flaky:         org.junit.Assert.assertEquals(file17.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file17.toString(), "/experiment");
    }

    @Test
    public void test00779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00779");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares4 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long5 = sumOfSquares4.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double22 = variance7.evaluate(doubleArray16, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double25 = sumOfSquares4.evaluate(doubleArray16, (int) (short) 1, 0);
        double double26 = sumOfSquares4.getResult();
        long long27 = sumOfSquares4.getN();
        sumOfSquares4.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares4);
        sumOfSquares4.clear();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long37 = variance36.getN();
        double[] doubleArray43 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double45 = variance36.evaluate(doubleArray43, (double) 'a');
        mean34.incrementAll(doubleArray43);
        empiricalDistributionImpl31.load(doubleArray43);
        sumOfSquares4.incrementAll(doubleArray43, 0, (int) (short) 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary52 = empiricalDistributionImpl51.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary53 = empiricalDistributionImpl51.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean54 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean54.increment((double) (short) 100);
        geometricMean54.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long61 = variance60.getN();
        double[] doubleArray67 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double69 = variance60.evaluate(doubleArray67, (double) 'a');
        double double70 = geometricMean54.evaluate(doubleArray67);
        empiricalDistributionImpl51.load(doubleArray67);
        double[] doubleArray72 = empiricalDistributionImpl51.getUpperBounds();
        // The following exception was thrown during execution in test generation
        try {
            double double75 = sumOfSquares4.evaluate(doubleArray72, (-6), (int) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 19.43999999999942d + "'", double45 == 19.43999999999942d);
        org.junit.Assert.assertNull(statisticalSummary52);
        org.junit.Assert.assertNull(statisticalSummary53);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 19.43999999999942d + "'", double69 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2.51188643150958d + "'", double70 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(doubleArray72);
    }

    @Test
    public void test00780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00780");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.canExecute();
        long long8 = file4.getTotalSpace();
        boolean boolean9 = file4.canRead();
        boolean boolean10 = file4.createNewFile();
        java.lang.String str11 = file4.getCanonicalPath();
        boolean boolean12 = file4.mkdir();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!6280707481952077303:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 364740218880L + "'", long8 == 364740218880L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/hi!6280707481952077303:" + "'", str11, "/hi!6280707481952077303:");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00781");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics1 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean2);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean4.increment((double) (short) 100);
        geometricMean4.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = geometricMean4.getSumLogImpl();
        summaryStatistics1.setMinImpl(storelessUnivariateStatistic9);
        double double11 = summaryStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double14 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        summaryStatistics1.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        org.apache.commons.math.stat.descriptive.rank.Max max19 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max19.clear();
        max19.increment((double) (-1L));
        double double23 = max19.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl24.getSampleStats();
        boolean boolean26 = empiricalDistributionImpl24.isLoaded();
        boolean boolean27 = empiricalDistributionImpl24.isLoaded();
        boolean boolean28 = empiricalDistributionImpl24.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl29 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int30 = empiricalDistributionImpl29.getBinCount();
        boolean boolean31 = empiricalDistributionImpl29.isLoaded();
        java.util.List list32 = empiricalDistributionImpl29.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean33 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean33.increment((double) (short) 100);
        geometricMean33.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic38 = geometricMean33.getSumLogImpl();
        long long39 = geometricMean33.getN();
        double double40 = geometricMean33.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics41 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double42 = summaryStatistics41.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min43 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics41.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min43);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean45 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean45.increment((double) (short) 100);
        geometricMean45.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long52 = variance51.getN();
        double[] doubleArray58 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double60 = variance51.evaluate(doubleArray58, (double) 'a');
        double double61 = geometricMean45.evaluate(doubleArray58);
        min43.incrementAll(doubleArray58);
        geometricMean33.incrementAll(doubleArray58);
        empiricalDistributionImpl29.load(doubleArray58);
        empiricalDistributionImpl24.load(doubleArray58);
        double double66 = max19.evaluate(doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            double double70 = variance18.evaluate(doubleArray58, (double) 299098669056L, 0, (-3));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0d) + "'", double23 == (-1.0d));
        org.junit.Assert.assertNull(statisticalSummary25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1000 + "'", int30 == 1000);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 2L + "'", long39 == 2L);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 19.43999999999942d + "'", double60 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2.51188643150958d + "'", double61 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
    }

    @Test
    public void test00782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00782");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        // The following exception was thrown during execution in test generation
        try {
            double double2 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
    }

    @Test
    public void test00783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00783");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        double double2 = sumOfLogs0.getResult();
        long long3 = sumOfLogs0.getN();
        sumOfLogs0.increment((double) 1645454045000L);
        double double6 = sumOfLogs0.getResult();
        double double7 = sumOfLogs0.getResult();
        sumOfLogs0.clear();
        double double9 = sumOfLogs0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 28.129037477258265d + "'", double6 == 28.129037477258265d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 28.129037477258265d + "'", double7 == 28.129037477258265d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test00784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00784");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        java.lang.Object obj4 = null;
        boolean boolean5 = summaryStatistics0.equals(obj4);
        summaryStatistics0.clear();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic7 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics8 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double9 = summaryStatistics8.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min10 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics8.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min10);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = summaryStatistics8.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics8.getMinImpl();
        storelessUnivariateStatistic13.increment((double) (-1L));
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic13);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic17 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.rank.Min min18 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min18.clear();
        long long20 = min18.getN();
        min18.clear();
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min18);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics23 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double24 = summaryStatistics23.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean25.increment((double) 0);
        double double28 = mean25.getResult();
        long long29 = mean25.getN();
        mean25.clear();
        summaryStatistics23.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean25);
        double double32 = summaryStatistics23.getMean();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean33 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean33.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long38 = variance37.getN();
        double[] doubleArray44 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double46 = variance37.evaluate(doubleArray44, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment47);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long52 = variance51.getN();
        double[] doubleArray58 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double60 = variance51.evaluate(doubleArray58, (double) 'a');
        mean49.incrementAll(doubleArray58);
        double double63 = variance37.evaluate(doubleArray58, (double) (byte) 1);
        geometricMean33.incrementAll(doubleArray58);
        summaryStatistics23.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long68 = variance67.getN();
        double[] doubleArray74 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double76 = variance67.evaluate(doubleArray74, (double) 'a');
        variance67.clear();
        double[] doubleArray81 = new double[] { (byte) 0, (short) 0, 299098734592L };
        double double83 = variance67.evaluate(doubleArray81, (double) 1);
        double double84 = geometricMean33.evaluate(doubleArray81);
        boolean boolean85 = min18.equals((java.lang.Object) double84);
        double double86 = min18.getResult();
        double double87 = min18.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 19.43999999999942d + "'", double46 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 19.43999999999942d + "'", double60 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 19.44d + "'", double63 == 19.44d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 19.43999999999942d + "'", double76 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 0.0, 2.99098734592E11]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.988001178545237E22d + "'", double83 == 1.988001178545237E22d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
    }

    @Test
    public void test00785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00785");
        java.io.IOException iOException1 = new java.io.IOException("/hi!1050638282446274787:");
        java.lang.Class<?> wildcardClass2 = iOException1.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics3 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance((java.lang.Class) wildcardClass2);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.io.IOException cannot be cast to org.apache.commons.math.stat.descriptive.SummaryStatistics");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test00786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00786");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max0.increment((double) 1645454028000L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long5 = variance4.getN();
        double[] doubleArray11 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double13 = variance4.evaluate(doubleArray11, (double) 'a');
        variance4.clear();
        double[] doubleArray18 = new double[] { (byte) 0, (short) 0, 299098734592L };
        double double20 = variance4.evaluate(doubleArray18, (double) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long23 = variance22.getN();
        double[] doubleArray29 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double31 = variance22.evaluate(doubleArray29, (double) 'a');
        variance22.clear();
        double[] doubleArray36 = new double[] { (byte) 0, (short) 0, 299098734592L };
        double double38 = variance22.evaluate(doubleArray36, (double) 1);
        double double41 = variance4.evaluate(doubleArray36, (int) (byte) 0, 3);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = max0.evaluate(doubleArray36, 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 19.43999999999942d + "'", double13 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 2.99098734592E11]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.988001178545237E22d + "'", double20 == 1.988001178545237E22d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 19.43999999999942d + "'", double31 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 0.0, 2.99098734592E11]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.988001178545237E22d + "'", double38 == 1.988001178545237E22d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.988001178545237E22d + "'", double41 == 1.988001178545237E22d);
    }

    @Test
    public void test00787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00787");
        java.io.File file1 = new java.io.File("/hi!1995299374527999331:");
        boolean boolean2 = file1.setReadOnly();
        boolean boolean3 = file1.isHidden();
        org.junit.Assert.assertEquals(file1.getParent(), "/");
        org.junit.Assert.assertEquals(file1.toString(), "/hi!1995299374527999331:");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00788");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.increment((double) (byte) 100);
        java.io.File file6 = new java.io.File("/hi!4420905478953568698:", "/experiment/hi!2169115775229245488");
        boolean boolean7 = variance1.equals((java.lang.Object) "/hi!4420905478953568698:");
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean8.increment((double) 0);
        double double11 = mean8.getResult();
        mean8.clear();
        double[] doubleArray13 = new double[] {};
        mean8.incrementAll(doubleArray13);
        double double16 = variance1.evaluate(doubleArray13, (double) (short) 0);
        java.lang.Class<?> wildcardClass17 = variance1.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics18 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance((java.lang.Class) wildcardClass17);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.descriptive.moment.Variance cannot be cast to org.apache.commons.math.stat.descriptive.SummaryStatistics");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file6.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file6.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test00789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00789");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("/hi!5538372899390671555:", "/hi!817580163903132151:");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/hi!5538372899390671555:6439445689386426884/hi!817580163903132151:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00790");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance12);
        long long14 = variance12.getN();
        double[] doubleArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double19 = variance12.evaluate(doubleArray15, 1.645454026E12d, (int) (short) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test00791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00791");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max0.clear();
        max0.increment((double) (-1L));
        double double4 = max0.getResult();
        max0.clear();
        max0.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics8 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics8.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean9);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean11 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean11.increment((double) (short) 100);
        geometricMean11.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = geometricMean11.getSumLogImpl();
        summaryStatistics8.setMinImpl(storelessUnivariateStatistic16);
        double double18 = summaryStatistics8.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics8.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance20);
        org.apache.commons.math.stat.descriptive.rank.Min min22 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min22.clear();
        double[] doubleArray29 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double30 = min22.evaluate(doubleArray29);
        variance20.incrementAll(doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = max0.evaluate(doubleArray29, (int) (short) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
    }

    @Test
    public void test00792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00792");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares4 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long5 = sumOfSquares4.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double22 = variance7.evaluate(doubleArray16, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double25 = sumOfSquares4.evaluate(doubleArray16, (int) (short) 1, 0);
        double double26 = sumOfSquares4.getResult();
        long long27 = sumOfSquares4.getN();
        sumOfSquares4.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares4);
        double double30 = sumOfSquares4.getResult();
        long long31 = sumOfSquares4.getN();
        sumOfSquares4.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test00793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00793");
        java.io.File file3 = new java.io.File("/hi!4533436540036848542:");
        boolean boolean5 = file3.setReadable(true);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file6 = java.io.File.createTempFile("/hi!2722978451218351457:", "/hi!7767182290482962267:", file3);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /hi!4533436540036848542:/hi!2722978451218351457:5910207737864740637/hi!7767182290482962267:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file3.getParent(), "/");
        org.junit.Assert.assertEquals(file3.toString(), "/hi!4533436540036848542:");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test00794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00794");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file5 = new java.io.File("");
        java.io.File file6 = java.io.File.createTempFile("hi!", ":", file5);
        java.lang.String str7 = file6.getCanonicalPath();
        boolean boolean8 = file6.createNewFile();
        empiricalDistributionImpl0.load(file6);
        boolean boolean10 = empiricalDistributionImpl0.isLoaded();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: No bin selected");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/hi!4725569647522425242:");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/hi!4725569647522425242:" + "'", str7, "/hi!4725569647522425242:");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test00795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00795");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException("hi!", throwable1);
        java.io.IOException iOException3 = new java.io.IOException(throwable1);
        java.lang.Throwable throwable6 = null;
        java.io.IOException iOException7 = new java.io.IOException("hi!", throwable6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.io.IOException iOException9 = new java.io.IOException("hi!2169115775229245488", (java.lang.Throwable) iOException8);
        iOException3.addSuppressed((java.lang.Throwable) iOException8);
        java.lang.Throwable throwable13 = null;
        java.io.IOException iOException14 = new java.io.IOException("hi!", throwable13);
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException14);
        java.io.IOException iOException16 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException14);
        iOException3.addSuppressed((java.lang.Throwable) iOException16);
        java.lang.Throwable[] throwableArray18 = iOException16.getSuppressed();
        java.lang.String str19 = iOException16.toString();
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.io.IOException: /hi!4533436540036848542:" + "'", str19, "java.io.IOException: /hi!4533436540036848542:");
    }

    @Test
    public void test00796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00796");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long1 = sumOfSquares0.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean2.increment((double) (short) 100);
        geometricMean2.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic7 = geometricMean2.getSumLogImpl();
        geometricMean2.clear();
        boolean boolean9 = sumOfSquares0.equals((java.lang.Object) geometricMean2);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = geometricMean2.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double13 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        double double16 = secondMoment12.getResult();
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment18);
        secondMoment18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        double double23 = variance22.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl24.getSampleStats();
        java.io.File file29 = new java.io.File("");
        java.io.File file30 = java.io.File.createTempFile("hi!", ":", file29);
        java.lang.String str31 = file30.getCanonicalPath();
        boolean boolean32 = file30.createNewFile();
        empiricalDistributionImpl24.load(file30);
        double[] doubleArray34 = empiricalDistributionImpl24.getUpperBounds();
        double[] doubleArray35 = empiricalDistributionImpl24.getUpperBounds();
        variance22.incrementAll(doubleArray35, 1, (int) (short) 1);
        double double41 = secondMoment12.evaluate(doubleArray35, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            storelessUnivariateStatistic10.incrementAll(doubleArray35, (-50), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNull(statisticalSummary25);
        org.junit.Assert.assertNull("file29.getParent() == null", file29.getParent());
        org.junit.Assert.assertEquals(file29.toString(), "");
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file30.toString(), "/hi!6799819858771325:");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "/hi!6799819858771325:" + "'", str31, "/hi!6799819858771325:");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
    }

    @Test
    public void test00797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00797");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.net.URL uRL7 = new java.net.URL(uRL3, "hi!2169115775229245488");
        int int8 = uRL7.getDefaultPort();
        java.lang.String str9 = uRL7.getFile();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = uRL7.getContent();
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /experiment/hi!2169115775229245488/hi!2169115775229245488 (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/experiment/hi!2169115775229245488/hi!2169115775229245488" + "'", str9, "/experiment/hi!2169115775229245488/hi!2169115775229245488");
    }

    @Test
    public void test00798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00798");
        java.io.File file1 = new java.io.File("");
        java.lang.String str2 = file1.getParent();
        boolean boolean4 = file1.setWritable(true);
        boolean boolean5 = file1.isFile();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00799");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min0.clear();
        min0.increment(0.0d);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl4 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl4.getSampleStats();
        boolean boolean6 = empiricalDistributionImpl4.isLoaded();
        boolean boolean7 = empiricalDistributionImpl4.isLoaded();
        java.util.List list8 = empiricalDistributionImpl4.getBinStats();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics9 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics9.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean10);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean12 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean12.increment((double) (short) 100);
        geometricMean12.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic17 = geometricMean12.getSumLogImpl();
        summaryStatistics9.setMinImpl(storelessUnivariateStatistic17);
        double double19 = summaryStatistics9.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics9.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance21);
        org.apache.commons.math.stat.descriptive.rank.Min min23 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min23.clear();
        double[] doubleArray30 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double31 = min23.evaluate(doubleArray30);
        variance21.incrementAll(doubleArray30);
        empiricalDistributionImpl4.load(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = min0.evaluate(doubleArray30, (int) 'a', (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
    }

    @Test
    public void test00800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00800");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        boolean boolean10 = file1.setExecutable(true);
        long long11 = file1.lastModified();
        boolean boolean12 = file1.isAbsolute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00801");
        java.io.File file2 = java.io.File.createTempFile("hi!", "");
        boolean boolean4 = file2.setLastModified((long) '#');
        java.io.File file5 = file2.getCanonicalFile();
        boolean boolean6 = file5.exists();
        long long7 = file5.getTotalSpace();
        java.io.File file10 = new java.io.File("/hi!2756764035548942023:", ":");
        java.io.File file11 = file10.getParentFile();
        java.io.File file13 = new java.io.File(file10, "/hi!8130836485477920045:");
        java.io.File file14 = file13.getCanonicalFile();
        java.nio.file.Path path15 = file14.toPath();
        java.io.File file18 = new java.io.File("/hi!4420905478953568698:", "/experiment/hi!2169115775229245488");
        java.lang.String str19 = file18.getPath();
        boolean boolean20 = file14.renameTo(file18);
        java.io.File file22 = new java.io.File("");
        boolean boolean23 = file18.renameTo(file22);
        int int24 = file5.compareTo(file18);
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/hi!9208790349897191467");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/tmp/hi!9208790349897191467");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 364740218880L + "'", long7 == 364740218880L);
        org.junit.Assert.assertEquals(file10.getParent(), "/hi!2756764035548942023:");
        org.junit.Assert.assertEquals(file10.toString(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "/");
        org.junit.Assert.assertEquals(file11.toString(), "/hi!2756764035548942023:");
        org.junit.Assert.assertEquals(file13.getParent(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertEquals(file13.toString(), "/hi!2756764035548942023:/:/hi!8130836485477920045:");
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertEquals(file14.toString(), "/hi!2756764035548942023:/:/hi!8130836485477920045:");
        org.junit.Assert.assertNotNull(path15);
        org.junit.Assert.assertEquals(file18.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file18.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "/hi!4420905478953568698:/experiment/hi!2169115775229245488" + "'", str19, "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 12 + "'", int24 == 12);
    }

    @Test
    public void test00802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00802");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl4 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl4.getSampleStats();
        java.io.File file9 = new java.io.File("");
        java.io.File file10 = java.io.File.createTempFile("hi!", ":", file9);
        java.lang.String str11 = file10.getCanonicalPath();
        boolean boolean12 = file10.createNewFile();
        empiricalDistributionImpl4.load(file10);
        double[] doubleArray14 = empiricalDistributionImpl4.getUpperBounds();
        double[] doubleArray15 = empiricalDistributionImpl4.getUpperBounds();
        double double17 = variance3.evaluate(doubleArray15, 1.0d);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long26 = variance25.getN();
        double[] doubleArray32 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double34 = variance25.evaluate(doubleArray32, (double) 'a');
        mean23.incrementAll(doubleArray32);
        empiricalDistributionImpl20.load(doubleArray32);
        empiricalDistributionImpl19.load(doubleArray32);
        double[] doubleArray38 = empiricalDistributionImpl19.getUpperBounds();
        // The following exception was thrown during execution in test generation
        try {
            double double42 = variance3.evaluate(doubleArray38, (double) 4096L, (int) '4', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertNotNull(file10);
        org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/hi!958423790823598848:");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/hi!958423790823598848:" + "'", str11, "/hi!958423790823598848:");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 19.43999999999942d + "'", double34 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 1.0]");
    }

    @Test
    public void test00803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00803");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean2.increment((double) 0);
        double double5 = mean2.getResult();
        long long6 = mean2.getN();
        mean2.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean2);
        double double9 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean10 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean10.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long29 = variance28.getN();
        double[] doubleArray35 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double37 = variance28.evaluate(doubleArray35, (double) 'a');
        mean26.incrementAll(doubleArray35);
        double double40 = variance14.evaluate(doubleArray35, (double) (byte) 1);
        geometricMean10.incrementAll(doubleArray35);
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean10);
        long long43 = geometricMean10.getN();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl44 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = empiricalDistributionImpl44.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary46 = empiricalDistributionImpl44.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean47 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean47.increment((double) (short) 100);
        geometricMean47.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long54 = variance53.getN();
        double[] doubleArray60 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double62 = variance53.evaluate(doubleArray60, (double) 'a');
        double double63 = geometricMean47.evaluate(doubleArray60);
        empiricalDistributionImpl44.load(doubleArray60);
        java.io.File file67 = java.io.File.createTempFile("hi!", "");
        boolean boolean69 = file67.setLastModified((long) '#');
        java.io.File file70 = file67.getCanonicalFile();
        empiricalDistributionImpl44.load(file67);
        double[] doubleArray72 = empiricalDistributionImpl44.getUpperBounds();
        geometricMean10.incrementAll(doubleArray72);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs74 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        sumOfLogs74.clear();
        long long76 = sumOfLogs74.getN();
        sumOfLogs74.increment((double) 4096L);
        // The following exception was thrown during execution in test generation
        try {
            geometricMean10.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfLogs74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementation must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 19.43999999999942d + "'", double37 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 19.44d + "'", double40 == 19.44d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 6L + "'", long43 == 6L);
        org.junit.Assert.assertNull(statisticalSummary45);
        org.junit.Assert.assertNull(statisticalSummary46);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 19.43999999999942d + "'", double62 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2.51188643150958d + "'", double63 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(file67);
        org.junit.Assert.assertEquals(file67.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file67.toString(), "/tmp/hi!8660348426282190872");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(file70);
        org.junit.Assert.assertEquals(file70.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file70.toString(), "/tmp/hi!8660348426282190872");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
    }

    @Test
    public void test00804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00804");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double7 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance11);
        double double13 = summaryStatistics0.getVariance();
        summaryStatistics0.clear();
        double double15 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs16 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        long long17 = sumOfLogs16.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean18 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs16);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic19 = geometricMean18.getSumLogImpl();
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean18);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long29 = variance28.getN();
        double[] doubleArray35 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double37 = variance28.evaluate(doubleArray35, (double) 'a');
        mean26.incrementAll(doubleArray35);
        empiricalDistributionImpl23.load(doubleArray35);
        empiricalDistributionImpl22.load(doubleArray35);
        double[] doubleArray41 = empiricalDistributionImpl22.getUpperBounds();
        // The following exception was thrown during execution in test generation
        try {
            double double44 = geometricMean18.evaluate(doubleArray41, (int) (short) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic19);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 19.43999999999942d + "'", double37 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 1.0]");
    }

    @Test
    public void test00805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00805");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        boolean boolean10 = file1.mkdir();
        java.net.URL uRL11 = file1.toURL();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics12 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double13 = summaryStatistics12.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min14 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics12.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min14);
        double double16 = summaryStatistics12.getSumOfLogs();
        boolean boolean17 = file1.equals((java.lang.Object) summaryStatistics12);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00806");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean0.increment((double) 0);
        double double3 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double6 = secondMoment5.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double19 = variance7.evaluate(doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            double double22 = mean0.evaluate(doubleArray16, (int) '#', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 19.44d + "'", double19 == 19.44d);
    }

    @Test
    public void test00807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00807");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("/hi!8755856450125751686:", "", (int) (short) -1, "/hi!7535711402918086741:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!8755856450125751686:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00808");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        summaryStatistics0.addValue(19.44d);
        double double9 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics0.getMeanImpl();
        double double11 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.clear();
        long long14 = secondMoment12.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long17 = variance16.getN();
        double[] doubleArray23 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double25 = variance16.evaluate(doubleArray23, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long31 = variance30.getN();
        double[] doubleArray37 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double39 = variance30.evaluate(doubleArray37, (double) 'a');
        mean28.incrementAll(doubleArray37);
        double double42 = variance16.evaluate(doubleArray37, (double) (byte) 1);
        secondMoment12.incrementAll(doubleArray37);
        secondMoment12.increment((double) 10.0f);
        secondMoment12.increment(1.5984000000000001E-4d);
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementations must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 19.44d + "'", double9 == 19.44d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 19.44d + "'", double11 == 19.44d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 19.43999999999942d + "'", double25 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 19.43999999999942d + "'", double39 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 19.44d + "'", double42 == 19.44d);
    }

    @Test
    public void test00809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00809");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min0.clear();
        double[] doubleArray7 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double8 = min0.evaluate(doubleArray7);
        long long9 = min0.getN();
        long long10 = min0.getN();
        long long11 = min0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long14 = variance13.getN();
        double[] doubleArray20 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double22 = variance13.evaluate(doubleArray20, (double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            double double25 = min0.evaluate(doubleArray20, 1, 24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 19.43999999999942d + "'", double22 == 19.43999999999942d);
    }

    @Test
    public void test00810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00810");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getGeoMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean6 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean6.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = geometricMean6.getSumLogImpl();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean6);
        summaryStatistics0.addValue((double) 0.0f);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs13 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double14 = sumOfLogs13.getResult();
        double double15 = sumOfLogs13.getResult();
        long long16 = sumOfLogs13.getN();
        sumOfLogs13.clear();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean18 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs13);
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfLogs13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementations must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test00811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00811");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file5 = new java.io.File("");
        java.io.File file6 = java.io.File.createTempFile("hi!", ":", file5);
        java.lang.String str7 = file6.getCanonicalPath();
        boolean boolean8 = file6.createNewFile();
        empiricalDistributionImpl0.load(file6);
        boolean boolean10 = file6.setReadOnly();
        java.io.File file11 = file6.getAbsoluteFile();
        boolean boolean12 = file11.isAbsolute();
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/hi!6943974853799061556:");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/hi!6943974853799061556:" + "'", str7, "/hi!6943974853799061556:");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/hi!6943974853799061556:");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test00812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00812");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = geometricMean0.getSumLogImpl();
        long long6 = geometricMean0.getN();
        double double7 = geometricMean0.getResult();
        geometricMean0.increment((double) (-3));
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl10.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl10.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean13 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean13.increment((double) (short) 100);
        geometricMean13.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long20 = variance19.getN();
        double[] doubleArray26 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double28 = variance19.evaluate(doubleArray26, (double) 'a');
        double double29 = geometricMean13.evaluate(doubleArray26);
        empiricalDistributionImpl10.load(doubleArray26);
        java.io.File file33 = java.io.File.createTempFile("hi!", "");
        boolean boolean35 = file33.setLastModified((long) '#');
        java.io.File file36 = file33.getCanonicalFile();
        empiricalDistributionImpl10.load(file33);
        double[] doubleArray38 = empiricalDistributionImpl10.getUpperBounds();
        // The following exception was thrown during execution in test generation
        try {
            double double41 = geometricMean0.evaluate(doubleArray38, (int) (byte) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNull(statisticalSummary11);
        org.junit.Assert.assertNull(statisticalSummary12);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 19.43999999999942d + "'", double28 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2.51188643150958d + "'", double29 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(file33);
        org.junit.Assert.assertEquals(file33.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file33.toString(), "/tmp/hi!8416988754184909450");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file36.toString(), "/tmp/hi!8416988754184909450");
        org.junit.Assert.assertNotNull(doubleArray38);
    }

    @Test
    public void test00813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00813");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long2 = variance1.getN();
        double double3 = variance1.getResult();
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean6 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean6.increment((double) (short) 100);
        geometricMean6.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = geometricMean6.getSumLogImpl();
        long long12 = geometricMean6.getN();
        double double13 = geometricMean6.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics14 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double15 = summaryStatistics14.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min16 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics14.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min16);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean18 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean18.increment((double) (short) 100);
        geometricMean18.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long25 = variance24.getN();
        double[] doubleArray31 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double33 = variance24.evaluate(doubleArray31, (double) 'a');
        double double34 = geometricMean18.evaluate(doubleArray31);
        min16.incrementAll(doubleArray31);
        geometricMean6.incrementAll(doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = variance1.evaluate(doubleArray31, 0, (-3));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2L + "'", long12 == 2L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 19.43999999999942d + "'", double33 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2.51188643150958d + "'", double34 == 2.51188643150958d);
    }

    @Test
    public void test00814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00814");
        java.io.File file2 = java.io.File.createTempFile("hi!", "");
        long long3 = file2.getFreeSpace();
        boolean boolean4 = file2.delete();
        boolean boolean5 = file2.isFile();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/hi!380500379466344037");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 299098660864L + "'", long3 == 299098660864L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00815");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long2 = variance1.getN();
        double[] doubleArray8 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double10 = variance1.evaluate(doubleArray8, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long16 = variance15.getN();
        double[] doubleArray22 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double24 = variance15.evaluate(doubleArray22, (double) 'a');
        mean13.incrementAll(doubleArray22);
        double double27 = variance1.evaluate(doubleArray22, (double) (byte) 1);
        variance1.increment((double) 1.0f);
        boolean boolean30 = variance1.isBiasCorrected();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long37 = variance36.getN();
        double[] doubleArray43 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double45 = variance36.evaluate(doubleArray43, (double) 'a');
        mean34.incrementAll(doubleArray43);
        empiricalDistributionImpl31.load(doubleArray43);
        variance1.incrementAll(doubleArray43);
        variance1.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 19.43999999999942d + "'", double10 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 19.43999999999942d + "'", double24 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 19.44d + "'", double27 == 19.44d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 19.43999999999942d + "'", double45 == 19.43999999999942d);
    }

    @Test
    public void test00816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00816");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = summaryStatistics0.getSummary();
        double double5 = summaryStatistics0.getMax();
        double double6 = summaryStatistics0.getSum();
        summaryStatistics0.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics8 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        summaryStatistics8.clear();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics8.getGeoMeanImpl();
        summaryStatistics0.setSumsqImpl(storelessUnivariateStatistic10);
        double double12 = summaryStatistics0.getMean();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(statisticalSummary4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test00817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00817");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = geometricMean0.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics6 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double7 = summaryStatistics6.getVariance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = summaryStatistics6.getSummary();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.clear();
        long long11 = secondMoment9.getN();
        secondMoment9.clear();
        double double13 = secondMoment9.getResult();
        summaryStatistics6.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int17 = empiricalDistributionImpl16.getBinCount();
        boolean boolean18 = empiricalDistributionImpl16.isLoaded();
        java.util.List list19 = empiricalDistributionImpl16.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean20 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean20.increment((double) (short) 100);
        geometricMean20.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic25 = geometricMean20.getSumLogImpl();
        long long26 = geometricMean20.getN();
        double double27 = geometricMean20.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics28 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double29 = summaryStatistics28.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min30 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics28.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min30);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean32 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean32.increment((double) (short) 100);
        geometricMean32.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long39 = variance38.getN();
        double[] doubleArray45 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double47 = variance38.evaluate(doubleArray45, (double) 'a');
        double double48 = geometricMean32.evaluate(doubleArray45);
        min30.incrementAll(doubleArray45);
        geometricMean20.incrementAll(doubleArray45);
        empiricalDistributionImpl16.load(doubleArray45);
        double double54 = secondMoment9.evaluate(doubleArray45, (int) (byte) 1, 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment9);
        mean55.increment(3364.0d);
        // The following exception was thrown during execution in test generation
        try {
            geometricMean0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementation must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1000 + "'", int17 == 1000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2L + "'", long26 == 2L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 19.43999999999942d + "'", double47 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2.51188643150958d + "'", double48 == 2.51188643150958d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
    }

    @Test
    public void test00818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00818");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("hi!2776393821320652817", "/hi!5911261983555729782:/hi!8774121864869923465:", (int) ' ', "/hi!585200003762659678:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: hi!2776393821320652817");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00819");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl2 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl2.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl2.getSampleStats();
        int int5 = empiricalDistributionImpl2.getBinCount();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.clear();
        long long8 = secondMoment6.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long11 = variance10.getN();
        double[] doubleArray17 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double19 = variance10.evaluate(doubleArray17, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long25 = variance24.getN();
        double[] doubleArray31 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double33 = variance24.evaluate(doubleArray31, (double) 'a');
        mean22.incrementAll(doubleArray31);
        double double36 = variance10.evaluate(doubleArray31, (double) (byte) 1);
        secondMoment6.incrementAll(doubleArray31);
        empiricalDistributionImpl2.load(doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = sum0.evaluate(doubleArray31, 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1000 + "'", int5 == 1000);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 19.43999999999942d + "'", double19 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 19.43999999999942d + "'", double33 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 19.44d + "'", double36 == 19.44d);
    }

    @Test
    public void test00820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00820");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.clear();
        long long5 = secondMoment3.getN();
        secondMoment3.clear();
        double double7 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean8 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean8.increment((double) (short) 100);
        geometricMean8.increment((double) (-1L));
        geometricMean8.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean15 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean15.increment((double) (short) 100);
        geometricMean15.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long22 = variance21.getN();
        double[] doubleArray28 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double30 = variance21.evaluate(doubleArray28, (double) 'a');
        double double31 = geometricMean15.evaluate(doubleArray28);
        double double32 = geometricMean8.evaluate(doubleArray28);
        double double33 = secondMoment3.evaluate(doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = variance2.evaluate(doubleArray28, 58.0d, (-3), (int) ':');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 19.43999999999942d + "'", double30 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2.51188643150958d + "'", double31 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2.51188643150958d + "'", double32 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 97.2d + "'", double33 == 97.2d);
    }

    @Test
    public void test00821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00821");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = summaryStatistics0.getSummary();
        double double5 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics6 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics6.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean7);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean9 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean9.increment((double) (short) 100);
        geometricMean9.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic14 = geometricMean9.getSumLogImpl();
        summaryStatistics6.setMinImpl(storelessUnivariateStatistic14);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = summaryStatistics6.getVarianceImpl();
        summaryStatistics0.setVarianceImpl(storelessUnivariateStatistic16);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double19 = secondMoment18.getResult();
        secondMoment18.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        long long22 = variance21.getN();
        variance21.setBiasCorrected(true);
        variance21.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance21);
        double double27 = variance21.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(statisticalSummary4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic14);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test00822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00822");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        java.nio.file.Path path5 = file1.toPath();
        java.lang.String str6 = file1.getName();
        boolean boolean7 = file1.isDirectory();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test00823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00823");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        long long2 = sum0.getN();
        sum0.clear();
        sum0.increment((double) 1645454035000L);
        long long6 = sum0.getN();
        sum0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long24 = variance23.getN();
        double[] doubleArray30 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double32 = variance23.evaluate(doubleArray30, (double) 'a');
        mean21.incrementAll(doubleArray30);
        double double35 = variance9.evaluate(doubleArray30, (double) (byte) 1);
        variance9.increment((double) 1.0f);
        boolean boolean38 = variance9.isBiasCorrected();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment40);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long45 = variance44.getN();
        double[] doubleArray51 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double53 = variance44.evaluate(doubleArray51, (double) 'a');
        mean42.incrementAll(doubleArray51);
        empiricalDistributionImpl39.load(doubleArray51);
        variance9.incrementAll(doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            double double59 = sum0.evaluate(doubleArray51, 24, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 19.43999999999942d + "'", double32 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 19.44d + "'", double35 == 19.44d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 19.43999999999942d + "'", double53 == 19.43999999999942d);
    }

    @Test
    public void test00824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00824");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long2 = variance1.getN();
        long long3 = variance1.getN();
        variance1.clear();
        double double5 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics6 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double7 = summaryStatistics6.getMin();
        double double8 = summaryStatistics6.getStandardDeviation();
        double double9 = summaryStatistics6.getMean();
        double double10 = summaryStatistics6.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min11 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics6.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min11);
        double[] doubleArray13 = new double[] {};
        min11.incrementAll(doubleArray13);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = variance1.evaluate(doubleArray13, (double) 1645454023000L, (int) '/', 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
    }

    @Test
    public void test00825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00825");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.lang.String str6 = uRL3.toExternalForm();
        java.io.File file9 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL10 = file9.toURL();
        java.lang.String str11 = uRL10.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler13 = null;
        java.net.URL uRL14 = new java.net.URL(uRL10, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler13);
        boolean boolean15 = uRL3.sameFile(uRL14);
        java.lang.String str16 = uRL14.getQuery();
        java.io.File file19 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL20 = file19.toURL();
        java.lang.String str21 = uRL20.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler23 = null;
        java.net.URL uRL24 = new java.net.URL(uRL20, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler23);
        java.io.File file27 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL28 = file27.toURL();
        boolean boolean29 = uRL20.sameFile(uRL28);
        java.net.URL uRL31 = new java.net.URL(uRL28, "/hi!4129638666993068054:");
        java.lang.Class[] classArray32 = new java.lang.Class[] {};
        java.lang.Object obj33 = uRL31.getContent(classArray32);
        java.lang.Object obj34 = null; // flaky: uRL14.getContent(classArray32);
        java.lang.String str35 = uRL14.getQuery();
        java.io.InputStream inputStream36 = null; // flaky: uRL14.openStream();
        java.net.Proxy proxy37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection38 = uRL14.openConnection(proxy37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str6, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file9.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file9.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL10);
// flaky:         org.junit.Assert.assertEquals(uRL10.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file19.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL20);
// flaky:         org.junit.Assert.assertEquals(uRL20.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals(uRL24.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file27.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file27.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL28);
// flaky:         org.junit.Assert.assertEquals(uRL28.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals(uRL31.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(str35);
// flaky:         org.junit.Assert.assertNotNull(inputStream36);
    }

    @Test
    public void test00826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00826");
        java.io.File file2 = new java.io.File("/hi!4060689751378876827:", "/hi!4201210329362459719:");
        file2.deleteOnExit();
        java.net.URI uRI4 = file2.toURI();
        java.io.File file6 = new java.io.File("/");
        int int7 = file2.compareTo(file6);
        org.junit.Assert.assertEquals(file2.getParent(), "/hi!4060689751378876827:");
        org.junit.Assert.assertEquals(file2.toString(), "/hi!4060689751378876827:/hi!4201210329362459719:");
        org.junit.Assert.assertNotNull(uRI4);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "/");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 47 + "'", int7 == 47);
    }

    @Test
    public void test00827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00827");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        double double2 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean5 = variance4.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean6 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean6.increment((double) (short) 100);
        long long9 = geometricMean6.getN();
        geometricMean6.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics11 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics11.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean12);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean14 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean14.increment((double) (short) 100);
        geometricMean14.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic19 = geometricMean14.getSumLogImpl();
        summaryStatistics11.setMinImpl(storelessUnivariateStatistic19);
        double double21 = summaryStatistics11.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double24 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        summaryStatistics11.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment23);
        geometricMean6.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment23);
        long long28 = secondMoment23.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance31.increment((double) (byte) 100);
        java.io.File file36 = new java.io.File("/hi!4420905478953568698:", "/experiment/hi!2169115775229245488");
        boolean boolean37 = variance31.equals((java.lang.Object) "/hi!4420905478953568698:");
        boolean boolean38 = variance31.isBiasCorrected();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl39 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean42 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment40);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long45 = variance44.getN();
        double[] doubleArray51 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double53 = variance44.evaluate(doubleArray51, (double) 'a');
        mean42.incrementAll(doubleArray51);
        empiricalDistributionImpl39.load(doubleArray51);
        java.util.List list56 = empiricalDistributionImpl39.getBinStats();
        double[] doubleArray57 = empiricalDistributionImpl39.getUpperBounds();
        double double61 = variance31.evaluate(doubleArray57, (double) (short) 1, (int) (short) 10, (int) '4');
        secondMoment23.incrementAll(doubleArray57, (int) (byte) 10, 0);
        double double66 = variance4.evaluate(doubleArray57, (double) 280499580928L);
        // The following exception was thrown during execution in test generation
        try {
            double double69 = variance1.evaluate(doubleArray57, (-3), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertEquals(file36.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file36.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 19.43999999999942d + "'", double53 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(list56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2.7328566760003855E-16d + "'", double61 == 2.7328566760003855E-16d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-7.56670915011011E8d) + "'", double66 == (-7.56670915011011E8d));
    }

    @Test
    public void test00828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00828");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL3 = new java.net.URL("/hi!3399820819083206588:", "/hi!744967364845181475:", "/hi!4420905478953568698:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!3399820819083206588:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00829");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        java.lang.Object obj4 = null;
        boolean boolean5 = summaryStatistics0.equals(obj4);
        summaryStatistics0.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics7 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics7.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean10 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean10.increment((double) (short) 100);
        geometricMean10.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = geometricMean10.getSumLogImpl();
        summaryStatistics7.setMinImpl(storelessUnivariateStatistic15);
        boolean boolean17 = summaryStatistics0.equals((java.lang.Object) storelessUnivariateStatistic15);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic18 = null;
        summaryStatistics0.setSumImpl(storelessUnivariateStatistic18);
        java.lang.String str20 = summaryStatistics0.toString();
        double double21 = summaryStatistics0.getSumOfLogs();
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str20, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test00830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00830");
        java.io.File file1 = new java.io.File("");
        java.lang.String str2 = file1.getParent();
        boolean boolean3 = file1.setReadOnly();
        long long4 = file1.getUsableSpace();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test00831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00831");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        boolean boolean3 = empiricalDistributionImpl0.isLoaded();
        java.io.File file7 = new java.io.File("");
        java.io.File file8 = java.io.File.createTempFile("hi!", ":", file7);
        boolean boolean10 = file8.setWritable(true);
        boolean boolean11 = file8.canExecute();
        java.io.File file13 = new java.io.File("");
        boolean boolean16 = file13.setWritable(true, true);
        boolean boolean17 = file13.setReadOnly();
        boolean boolean20 = file13.setWritable(true, false);
        java.net.URI uRI21 = file13.toURI();
        boolean boolean22 = file13.mkdir();
        java.io.File file23 = file13.getCanonicalFile();
        boolean boolean24 = file8.renameTo(file13);
        boolean boolean27 = file13.setWritable(true, true);
        boolean boolean28 = file13.canRead();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file13);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull("file7.getParent() == null", file7.getParent());
        org.junit.Assert.assertEquals(file7.toString(), "");
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/hi!1210619199564167904:");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull("file13.getParent() == null", file13.getParent());
        org.junit.Assert.assertEquals(file13.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(uRI21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(file23);
// flaky:         org.junit.Assert.assertEquals(file23.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file23.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test00832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00832");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long6 = variance5.getN();
        double[] doubleArray12 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double14 = variance5.evaluate(doubleArray12, (double) 'a');
        mean3.incrementAll(doubleArray12);
        empiricalDistributionImpl0.load(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long21 = variance20.getN();
        double[] doubleArray27 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double29 = variance20.evaluate(doubleArray27, (double) 'a');
        double double33 = variance18.evaluate(doubleArray27, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        empiricalDistributionImpl0.load(doubleArray27);
        java.util.List list35 = empiricalDistributionImpl0.getBinStats();
        java.io.File file39 = new java.io.File("");
        java.io.File file40 = java.io.File.createTempFile("hi!", ":", file39);
        boolean boolean42 = file40.setWritable(true);
        boolean boolean43 = file40.canExecute();
        long long44 = file40.getTotalSpace();
        boolean boolean45 = file40.canRead();
        boolean boolean46 = file40.createNewFile();
        empiricalDistributionImpl0.load(file40);
        java.lang.String str48 = file40.getName();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 19.43999999999942d + "'", double14 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 19.43999999999942d + "'", double29 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertNull("file39.getParent() == null", file39.getParent());
        org.junit.Assert.assertEquals(file39.toString(), "");
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertEquals(file40.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file40.toString(), "/hi!4164299983403228820:");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 364740218880L + "'", long44 == 364740218880L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!4164299983403228820:" + "'", str48, "hi!4164299983403228820:");
    }

    @Test
    public void test00833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00833");
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException("hi!", throwable3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException4);
        java.lang.Throwable throwable9 = null;
        java.io.IOException iOException10 = new java.io.IOException("hi!", throwable9);
        java.io.IOException iOException11 = new java.io.IOException(throwable9);
        java.io.IOException iOException12 = new java.io.IOException("/hi!8130836485477920045:", (java.lang.Throwable) iOException11);
        iOException6.addSuppressed((java.lang.Throwable) iOException12);
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.io.IOException iOException15 = new java.io.IOException("/hi!6244728997591896465:", (java.lang.Throwable) iOException14);
        java.io.IOException iOException16 = new java.io.IOException((java.lang.Throwable) iOException15);
        java.lang.String str17 = iOException16.toString();
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.io.IOException: java.io.IOException: /hi!6244728997591896465:" + "'", str17, "java.io.IOException: java.io.IOException: /hi!6244728997591896465:");
    }

    @Test
    public void test00834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00834");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) (-1L));
        geometricMean0.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean7 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean7.increment((double) (short) 100);
        geometricMean7.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long14 = variance13.getN();
        double[] doubleArray20 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double22 = variance13.evaluate(doubleArray20, (double) 'a');
        double double23 = geometricMean7.evaluate(doubleArray20);
        double double24 = geometricMean0.evaluate(doubleArray20);
        long long25 = geometricMean0.getN();
        double[] doubleArray26 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double27 = geometricMean0.evaluate(doubleArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 19.43999999999942d + "'", double22 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2.51188643150958d + "'", double23 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2.51188643150958d + "'", double24 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3L + "'", long25 == 3L);
    }

    @Test
    public void test00835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00835");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("/hi!9116240588780943281:", "/hi!9072985495645401524:", 35, "/hi!7974603651672147098:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!9116240588780943281:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00836");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.lang.String str9 = file1.getName();
        java.io.File file10 = file1.getCanonicalFile();
        java.lang.String str11 = file10.toString();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(file10);
// flaky:         org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/experiment");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/experiment" + "'", str11, "/experiment");
    }

    @Test
    public void test00837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00837");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        boolean boolean11 = file1.setExecutable(true);
        boolean boolean13 = file1.setWritable(true);
        boolean boolean16 = file1.setExecutable(true, false);
        long long17 = file1.length();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = file1.setLastModified((long) (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative time");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test00838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00838");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long2 = variance1.getN();
        long long3 = variance1.getN();
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test00839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00839");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        java.lang.String str5 = file4.getCanonicalPath();
        java.nio.file.Path path6 = file4.toPath();
        file4.deleteOnExit();
        boolean boolean8 = file4.canWrite();
        boolean boolean9 = file4.setReadOnly();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!2286304309003939257:");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/hi!2286304309003939257:" + "'", str5, "/hi!2286304309003939257:");
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test00840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00840");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.net.URI uRI4 = uRL3.toURI();
        java.net.URLConnection uRLConnection5 = uRL3.openConnection();
        int int6 = uRL3.getPort();
        java.io.File file9 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL10 = file9.toURL();
        java.io.File file13 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL14 = file13.toURL();
        java.lang.String str15 = uRL14.getAuthority();
        int int16 = uRL14.getPort();
        java.lang.String str17 = uRL14.toExternalForm();
        java.io.File file20 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL21 = file20.toURL();
        java.lang.String str22 = uRL21.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler24 = null;
        java.net.URL uRL25 = new java.net.URL(uRL21, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler24);
        boolean boolean26 = uRL14.sameFile(uRL25);
        java.lang.String str27 = uRL25.getQuery();
        java.io.File file30 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL31 = file30.toURL();
        java.lang.String str32 = uRL31.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler34 = null;
        java.net.URL uRL35 = new java.net.URL(uRL31, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler34);
        java.io.File file38 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL39 = file38.toURL();
        boolean boolean40 = uRL31.sameFile(uRL39);
        java.net.URL uRL42 = new java.net.URL(uRL39, "/hi!4129638666993068054:");
        java.lang.Class[] classArray43 = new java.lang.Class[] {};
        java.lang.Object obj44 = uRL42.getContent(classArray43);
        java.lang.Object obj45 = null; // flaky: uRL25.getContent(classArray43);
        java.lang.Object obj46 = null; // flaky: uRL10.getContent(classArray43);
        java.lang.Object obj47 = null; // flaky: uRL3.getContent(classArray43);
        java.net.URLStreamHandler uRLStreamHandler49 = null;
        java.net.URL uRL50 = new java.net.URL(uRL3, "hi!8754354838924134808:", uRLStreamHandler49);
        java.net.URLStreamHandler uRLStreamHandler52 = null;
        java.net.URL uRL53 = new java.net.URL(uRL3, "/hi!3219637187155528239:", uRLStreamHandler52);
        java.net.URI uRI54 = uRL53.toURI();
        java.lang.String str55 = uRL53.getProtocol();
        java.lang.String str56 = uRL53.getFile();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl57 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary58 = empiricalDistributionImpl57.getSampleStats();
        boolean boolean59 = empiricalDistributionImpl57.isLoaded();
        boolean boolean60 = empiricalDistributionImpl57.isLoaded();
        boolean boolean61 = empiricalDistributionImpl57.isLoaded();
        boolean boolean62 = empiricalDistributionImpl57.isLoaded();
        java.io.File file66 = new java.io.File("");
        java.io.File file67 = java.io.File.createTempFile("hi!", ":", file66);
        java.lang.String str68 = file67.getAbsolutePath();
        boolean boolean69 = file67.setReadOnly();
        boolean boolean71 = file67.setLastModified(364740218880L);
        empiricalDistributionImpl57.load(file67);
        boolean boolean73 = file67.canExecute();
        java.io.File file74 = file67.getCanonicalFile();
        boolean boolean75 = uRL53.equals((java.lang.Object) file74);
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRI4);
        org.junit.Assert.assertNotNull(uRLConnection5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals(file9.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file9.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL10);
// flaky:         org.junit.Assert.assertEquals(uRL10.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file13.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file13.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL14);
// flaky:         org.junit.Assert.assertEquals(uRL14.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str17, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file20.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file20.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL21);
// flaky:         org.junit.Assert.assertEquals(uRL21.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals(uRL25.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file30.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL31);
// flaky:         org.junit.Assert.assertEquals(uRL31.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals(uRL35.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file38.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file38.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL39);
// flaky:         org.junit.Assert.assertEquals(uRL39.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals(uRL42.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj47);
// flaky:         org.junit.Assert.assertEquals(uRL50.toString(), "file:/experiment/hi!2169115775229245488/hi!8754354838924134808:");
        org.junit.Assert.assertEquals(uRL53.toString(), "file:/hi!3219637187155528239:");
        org.junit.Assert.assertNotNull(uRI54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "file" + "'", str55, "file");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "/hi!3219637187155528239:" + "'", str56, "/hi!3219637187155528239:");
        org.junit.Assert.assertNull(statisticalSummary58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull("file66.getParent() == null", file66.getParent());
        org.junit.Assert.assertEquals(file66.toString(), "");
        org.junit.Assert.assertNotNull(file67);
        org.junit.Assert.assertEquals(file67.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file67.toString(), "/hi!6495346431678073399:");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "/hi!6495346431678073399:" + "'", str68, "/hi!6495346431678073399:");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(file74);
        org.junit.Assert.assertEquals(file74.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file74.toString(), "/hi!6495346431678073399:");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test00841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00841");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        double double2 = sumOfLogs0.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl3.getSampleStats();
        java.io.File file8 = new java.io.File("");
        java.io.File file9 = java.io.File.createTempFile("hi!", ":", file8);
        java.lang.String str10 = file9.getCanonicalPath();
        boolean boolean11 = file9.createNewFile();
        empiricalDistributionImpl3.load(file9);
        double[] doubleArray13 = empiricalDistributionImpl3.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long20 = variance19.getN();
        double[] doubleArray26 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double28 = variance19.evaluate(doubleArray26, (double) 'a');
        mean17.incrementAll(doubleArray26);
        empiricalDistributionImpl14.load(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long35 = variance34.getN();
        double[] doubleArray41 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double43 = variance34.evaluate(doubleArray41, (double) 'a');
        double double47 = variance32.evaluate(doubleArray41, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        empiricalDistributionImpl14.load(doubleArray41);
        empiricalDistributionImpl3.load(doubleArray41);
        sumOfLogs0.incrementAll(doubleArray41);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary52 = empiricalDistributionImpl51.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary53 = empiricalDistributionImpl51.getSampleStats();
        int int54 = empiricalDistributionImpl51.getBinCount();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.clear();
        long long57 = secondMoment55.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long60 = variance59.getN();
        double[] doubleArray66 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double68 = variance59.evaluate(doubleArray66, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment69);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long74 = variance73.getN();
        double[] doubleArray80 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double82 = variance73.evaluate(doubleArray80, (double) 'a');
        mean71.incrementAll(doubleArray80);
        double double85 = variance59.evaluate(doubleArray80, (double) (byte) 1);
        secondMoment55.incrementAll(doubleArray80);
        empiricalDistributionImpl51.load(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = sumOfLogs0.evaluate(doubleArray80, (int) (byte) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "");
        org.junit.Assert.assertNotNull(file9);
        org.junit.Assert.assertEquals(file9.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file9.toString(), "/hi!3686888240765041275:");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/hi!3686888240765041275:" + "'", str10, "/hi!3686888240765041275:");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 19.43999999999942d + "'", double28 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 19.43999999999942d + "'", double43 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNull(statisticalSummary52);
        org.junit.Assert.assertNull(statisticalSummary53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1000 + "'", int54 == 1000);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 19.43999999999942d + "'", double68 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 19.43999999999942d + "'", double82 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 19.44d + "'", double85 == 19.44d);
    }

    @Test
    public void test00842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00842");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean2.increment((double) (short) 100);
        geometricMean2.increment(0.0d);
        geometricMean2.clear();
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean2);
        summaryStatistics0.clear();
        double double10 = summaryStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double14 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl16.getSampleStats();
        java.io.File file21 = new java.io.File("");
        java.io.File file22 = java.io.File.createTempFile("hi!", ":", file21);
        java.lang.String str23 = file22.getCanonicalPath();
        boolean boolean24 = file22.createNewFile();
        empiricalDistributionImpl16.load(file22);
        double[] doubleArray26 = empiricalDistributionImpl16.getUpperBounds();
        double[] doubleArray27 = empiricalDistributionImpl16.getUpperBounds();
        double double29 = variance15.evaluate(doubleArray27, 1.0d);
        variance15.increment((double) 280499605504L);
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance15);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics33 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double34 = summaryStatistics33.getMin();
        double double35 = summaryStatistics33.getStandardDeviation();
        double double36 = summaryStatistics33.getMean();
        double double37 = summaryStatistics33.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic38 = summaryStatistics33.getGeoMeanImpl();
        double double39 = summaryStatistics33.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = summaryStatistics33.getSummary();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic41 = summaryStatistics33.getSumsqImpl();
        summaryStatistics0.setGeoMeanImpl(storelessUnivariateStatistic41);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNull(statisticalSummary17);
        org.junit.Assert.assertNull("file21.getParent() == null", file21.getParent());
        org.junit.Assert.assertEquals(file21.toString(), "");
        org.junit.Assert.assertNotNull(file22);
        org.junit.Assert.assertEquals(file22.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file22.toString(), "/hi!39901973909728044:");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "/hi!39901973909728044:" + "'", str23, "/hi!39901973909728044:");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(statisticalSummary40);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic41);
    }

    @Test
    public void test00843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00843");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        long long4 = file2.length();
        long long5 = file2.getUsableSpace();
        boolean boolean6 = file2.isHidden();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 280499539968L + "'", long5 == 280499539968L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test00844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00844");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler6 = null;
        java.net.URL uRL7 = new java.net.URL(uRL3, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler6);
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        boolean boolean12 = uRL3.sameFile(uRL11);
        java.net.URL uRL14 = new java.net.URL(uRL11, "/hi!4129638666993068054:");
        int int15 = uRL14.getPort();
        java.net.URLConnection uRLConnection16 = uRL14.openConnection();
        java.net.Proxy proxy17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection18 = uRL14.openConnection(proxy17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(uRLConnection16);
    }

    @Test
    public void test00845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00845");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long2 = variance1.getN();
        variance1.increment((double) 299098755072L);
        double double5 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double8 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double11 = variance10.getResult();
        boolean boolean12 = variance10.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double14 = secondMoment13.getResult();
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double19 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long28 = variance27.getN();
        double[] doubleArray34 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double36 = variance27.evaluate(doubleArray34, (double) 'a');
        mean25.incrementAll(doubleArray34);
        empiricalDistributionImpl22.load(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long43 = variance42.getN();
        double[] doubleArray49 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double51 = variance42.evaluate(doubleArray49, (double) 'a');
        double double55 = variance40.evaluate(doubleArray49, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        empiricalDistributionImpl22.load(doubleArray49);
        double double58 = variance21.evaluate(doubleArray49, (double) '/');
        double double59 = variance16.evaluate(doubleArray49);
        double double61 = variance10.evaluate(doubleArray49, 100.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double64 = variance1.evaluate(doubleArray49, (int) ':', 47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 19.43999999999942d + "'", double36 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 19.43999999999942d + "'", double51 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 24.300000000000182d + "'", double58 == 24.300000000000182d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 24.3d + "'", double59 == 24.3d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 24.299999999999272d + "'", double61 == 24.299999999999272d);
    }

    @Test
    public void test00846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00846");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "");
        java.lang.String str3 = file2.getCanonicalPath();
        boolean boolean4 = file2.isHidden();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/experiment/hi!2169115775229245488" + "'", str3, "/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test00847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00847");
        java.io.File file5 = new java.io.File("");
        java.io.File file6 = java.io.File.createTempFile("hi!", ":", file5);
        boolean boolean8 = file6.setWritable(true);
        boolean boolean9 = file6.canExecute();
        java.io.File file11 = new java.io.File("");
        boolean boolean14 = file11.setWritable(true, true);
        boolean boolean15 = file11.setReadOnly();
        boolean boolean18 = file11.setWritable(true, false);
        java.net.URI uRI19 = file11.toURI();
        boolean boolean20 = file11.mkdir();
        java.io.File file21 = file11.getCanonicalFile();
        boolean boolean22 = file6.renameTo(file11);
        boolean boolean25 = file11.setWritable(true, true);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file26 = java.io.File.createTempFile("/hi!2914948838095632938:", "/hi!8351398870901364425:", file11);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /hi!2914948838095632938:139909106478958013/hi!8351398870901364425:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/hi!2704371248669948436:");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(uRI19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(file21);
// flaky:         org.junit.Assert.assertEquals(file21.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file21.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test00848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00848");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic3 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares4 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long5 = sumOfSquares4.getN();
        double double6 = sumOfSquares4.getResult();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares4);
        double[] doubleArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            sumOfSquares4.incrementAll(doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test00849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00849");
        java.net.URL uRL0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL2 = new java.net.URL(uRL0, "/hi!2914948838095632938:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no protocol: /hi!2914948838095632938:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00850");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        long long4 = min2.getN();
        double double5 = min2.getResult();
        double[] doubleArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double9 = min2.evaluate(doubleArray6, (int) ' ', 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test00851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00851");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.canExecute();
        java.io.File file9 = new java.io.File("");
        boolean boolean12 = file9.setWritable(true, true);
        boolean boolean13 = file9.setReadOnly();
        boolean boolean16 = file9.setWritable(true, false);
        java.net.URI uRI17 = file9.toURI();
        boolean boolean18 = file9.mkdir();
        java.io.File file19 = file9.getCanonicalFile();
        boolean boolean20 = file4.renameTo(file9);
        boolean boolean23 = file9.setWritable(true, true);
        boolean boolean26 = file9.setWritable(false, false);
        boolean boolean27 = file9.isAbsolute();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!8103898562667803751:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(uRI17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(file19);
// flaky:         org.junit.Assert.assertEquals(file19.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file19.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test00852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00852");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        double double2 = sumOfLogs0.getResult();
        double double3 = sumOfLogs0.getResult();
        double double4 = sumOfLogs0.getResult();
        org.apache.commons.math.stat.descriptive.summary.Sum sum5 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean6 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean6.increment((double) (short) 100);
        geometricMean6.increment((double) (-1L));
        geometricMean6.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean13 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean13.increment((double) (short) 100);
        geometricMean13.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long20 = variance19.getN();
        double[] doubleArray26 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double28 = variance19.evaluate(doubleArray26, (double) 'a');
        double double29 = geometricMean13.evaluate(doubleArray26);
        double double30 = geometricMean6.evaluate(doubleArray26);
        double double33 = sum5.evaluate(doubleArray26, 0, 0);
        sum5.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long36 = mean35.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double38 = secondMoment37.getResult();
        secondMoment37.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean41 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean41.increment((double) (short) 100);
        geometricMean41.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long48 = variance47.getN();
        double[] doubleArray54 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double56 = variance47.evaluate(doubleArray54, (double) 'a');
        double double57 = geometricMean41.evaluate(doubleArray54);
        double double58 = variance40.evaluate(doubleArray54);
        double double59 = mean35.evaluate(doubleArray54);
        double double60 = sum5.evaluate(doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = sumOfLogs0.evaluate(doubleArray54, 2, 48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 19.43999999999942d + "'", double28 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2.51188643150958d + "'", double29 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2.51188643150958d + "'", double30 == 2.51188643150958d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 19.43999999999942d + "'", double56 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2.51188643150958d + "'", double57 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 24.3d + "'", double58 == 24.3d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 4.6d + "'", double59 == 4.6d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 23.0d + "'", double60 == 23.0d);
    }

    @Test
    public void test00853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00853");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.lang.String str5 = uRL3.getUserInfo();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getUserInfo();
        java.lang.String str8 = uRL3.toExternalForm();
        java.io.File file11 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL12 = file11.toURL();
        java.lang.String str13 = uRL12.getProtocol();
        java.io.File file16 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL17 = file16.toURL();
        java.lang.String str18 = uRL17.getAuthority();
        java.lang.String str19 = uRL17.getUserInfo();
        int int20 = uRL17.getDefaultPort();
        java.lang.String str21 = uRL17.getUserInfo();
        java.io.File file24 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL25 = file24.toURL();
        java.lang.String str26 = uRL25.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler28 = null;
        java.net.URL uRL29 = new java.net.URL(uRL25, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler28);
        boolean boolean30 = uRL17.sameFile(uRL29);
        int int31 = uRL17.getPort();
        java.io.File file34 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL35 = file34.toURL();
        java.lang.String str36 = uRL35.getAuthority();
        java.lang.String str37 = uRL35.getUserInfo();
        int int38 = uRL35.getDefaultPort();
        java.lang.String str39 = uRL35.getUserInfo();
        java.io.File file42 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL43 = file42.toURL();
        java.lang.String str44 = uRL43.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler46 = null;
        java.net.URL uRL47 = new java.net.URL(uRL43, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler46);
        boolean boolean48 = uRL35.sameFile(uRL47);
        java.io.File file51 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL52 = file51.toURL();
        java.lang.String str53 = uRL52.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler55 = null;
        java.net.URL uRL56 = new java.net.URL(uRL52, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler55);
        java.io.File file59 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL60 = file59.toURL();
        boolean boolean61 = uRL52.sameFile(uRL60);
        java.net.URL uRL63 = new java.net.URL(uRL60, "/hi!4129638666993068054:");
        java.lang.Class[] classArray64 = new java.lang.Class[] {};
        java.lang.Object obj65 = uRL63.getContent(classArray64);
        java.lang.Object obj66 = null; // flaky: uRL47.getContent(classArray64);
        java.lang.Object obj67 = null; // flaky: uRL17.getContent(classArray64);
        java.lang.Object obj68 = null; // flaky: uRL12.getContent(classArray64);
        java.lang.Object obj69 = null; // flaky: uRL3.getContent(classArray64);
        java.lang.String str70 = uRL3.getPath();
        java.lang.String str71 = uRL3.getRef();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str8, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file11.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file11.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL12);
// flaky:         org.junit.Assert.assertEquals(uRL12.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "file" + "'", str13, "file");
        org.junit.Assert.assertEquals(file16.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file16.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL17);
// flaky:         org.junit.Assert.assertEquals(uRL17.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file24.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL25);
// flaky:         org.junit.Assert.assertEquals(uRL25.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals(uRL29.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals(file34.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file34.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL35);
// flaky:         org.junit.Assert.assertEquals(uRL35.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file42.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL43);
// flaky:         org.junit.Assert.assertEquals(uRL43.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals(uRL47.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals(file51.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file51.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL52);
// flaky:         org.junit.Assert.assertEquals(uRL52.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals(uRL56.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file59.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file59.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL60);
// flaky:         org.junit.Assert.assertEquals(uRL60.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals(uRL63.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNull(obj69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str70, "/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test00854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00854");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long2 = variance1.getN();
        long long3 = variance1.getN();
        variance1.clear();
        long long5 = variance1.getN();
        variance1.increment((double) (-1));
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean8 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean8.increment((double) (short) 100);
        long long11 = geometricMean8.getN();
        geometricMean8.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics13 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics13.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean14);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean16 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean16.increment((double) (short) 100);
        geometricMean16.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic21 = geometricMean16.getSumLogImpl();
        summaryStatistics13.setMinImpl(storelessUnivariateStatistic21);
        double double23 = summaryStatistics13.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double26 = secondMoment25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment25);
        summaryStatistics13.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment25);
        geometricMean8.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        variance30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long34 = variance33.getN();
        double[] doubleArray40 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double42 = variance33.evaluate(doubleArray40, (double) 'a');
        variance33.clear();
        double[] doubleArray47 = new double[] { (byte) 0, (short) 0, 299098734592L };
        double double49 = variance33.evaluate(doubleArray47, (double) 1);
        double double50 = variance30.evaluate(doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            double double54 = variance1.evaluate(doubleArray47, (double) 20480L, (int) (short) -1, (-70));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 19.43999999999942d + "'", double42 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 0.0, 2.99098734592E11]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.988001178545237E22d + "'", double49 == 1.988001178545237E22d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2.9820017678178555E22d + "'", double50 == 2.9820017678178555E22d);
    }

    @Test
    public void test00855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00855");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        double double2 = sumOfLogs0.getResult();
        sumOfLogs0.clear();
        long long4 = sumOfLogs0.getN();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = empiricalDistributionImpl5.getSampleStats();
        java.io.File file10 = new java.io.File("");
        java.io.File file11 = java.io.File.createTempFile("hi!", ":", file10);
        java.lang.String str12 = file11.getCanonicalPath();
        boolean boolean13 = file11.createNewFile();
        empiricalDistributionImpl5.load(file11);
        int int15 = empiricalDistributionImpl5.getBinCount();
        double[] doubleArray16 = empiricalDistributionImpl5.getUpperBounds();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = sumOfLogs0.evaluate(doubleArray16, (-11), 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNull(statisticalSummary6);
        org.junit.Assert.assertNull("file10.getParent() == null", file10.getParent());
        org.junit.Assert.assertEquals(file10.toString(), "");
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/hi!4189876120109681002:");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/hi!4189876120109681002:" + "'", str12, "/hi!4189876120109681002:");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertNotNull(doubleArray16);
    }

    @Test
    public void test00856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00856");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        int int2 = empiricalDistributionImpl0.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl0.getSampleStats();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1000 + "'", int2 == 1000);
        org.junit.Assert.assertNull(statisticalSummary3);
    }

    @Test
    public void test00857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00857");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance12);
        long long14 = variance12.getN();
        variance12.increment((double) 1645454041000L);
        double double17 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long20 = variance19.getN();
        double[] doubleArray26 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double28 = variance19.evaluate(doubleArray26, (double) 'a');
        variance19.clear();
        double[] doubleArray33 = new double[] { (byte) 0, (short) 0, 299098734592L };
        double double35 = variance19.evaluate(doubleArray33, (double) 1);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics36 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics36.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean37);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean39 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean39.increment((double) (short) 100);
        geometricMean39.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic44 = geometricMean39.getSumLogImpl();
        summaryStatistics36.setMinImpl(storelessUnivariateStatistic44);
        double double46 = summaryStatistics36.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics36.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance48);
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean50.increment((double) 0);
        double double53 = mean50.getResult();
        mean50.clear();
        double[] doubleArray55 = new double[] {};
        mean50.incrementAll(doubleArray55);
        variance48.incrementAll(doubleArray55);
        double double59 = variance19.evaluate(doubleArray55, 100.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = variance12.evaluate(doubleArray55, 2, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 19.43999999999942d + "'", double28 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 2.99098734592E11]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.988001178545237E22d + "'", double35 == 1.988001178545237E22d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
    }

    @Test
    public void test00858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00858");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = null;
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean2.increment((double) (short) 100);
        long long5 = geometricMean2.getN();
        geometricMean2.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics7 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics7.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean10 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean10.increment((double) (short) 100);
        geometricMean10.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = geometricMean10.getSumLogImpl();
        summaryStatistics7.setMinImpl(storelessUnivariateStatistic15);
        double double17 = summaryStatistics7.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double20 = secondMoment19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment19);
        summaryStatistics7.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment19);
        geometricMean2.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment19);
        long long24 = secondMoment19.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        // The following exception was thrown during execution in test generation
        try {
            geometricMean1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test00859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00859");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.lang.String str5 = uRL3.getUserInfo();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getAuthority();
        java.lang.String str8 = uRL3.getAuthority();
        java.lang.String str9 = uRL3.getUserInfo();
        java.net.URL uRL11 = new java.net.URL(uRL3, "hi!4533436540036848542:");
        java.io.File file13 = new java.io.File("");
        boolean boolean16 = file13.setWritable(false, true);
        boolean boolean19 = file13.setWritable(false, false);
        boolean boolean20 = uRL11.equals((java.lang.Object) false);
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str9);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!4533436540036848542:");
        org.junit.Assert.assertNull("file13.getParent() == null", file13.getParent());
        org.junit.Assert.assertEquals(file13.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test00860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00860");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int1 = empiricalDistributionImpl0.getBinCount();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        java.util.List list3 = empiricalDistributionImpl0.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl7.getSampleStats();
        java.io.File file12 = new java.io.File("");
        java.io.File file13 = java.io.File.createTempFile("hi!", ":", file12);
        java.lang.String str14 = file13.getCanonicalPath();
        boolean boolean15 = file13.createNewFile();
        empiricalDistributionImpl7.load(file13);
        boolean boolean17 = file13.setReadOnly();
        java.io.File file18 = file13.getAbsoluteFile();
        empiricalDistributionImpl0.load(file13);
        java.io.File file22 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL23 = file22.toURL();
        java.lang.String str24 = uRL23.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler26 = null;
        java.net.URL uRL27 = new java.net.URL(uRL23, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler26);
        java.io.File file30 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL31 = file30.toURL();
        java.lang.String str32 = uRL31.getAuthority();
        java.lang.String str33 = uRL31.getQuery();
        boolean boolean34 = uRL23.sameFile(uRL31);
        java.lang.String str35 = uRL23.getAuthority();
        // The following exception was thrown during execution in test generation
{ // flaky:         try {
// flaky:             empiricalDistributionImpl0.load(uRL23);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: URL file:/experiment/hi!2169115775229245488/hi! contains no data");
// flaky:         } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1000 + "'", int1 == 1000);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNull(statisticalSummary6);
        org.junit.Assert.assertNull(statisticalSummary8);
        org.junit.Assert.assertNull("file12.getParent() == null", file12.getParent());
        org.junit.Assert.assertEquals(file12.toString(), "");
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/hi!1110152401917971883:");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "/hi!1110152401917971883:" + "'", str14, "/hi!1110152401917971883:");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file18.toString(), "/hi!1110152401917971883:");
        org.junit.Assert.assertEquals(file22.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file22.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL23);
// flaky:         org.junit.Assert.assertEquals(uRL23.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals(uRL27.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file30.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file30.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL31);
// flaky:         org.junit.Assert.assertEquals(uRL31.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test00861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00861");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        boolean boolean3 = empiricalDistributionImpl0.isLoaded();
        java.util.List list4 = empiricalDistributionImpl0.getBinStats();
        int int5 = empiricalDistributionImpl0.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long12 = variance11.getN();
        double[] doubleArray18 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double20 = variance11.evaluate(doubleArray18, (double) 'a');
        mean9.incrementAll(doubleArray18);
        empiricalDistributionImpl6.load(doubleArray18);
        empiricalDistributionImpl0.load(doubleArray18);
        boolean boolean24 = empiricalDistributionImpl0.isLoaded();
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1000 + "'", int5 == 1000);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 19.43999999999942d + "'", double20 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test00862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00862");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = summaryStatistics0.getSumLogImpl();
        double double13 = summaryStatistics0.getSum();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test00863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00863");
        java.net.URL uRL0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL2 = new java.net.URL(uRL0, "hi!8353785860681946886:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no protocol: hi!8353785860681946886:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00864");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        double double2 = sumOfLogs0.getResult();
        double double3 = sumOfLogs0.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int6 = empiricalDistributionImpl5.getBinCount();
        boolean boolean7 = empiricalDistributionImpl5.isLoaded();
        java.util.List list8 = empiricalDistributionImpl5.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean9 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean9.increment((double) (short) 100);
        geometricMean9.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic14 = geometricMean9.getSumLogImpl();
        long long15 = geometricMean9.getN();
        double double16 = geometricMean9.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics17 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double18 = summaryStatistics17.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min19 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics17.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min19);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean21 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean21.increment((double) (short) 100);
        geometricMean21.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long28 = variance27.getN();
        double[] doubleArray34 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double36 = variance27.evaluate(doubleArray34, (double) 'a');
        double double37 = geometricMean21.evaluate(doubleArray34);
        min19.incrementAll(doubleArray34);
        geometricMean9.incrementAll(doubleArray34);
        empiricalDistributionImpl5.load(doubleArray34);
        double[] doubleArray41 = empiricalDistributionImpl5.getUpperBounds();
        double[] doubleArray42 = empiricalDistributionImpl5.getUpperBounds();
        // The following exception was thrown during execution in test generation
        try {
            double double45 = sumOfLogs0.evaluate(doubleArray42, (-50), 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1000 + "'", int6 == 1000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 19.43999999999942d + "'", double36 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2.51188643150958d + "'", double37 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
    }

    @Test
    public void test00865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00865");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int1 = empiricalDistributionImpl0.getBinCount();
        java.util.List list2 = empiricalDistributionImpl0.getBinStats();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1000 + "'", int1 == 1000);
        org.junit.Assert.assertNotNull(list2);
    }

    @Test
    public void test00866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00866");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        boolean boolean10 = file1.setExecutable(true);
        boolean boolean11 = file1.exists();
        java.io.File file13 = new java.io.File(file1, "/hi!7644059860405527722:");
        long long14 = file13.getTotalSpace();
        java.lang.String str15 = file13.getPath();
        boolean boolean16 = file13.isFile();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals(file13.getParent(), "/");
        org.junit.Assert.assertEquals(file13.toString(), "/hi!7644059860405527722:");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 364740218880L + "'", long14 == 364740218880L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "/hi!7644059860405527722:" + "'", str15, "/hi!7644059860405527722:");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00867");
        java.io.File file1 = new java.io.File("");
        long long2 = file1.lastModified();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test00868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00868");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        long long1 = sumOfLogs0.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic3 = geometricMean2.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics4 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double5 = summaryStatistics4.getMin();
        double double6 = summaryStatistics4.getStandardDeviation();
        double double7 = summaryStatistics4.getMax();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double9 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        summaryStatistics4.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment8);
        boolean boolean12 = geometricMean2.equals((java.lang.Object) secondMoment8);
        double double13 = secondMoment8.getResult();
        secondMoment8.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test00869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00869");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.net.URI uRI6 = uRL3.toURI();
        java.lang.String str7 = uRL3.getHost();
        java.lang.String str8 = uRL3.toString();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str8, "file:/experiment/hi!2169115775229245488/hi!");
    }

    @Test
    public void test00870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00870");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        java.lang.Object obj4 = null;
        boolean boolean5 = summaryStatistics0.equals(obj4);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long8 = variance7.getN();
        variance7.increment((double) 299098755072L);
        double double11 = variance7.getResult();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double15 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long24 = variance23.getN();
        double[] doubleArray30 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double32 = variance23.evaluate(doubleArray30, (double) 'a');
        mean21.incrementAll(doubleArray30);
        empiricalDistributionImpl18.load(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long39 = variance38.getN();
        double[] doubleArray45 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double47 = variance38.evaluate(doubleArray45, (double) 'a');
        double double51 = variance36.evaluate(doubleArray45, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        empiricalDistributionImpl18.load(doubleArray45);
        double double54 = variance17.evaluate(doubleArray45, (double) '/');
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares55 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long56 = sumOfSquares55.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long61 = variance60.getN();
        double[] doubleArray67 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double69 = variance60.evaluate(doubleArray67, (double) 'a');
        double double73 = variance58.evaluate(doubleArray67, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double76 = sumOfSquares55.evaluate(doubleArray67, (int) (short) 1, 0);
        double double77 = variance17.evaluate(doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = variance7.evaluate(doubleArray67, 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 19.43999999999942d + "'", double32 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 19.43999999999942d + "'", double47 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 24.300000000000182d + "'", double54 == 24.300000000000182d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 19.43999999999942d + "'", double69 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 24.3d + "'", double77 == 24.3d);
    }

    @Test
    public void test00871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00871");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMax();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.Mean mean6 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean6.increment((double) 10.0f);
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean6);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long11 = mean10.getN();
        mean10.increment(100.0d);
        boolean boolean14 = summaryStatistics0.equals((java.lang.Object) mean10);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = summaryStatistics0.getSummary();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics17 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics18 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double19 = summaryStatistics18.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean20.increment((double) 0);
        double double23 = mean20.getResult();
        long long24 = mean20.getN();
        mean20.clear();
        summaryStatistics18.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean20);
        summaryStatistics17.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean20);
        long long28 = mean20.getN();
        mean20.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean20);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertNotNull(statisticalSummary16);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test00872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00872");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long1 = mean0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double3 = secondMoment2.getResult();
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean6 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean6.increment((double) (short) 100);
        geometricMean6.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long13 = variance12.getN();
        double[] doubleArray19 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double21 = variance12.evaluate(doubleArray19, (double) 'a');
        double double22 = geometricMean6.evaluate(doubleArray19);
        double double23 = variance5.evaluate(doubleArray19);
        double double24 = mean0.evaluate(doubleArray19);
        long long25 = mean0.getN();
        double[] doubleArray26 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double29 = mean0.evaluate(doubleArray26, (-11), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 19.43999999999942d + "'", double21 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2.51188643150958d + "'", double22 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 24.3d + "'", double23 == 24.3d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 4.6d + "'", double24 == 4.6d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test00873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00873");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        java.lang.String str5 = file4.getCanonicalPath();
        boolean boolean7 = file4.setExecutable(false);
        boolean boolean9 = file4.setWritable(true);
        boolean boolean10 = file4.mkdirs();
        boolean boolean13 = file4.setExecutable(true, false);
        java.io.File file14 = file4.getAbsoluteFile();
        long long15 = file14.getTotalSpace();
        java.lang.String str16 = file14.getParent();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!6220087319365255199:");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/hi!6220087319365255199:" + "'", str5, "/hi!6220087319365255199:");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/hi!6220087319365255199:");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 364740218880L + "'", long15 == 364740218880L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "/" + "'", str16, "/");
    }

    @Test
    public void test00874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00874");
        java.io.IOException iOException0 = new java.io.IOException();
        java.lang.Throwable throwable4 = null;
        java.io.IOException iOException5 = new java.io.IOException("hi!", throwable4);
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) iOException5);
        java.io.IOException iOException7 = new java.io.IOException("hi!2169115775229245488", (java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException("hi!2169115775229245488", (java.lang.Throwable) iOException6);
        iOException0.addSuppressed((java.lang.Throwable) iOException8);
        java.lang.Throwable throwable11 = null;
        java.io.IOException iOException12 = new java.io.IOException("hi!", throwable11);
        java.lang.Throwable throwable14 = null;
        java.io.IOException iOException15 = new java.io.IOException("hi!", throwable14);
        java.io.IOException iOException16 = new java.io.IOException(throwable14);
        java.lang.Throwable throwable19 = null;
        java.io.IOException iOException20 = new java.io.IOException("hi!", throwable19);
        java.io.IOException iOException21 = new java.io.IOException((java.lang.Throwable) iOException20);
        java.io.IOException iOException22 = new java.io.IOException("hi!2169115775229245488", (java.lang.Throwable) iOException21);
        iOException16.addSuppressed((java.lang.Throwable) iOException21);
        iOException12.addSuppressed((java.lang.Throwable) iOException21);
        iOException0.addSuppressed((java.lang.Throwable) iOException12);
        java.lang.Throwable[] throwableArray26 = iOException0.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray26);
    }

    @Test
    public void test00875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00875");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.net.URL uRL6 = new java.net.URL(uRL3, "/hi!2756764035548942023:");
        java.net.URI uRI7 = uRL3.toURI();
        boolean boolean9 = uRL3.equals((java.lang.Object) "java.io.IOException: /hi!4420905478953568698:");
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(uRL6.toString(), "file:/hi!2756764035548942023:");
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00876");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        java.lang.String str5 = file4.getCanonicalPath();
        boolean boolean6 = file4.createNewFile();
        long long7 = file4.getTotalSpace();
        java.lang.String str8 = file4.toString();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!6086456583973294356:");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/hi!6086456583973294356:" + "'", str5, "/hi!6086456583973294356:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 364740218880L + "'", long7 == 364740218880L);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/hi!6086456583973294356:" + "'", str8, "/hi!6086456583973294356:");
    }

    @Test
    public void test00877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00877");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean4.increment((double) (short) 100);
        geometricMean4.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long11 = variance10.getN();
        double[] doubleArray17 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double19 = variance10.evaluate(doubleArray17, (double) 'a');
        double double20 = geometricMean4.evaluate(doubleArray17);
        double double21 = variance3.evaluate(doubleArray17);
        long long22 = variance3.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics23 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double24 = summaryStatistics23.getMin();
        double double25 = summaryStatistics23.getStandardDeviation();
        double double26 = summaryStatistics23.getSum();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares27 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long28 = sumOfSquares27.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long33 = variance32.getN();
        double[] doubleArray39 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double41 = variance32.evaluate(doubleArray39, (double) 'a');
        double double45 = variance30.evaluate(doubleArray39, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double48 = sumOfSquares27.evaluate(doubleArray39, (int) (short) 1, 0);
        double double49 = sumOfSquares27.getResult();
        long long50 = sumOfSquares27.getN();
        sumOfSquares27.clear();
        summaryStatistics23.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares27);
        double double53 = sumOfSquares27.getResult();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares54 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares54.increment((double) (byte) 1);
        double double57 = sumOfSquares54.getResult();
        sumOfSquares54.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double60 = secondMoment59.getResult();
        secondMoment59.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment59);
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment59);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment64.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean66 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment64);
        secondMoment64.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment64);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment69);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long74 = variance73.getN();
        double[] doubleArray80 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double82 = variance73.evaluate(doubleArray80, (double) 'a');
        mean71.incrementAll(doubleArray80);
        double double84 = variance68.evaluate(doubleArray80);
        double double85 = secondMoment59.evaluate(doubleArray80);
        double double86 = sumOfSquares54.evaluate(doubleArray80);
        sumOfSquares27.incrementAll(doubleArray80);
        double double89 = variance3.evaluate(doubleArray80, 4.6d);
        variance3.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 19.43999999999942d + "'", double19 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2.51188643150958d + "'", double20 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 24.3d + "'", double21 == 24.3d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 19.43999999999942d + "'", double41 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 19.43999999999942d + "'", double82 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 24.3d + "'", double84 == 24.3d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 97.2d + "'", double85 == 97.2d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 203.0d + "'", double86 == 203.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 24.3d + "'", double89 == 24.3d);
    }

    @Test
    public void test00878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00878");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("/hi!8755856450125751686:", "/hi!6087133228387323681:", (int) (short) 100, "/hi!3308917902506818979:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!8755856450125751686:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00879");
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException("hi!", throwable2);
        java.lang.Throwable throwable5 = null;
        java.io.IOException iOException6 = new java.io.IOException("hi!", throwable5);
        java.io.IOException iOException7 = new java.io.IOException(throwable5);
        java.lang.Throwable throwable10 = null;
        java.io.IOException iOException11 = new java.io.IOException("hi!", throwable10);
        java.io.IOException iOException12 = new java.io.IOException((java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException("hi!2169115775229245488", (java.lang.Throwable) iOException12);
        iOException7.addSuppressed((java.lang.Throwable) iOException12);
        iOException3.addSuppressed((java.lang.Throwable) iOException12);
        java.lang.Throwable throwable17 = null;
        java.io.IOException iOException18 = new java.io.IOException("hi!", throwable17);
        java.io.IOException iOException19 = new java.io.IOException(throwable17);
        java.lang.Throwable throwable22 = null;
        java.io.IOException iOException23 = new java.io.IOException("hi!", throwable22);
        java.io.IOException iOException24 = new java.io.IOException((java.lang.Throwable) iOException23);
        java.io.IOException iOException25 = new java.io.IOException("hi!2169115775229245488", (java.lang.Throwable) iOException24);
        iOException19.addSuppressed((java.lang.Throwable) iOException24);
        java.lang.Throwable throwable29 = null;
        java.io.IOException iOException30 = new java.io.IOException("hi!", throwable29);
        java.io.IOException iOException31 = new java.io.IOException((java.lang.Throwable) iOException30);
        java.io.IOException iOException32 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException30);
        iOException19.addSuppressed((java.lang.Throwable) iOException32);
        iOException12.addSuppressed((java.lang.Throwable) iOException19);
        java.lang.Throwable[] throwableArray35 = iOException12.getSuppressed();
        java.io.IOException iOException36 = new java.io.IOException("hi!6045577589556497825", (java.lang.Throwable) iOException12);
        java.io.IOException iOException37 = new java.io.IOException((java.lang.Throwable) iOException36);
        java.lang.String str38 = iOException36.toString();
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.io.IOException: hi!6045577589556497825" + "'", str38, "java.io.IOException: hi!6045577589556497825");
    }

    @Test
    public void test00880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00880");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.lang.String str6 = uRL3.toExternalForm();
        java.io.File file9 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL10 = file9.toURL();
        java.lang.String str11 = uRL10.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler13 = null;
        java.net.URL uRL14 = new java.net.URL(uRL10, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler13);
        boolean boolean15 = uRL3.sameFile(uRL14);
        java.lang.String str16 = uRL14.getQuery();
        java.io.File file19 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL20 = file19.toURL();
        java.lang.String str21 = uRL20.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler23 = null;
        java.net.URL uRL24 = new java.net.URL(uRL20, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler23);
        java.io.File file27 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL28 = file27.toURL();
        boolean boolean29 = uRL20.sameFile(uRL28);
        java.net.URL uRL31 = new java.net.URL(uRL28, "/hi!4129638666993068054:");
        java.lang.Class[] classArray32 = new java.lang.Class[] {};
        java.lang.Object obj33 = uRL31.getContent(classArray32);
        java.lang.Object obj34 = null; // flaky: uRL14.getContent(classArray32);
        java.lang.String str35 = uRL14.getUserInfo();
        java.lang.String str36 = uRL14.getProtocol();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str6, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file9.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file9.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL10);
// flaky:         org.junit.Assert.assertEquals(uRL10.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file19.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL20);
// flaky:         org.junit.Assert.assertEquals(uRL20.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals(uRL24.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file27.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file27.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL28);
// flaky:         org.junit.Assert.assertEquals(uRL28.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals(uRL31.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "file" + "'", str36, "file");
    }

    @Test
    public void test00881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00881");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        boolean boolean3 = empiricalDistributionImpl0.isLoaded();
        boolean boolean4 = empiricalDistributionImpl0.isLoaded();
        boolean boolean5 = empiricalDistributionImpl0.isLoaded();
        java.io.File file9 = new java.io.File("");
        java.io.File file10 = java.io.File.createTempFile("hi!", ":", file9);
        java.lang.String str11 = file10.getAbsolutePath();
        boolean boolean12 = file10.setReadOnly();
        boolean boolean14 = file10.setLastModified(364740218880L);
        empiricalDistributionImpl0.load(file10);
        java.util.List list16 = empiricalDistributionImpl0.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl17.getSampleStats();
        boolean boolean19 = empiricalDistributionImpl17.isLoaded();
        boolean boolean20 = empiricalDistributionImpl17.isLoaded();
        java.util.List list21 = empiricalDistributionImpl17.getBinStats();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics22 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics22.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean23);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean25 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean25.increment((double) (short) 100);
        geometricMean25.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic30 = geometricMean25.getSumLogImpl();
        summaryStatistics22.setMinImpl(storelessUnivariateStatistic30);
        double double32 = summaryStatistics22.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics22.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance34);
        org.apache.commons.math.stat.descriptive.rank.Min min36 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min36.clear();
        double[] doubleArray43 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double44 = min36.evaluate(doubleArray43);
        variance34.incrementAll(doubleArray43);
        empiricalDistributionImpl17.load(doubleArray43);
        empiricalDistributionImpl0.load(doubleArray43);
        boolean boolean48 = empiricalDistributionImpl0.isLoaded();
        boolean boolean49 = empiricalDistributionImpl0.isLoaded();
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertNotNull(file10);
        org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/hi!7484907307172701794:");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/hi!7484907307172701794:" + "'", str11, "/hi!7484907307172701794:");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(list16);
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test00882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00882");
        java.io.File file2 = new java.io.File("/hi!4060689751378876827:", "/hi!4201210329362459719:");
        file2.deleteOnExit();
        java.net.URI uRI4 = file2.toURI();
        java.io.File file5 = new java.io.File(uRI4);
        org.junit.Assert.assertEquals(file2.getParent(), "/hi!4060689751378876827:");
        org.junit.Assert.assertEquals(file2.toString(), "/hi!4060689751378876827:/hi!4201210329362459719:");
        org.junit.Assert.assertNotNull(uRI4);
        org.junit.Assert.assertEquals(file5.getParent(), "/hi!4060689751378876827:");
        org.junit.Assert.assertEquals(file5.toString(), "/hi!4060689751378876827:/hi!4201210329362459719:");
    }

    @Test
    public void test00883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00883");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        java.lang.Class<?> wildcardClass1 = min0.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics2 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance((java.lang.Class) wildcardClass1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.descriptive.rank.Min cannot be cast to org.apache.commons.math.stat.descriptive.SummaryStatistics");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test00884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00884");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMax();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = summaryStatistics0.getSummary();
        summaryStatistics0.addValue((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics9 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double10 = summaryStatistics9.getMin();
        double double11 = summaryStatistics9.getStandardDeviation();
        double double12 = summaryStatistics9.getSumsq();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = summaryStatistics9.getSummary();
        double double14 = summaryStatistics9.getStandardDeviation();
        double double15 = summaryStatistics9.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment16.clear();
        summaryStatistics9.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment16);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean20 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean20.increment((double) (short) 100);
        geometricMean20.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long27 = variance26.getN();
        double[] doubleArray33 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double35 = variance26.evaluate(doubleArray33, (double) 'a');
        double double36 = geometricMean20.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic37 = geometricMean20.getSumLogImpl();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = empiricalDistributionImpl38.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl38.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean41 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean41.increment((double) (short) 100);
        geometricMean41.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long48 = variance47.getN();
        double[] doubleArray54 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double56 = variance47.evaluate(doubleArray54, (double) 'a');
        double double57 = geometricMean41.evaluate(doubleArray54);
        empiricalDistributionImpl38.load(doubleArray54);
        double[] doubleArray59 = empiricalDistributionImpl38.getUpperBounds();
        double double60 = geometricMean20.evaluate(doubleArray59);
        double double61 = variance19.evaluate(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementations must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(statisticalSummary5);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(statisticalSummary13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 19.43999999999942d + "'", double35 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2.51188643150958d + "'", double36 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic37);
        org.junit.Assert.assertNull(statisticalSummary39);
        org.junit.Assert.assertNull(statisticalSummary40);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 19.43999999999942d + "'", double56 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2.51188643150958d + "'", double57 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.60030657367044d + "'", double60 == 0.60030657367044d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.6E-4d + "'", double61 == 1.6E-4d);
    }

    @Test
    public void test00885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00885");
        java.io.File file2 = new java.io.File("/hi!2756764035548942023:", ":");
        java.io.File file3 = file2.getParentFile();
        java.io.File file5 = new java.io.File(file2, "/hi!8130836485477920045:");
        java.io.File file6 = file5.getCanonicalFile();
        java.lang.String str7 = file6.getCanonicalPath();
        boolean boolean8 = file6.isFile();
        org.junit.Assert.assertEquals(file2.getParent(), "/hi!2756764035548942023:");
        org.junit.Assert.assertEquals(file2.toString(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/");
        org.junit.Assert.assertEquals(file3.toString(), "/hi!2756764035548942023:");
        org.junit.Assert.assertEquals(file5.getParent(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertEquals(file5.toString(), "/hi!2756764035548942023:/:/hi!8130836485477920045:");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertEquals(file6.toString(), "/hi!2756764035548942023:/:/hi!8130836485477920045:");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/hi!2756764035548942023:/:/hi!8130836485477920045:" + "'", str7, "/hi!2756764035548942023:/:/hi!8130836485477920045:");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00886");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.canExecute();
        java.io.File file9 = new java.io.File("");
        boolean boolean12 = file9.setWritable(true, true);
        boolean boolean13 = file9.setReadOnly();
        boolean boolean16 = file9.setWritable(true, false);
        java.net.URI uRI17 = file9.toURI();
        boolean boolean18 = file9.mkdir();
        java.io.File file19 = file9.getCanonicalFile();
        boolean boolean20 = file4.renameTo(file9);
        java.lang.String str21 = file4.getPath();
        java.lang.String str22 = file4.getAbsolutePath();
        boolean boolean23 = file4.isHidden();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!4051568441138390035:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(uRI17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(file19);
// flaky:         org.junit.Assert.assertEquals(file19.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file19.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/hi!4051568441138390035:" + "'", str21, "/hi!4051568441138390035:");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/hi!4051568441138390035:" + "'", str22, "/hi!4051568441138390035:");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test00887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00887");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        java.lang.String str5 = file4.getCanonicalPath();
        boolean boolean6 = file4.createNewFile();
        java.io.File file8 = new java.io.File(file4, "/tmp/hi!2669510445133063194");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs9 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        long long10 = sumOfLogs9.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean11 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs9);
        sumOfLogs9.clear();
        boolean boolean13 = file8.equals((java.lang.Object) sumOfLogs9);
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!7117751630234114856:");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/hi!7117751630234114856:" + "'", str5, "/hi!7117751630234114856:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals(file8.getParent(), "/hi!7117751630234114856:/tmp");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/hi!7117751630234114856:/tmp/hi!2669510445133063194");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00888");
        java.io.File file2 = new java.io.File("/hi!8708105921970863603:", "/hi!6932163193945389563:");
        org.junit.Assert.assertEquals(file2.getParent(), "/hi!8708105921970863603:");
        org.junit.Assert.assertEquals(file2.toString(), "/hi!8708105921970863603:/hi!6932163193945389563:");
    }

    @Test
    public void test00889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00889");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long1 = mean0.getN();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl2 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long8 = variance7.getN();
        double[] doubleArray14 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double16 = variance7.evaluate(doubleArray14, (double) 'a');
        mean5.incrementAll(doubleArray14);
        empiricalDistributionImpl2.load(doubleArray14);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = mean0.evaluate(doubleArray14, 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 19.43999999999942d + "'", double16 == 19.43999999999942d);
    }

    @Test
    public void test00890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00890");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        double double2 = sumOfLogs0.getResult();
        sumOfLogs0.clear();
        long long4 = sumOfLogs0.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean5 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        double double6 = geometricMean5.getResult();
        double double7 = geometricMean5.getResult();
        geometricMean5.increment((-1.0913936421275139E-11d));
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics10 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics10.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean11);
        java.io.File file14 = new java.io.File("");
        java.lang.String str15 = file14.getParent();
        boolean boolean16 = summaryStatistics10.equals((java.lang.Object) file14);
        double double17 = summaryStatistics10.getSumsq();
        double double18 = summaryStatistics10.getGeometricMean();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares19 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long20 = sumOfSquares19.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long25 = variance24.getN();
        double[] doubleArray31 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double33 = variance24.evaluate(doubleArray31, (double) 'a');
        double double37 = variance22.evaluate(doubleArray31, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double40 = sumOfSquares19.evaluate(doubleArray31, (int) (short) 1, 0);
        sumOfSquares19.increment(0.0d);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl43.getSampleStats();
        java.io.File file48 = new java.io.File("");
        java.io.File file49 = java.io.File.createTempFile("hi!", ":", file48);
        java.lang.String str50 = file49.getCanonicalPath();
        boolean boolean51 = file49.createNewFile();
        empiricalDistributionImpl43.load(file49);
        double[] doubleArray53 = empiricalDistributionImpl43.getUpperBounds();
        double double56 = sumOfSquares19.evaluate(doubleArray53, 100, (int) (short) 1);
        sumOfSquares19.increment((double) 299098734592L);
        summaryStatistics10.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares19);
        // The following exception was thrown during execution in test generation
        try {
            geometricMean5.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementation must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNull("file14.getParent() == null", file14.getParent());
        org.junit.Assert.assertEquals(file14.toString(), "");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 19.43999999999942d + "'", double33 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNull(statisticalSummary44);
        org.junit.Assert.assertNull("file48.getParent() == null", file48.getParent());
        org.junit.Assert.assertEquals(file48.toString(), "");
        org.junit.Assert.assertNotNull(file49);
        org.junit.Assert.assertEquals(file49.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file49.toString(), "/hi!915998260004453453:");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "/hi!915998260004453453:" + "'", str50, "/hi!915998260004453453:");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
    }

    @Test
    public void test00891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00891");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file5 = new java.io.File("");
        java.io.File file6 = java.io.File.createTempFile("hi!", ":", file5);
        java.lang.String str7 = file6.getCanonicalPath();
        boolean boolean8 = file6.createNewFile();
        empiricalDistributionImpl0.load(file6);
        double[] doubleArray10 = empiricalDistributionImpl0.getUpperBounds();
        double[] doubleArray11 = empiricalDistributionImpl0.getUpperBounds();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl0.getSampleStats();
        java.util.List list13 = empiricalDistributionImpl0.getBinStats();
        java.io.File file14 = null;
        java.io.File file16 = new java.io.File(file14, ":");
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file16);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: : (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/hi!5832902605917966963:");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/hi!5832902605917966963:" + "'", str7, "/hi!5832902605917966963:");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(statisticalSummary12);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNull("file16.getParent() == null", file16.getParent());
        org.junit.Assert.assertEquals(file16.toString(), ":");
    }

    @Test
    public void test00892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00892");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long6 = mean5.getN();
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean5);
        mean5.increment((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance11.increment((double) (byte) 100);
        java.io.File file16 = new java.io.File("/hi!4420905478953568698:", "/experiment/hi!2169115775229245488");
        boolean boolean17 = variance11.equals((java.lang.Object) "/hi!4420905478953568698:");
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean18.increment((double) 0);
        double double21 = mean18.getResult();
        mean18.clear();
        double[] doubleArray23 = new double[] {};
        mean18.incrementAll(doubleArray23);
        double double26 = variance11.evaluate(doubleArray23, (double) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = mean5.evaluate(doubleArray23, 57, (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals(file16.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file16.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test00893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00893");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = summaryStatistics0.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics13 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double14 = summaryStatistics13.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics13.getGeoMeanImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic15);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic17 = summaryStatistics0.getMinImpl();
        double double18 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.summary.Sum sum19 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long20 = sum19.getN();
        long long21 = sum19.getN();
        sum19.increment((double) ':');
        sum19.increment(1.645454026E12d);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum19);
        double double27 = summaryStatistics0.getGeometricMean();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + Double.POSITIVE_INFINITY + "'", double27 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test00894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00894");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long1 = sumOfSquares0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long6 = variance5.getN();
        double[] doubleArray12 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double14 = variance5.evaluate(doubleArray12, (double) 'a');
        double double18 = variance3.evaluate(doubleArray12, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double21 = sumOfSquares0.evaluate(doubleArray12, (int) (short) 1, 0);
        sumOfSquares0.increment(0.0d);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl24.getSampleStats();
        java.io.File file29 = new java.io.File("");
        java.io.File file30 = java.io.File.createTempFile("hi!", ":", file29);
        java.lang.String str31 = file30.getCanonicalPath();
        boolean boolean32 = file30.createNewFile();
        empiricalDistributionImpl24.load(file30);
        double[] doubleArray34 = empiricalDistributionImpl24.getUpperBounds();
        double double37 = sumOfSquares0.evaluate(doubleArray34, 100, (int) (short) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance39.increment((double) '#');
        double double42 = variance39.getResult();
        variance39.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean44.increment((double) 0);
        double double47 = mean44.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean48.increment((double) 0);
        double double51 = mean48.getResult();
        mean48.clear();
        double[] doubleArray53 = new double[] {};
        mean48.incrementAll(doubleArray53);
        double double55 = mean44.evaluate(doubleArray53);
        double double56 = variance39.evaluate(doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            double double59 = sumOfSquares0.evaluate(doubleArray53, (int) (byte) -1, (-3));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 19.43999999999942d + "'", double14 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNull(statisticalSummary25);
        org.junit.Assert.assertNull("file29.getParent() == null", file29.getParent());
        org.junit.Assert.assertEquals(file29.toString(), "");
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file30.toString(), "/hi!5605032942227089821:");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "/hi!5605032942227089821:" + "'", str31, "/hi!5605032942227089821:");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
    }

    @Test
    public void test00895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00895");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean4.increment((double) (short) 100);
        long long7 = geometricMean4.getN();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean4);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares9 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long10 = sumOfSquares9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        double double27 = variance12.evaluate(doubleArray21, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double30 = sumOfSquares9.evaluate(doubleArray21, (int) (short) 1, 0);
        sumOfSquares9.increment(0.0d);
        double double33 = sumOfSquares9.getResult();
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares9);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics35 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double36 = summaryStatistics35.getMean();
        double double37 = summaryStatistics35.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic38 = summaryStatistics35.getSumImpl();
        summaryStatistics0.setSumsqImpl(storelessUnivariateStatistic38);
        long long40 = storelessUnivariateStatistic38.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test00896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00896");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        boolean boolean11 = file1.setExecutable(true);
        boolean boolean13 = file1.setWritable(true);
        boolean boolean16 = file1.setExecutable(true, false);
        file1.deleteOnExit();
        java.lang.String str18 = file1.getParent();
        boolean boolean19 = file1.isAbsolute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test00897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00897");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.net.URL uRL7 = new java.net.URL(uRL3, "hi!2169115775229245488");
        java.net.URI uRI8 = uRL7.toURI();
        java.lang.String str9 = uRL7.getAuthority();
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream10 = uRL7.openStream();
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /experiment/hi!2169115775229245488/hi!2169115775229245488 (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!2169115775229245488");
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test00898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00898");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getMinImpl();
        long long5 = summaryStatistics0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test00899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00899");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) (-1L));
        geometricMean0.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.rank.Min min7 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min7.clear();
        double[] doubleArray14 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double15 = min7.evaluate(doubleArray14);
        long long16 = min7.getN();
        // The following exception was thrown during execution in test generation
        try {
            geometricMean0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementation must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test00900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00900");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double19 = geometricMean3.evaluate(doubleArray16);
        empiricalDistributionImpl0.load(doubleArray16);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl0.getSampleStats();
        java.util.List list23 = empiricalDistributionImpl0.getBinStats();
        java.io.File file25 = new java.io.File("");
        boolean boolean28 = file25.setWritable(true, true);
        boolean boolean29 = file25.setReadOnly();
        boolean boolean32 = file25.setWritable(true, false);
        boolean boolean34 = file25.setExecutable(true);
        boolean boolean35 = file25.exists();
        boolean boolean36 = file25.canRead();
        long long37 = file25.getUsableSpace();
        java.io.File file38 = file25.getCanonicalFile();
        java.net.URI uRI39 = file25.toURI();
        java.nio.file.Path path40 = file25.toPath();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file25);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.51188643150958d + "'", double19 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNull("file25.getParent() == null", file25.getParent());
        org.junit.Assert.assertEquals(file25.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(file38);
// flaky:         org.junit.Assert.assertEquals(file38.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file38.toString(), "/experiment");
        org.junit.Assert.assertNotNull(uRI39);
        org.junit.Assert.assertNotNull(path40);
    }

    @Test
    public void test00901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00901");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        double double2 = summaryStatistics0.getMax();
        double double3 = summaryStatistics0.getStandardDeviation();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test00902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00902");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = summaryStatistics0.getSummary();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.clear();
        long long5 = secondMoment3.getN();
        secondMoment3.clear();
        double double7 = secondMoment3.getResult();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment3);
        double double9 = secondMoment3.getResult();
        double double10 = secondMoment3.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test00903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00903");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        boolean boolean10 = file1.mkdir();
        java.lang.String str11 = file1.getName();
        java.lang.String str12 = file1.getAbsolutePath();
        boolean boolean15 = file1.setReadable(true, false);
        boolean boolean16 = file1.setReadOnly();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/experiment" + "'", str12, "/experiment");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test00904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00904");
        java.io.File file2 = java.io.File.createTempFile("hi!", "");
        boolean boolean4 = file2.setWritable(true);
        long long5 = file2.getUsableSpace();
        boolean boolean8 = file2.setWritable(true, true);
        file2.deleteOnExit();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/hi!6477614562015630511");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 280499544064L + "'", long5 == 280499544064L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test00905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00905");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics1 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double2 = summaryStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean3.increment((double) 0);
        double double6 = mean3.getResult();
        long long7 = mean3.getN();
        mean3.clear();
        summaryStatistics1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean3);
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean3);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getMaxImpl();
        summaryStatistics0.addValue((double) '/');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
    }

    @Test
    public void test00906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00906");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double double1 = sum0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long4 = variance3.getN();
        long long5 = variance3.getN();
        variance3.increment((double) 10.0f);
        boolean boolean8 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.rank.Max max9 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max9.clear();
        max9.increment((double) (-1L));
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int14 = empiricalDistributionImpl13.getBinCount();
        boolean boolean15 = empiricalDistributionImpl13.isLoaded();
        java.util.List list16 = empiricalDistributionImpl13.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean17 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean17.increment((double) (short) 100);
        geometricMean17.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic22 = geometricMean17.getSumLogImpl();
        long long23 = geometricMean17.getN();
        double double24 = geometricMean17.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics25 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double26 = summaryStatistics25.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min27 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics25.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min27);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean29 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean29.increment((double) (short) 100);
        geometricMean29.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long36 = variance35.getN();
        double[] doubleArray42 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double44 = variance35.evaluate(doubleArray42, (double) 'a');
        double double45 = geometricMean29.evaluate(doubleArray42);
        min27.incrementAll(doubleArray42);
        geometricMean17.incrementAll(doubleArray42);
        empiricalDistributionImpl13.load(doubleArray42);
        double[] doubleArray49 = empiricalDistributionImpl13.getUpperBounds();
        double double52 = max9.evaluate(doubleArray49, (int) 'a', 10);
        double double56 = variance3.evaluate(doubleArray49, (double) (short) 100, (int) (byte) 1, 24);
        // The following exception was thrown during execution in test generation
        try {
            double double59 = sum0.evaluate(doubleArray49, (int) ':', (-3));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1000 + "'", int14 == 1000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(list16);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 19.43999999999942d + "'", double44 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2.51188643150958d + "'", double45 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.6d + "'", double52 == 0.6d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1.0913936421275139E-11d) + "'", double56 == (-1.0913936421275139E-11d));
    }

    @Test
    public void test00907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00907");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.lang.String str5 = uRL3.getQuery();
        java.lang.String str6 = uRL3.getAuthority();
        int int7 = uRL3.getPort();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test00908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00908");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("/hi!3684051994355354645:", "/hi!2286304309003939257:", (int) '#', "/hi!851020226130423905:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!3684051994355354645:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00909");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        java.lang.Object obj4 = null;
        boolean boolean5 = summaryStatistics0.equals(obj4);
        summaryStatistics0.clear();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = summaryStatistics0.getSummary();
        double double8 = summaryStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics9 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double10 = summaryStatistics9.getMin();
        double double11 = summaryStatistics9.getStandardDeviation();
        double double12 = summaryStatistics9.getSumsq();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean13 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean13.increment((double) (short) 100);
        geometricMean13.increment((double) (-1L));
        geometricMean13.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean20 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean20.increment((double) (short) 100);
        geometricMean20.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long27 = variance26.getN();
        double[] doubleArray33 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double35 = variance26.evaluate(doubleArray33, (double) 'a');
        double double36 = geometricMean20.evaluate(doubleArray33);
        double double37 = geometricMean13.evaluate(doubleArray33);
        summaryStatistics9.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean13);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean13);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics40 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double41 = summaryStatistics40.getMin();
        double double42 = summaryStatistics40.getStandardDeviation();
        double double43 = summaryStatistics40.getMax();
        double double44 = summaryStatistics40.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic45 = summaryStatistics40.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean46.increment((double) 10.0f);
        summaryStatistics40.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean46);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares50 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long51 = sumOfSquares50.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long56 = variance55.getN();
        double[] doubleArray62 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double64 = variance55.evaluate(doubleArray62, (double) 'a');
        double double68 = variance53.evaluate(doubleArray62, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double71 = sumOfSquares50.evaluate(doubleArray62, (int) (short) 1, 0);
        double double72 = sumOfSquares50.getResult();
        long long73 = sumOfSquares50.getN();
        sumOfSquares50.clear();
        long long75 = sumOfSquares50.getN();
        double double76 = sumOfSquares50.getResult();
        sumOfSquares50.clear();
        summaryStatistics40.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares50);
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares50);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic80 = summaryStatistics0.getSumLogImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 19.43999999999942d + "'", double35 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2.51188643150958d + "'", double36 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2.51188643150958d + "'", double37 == 2.51188643150958d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic45);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 19.43999999999942d + "'", double64 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic80);
    }

    @Test
    public void test00910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00910");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean0.increment((double) 0);
        double double3 = mean0.getResult();
        mean0.clear();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long11 = variance10.getN();
        double[] doubleArray17 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double19 = variance10.evaluate(doubleArray17, (double) 'a');
        mean8.incrementAll(doubleArray17);
        empiricalDistributionImpl5.load(doubleArray17);
        java.util.List list22 = empiricalDistributionImpl5.getBinStats();
        double[] doubleArray23 = empiricalDistributionImpl5.getUpperBounds();
        double double24 = mean0.evaluate(doubleArray23);
        mean0.clear();
        mean0.clear();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 19.43999999999942d + "'", double19 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.6003999999999999d + "'", double24 == 0.6003999999999999d);
    }

    @Test
    public void test00911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00911");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.net.URI uRI4 = uRL3.toURI();
        java.net.URLConnection uRLConnection5 = uRL3.openConnection();
        int int6 = uRL3.getPort();
        java.io.File file9 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL10 = file9.toURL();
        java.io.File file13 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL14 = file13.toURL();
        java.lang.String str15 = uRL14.getAuthority();
        int int16 = uRL14.getPort();
        java.lang.String str17 = uRL14.toExternalForm();
        java.io.File file20 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL21 = file20.toURL();
        java.lang.String str22 = uRL21.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler24 = null;
        java.net.URL uRL25 = new java.net.URL(uRL21, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler24);
        boolean boolean26 = uRL14.sameFile(uRL25);
        java.lang.String str27 = uRL25.getQuery();
        java.io.File file30 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL31 = file30.toURL();
        java.lang.String str32 = uRL31.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler34 = null;
        java.net.URL uRL35 = new java.net.URL(uRL31, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler34);
        java.io.File file38 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL39 = file38.toURL();
        boolean boolean40 = uRL31.sameFile(uRL39);
        java.net.URL uRL42 = new java.net.URL(uRL39, "/hi!4129638666993068054:");
        java.lang.Class[] classArray43 = new java.lang.Class[] {};
        java.lang.Object obj44 = uRL42.getContent(classArray43);
        java.lang.Object obj45 = null; // flaky: uRL25.getContent(classArray43);
        java.lang.Object obj46 = null; // flaky: uRL10.getContent(classArray43);
        java.lang.Object obj47 = null; // flaky: uRL3.getContent(classArray43);
        java.net.URLStreamHandler uRLStreamHandler49 = null;
        java.net.URL uRL50 = new java.net.URL(uRL3, "hi!8754354838924134808:", uRLStreamHandler49);
        java.net.URLStreamHandler uRLStreamHandler52 = null;
        java.net.URL uRL53 = new java.net.URL(uRL3, "/hi!3219637187155528239:", uRLStreamHandler52);
        java.net.URI uRI54 = uRL53.toURI();
        java.lang.String str55 = uRL53.getProtocol();
        java.lang.String str56 = uRL53.getFile();
        java.net.Proxy proxy57 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection58 = uRL53.openConnection(proxy57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRI4);
        org.junit.Assert.assertNotNull(uRLConnection5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals(file9.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file9.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL10);
// flaky:         org.junit.Assert.assertEquals(uRL10.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file13.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file13.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL14);
// flaky:         org.junit.Assert.assertEquals(uRL14.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str17, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file20.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file20.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL21);
// flaky:         org.junit.Assert.assertEquals(uRL21.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals(uRL25.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file30.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL31);
// flaky:         org.junit.Assert.assertEquals(uRL31.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals(uRL35.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file38.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file38.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL39);
// flaky:         org.junit.Assert.assertEquals(uRL39.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals(uRL42.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj47);
// flaky:         org.junit.Assert.assertEquals(uRL50.toString(), "file:/experiment/hi!2169115775229245488/hi!8754354838924134808:");
        org.junit.Assert.assertEquals(uRL53.toString(), "file:/hi!3219637187155528239:");
        org.junit.Assert.assertNotNull(uRI54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "file" + "'", str55, "file");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "/hi!3219637187155528239:" + "'", str56, "/hi!3219637187155528239:");
    }

    @Test
    public void test00912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00912");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        double double2 = sumOfLogs0.getResult();
        long long3 = sumOfLogs0.getN();
        sumOfLogs0.clear();
        long long5 = sumOfLogs0.getN();
        long long6 = sumOfLogs0.getN();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl7.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl7.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean10 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean10.increment((double) (short) 100);
        geometricMean10.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long17 = variance16.getN();
        double[] doubleArray23 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double25 = variance16.evaluate(doubleArray23, (double) 'a');
        double double26 = geometricMean10.evaluate(doubleArray23);
        empiricalDistributionImpl7.load(doubleArray23);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl7.getSampleStats();
        double double29 = empiricalDistributionImpl7.getNextValue();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean30 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean30.increment((double) (short) 100);
        geometricMean30.increment((double) (-1L));
        geometricMean30.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean37 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean37.increment((double) (short) 100);
        geometricMean37.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long44 = variance43.getN();
        double[] doubleArray50 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double52 = variance43.evaluate(doubleArray50, (double) 'a');
        double double53 = geometricMean37.evaluate(doubleArray50);
        double double54 = geometricMean30.evaluate(doubleArray50);
        empiricalDistributionImpl7.load(doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = sumOfLogs0.evaluate(doubleArray50, (int) '4', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNull(statisticalSummary8);
        org.junit.Assert.assertNull(statisticalSummary9);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 19.43999999999942d + "'", double25 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2.51188643150958d + "'", double26 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(statisticalSummary28);
// flaky:         org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 19.43999999999942d + "'", double52 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2.51188643150958d + "'", double53 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2.51188643150958d + "'", double54 == 2.51188643150958d);
    }

    @Test
    public void test00913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00913");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        boolean boolean10 = file1.setExecutable(true);
        boolean boolean11 = file1.exists();
        java.lang.String str12 = file1.getName();
        java.lang.String str13 = file1.getAbsolutePath();
        boolean boolean14 = file1.setReadOnly();
        boolean boolean15 = file1.isFile();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "/experiment" + "'", str13, "/experiment");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test00914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00914");
        java.io.File file1 = new java.io.File("/hi!4533436540036848542:");
        boolean boolean3 = file1.setReadable(true);
        long long4 = file1.getFreeSpace();
        long long5 = file1.lastModified();
        boolean boolean8 = file1.setExecutable(false, false);
        boolean boolean9 = file1.isHidden();
        org.junit.Assert.assertEquals(file1.getParent(), "/");
        org.junit.Assert.assertEquals(file1.toString(), "/hi!4533436540036848542:");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 299098656768L + "'", long4 == 299098656768L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645454085000L + "'", long5 == 1645454085000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00915");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        boolean boolean10 = file1.mkdir();
        java.io.File file11 = file1.getAbsoluteFile();
        boolean boolean12 = file11.isDirectory();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(file11);
// flaky:         org.junit.Assert.assertEquals(file11.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test00916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00916");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        double double7 = summaryStatistics0.getSumsq();
        java.lang.String str8 = summaryStatistics0.toString();
        double double9 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean11 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean11.increment((double) (short) 100);
        geometricMean11.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long18 = variance17.getN();
        double[] doubleArray24 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double26 = variance17.evaluate(doubleArray24, (double) 'a');
        double double27 = geometricMean11.evaluate(doubleArray24);
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean11);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares29 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long30 = sumOfSquares29.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean31 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean31.increment((double) (short) 100);
        geometricMean31.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic36 = geometricMean31.getSumLogImpl();
        geometricMean31.clear();
        boolean boolean38 = sumOfSquares29.equals((java.lang.Object) geometricMean31);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic39 = geometricMean31.getSumLogImpl();
        // The following exception was thrown during execution in test generation
        try {
            geometricMean11.setSumLogImpl(storelessUnivariateStatistic39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementation must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str8, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 19.43999999999942d + "'", double26 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2.51188643150958d + "'", double27 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic39);
    }

    @Test
    public void test00917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00917");
        java.io.IOException iOException1 = new java.io.IOException("/hi!5946226624167744923:");
    }

    @Test
    public void test00918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00918");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        long long7 = file4.getFreeSpace();
        java.lang.String str8 = file4.getCanonicalPath();
        java.lang.String str9 = file4.getCanonicalPath();
        boolean boolean10 = file4.isHidden();
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/experiment" + "'", str8, "/experiment");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/experiment" + "'", str9, "/experiment");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00919");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        int int3 = empiricalDistributionImpl0.getBinCount();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000);
    }

    @Test
    public void test00920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00920");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max12.clear();
        double double14 = max12.getResult();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares15 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long16 = sumOfSquares15.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long21 = variance20.getN();
        double[] doubleArray27 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double29 = variance20.evaluate(doubleArray27, (double) 'a');
        double double33 = variance18.evaluate(doubleArray27, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double36 = sumOfSquares15.evaluate(doubleArray27, (int) (short) 1, 0);
        double double39 = max12.evaluate(doubleArray27, (int) (short) 1, (int) (short) 0);
        long long40 = max12.getN();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        max12.increment(24.300000000000182d);
        max12.increment(1.645454028E12d);
        double double46 = max12.getResult();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares47 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long48 = sumOfSquares47.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long53 = variance52.getN();
        double[] doubleArray59 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double61 = variance52.evaluate(doubleArray59, (double) 'a');
        double double65 = variance50.evaluate(doubleArray59, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double68 = sumOfSquares47.evaluate(doubleArray59, (int) (short) 1, 0);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics69 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double70 = summaryStatistics69.getMin();
        double double71 = summaryStatistics69.getStandardDeviation();
        double double72 = summaryStatistics69.getMean();
        double double73 = summaryStatistics69.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min74 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics69.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min74);
        double[] doubleArray76 = new double[] {};
        min74.incrementAll(doubleArray76);
        double double78 = sumOfSquares47.evaluate(doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = max12.evaluate(doubleArray76, (int) 'a', 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 19.43999999999942d + "'", double29 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.645454028E12d + "'", double46 == 1.645454028E12d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 19.43999999999942d + "'", double61 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double78));
    }

    @Test
    public void test00921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00921");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL3 = new java.net.URL("hi!7209741271589252419", "/hi!7849629403469026311:", "/hi!3873812041336023575:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: hi!7209741271589252419");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00922");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean2.increment((double) 0);
        double double5 = mean2.getResult();
        long long6 = mean2.getN();
        mean2.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean2);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics9 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double10 = summaryStatistics9.getMin();
        double double11 = summaryStatistics9.getStandardDeviation();
        double double12 = summaryStatistics9.getMean();
        double double13 = summaryStatistics9.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min14 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics9.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min14);
        min14.increment((double) (short) 100);
        double double18 = min14.getResult();
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min14);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.clear();
        secondMoment20.increment(0.0d);
        secondMoment20.increment((double) (short) 1);
        java.io.File file27 = new java.io.File("");
        boolean boolean30 = file27.setWritable(true, true);
        boolean boolean31 = file27.setReadOnly();
        boolean boolean34 = file27.setWritable(true, false);
        java.net.URI uRI35 = file27.toURI();
        boolean boolean37 = file27.setExecutable(true);
        java.net.URI uRI38 = file27.toURI();
        boolean boolean39 = secondMoment20.equals((java.lang.Object) file27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance41.increment((double) (byte) 100);
        java.io.File file46 = new java.io.File("/hi!4420905478953568698:", "/experiment/hi!2169115775229245488");
        boolean boolean47 = variance41.equals((java.lang.Object) "/hi!4420905478953568698:");
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean48.increment((double) 0);
        double double51 = mean48.getResult();
        mean48.clear();
        double[] doubleArray53 = new double[] {};
        mean48.incrementAll(doubleArray53);
        double double56 = variance41.evaluate(doubleArray53, (double) (short) 0);
        double double57 = secondMoment20.evaluate(doubleArray53);
        min14.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics59 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean60 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics59.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean60);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean62 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean62.increment((double) (short) 100);
        geometricMean62.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic67 = geometricMean62.getSumLogImpl();
        summaryStatistics59.setMinImpl(storelessUnivariateStatistic67);
        double double69 = summaryStatistics59.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics59.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance71);
        org.apache.commons.math.stat.descriptive.rank.Min min73 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min73.clear();
        double[] doubleArray80 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double81 = min73.evaluate(doubleArray80);
        variance71.incrementAll(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = min14.evaluate(doubleArray80, (int) 'a', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNull("file27.getParent() == null", file27.getParent());
        org.junit.Assert.assertEquals(file27.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(uRI35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(uRI38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals(file46.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file46.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.5d + "'", double57 == 0.5d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic67);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-1.0d) + "'", double81 == (-1.0d));
    }

    @Test
    public void test00923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00923");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = geometricMean0.getSumLogImpl();
        long long6 = geometricMean0.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics7 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double8 = summaryStatistics7.getMin();
        double double9 = summaryStatistics7.getStandardDeviation();
        double double10 = summaryStatistics7.getSum();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares11 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long12 = sumOfSquares11.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long17 = variance16.getN();
        double[] doubleArray23 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double25 = variance16.evaluate(doubleArray23, (double) 'a');
        double double29 = variance14.evaluate(doubleArray23, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double32 = sumOfSquares11.evaluate(doubleArray23, (int) (short) 1, 0);
        double double33 = sumOfSquares11.getResult();
        long long34 = sumOfSquares11.getN();
        sumOfSquares11.clear();
        summaryStatistics7.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares11);
        double double37 = sumOfSquares11.getResult();
        long long38 = sumOfSquares11.getN();
        long long39 = sumOfSquares11.getN();
        sumOfSquares11.increment((double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            geometricMean0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementation must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 19.43999999999942d + "'", double25 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
    }

    @Test
    public void test00924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00924");
        java.io.File file1 = new java.io.File("");
        boolean boolean3 = file1.setReadable(true);
        long long4 = file1.lastModified();
        java.io.File file6 = new java.io.File(file1, "/hi!8130836485477920045:");
        boolean boolean9 = file1.setExecutable(false, false);
        java.lang.String str10 = file1.getParent();
        java.lang.String str11 = file1.getAbsolutePath();
        java.io.File file15 = new java.io.File("");
        java.io.File file16 = java.io.File.createTempFile("hi!", ":", file15);
        java.lang.String str17 = file16.getCanonicalPath();
        long long18 = file16.getTotalSpace();
        boolean boolean19 = file16.canWrite();
        java.lang.String str20 = file16.getCanonicalPath();
        int int21 = file1.compareTo(file16);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
        org.junit.Assert.assertEquals(file6.toString(), "/hi!8130836485477920045:");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/experiment" + "'", str11, "/experiment");
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "");
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file16.toString(), "/hi!1620889366792196143:");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "/hi!1620889366792196143:" + "'", str17, "/hi!1620889366792196143:");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 364740218880L + "'", long18 == 364740218880L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "/hi!1620889366792196143:" + "'", str20, "/hi!1620889366792196143:");
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-24) + "'", int21 == (-24));
    }

    @Test
    public void test00925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00925");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double7 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance11);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean13.increment((double) 0);
        double double16 = mean13.getResult();
        mean13.clear();
        double[] doubleArray18 = new double[] {};
        mean13.incrementAll(doubleArray18);
        double double20 = variance11.evaluate(doubleArray18);
        double double21 = variance11.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test00926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00926");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        long long2 = sum0.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs3 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double4 = sumOfLogs3.getResult();
        double double5 = sumOfLogs3.getResult();
        sumOfLogs3.increment((double) (-27));
        double double8 = sumOfLogs3.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double11 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long20 = variance19.getN();
        double[] doubleArray26 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double28 = variance19.evaluate(doubleArray26, (double) 'a');
        mean17.incrementAll(doubleArray26);
        empiricalDistributionImpl14.load(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long35 = variance34.getN();
        double[] doubleArray41 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double43 = variance34.evaluate(doubleArray41, (double) 'a');
        double double47 = variance32.evaluate(doubleArray41, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        empiricalDistributionImpl14.load(doubleArray41);
        double double50 = variance13.evaluate(doubleArray41, (double) '/');
        sumOfLogs3.incrementAll(doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            double double54 = sum0.evaluate(doubleArray41, (int) 'a', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 19.43999999999942d + "'", double28 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 19.43999999999942d + "'", double43 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 24.300000000000182d + "'", double50 == 24.300000000000182d);
    }

    @Test
    public void test00927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00927");
        java.io.File file2 = new java.io.File("/hi!4129638666993068054:", "/hi!2756764035548942023:");
        boolean boolean3 = file2.isDirectory();
        org.junit.Assert.assertEquals(file2.getParent(), "/hi!4129638666993068054:");
        org.junit.Assert.assertEquals(file2.toString(), "/hi!4129638666993068054:/hi!2756764035548942023:");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00928");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.canExecute();
        long long8 = file4.getTotalSpace();
        boolean boolean9 = file4.canRead();
        boolean boolean10 = file4.createNewFile();
        java.lang.String str11 = file4.getCanonicalPath();
        java.lang.String str12 = file4.getParent();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!375934178306374780:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 364740218880L + "'", long8 == 364740218880L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/hi!375934178306374780:" + "'", str11, "/hi!375934178306374780:");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/" + "'", str12, "/");
    }

    @Test
    public void test00929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00929");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double5 = secondMoment1.getResult();
        secondMoment1.increment((double) 299098714112L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment1);
        mean8.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean10.increment((double) 0);
        double double13 = mean10.getResult();
        long long14 = mean10.getN();
        mean10.clear();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl16.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary19 = empiricalDistributionImpl18.getSampleStats();
        boolean boolean20 = empiricalDistributionImpl18.isLoaded();
        boolean boolean21 = empiricalDistributionImpl18.isLoaded();
        java.util.List list22 = empiricalDistributionImpl18.getBinStats();
        int int23 = empiricalDistributionImpl18.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long30 = variance29.getN();
        double[] doubleArray36 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double38 = variance29.evaluate(doubleArray36, (double) 'a');
        mean27.incrementAll(doubleArray36);
        empiricalDistributionImpl24.load(doubleArray36);
        empiricalDistributionImpl18.load(doubleArray36);
        empiricalDistributionImpl16.load(doubleArray36);
        double double43 = mean10.evaluate(doubleArray36);
        // The following exception was thrown during execution in test generation
        try {
            double double46 = mean8.evaluate(doubleArray36, 12, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNull(statisticalSummary17);
        org.junit.Assert.assertNull(statisticalSummary19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1000 + "'", int23 == 1000);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 19.43999999999942d + "'", double38 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4.6d + "'", double43 == 4.6d);
    }

    @Test
    public void test00930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00930");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.canWrite();
        boolean boolean6 = file1.mkdirs();
        java.net.URL uRL7 = file1.toURL();
        java.lang.String str8 = uRL7.getHost();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test00931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00931");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        java.io.File file10 = new java.io.File(uRI9);
        java.io.File file11 = new java.io.File(uRI9);
        java.io.File file12 = file11.getCanonicalFile();
        java.lang.String str13 = file11.getAbsolutePath();
        java.lang.String str14 = file11.getCanonicalPath();
        long long15 = file11.length();
        boolean boolean16 = file11.canWrite();
        boolean boolean17 = file11.isAbsolute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
// flaky:         org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file11.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/experiment");
        org.junit.Assert.assertNotNull(file12);
// flaky:         org.junit.Assert.assertEquals(file12.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/experiment");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "/experiment" + "'", str13, "/experiment");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "/experiment" + "'", str14, "/experiment");
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 20480L + "'", long15 == 20480L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test00932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00932");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long1 = sumOfSquares0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long6 = variance5.getN();
        double[] doubleArray12 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double14 = variance5.evaluate(doubleArray12, (double) 'a');
        double double18 = variance3.evaluate(doubleArray12, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double21 = sumOfSquares0.evaluate(doubleArray12, (int) (short) 1, 0);
        sumOfSquares0.increment(0.0d);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl24.getSampleStats();
        java.io.File file29 = new java.io.File("");
        java.io.File file30 = java.io.File.createTempFile("hi!", ":", file29);
        java.lang.String str31 = file30.getCanonicalPath();
        boolean boolean32 = file30.createNewFile();
        empiricalDistributionImpl24.load(file30);
        double[] doubleArray34 = empiricalDistributionImpl24.getUpperBounds();
        double double37 = sumOfSquares0.evaluate(doubleArray34, 100, (int) (short) 1);
        sumOfSquares0.increment((double) 299098734592L);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics40 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double41 = summaryStatistics40.getMin();
        double double42 = summaryStatistics40.getStandardDeviation();
        double double43 = summaryStatistics40.getMean();
        double double44 = summaryStatistics40.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double47 = secondMoment46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment46);
        summaryStatistics40.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment46);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        summaryStatistics40.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean53.increment((double) 0);
        double double56 = mean53.getResult();
        mean53.clear();
        double[] doubleArray58 = new double[] {};
        mean53.incrementAll(doubleArray58);
        double double60 = variance51.evaluate(doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = sumOfSquares0.evaluate(doubleArray58, (int) (byte) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 19.43999999999942d + "'", double14 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNull(statisticalSummary25);
        org.junit.Assert.assertNull("file29.getParent() == null", file29.getParent());
        org.junit.Assert.assertEquals(file29.toString(), "");
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file30.toString(), "/hi!5856369443301793572:");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "/hi!5856369443301793572:" + "'", str31, "/hi!5856369443301793572:");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test00933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00933");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = summaryStatistics0.getSummary();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.clear();
        long long5 = secondMoment3.getN();
        secondMoment3.clear();
        double double7 = secondMoment3.getResult();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment3);
        secondMoment3.increment((double) 1.0f);
        secondMoment3.clear();
        secondMoment3.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test00934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00934");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double6 = secondMoment5.getResult();
        secondMoment5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment5);
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean9);
        summaryStatistics0.addValue((double) 57);
        long long13 = summaryStatistics0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
    }

    @Test
    public void test00935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00935");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.net.URL uRL7 = new java.net.URL(uRL3, "hi!2169115775229245488");
        java.net.URI uRI8 = uRL7.toURI();
        java.lang.String str9 = uRL7.getAuthority();
        java.lang.String str10 = uRL7.getHost();
        java.lang.String str11 = uRL7.toString();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!2169115775229245488");
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!2169115775229245488" + "'", str11, "file:/experiment/hi!2169115775229245488/hi!2169115775229245488");
    }

    @Test
    public void test00936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00936");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getMaxImpl();
        double double7 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean8 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean8.increment((double) (short) 100);
        geometricMean8.increment((double) 0);
        double double13 = geometricMean8.getResult();
        geometricMean8.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean8);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl16.getSampleStats();
        boolean boolean18 = empiricalDistributionImpl16.isLoaded();
        boolean boolean19 = empiricalDistributionImpl16.isLoaded();
        java.util.List list20 = empiricalDistributionImpl16.getBinStats();
        int int21 = empiricalDistributionImpl16.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long28 = variance27.getN();
        double[] doubleArray34 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double36 = variance27.evaluate(doubleArray34, (double) 'a');
        mean25.incrementAll(doubleArray34);
        empiricalDistributionImpl22.load(doubleArray34);
        empiricalDistributionImpl16.load(doubleArray34);
        boolean boolean40 = empiricalDistributionImpl16.isLoaded();
        java.util.List list41 = empiricalDistributionImpl16.getBinStats();
        double[] doubleArray42 = empiricalDistributionImpl16.getUpperBounds();
        // The following exception was thrown during execution in test generation
        try {
            double double45 = geometricMean8.evaluate(doubleArray42, (-50), (-3));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNull(statisticalSummary17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(list20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1000 + "'", int21 == 1000);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 19.43999999999942d + "'", double36 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNotNull(doubleArray42);
    }

    @Test
    public void test00937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00937");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMax();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = summaryStatistics0.getSummary();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs6 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double7 = sumOfLogs6.getResult();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfLogs6);
        long long9 = sumOfLogs6.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean12 = variance11.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean13 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean13.increment((double) (short) 100);
        long long16 = geometricMean13.getN();
        geometricMean13.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics18 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics18.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean19);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean21 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean21.increment((double) (short) 100);
        geometricMean21.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic26 = geometricMean21.getSumLogImpl();
        summaryStatistics18.setMinImpl(storelessUnivariateStatistic26);
        double double28 = summaryStatistics18.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double31 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment30);
        summaryStatistics18.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment30);
        geometricMean13.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment30);
        long long35 = secondMoment30.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance38.increment((double) (byte) 100);
        java.io.File file43 = new java.io.File("/hi!4420905478953568698:", "/experiment/hi!2169115775229245488");
        boolean boolean44 = variance38.equals((java.lang.Object) "/hi!4420905478953568698:");
        boolean boolean45 = variance38.isBiasCorrected();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl46 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment47);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long52 = variance51.getN();
        double[] doubleArray58 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double60 = variance51.evaluate(doubleArray58, (double) 'a');
        mean49.incrementAll(doubleArray58);
        empiricalDistributionImpl46.load(doubleArray58);
        java.util.List list63 = empiricalDistributionImpl46.getBinStats();
        double[] doubleArray64 = empiricalDistributionImpl46.getUpperBounds();
        double double68 = variance38.evaluate(doubleArray64, (double) (short) 1, (int) (short) 10, (int) '4');
        secondMoment30.incrementAll(doubleArray64, (int) (byte) 10, 0);
        double double73 = variance11.evaluate(doubleArray64, (double) 280499580928L);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = sumOfLogs6.evaluate(doubleArray64, (-3), 57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(statisticalSummary5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertEquals(file43.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file43.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 19.43999999999942d + "'", double60 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(list63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 2.7328566760003855E-16d + "'", double68 == 2.7328566760003855E-16d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-7.56670915011011E8d) + "'", double73 == (-7.56670915011011E8d));
    }

    @Test
    public void test00938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00938");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        java.io.File file10 = new java.io.File(uRI9);
        java.io.File file11 = file10.getCanonicalFile();
        boolean boolean12 = file10.canWrite();
        java.lang.String str13 = file10.getPath();
        long long14 = file10.getUsableSpace();
        boolean boolean15 = file10.isDirectory();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
// flaky:         org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/experiment");
        org.junit.Assert.assertNotNull(file11);
// flaky:         org.junit.Assert.assertEquals(file11.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "/experiment" + "'", str13, "/experiment");
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 280499548160L + "'", long14 == 280499548160L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test00939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00939");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException("hi!", throwable1);
        java.io.IOException iOException3 = new java.io.IOException(throwable1);
        java.lang.Throwable throwable6 = null;
        java.io.IOException iOException7 = new java.io.IOException("hi!", throwable6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.io.IOException iOException9 = new java.io.IOException("hi!2169115775229245488", (java.lang.Throwable) iOException8);
        iOException3.addSuppressed((java.lang.Throwable) iOException8);
        java.lang.Throwable throwable13 = null;
        java.io.IOException iOException14 = new java.io.IOException("hi!", throwable13);
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException14);
        java.io.IOException iOException16 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException14);
        iOException3.addSuppressed((java.lang.Throwable) iOException16);
        java.lang.Throwable[] throwableArray18 = iOException16.getSuppressed();
        java.io.IOException iOException19 = new java.io.IOException((java.lang.Throwable) iOException16);
        java.lang.Throwable throwable22 = null;
        java.io.IOException iOException23 = new java.io.IOException("hi!", throwable22);
        java.io.IOException iOException24 = new java.io.IOException(throwable22);
        java.lang.Throwable throwable27 = null;
        java.io.IOException iOException28 = new java.io.IOException("hi!", throwable27);
        java.io.IOException iOException29 = new java.io.IOException((java.lang.Throwable) iOException28);
        java.io.IOException iOException30 = new java.io.IOException("hi!2169115775229245488", (java.lang.Throwable) iOException29);
        iOException24.addSuppressed((java.lang.Throwable) iOException29);
        java.lang.Throwable throwable34 = null;
        java.io.IOException iOException35 = new java.io.IOException("hi!", throwable34);
        java.io.IOException iOException36 = new java.io.IOException((java.lang.Throwable) iOException35);
        java.io.IOException iOException37 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException35);
        iOException24.addSuppressed((java.lang.Throwable) iOException37);
        java.io.IOException iOException39 = new java.io.IOException("/hi!6201492263311768395:", (java.lang.Throwable) iOException37);
        java.lang.Throwable throwable42 = null;
        java.io.IOException iOException43 = new java.io.IOException("hi!", throwable42);
        java.io.IOException iOException44 = new java.io.IOException((java.lang.Throwable) iOException43);
        java.io.IOException iOException45 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException43);
        iOException37.addSuppressed((java.lang.Throwable) iOException43);
        java.io.IOException iOException47 = new java.io.IOException((java.lang.Throwable) iOException37);
        iOException19.addSuppressed((java.lang.Throwable) iOException47);
        org.junit.Assert.assertNotNull(throwableArray18);
    }

    @Test
    public void test00940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00940");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = summaryStatistics0.getSummary();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.clear();
        long long5 = secondMoment3.getN();
        secondMoment3.clear();
        double double7 = secondMoment3.getResult();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment3);
        secondMoment3.increment((double) 1.0f);
        secondMoment3.clear();
        long long12 = secondMoment3.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test00941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00941");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        long long7 = file4.getFreeSpace();
        java.net.URI uRI8 = file4.toURI();
        java.io.File file9 = file4.getParentFile();
        java.net.URI uRI10 = file4.toURI();
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertNull(file9);
        org.junit.Assert.assertNotNull(uRI10);
    }

    @Test
    public void test00942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00942");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        long long5 = file3.length();
        java.lang.String str6 = file3.toString();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!5600754713032268966:");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test00943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00943");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl2 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl2.getSampleStats();
        java.io.File file7 = new java.io.File("");
        java.io.File file8 = java.io.File.createTempFile("hi!", ":", file7);
        java.lang.String str9 = file8.getCanonicalPath();
        boolean boolean10 = file8.createNewFile();
        empiricalDistributionImpl2.load(file8);
        boolean boolean12 = file8.setReadOnly();
        long long13 = file8.length();
        boolean boolean15 = file8.setWritable(false);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file16 = java.io.File.createTempFile("hi!6045577589556497825", "/hi!7692830521395659731:", file8);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /hi!5924294348896698219:/hi!60455775895564978259036446793437310959/hi!7692830521395659731:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNull("file7.getParent() == null", file7.getParent());
        org.junit.Assert.assertEquals(file7.toString(), "");
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/hi!5924294348896698219:");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/hi!5924294348896698219:" + "'", str9, "/hi!5924294348896698219:");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test00944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00944");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL3 = new java.net.URL("/hi!1861608810090776104:", "/hi!5568135344369657420:", "/hi!5400537832948360417:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!1861608810090776104:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00945");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.net.URI uRI4 = uRL3.toURI();
        java.lang.String str5 = uRL3.getUserInfo();
        java.net.URLStreamHandler uRLStreamHandler7 = null;
        java.net.URL uRL8 = new java.net.URL(uRL3, "hi!2169115775229245488", uRLStreamHandler7);
        java.lang.Object obj9 = null; // flaky: uRL3.getContent();
        java.lang.String str10 = uRL3.toExternalForm();
        java.lang.String str11 = uRL3.getFile();
        java.net.Proxy proxy12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection13 = uRL3.openConnection(proxy12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRI4);
        org.junit.Assert.assertNull(str5);
// flaky:         org.junit.Assert.assertEquals(uRL8.toString(), "file:/experiment/hi!2169115775229245488/hi!2169115775229245488");
// flaky:         org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str10, "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str11, "/experiment/hi!2169115775229245488/hi!");
    }

    @Test
    public void test00946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00946");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) (-1L));
        geometricMean0.increment((double) (byte) 1);
        geometricMean0.increment((double) 299098718208L);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares9 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long10 = sumOfSquares9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        double double27 = variance12.evaluate(doubleArray21, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double30 = sumOfSquares9.evaluate(doubleArray21, (int) (short) 1, 0);
        sumOfSquares9.increment(0.0d);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl33 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl33.getSampleStats();
        java.io.File file38 = new java.io.File("");
        java.io.File file39 = java.io.File.createTempFile("hi!", ":", file38);
        java.lang.String str40 = file39.getCanonicalPath();
        boolean boolean41 = file39.createNewFile();
        empiricalDistributionImpl33.load(file39);
        double[] doubleArray43 = empiricalDistributionImpl33.getUpperBounds();
        double double46 = sumOfSquares9.evaluate(doubleArray43, 100, (int) (short) 1);
        double double47 = geometricMean0.evaluate(doubleArray43);
        double[] doubleArray48 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double51 = geometricMean0.evaluate(doubleArray48, (-11), 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNull(statisticalSummary34);
        org.junit.Assert.assertNull("file38.getParent() == null", file38.getParent());
        org.junit.Assert.assertEquals(file38.toString(), "");
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertEquals(file39.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file39.toString(), "/hi!3662411001938698288:");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "/hi!3662411001938698288:" + "'", str40, "/hi!3662411001938698288:");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
    }

    @Test
    public void test00947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00947");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        double double4 = summaryStatistics0.getSumOfLogs();
        java.lang.Throwable throwable7 = null;
        java.io.IOException iOException8 = new java.io.IOException("hi!", throwable7);
        java.io.IOException iOException9 = new java.io.IOException(throwable7);
        java.io.IOException iOException10 = new java.io.IOException("/hi!8130836485477920045:", (java.lang.Throwable) iOException9);
        boolean boolean11 = summaryStatistics0.equals((java.lang.Object) iOException9);
        java.io.IOException iOException12 = new java.io.IOException((java.lang.Throwable) iOException9);
        java.lang.String str13 = iOException12.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.io.IOException: java.io.IOException" + "'", str13, "java.io.IOException: java.io.IOException");
    }

    @Test
    public void test00948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00948");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(1);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl1.getSampleStats();
        boolean boolean3 = empiricalDistributionImpl1.isLoaded();
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00949");
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException("/hi!3816293198257994708:", throwable2);
        java.io.IOException iOException4 = new java.io.IOException("/hi!2246376377893569211:", (java.lang.Throwable) iOException3);
    }

    @Test
    public void test00950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00950");
        java.io.File file2 = new java.io.File("/hi!2756764035548942023:", ":");
        java.io.File file3 = file2.getParentFile();
        java.io.File file5 = new java.io.File(file2, "/hi!8130836485477920045:");
        java.io.File file6 = file5.getCanonicalFile();
        java.nio.file.Path path7 = file6.toPath();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics8 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double9 = summaryStatistics8.getMin();
        double double10 = summaryStatistics8.getStandardDeviation();
        double double11 = summaryStatistics8.getSum();
        double double12 = summaryStatistics8.getGeometricMean();
        double double13 = summaryStatistics8.getSum();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic14 = summaryStatistics8.getMeanImpl();
        boolean boolean15 = file6.equals((java.lang.Object) summaryStatistics8);
        org.junit.Assert.assertEquals(file2.getParent(), "/hi!2756764035548942023:");
        org.junit.Assert.assertEquals(file2.toString(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/");
        org.junit.Assert.assertEquals(file3.toString(), "/hi!2756764035548942023:");
        org.junit.Assert.assertEquals(file5.getParent(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertEquals(file5.toString(), "/hi!2756764035548942023:/:/hi!8130836485477920045:");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertEquals(file6.toString(), "/hi!2756764035548942023:/:/hi!8130836485477920045:");
        org.junit.Assert.assertNotNull(path7);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test00951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00951");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = summaryStatistics0.getSummary();
        double double5 = summaryStatistics0.getMax();
        long long6 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic7 = null;
        summaryStatistics0.setGeoMeanImpl(storelessUnivariateStatistic7);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = summaryStatistics0.getMeanImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(statisticalSummary4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
    }

    @Test
    public void test00952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00952");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getSum();
        double double2 = summaryStatistics0.getSumOfLogs();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test00953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00953");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        int int6 = uRL3.getDefaultPort();
        java.net.URI uRI7 = uRL3.toURI();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double10 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double13 = variance12.getResult();
        variance12.increment((double) 280499642368L);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long24 = variance23.getN();
        double[] doubleArray30 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double32 = variance23.evaluate(doubleArray30, (double) 'a');
        mean21.incrementAll(doubleArray30);
        empiricalDistributionImpl18.load(doubleArray30);
        empiricalDistributionImpl17.load(doubleArray30);
        double double36 = variance12.evaluate(doubleArray30);
        boolean boolean37 = variance12.isBiasCorrected();
        long long38 = variance12.getN();
        variance12.clear();
        boolean boolean40 = uRL3.equals((java.lang.Object) variance12);
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 19.43999999999942d + "'", double32 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 24.3d + "'", double36 == 24.3d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test00954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00954");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        double double2 = sum0.getResult();
        long long3 = sum0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long6 = variance5.getN();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl7.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary9 = empiricalDistributionImpl7.getSampleStats();
        java.util.List list10 = empiricalDistributionImpl7.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl7.getSampleStats();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs12 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean13 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs12);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl14.getSampleStats();
        boolean boolean16 = empiricalDistributionImpl14.isLoaded();
        boolean boolean17 = empiricalDistributionImpl14.isLoaded();
        java.util.List list18 = empiricalDistributionImpl14.getBinStats();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics19 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics19.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean20);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean22 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean22.increment((double) (short) 100);
        geometricMean22.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic27 = geometricMean22.getSumLogImpl();
        summaryStatistics19.setMinImpl(storelessUnivariateStatistic27);
        double double29 = summaryStatistics19.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics19.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance31);
        org.apache.commons.math.stat.descriptive.rank.Min min33 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min33.clear();
        double[] doubleArray40 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double41 = min33.evaluate(doubleArray40);
        variance31.incrementAll(doubleArray40);
        empiricalDistributionImpl14.load(doubleArray40);
        geometricMean13.incrementAll(doubleArray40, (int) (byte) 0, (int) (byte) 1);
        empiricalDistributionImpl7.load(doubleArray40);
        double double50 = variance5.evaluate(doubleArray40, (int) (short) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double53 = sum0.evaluate(doubleArray40, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNull(statisticalSummary8);
        org.junit.Assert.assertNull(statisticalSummary9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNull(statisticalSummary11);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    }

    @Test
    public void test00955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00955");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        java.lang.String str5 = file4.getCanonicalPath();
        java.nio.file.Path path6 = file4.toPath();
        boolean boolean9 = file4.setExecutable(false, false);
        boolean boolean10 = file4.setReadOnly();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!1959421095022278632:");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/hi!1959421095022278632:" + "'", str5, "/hi!1959421095022278632:");
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test00956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00956");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(0);
        java.io.File file4 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL5 = file4.toURL();
        java.lang.String str6 = uRL5.getAuthority();
        java.lang.Object obj7 = null; // flaky: uRL5.getContent();
        // The following exception was thrown during execution in test generation
{ // flaky:         try {
// flaky:             empiricalDistributionImpl1.load(uRL5);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: URL file:/experiment/hi!2169115775229245488/hi! contains no data");
// flaky:         } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file4.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file4.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL5);
// flaky:         org.junit.Assert.assertEquals(uRL5.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertNotNull(obj7);
    }

    @Test
    public void test00957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00957");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.net.URI uRI4 = uRL3.toURI();
        java.lang.String str5 = uRL3.getUserInfo();
        java.lang.String str6 = uRL3.getFile();
        java.lang.String str7 = uRL3.getAuthority();
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        java.lang.String str12 = uRL11.getAuthority();
        java.net.URL uRL14 = new java.net.URL(uRL11, "/hi!2756764035548942023:");
        boolean boolean15 = uRL3.sameFile(uRL11);
        java.net.URI uRI16 = uRL11.toURI();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRI4);
        org.junit.Assert.assertNull(str5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str6, "/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/hi!2756764035548942023:");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(uRI16);
    }

    @Test
    public void test00958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00958");
        java.io.File file2 = java.io.File.createTempFile("hi!", "");
        boolean boolean4 = file2.setLastModified((long) '#');
        java.io.File file5 = file2.getCanonicalFile();
        boolean boolean6 = file5.exists();
        long long7 = file5.getTotalSpace();
        java.lang.String str8 = file5.getParent();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/hi!2638553623866801668");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/tmp/hi!2638553623866801668");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 364740218880L + "'", long7 == 364740218880L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/tmp" + "'", str8, "/tmp");
    }

    @Test
    public void test00959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00959");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long6 = mean5.getN();
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean5);
        java.lang.String str8 = summaryStatistics0.toString();
        double double9 = summaryStatistics0.getSumOfLogs();
        double double10 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares11 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long12 = sumOfSquares11.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long17 = variance16.getN();
        double[] doubleArray23 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double25 = variance16.evaluate(doubleArray23, (double) 'a');
        double double29 = variance14.evaluate(doubleArray23, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double32 = sumOfSquares11.evaluate(doubleArray23, (int) (short) 1, 0);
        double double33 = sumOfSquares11.getResult();
        long long34 = sumOfSquares11.getN();
        sumOfSquares11.increment((double) 1000);
        double double37 = sumOfSquares11.getResult();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares11);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean39 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean39.increment((double) (short) 100);
        geometricMean39.increment((double) (-1L));
        geometricMean39.increment((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic46 = geometricMean39.getSumLogImpl();
        long long47 = geometricMean39.getN();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl48 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = empiricalDistributionImpl48.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl48.getSampleStats();
        int int51 = empiricalDistributionImpl48.getBinCount();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.clear();
        long long54 = secondMoment52.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long57 = variance56.getN();
        double[] doubleArray63 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double65 = variance56.evaluate(doubleArray63, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment66.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment66);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long71 = variance70.getN();
        double[] doubleArray77 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double79 = variance70.evaluate(doubleArray77, (double) 'a');
        mean68.incrementAll(doubleArray77);
        double double82 = variance56.evaluate(doubleArray77, (double) (byte) 1);
        secondMoment52.incrementAll(doubleArray77);
        empiricalDistributionImpl48.load(doubleArray77);
        double double87 = geometricMean39.evaluate(doubleArray77, 3, 2);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = sumOfSquares11.evaluate(doubleArray77, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str8, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 19.43999999999942d + "'", double25 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1000000.0d + "'", double37 == 1000000.0d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 3L + "'", long47 == 3L);
        org.junit.Assert.assertNull(statisticalSummary49);
        org.junit.Assert.assertNull(statisticalSummary50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1000 + "'", int51 == 1000);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 19.43999999999942d + "'", double65 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 19.43999999999942d + "'", double79 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 19.44d + "'", double82 == 19.44d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 3.1622776601683795d + "'", double87 == 3.1622776601683795d);
    }

    @Test
    public void test00960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00960");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("/hi!6356228239996326736:", "/hi!8096608021699550821:", (-11), "/hi!6914064389442203092:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: Invalid port number :-11");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00961");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean2.increment((double) (short) 100);
        geometricMean2.increment(0.0d);
        geometricMean2.clear();
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean2);
        summaryStatistics0.clear();
        double double10 = summaryStatistics0.getMax();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test00962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00962");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        java.io.File file10 = new java.io.File(uRI9);
        java.io.File file11 = new java.io.File(uRI9);
        boolean boolean12 = file11.isAbsolute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
// flaky:         org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file11.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test00963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00963");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max0.increment((double) '#');
        max0.clear();
        double double4 = max0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double7 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double double10 = variance9.getResult();
        variance9.increment((double) 280499642368L);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment16.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long21 = variance20.getN();
        double[] doubleArray27 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double29 = variance20.evaluate(doubleArray27, (double) 'a');
        mean18.incrementAll(doubleArray27);
        empiricalDistributionImpl15.load(doubleArray27);
        empiricalDistributionImpl14.load(doubleArray27);
        double double33 = variance9.evaluate(doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = max0.evaluate(doubleArray27, (-11), (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 19.43999999999942d + "'", double29 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 24.3d + "'", double33 == 24.3d);
    }

    @Test
    public void test00964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00964");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long1 = sumOfSquares0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long6 = variance5.getN();
        double[] doubleArray12 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double14 = variance5.evaluate(doubleArray12, (double) 'a');
        double double18 = variance3.evaluate(doubleArray12, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double21 = sumOfSquares0.evaluate(doubleArray12, (int) (short) 1, 0);
        double double22 = sumOfSquares0.getResult();
        long long23 = sumOfSquares0.getN();
        sumOfSquares0.clear();
        sumOfSquares0.increment((double) (short) 100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl27.getSampleStats();
        java.io.File file32 = new java.io.File("");
        java.io.File file33 = java.io.File.createTempFile("hi!", ":", file32);
        java.lang.String str34 = file33.getCanonicalPath();
        boolean boolean35 = file33.createNewFile();
        empiricalDistributionImpl27.load(file33);
        double[] doubleArray37 = empiricalDistributionImpl27.getUpperBounds();
        double[] doubleArray38 = empiricalDistributionImpl27.getUpperBounds();
        sumOfSquares0.incrementAll(doubleArray38);
        double double40 = sumOfSquares0.getResult();
        double[] doubleArray41 = null;
        // The following exception was thrown during execution in test generation
        try {
            sumOfSquares0.incrementAll(doubleArray41, (int) '/', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 19.43999999999942d + "'", double14 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNull("file32.getParent() == null", file32.getParent());
        org.junit.Assert.assertEquals(file32.toString(), "");
        org.junit.Assert.assertNotNull(file33);
        org.junit.Assert.assertEquals(file33.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file33.toString(), "/hi!7144899076016939974:");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "/hi!7144899076016939974:" + "'", str34, "/hi!7144899076016939974:");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
    }

    @Test
    public void test00965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00965");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.lang.String str5 = uRL3.getQuery();
        java.lang.String str6 = uRL3.getAuthority();
        java.lang.String str7 = uRL3.getAuthority();
        java.io.InputStream inputStream8 = null; // flaky: uRL3.openStream();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
// flaky:         org.junit.Assert.assertNotNull(inputStream8);
    }

    @Test
    public void test00966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00966");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        long long5 = file4.length();
        java.io.File file9 = new java.io.File("");
        java.io.File file10 = java.io.File.createTempFile("hi!", ":", file9);
        long long11 = file10.length();
        boolean boolean12 = file4.renameTo(file10);
        java.io.File file13 = file10.getAbsoluteFile();
        boolean boolean15 = file10.setReadable(true);
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!8246216127506970429:");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertNotNull(file10);
        org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/hi!2803291128669657900:");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/hi!2803291128669657900:");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test00967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00967");
        java.io.File file1 = new java.io.File("/hi!2625591491386671483:");
        boolean boolean4 = file1.setReadable(true, false);
        boolean boolean5 = file1.isFile();
        org.junit.Assert.assertEquals(file1.getParent(), "/");
        org.junit.Assert.assertEquals(file1.toString(), "/hi!2625591491386671483:");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00968");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long13 = variance12.getN();
        double[] doubleArray19 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double21 = variance12.evaluate(doubleArray19, (double) 'a');
        mean10.incrementAll(doubleArray19);
        double double23 = variance7.evaluate(doubleArray19);
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance7);
        variance7.setBiasCorrected(false);
        double double27 = variance7.getResult();
        variance7.increment((double) 299098755072L);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl30.getSampleStats();
        java.io.File file35 = new java.io.File("");
        java.io.File file36 = java.io.File.createTempFile("hi!", ":", file35);
        java.lang.String str37 = file36.getCanonicalPath();
        boolean boolean38 = file36.createNewFile();
        empiricalDistributionImpl30.load(file36);
        double[] doubleArray40 = empiricalDistributionImpl30.getUpperBounds();
        double[] doubleArray41 = empiricalDistributionImpl30.getUpperBounds();
        // The following exception was thrown during execution in test generation
        try {
            double double44 = variance7.evaluate(doubleArray41, (int) (byte) 0, (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 19.43999999999942d + "'", double21 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 24.3d + "'", double23 == 24.3d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNull(statisticalSummary31);
        org.junit.Assert.assertNull("file35.getParent() == null", file35.getParent());
        org.junit.Assert.assertEquals(file35.toString(), "");
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file36.toString(), "/hi!6807251491506370482:");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "/hi!6807251491506370482:" + "'", str37, "/hi!6807251491506370482:");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
    }

    @Test
    public void test00969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00969");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) 0);
        double double5 = geometricMean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long8 = variance7.getN();
        long long9 = variance7.getN();
        variance7.increment((-1.0d));
        boolean boolean12 = variance7.isBiasCorrected();
        // The following exception was thrown during execution in test generation
        try {
            geometricMean0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementation must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00970");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("/hi!1959421095022278632:", "/hi!1861608810090776104:");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/hi!1959421095022278632:1526825599730139516/hi!1861608810090776104:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00971");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double7 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance11);
        double double13 = summaryStatistics0.getVariance();
        summaryStatistics0.clear();
        double double15 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double18 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        double double21 = variance20.getResult();
        boolean boolean22 = variance20.isBiasCorrected();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance20);
        summaryStatistics0.clear();
        double double25 = summaryStatistics0.getMax();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test00972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00972");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.lang.String str6 = uRL3.toExternalForm();
        java.io.File file9 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL10 = file9.toURL();
        java.lang.String str11 = uRL10.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler13 = null;
        java.net.URL uRL14 = new java.net.URL(uRL10, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler13);
        boolean boolean15 = uRL3.sameFile(uRL14);
        java.lang.String str16 = uRL14.getQuery();
        java.net.URL uRL18 = new java.net.URL(uRL14, "/hi!2284620800952692794:");
        java.io.File file21 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL22 = file21.toURL();
        java.lang.String str23 = uRL22.getAuthority();
        java.lang.String str24 = uRL22.getUserInfo();
        java.lang.String str25 = uRL22.getUserInfo();
        java.io.File file28 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL29 = file28.toURL();
        java.lang.String str30 = uRL29.getAuthority();
        java.lang.String str31 = uRL29.getUserInfo();
        int int32 = uRL29.getDefaultPort();
        java.lang.String str33 = uRL29.getUserInfo();
        java.lang.String str34 = uRL29.toExternalForm();
        java.io.File file37 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL38 = file37.toURL();
        java.lang.String str39 = uRL38.getProtocol();
        java.io.File file42 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL43 = file42.toURL();
        java.lang.String str44 = uRL43.getAuthority();
        java.lang.String str45 = uRL43.getUserInfo();
        int int46 = uRL43.getDefaultPort();
        java.lang.String str47 = uRL43.getUserInfo();
        java.io.File file50 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL51 = file50.toURL();
        java.lang.String str52 = uRL51.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler54 = null;
        java.net.URL uRL55 = new java.net.URL(uRL51, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler54);
        boolean boolean56 = uRL43.sameFile(uRL55);
        int int57 = uRL43.getPort();
        java.io.File file60 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL61 = file60.toURL();
        java.lang.String str62 = uRL61.getAuthority();
        java.lang.String str63 = uRL61.getUserInfo();
        int int64 = uRL61.getDefaultPort();
        java.lang.String str65 = uRL61.getUserInfo();
        java.io.File file68 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL69 = file68.toURL();
        java.lang.String str70 = uRL69.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler72 = null;
        java.net.URL uRL73 = new java.net.URL(uRL69, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler72);
        boolean boolean74 = uRL61.sameFile(uRL73);
        java.io.File file77 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL78 = file77.toURL();
        java.lang.String str79 = uRL78.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler81 = null;
        java.net.URL uRL82 = new java.net.URL(uRL78, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler81);
        java.io.File file85 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL86 = file85.toURL();
        boolean boolean87 = uRL78.sameFile(uRL86);
        java.net.URL uRL89 = new java.net.URL(uRL86, "/hi!4129638666993068054:");
        java.lang.Class[] classArray90 = new java.lang.Class[] {};
        java.lang.Object obj91 = uRL89.getContent(classArray90);
        java.lang.Object obj92 = null; // flaky: uRL73.getContent(classArray90);
        java.lang.Object obj93 = null; // flaky: uRL43.getContent(classArray90);
        java.lang.Object obj94 = null; // flaky: uRL38.getContent(classArray90);
        java.lang.Object obj95 = null; // flaky: uRL29.getContent(classArray90);
        java.lang.Object obj96 = null; // flaky: uRL22.getContent(classArray90);
        java.lang.Object obj97 = null; // flaky: uRL14.getContent(classArray90);
        java.lang.String str98 = uRL14.getUserInfo();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str6, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file9.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file9.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL10);
// flaky:         org.junit.Assert.assertEquals(uRL10.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals(uRL18.toString(), "file:/hi!2284620800952692794:");
        org.junit.Assert.assertEquals(file21.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file21.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL22);
// flaky:         org.junit.Assert.assertEquals(uRL22.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file28.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL29);
// flaky:         org.junit.Assert.assertEquals(uRL29.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(str33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str34, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file37.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file37.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL38);
// flaky:         org.junit.Assert.assertEquals(uRL38.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "file" + "'", str39, "file");
        org.junit.Assert.assertEquals(file42.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file42.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL43);
// flaky:         org.junit.Assert.assertEquals(uRL43.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals(file50.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file50.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL51);
// flaky:         org.junit.Assert.assertEquals(uRL51.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals(uRL55.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertEquals(file60.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file60.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL61);
// flaky:         org.junit.Assert.assertEquals(uRL61.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals(file68.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file68.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL69);
// flaky:         org.junit.Assert.assertEquals(uRL69.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals(uRL73.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals(file77.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file77.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL78);
// flaky:         org.junit.Assert.assertEquals(uRL78.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals(uRL82.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file85.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file85.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL86);
// flaky:         org.junit.Assert.assertEquals(uRL86.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertEquals(uRL89.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertNull(obj96);
        org.junit.Assert.assertNull(obj97);
        org.junit.Assert.assertNull(str98);
    }

    @Test
    public void test00973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00973");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        boolean boolean3 = empiricalDistributionImpl0.isLoaded();
        java.io.File file5 = new java.io.File("");
        boolean boolean8 = file5.setWritable(true, true);
        boolean boolean9 = file5.setReadOnly();
        long long10 = file5.lastModified();
        long long11 = file5.length();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file5);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test00974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00974");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.io.File file9 = file1.getParentFile();
        java.lang.String str10 = file1.getCanonicalPath();
        java.lang.String str11 = file1.toString();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(file9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/experiment" + "'", str10, "/experiment");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test00975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00975");
        java.io.File file1 = new java.io.File("/hi!8445959589238482488:");
        java.lang.String str2 = file1.toString();
        org.junit.Assert.assertEquals(file1.getParent(), "/");
        org.junit.Assert.assertEquals(file1.toString(), "/hi!8445959589238482488:");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/hi!8445959589238482488:" + "'", str2, "/hi!8445959589238482488:");
    }

    @Test
    public void test00976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00976");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getQuery();
        java.net.URLStreamHandler uRLStreamHandler9 = null;
        java.net.URL uRL10 = new java.net.URL(uRL3, "/experiment/hi!2169115775229245488/hi!/", uRLStreamHandler9);
        java.net.URL uRL12 = new java.net.URL(uRL3, "/hi!4642557990994400587:");
        java.lang.String str13 = uRL3.getUserInfo();
        java.io.InputStream inputStream14 = null; // flaky: uRL3.openStream();
        java.lang.String str15 = uRL3.getRef();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics16 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double17 = summaryStatistics16.getMean();
        double double18 = summaryStatistics16.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean19 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean19.increment((double) (short) 100);
        geometricMean19.increment((double) (-1L));
        summaryStatistics16.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean19);
        boolean boolean25 = uRL3.equals((java.lang.Object) summaryStatistics16);
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals(uRL12.toString(), "file:/hi!4642557990994400587:");
        org.junit.Assert.assertNull(str13);
// flaky:         org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test00977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00977");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getMeanImpl();
        long long3 = summaryStatistics0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test00978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00978");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        java.lang.String str5 = file4.getCanonicalPath();
        java.nio.file.Path path6 = file4.toPath();
        boolean boolean7 = file4.isFile();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!2187334963346252907:");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/hi!2187334963346252907:" + "'", str5, "/hi!2187334963346252907:");
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test00979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00979");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean0.increment((double) (short) 10);
        mean0.clear();
    }

    @Test
    public void test00980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00980");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.lang.String str6 = uRL3.toExternalForm();
        java.io.File file9 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL10 = file9.toURL();
        java.lang.String str11 = uRL10.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler13 = null;
        java.net.URL uRL14 = new java.net.URL(uRL10, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler13);
        boolean boolean15 = uRL3.sameFile(uRL14);
        java.net.URLConnection uRLConnection16 = uRL3.openConnection();
        java.net.URL uRL18 = new java.net.URL(uRL3, "/tmp/hi!7082277894007542717");
        int int19 = uRL18.getPort();
        java.lang.Object obj20 = uRL18.getContent();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str6, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file9.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file9.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL10);
// flaky:         org.junit.Assert.assertEquals(uRL10.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(uRLConnection16);
        org.junit.Assert.assertEquals(uRL18.toString(), "file:/tmp/hi!7082277894007542717");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(obj20);
    }

    @Test
    public void test00981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00981");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file6 = new java.io.File("");
        java.io.File file7 = java.io.File.createTempFile("hi!", ":", file6);
        java.net.URI uRI8 = file7.toURI();
        boolean boolean10 = file7.setReadable(false);
        java.io.File file11 = file7.getParentFile();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file11);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: / (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "");
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/hi!3573787418951614618:");
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "/");
    }

    @Test
    public void test00982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00982");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = new java.net.URL("/hi!123506190158277371:", "/hi!7244294130841578860:", (-1), "hi!8858262046242226862:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!123506190158277371:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00983");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long6 = mean5.getN();
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean5);
        java.lang.String str8 = summaryStatistics0.toString();
        double double9 = summaryStatistics0.getSumOfLogs();
        double double10 = summaryStatistics0.getMin();
        summaryStatistics0.clear();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = summaryStatistics0.getMinImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str8, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
    }

    @Test
    public void test00984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00984");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getVarianceImpl();
        java.lang.String str12 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics0.getSumImpl();
        double double14 = summaryStatistics0.getSum();
        double double15 = summaryStatistics0.getSumsq();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "SummaryStatistics:\nn: 0\nmin: -Infinity\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str12, "SummaryStatistics:\nn: 0\nmin: -Infinity\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test00985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00985");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares0.increment((double) (byte) 1);
        sumOfSquares0.clear();
        sumOfSquares0.clear();
        org.apache.commons.math.stat.descriptive.summary.Sum sum5 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean6 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean6.increment((double) (short) 100);
        geometricMean6.increment((double) (-1L));
        geometricMean6.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean13 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean13.increment((double) (short) 100);
        geometricMean13.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long20 = variance19.getN();
        double[] doubleArray26 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double28 = variance19.evaluate(doubleArray26, (double) 'a');
        double double29 = geometricMean13.evaluate(doubleArray26);
        double double30 = geometricMean6.evaluate(doubleArray26);
        double double33 = sum5.evaluate(doubleArray26, 0, 0);
        sum5.increment((double) 1645454026000L);
        sum5.clear();
        sum5.increment((double) (-3));
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics39 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double40 = summaryStatistics39.getMin();
        double double41 = summaryStatistics39.getStandardDeviation();
        double double42 = summaryStatistics39.getMean();
        double double43 = summaryStatistics39.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double46 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment45);
        summaryStatistics39.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        summaryStatistics39.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance50);
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean52.increment((double) 0);
        double double55 = mean52.getResult();
        mean52.clear();
        double[] doubleArray57 = new double[] {};
        mean52.incrementAll(doubleArray57);
        double double59 = variance50.evaluate(doubleArray57);
        double double60 = sum5.evaluate(doubleArray57);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = sumOfSquares0.evaluate(doubleArray57, (int) ':', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 19.43999999999942d + "'", double28 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2.51188643150958d + "'", double29 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2.51188643150958d + "'", double30 == 2.51188643150958d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test00986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00986");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double5 = secondMoment4.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment4);
        secondMoment4.increment(4.060443010546419d);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl10.getSampleStats();
        java.io.File file15 = new java.io.File("");
        java.io.File file16 = java.io.File.createTempFile("hi!", ":", file15);
        java.lang.String str17 = file16.getCanonicalPath();
        boolean boolean18 = file16.createNewFile();
        empiricalDistributionImpl10.load(file16);
        double[] doubleArray20 = empiricalDistributionImpl10.getUpperBounds();
        double[] doubleArray21 = empiricalDistributionImpl10.getUpperBounds();
        boolean boolean22 = empiricalDistributionImpl10.isLoaded();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics23 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics23.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean24);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean26 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean26.increment((double) (short) 100);
        geometricMean26.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic31 = geometricMean26.getSumLogImpl();
        summaryStatistics23.setMinImpl(storelessUnivariateStatistic31);
        double double33 = summaryStatistics23.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics23.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean37.increment((double) 0);
        double double40 = mean37.getResult();
        mean37.clear();
        double[] doubleArray42 = new double[] {};
        mean37.incrementAll(doubleArray42);
        variance35.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long47 = variance46.getN();
        double[] doubleArray53 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double55 = variance46.evaluate(doubleArray53, (double) 'a');
        variance46.clear();
        double[] doubleArray60 = new double[] { (byte) 0, (short) 0, 299098734592L };
        double double62 = variance46.evaluate(doubleArray60, (double) 1);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics63 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics63.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean64);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean66 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean66.increment((double) (short) 100);
        geometricMean66.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic71 = geometricMean66.getSumLogImpl();
        summaryStatistics63.setMinImpl(storelessUnivariateStatistic71);
        double double73 = summaryStatistics63.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics63.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance75);
        org.apache.commons.math.stat.descriptive.moment.Mean mean77 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean77.increment((double) 0);
        double double80 = mean77.getResult();
        mean77.clear();
        double[] doubleArray82 = new double[] {};
        mean77.incrementAll(doubleArray82);
        variance75.incrementAll(doubleArray82);
        double double86 = variance46.evaluate(doubleArray82, 100.0d);
        double double87 = variance35.evaluate(doubleArray82);
        empiricalDistributionImpl10.load(doubleArray82);
        secondMoment4.incrementAll(doubleArray82);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNull(statisticalSummary11);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "");
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file16.toString(), "/hi!4858087330667094001:");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "/hi!4858087330667094001:" + "'", str17, "/hi!4858087330667094001:");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 19.43999999999942d + "'", double55 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 0.0, 2.99098734592E11]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.988001178545237E22d + "'", double62 == 1.988001178545237E22d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic71);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
    }

    @Test
    public void test00987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00987");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.lang.String str5 = uRL3.getUserInfo();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getAuthority();
        java.lang.String str8 = uRL3.getHost();
        java.io.InputStream inputStream9 = null; // flaky: uRL3.openStream();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertNotNull(inputStream9);
    }

    @Test
    public void test00988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00988");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long2 = variance1.getN();
        double[] doubleArray8 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double10 = variance1.evaluate(doubleArray8, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long16 = variance15.getN();
        double[] doubleArray22 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double24 = variance15.evaluate(doubleArray22, (double) 'a');
        mean13.incrementAll(doubleArray22);
        double double27 = variance1.evaluate(doubleArray22, (double) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs28 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        long long29 = sumOfLogs28.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean30 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs28);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares31 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long32 = sumOfSquares31.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long37 = variance36.getN();
        double[] doubleArray43 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double45 = variance36.evaluate(doubleArray43, (double) 'a');
        double double49 = variance34.evaluate(doubleArray43, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double52 = sumOfSquares31.evaluate(doubleArray43, (int) (short) 1, 0);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics53 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double54 = summaryStatistics53.getMin();
        double double55 = summaryStatistics53.getStandardDeviation();
        double double56 = summaryStatistics53.getMean();
        double double57 = summaryStatistics53.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min58 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics53.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min58);
        double[] doubleArray60 = new double[] {};
        min58.incrementAll(doubleArray60);
        double double62 = sumOfSquares31.evaluate(doubleArray60);
        geometricMean30.incrementAll(doubleArray60);
        double double65 = variance1.evaluate(doubleArray60, (double) 100);
        double double66 = variance1.getResult();
        variance1.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 19.43999999999942d + "'", double10 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 19.43999999999942d + "'", double24 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 19.44d + "'", double27 == 19.44d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 19.43999999999942d + "'", double45 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
    }

    @Test
    public void test00989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00989");
        java.io.File file4 = new java.io.File("/hi!4533436540036848542:", "/hi!2756764035548942023:");
        boolean boolean5 = file4.delete();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file6 = java.io.File.createTempFile("/hi!2284620800952692794:", "/hi!7373904328399805796:", file4);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /hi!4533436540036848542:/hi!2756764035548942023:/hi!2284620800952692794:1327372038508675733/hi!7373904328399805796:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file4.getParent(), "/hi!4533436540036848542:");
        org.junit.Assert.assertEquals(file4.toString(), "/hi!4533436540036848542:/hi!2756764035548942023:");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00990");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        mean4.increment((double) '4');
        double double7 = mean4.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test00991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00991");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = summaryStatistics0.getSummary();
        double double5 = summaryStatistics0.getStandardDeviation();
        double double6 = summaryStatistics0.getVariance();
        double double7 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment8);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance12);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic14 = summaryStatistics0.getGeoMeanImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(statisticalSummary4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic14);
    }

    @Test
    public void test00992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00992");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long7 = variance6.getN();
        double[] doubleArray13 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double15 = variance6.evaluate(doubleArray13, (double) 'a');
        mean4.incrementAll(doubleArray13);
        empiricalDistributionImpl1.load(doubleArray13);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = geometricMean0.evaluate(doubleArray13, (-70), (-24));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 19.43999999999942d + "'", double15 == 19.43999999999942d);
    }

    @Test
    public void test00993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00993");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.net.URI uRI4 = uRL3.toURI();
        java.lang.String str5 = uRL3.getUserInfo();
        java.net.Proxy proxy6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection7 = uRL3.openConnection(proxy6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRI4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test00994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00994");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMinImpl();
        double double6 = summaryStatistics0.getMin();
        double double7 = summaryStatistics0.getMean();
        double double8 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = summaryStatistics0.getSumsqImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
    }

    @Test
    public void test00995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00995");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMean();
        double double2 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic3 = summaryStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getVarianceImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic3);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
    }

    @Test
    public void test00996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00996");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.increment((double) '#');
        double double4 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance6.increment((double) (byte) 100);
        boolean boolean9 = variance6.isBiasCorrected();
        boolean boolean10 = variance1.equals((java.lang.Object) boolean9);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00997");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        summaryStatistics0.addValue(19.44d);
        double double9 = summaryStatistics0.getMax();
        double double10 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getGeoMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = summaryStatistics0.getSumImpl();
        double double13 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.clear();
        long long16 = secondMoment14.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long19 = variance18.getN();
        double[] doubleArray25 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double27 = variance18.evaluate(doubleArray25, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long33 = variance32.getN();
        double[] doubleArray39 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double41 = variance32.evaluate(doubleArray39, (double) 'a');
        mean30.incrementAll(doubleArray39);
        double double44 = variance18.evaluate(doubleArray39, (double) (byte) 1);
        secondMoment14.incrementAll(doubleArray39);
        secondMoment14.increment((double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementations must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 19.44d + "'", double9 == 19.44d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 19.43999999999942d + "'", double27 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 19.43999999999942d + "'", double41 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 19.44d + "'", double44 == 19.44d);
    }

    @Test
    public void test00998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00998");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int1 = empiricalDistributionImpl0.getBinCount();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        java.util.List list3 = empiricalDistributionImpl0.getBinStats();
        boolean boolean4 = empiricalDistributionImpl0.isLoaded();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1000 + "'", int1 == 1000);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test00999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00999");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        java.lang.Object obj4 = null;
        boolean boolean5 = summaryStatistics0.equals(obj4);
        summaryStatistics0.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics7 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics7.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean10 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean10.increment((double) (short) 100);
        geometricMean10.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = geometricMean10.getSumLogImpl();
        summaryStatistics7.setMinImpl(storelessUnivariateStatistic15);
        boolean boolean17 = summaryStatistics0.equals((java.lang.Object) storelessUnivariateStatistic15);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic18 = null;
        summaryStatistics0.setSumImpl(storelessUnivariateStatistic18);
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test01000");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = summaryStatistics0.getSummary();
        double double5 = summaryStatistics0.getMax();
        long long6 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic7 = null;
        summaryStatistics0.setGeoMeanImpl(storelessUnivariateStatistic7);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = summaryStatistics0.getGeoMeanImpl();
        double double10 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getSumsqImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(statisticalSummary4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test01001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01001");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        double double4 = summaryStatistics0.getSumOfLogs();
        java.lang.Throwable throwable7 = null;
        java.io.IOException iOException8 = new java.io.IOException("hi!", throwable7);
        java.io.IOException iOException9 = new java.io.IOException(throwable7);
        java.io.IOException iOException10 = new java.io.IOException("/hi!8130836485477920045:", (java.lang.Throwable) iOException9);
        boolean boolean11 = summaryStatistics0.equals((java.lang.Object) iOException9);
        java.lang.Throwable throwable12 = null;
        java.io.IOException iOException13 = new java.io.IOException(throwable12);
        java.lang.Throwable throwable16 = null;
        java.io.IOException iOException17 = new java.io.IOException("hi!", throwable16);
        java.io.IOException iOException18 = new java.io.IOException((java.lang.Throwable) iOException17);
        java.io.IOException iOException19 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException17);
        java.lang.Throwable throwable22 = null;
        java.io.IOException iOException23 = new java.io.IOException("hi!", throwable22);
        java.io.IOException iOException24 = new java.io.IOException(throwable22);
        java.io.IOException iOException25 = new java.io.IOException("/hi!8130836485477920045:", (java.lang.Throwable) iOException24);
        iOException19.addSuppressed((java.lang.Throwable) iOException25);
        iOException13.addSuppressed((java.lang.Throwable) iOException19);
        iOException9.addSuppressed((java.lang.Throwable) iOException19);
        java.lang.Throwable[] throwableArray29 = iOException9.getSuppressed();
        java.lang.Throwable throwable30 = null;
        // The following exception was thrown during execution in test generation
        try {
            iOException9.addSuppressed(throwable30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(throwableArray29);
    }

    @Test
    public void test01002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01002");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic3 = summaryStatistics0.getGeoMeanImpl();
        org.apache.commons.math.stat.descriptive.summary.Sum sum4 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long5 = sum4.getN();
        double double6 = sum4.getResult();
        sum4.clear();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum4);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = summaryStatistics0.getSumLogImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
    }

    @Test
    public void test01003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01003");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMax();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = summaryStatistics0.getSummary();
        double double6 = statisticalSummary5.getMin();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(statisticalSummary5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test01004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01004");
        java.io.File file5 = new java.io.File("");
        java.io.File file6 = java.io.File.createTempFile("hi!", ":", file5);
        long long7 = file6.lastModified();
        file6.deleteOnExit();
        java.net.URI uRI9 = file6.toURI();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file10 = java.io.File.createTempFile("/hi!8858262046242226862:", "/hi!654359468468072227:", file6);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /hi!8768935556951976047:/hi!8858262046242226862:4941509484879624151/hi!654359468468072227:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/hi!8768935556951976047:");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645454111000L + "'", long7 == 1645454111000L);
        org.junit.Assert.assertNotNull(uRI9);
    }

    @Test
    public void test01005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01005");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getPath();
        java.net.URLStreamHandler uRLStreamHandler9 = null;
        java.net.URL uRL10 = new java.net.URL(uRL3, "/hi!8304360505110833158:", uRLStreamHandler9);
        java.net.URI uRI11 = uRL3.toURI();
        java.lang.String str12 = uRL3.getRef();
        java.lang.String str13 = uRL3.getFile();
        java.lang.String str14 = uRL3.getFile();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl15 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl15.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl15.getSampleStats();
        java.util.List list18 = empiricalDistributionImpl15.getBinStats();
        boolean boolean19 = uRL3.equals((java.lang.Object) empiricalDistributionImpl15);
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str7, "/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/hi!8304360505110833158:");
        org.junit.Assert.assertNotNull(uRI11);
        org.junit.Assert.assertNull(str12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str13, "/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str14, "/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNull(statisticalSummary17);
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01006");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        secondMoment0.increment((double) 1);
        long long4 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        long long7 = secondMoment0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test01007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01007");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment(0.0d);
        geometricMean0.clear();
        geometricMean0.clear();
        geometricMean0.increment(24.3d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics11 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double12 = summaryStatistics11.getMin();
        double double13 = summaryStatistics11.getStandardDeviation();
        double double14 = summaryStatistics11.getMean();
        double double15 = summaryStatistics11.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min16 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics11.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min16);
        double[] doubleArray18 = new double[] {};
        min16.incrementAll(doubleArray18);
        double double20 = secondMoment9.evaluate(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = geometricMean0.evaluate(doubleArray18, 2, (-6));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test01008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01008");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        java.util.List list3 = empiricalDistributionImpl0.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl0.getSampleStats();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertNull(statisticalSummary4);
    }

    @Test
    public void test01009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01009");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        java.util.List list1 = empiricalDistributionImpl0.getBinStats();
        java.io.File file4 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL5 = file4.toURL();
        java.lang.String str6 = uRL5.getAuthority();
        int int7 = uRL5.getPort();
        int int8 = uRL5.getDefaultPort();
        java.lang.String str9 = uRL5.getQuery();
        java.lang.String str10 = uRL5.getPath();
        // The following exception was thrown during execution in test generation
{ // flaky:         try {
// flaky:             empiricalDistributionImpl0.load(uRL5);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: URL file:/experiment/hi!2169115775229245488/hi! contains no data");
// flaky:         } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(list1);
        org.junit.Assert.assertEquals(file4.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file4.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL5);
// flaky:         org.junit.Assert.assertEquals(uRL5.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(str9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str10, "/experiment/hi!2169115775229245488/hi!");
    }

    @Test
    public void test01010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01010");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler6 = null;
        java.net.URL uRL7 = new java.net.URL(uRL3, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler6);
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        boolean boolean12 = uRL3.sameFile(uRL11);
        java.net.URL uRL14 = new java.net.URL(uRL11, "/hi!4129638666993068054:");
        java.lang.String str15 = uRL11.getQuery();
        java.lang.String str16 = uRL11.getQuery();
        java.net.URI uRI17 = uRL11.toURI();
        java.lang.String str18 = uRL11.toString();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(uRI17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str18, "file:/experiment/hi!2169115775229245488/hi!");
    }

    @Test
    public void test01011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01011");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long1 = sumOfSquares0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long6 = variance5.getN();
        double[] doubleArray12 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double14 = variance5.evaluate(doubleArray12, (double) 'a');
        double double18 = variance3.evaluate(doubleArray12, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double21 = sumOfSquares0.evaluate(doubleArray12, (int) (short) 1, 0);
        double double22 = sumOfSquares0.getResult();
        long long23 = sumOfSquares0.getN();
        sumOfSquares0.clear();
        long long25 = sumOfSquares0.getN();
        sumOfSquares0.increment((double) 1645454018000L);
        long long28 = sumOfSquares0.getN();
        double double29 = sumOfSquares0.getResult();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 19.43999999999942d + "'", double14 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2.7075189253523444E24d + "'", double29 == 2.7075189253523444E24d);
    }

    @Test
    public void test01012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01012");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        double double1 = max0.getResult();
        double[] doubleArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double5 = max0.evaluate(doubleArray2, 24, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
    }

    @Test
    public void test01013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01013");
        java.io.File file2 = new java.io.File("/hi!1050638282446274787:", "");
        boolean boolean3 = file2.mkdir();
        long long4 = file2.getFreeSpace();
        java.lang.String str5 = file2.toString();
        org.junit.Assert.assertEquals(file2.getParent(), "/");
        org.junit.Assert.assertEquals(file2.toString(), "/hi!1050638282446274787:");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 299098628096L + "'", long4 == 299098628096L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/hi!1050638282446274787:" + "'", str5, "/hi!1050638282446274787:");
    }

    @Test
    public void test01014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01014");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL1 = new java.net.URL("/hi!3899957486724203326:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no protocol: /hi!3899957486724203326:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01015");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.delete();
        java.lang.String str8 = file4.getParent();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!5123466255916488658:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/" + "'", str8, "/");
    }

    @Test
    public void test01016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01016");
        java.io.IOException iOException1 = new java.io.IOException("/hi!6173067966148684622:");
    }

    @Test
    public void test01017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01017");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        boolean boolean11 = summaryStatistics0.equals((java.lang.Object) "/hi!4378631836009589289:");
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01018");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        summaryStatistics0.addValue(19.44d);
        double double9 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics0.getMeanImpl();
        double double11 = summaryStatistics0.getVariance();
        double double12 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics13 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics13.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean14);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean16 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean16.increment((double) (short) 100);
        geometricMean16.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic21 = geometricMean16.getSumLogImpl();
        summaryStatistics13.setMinImpl(storelessUnivariateStatistic21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance24.increment((double) (byte) 100);
        java.io.File file29 = new java.io.File("/hi!4420905478953568698:", "/experiment/hi!2169115775229245488");
        boolean boolean30 = variance24.equals((java.lang.Object) "/hi!4420905478953568698:");
        boolean boolean31 = variance24.isBiasCorrected();
        summaryStatistics13.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance24);
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementations must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 19.44d + "'", double9 == 19.44d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 19.44d + "'", double12 == 19.44d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic21);
        org.junit.Assert.assertEquals(file29.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file29.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test01019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01019");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        boolean boolean10 = file1.setExecutable(true);
        boolean boolean11 = file1.exists();
        boolean boolean12 = file1.canRead();
        long long13 = file1.getUsableSpace();
        java.io.File file14 = file1.getCanonicalFile();
        java.nio.file.Path path15 = file14.toPath();
        boolean boolean16 = file14.exists();
        java.nio.file.Path path17 = file14.toPath();
        boolean boolean18 = file14.isAbsolute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(file14);
// flaky:         org.junit.Assert.assertEquals(file14.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/experiment");
        org.junit.Assert.assertNotNull(path15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(path17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test01020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01020");
        java.io.File file2 = java.io.File.createTempFile("hi!", "");
        boolean boolean4 = file2.setLastModified((long) '#');
        java.io.File file5 = file2.getCanonicalFile();
        boolean boolean7 = file2.setWritable(true);
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/hi!1254682667819501710");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/tmp/hi!1254682667819501710");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test01021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01021");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl2 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int3 = empiricalDistributionImpl2.getBinCount();
        boolean boolean4 = empiricalDistributionImpl2.isLoaded();
        java.util.List list5 = empiricalDistributionImpl2.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean6 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean6.increment((double) (short) 100);
        geometricMean6.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = geometricMean6.getSumLogImpl();
        long long12 = geometricMean6.getN();
        double double13 = geometricMean6.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics14 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double15 = summaryStatistics14.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min16 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics14.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min16);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean18 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean18.increment((double) (short) 100);
        geometricMean18.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long25 = variance24.getN();
        double[] doubleArray31 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double33 = variance24.evaluate(doubleArray31, (double) 'a');
        double double34 = geometricMean18.evaluate(doubleArray31);
        min16.incrementAll(doubleArray31);
        geometricMean6.incrementAll(doubleArray31);
        empiricalDistributionImpl2.load(doubleArray31);
        empiricalDistributionImpl0.load(doubleArray31);
        java.io.File file41 = new java.io.File("hi!2169115775229245488", "");
        boolean boolean42 = file41.canRead();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file41);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: hi!2169115775229245488 (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2L + "'", long12 == 2L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 19.43999999999942d + "'", double33 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2.51188643150958d + "'", double34 == 2.51188643150958d);
        org.junit.Assert.assertNull("file41.getParent() == null", file41.getParent());
        org.junit.Assert.assertEquals(file41.toString(), "hi!2169115775229245488");
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test01022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01022");
        java.io.IOException iOException1 = new java.io.IOException("/hi!1995299374527999331:");
        java.lang.Throwable[] throwableArray2 = iOException1.getSuppressed();
        java.lang.String str3 = iOException1.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.io.IOException: /hi!1995299374527999331:" + "'", str3, "java.io.IOException: /hi!1995299374527999331:");
    }

    @Test
    public void test01023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01023");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        boolean boolean11 = file1.setExecutable(false);
        long long12 = file1.getTotalSpace();
        java.io.File file16 = new java.io.File("");
        java.io.File file17 = java.io.File.createTempFile("hi!", ":", file16);
        boolean boolean19 = file17.setWritable(true);
        boolean boolean20 = file17.canExecute();
        java.io.File file22 = new java.io.File("");
        boolean boolean25 = file22.setWritable(true, true);
        boolean boolean26 = file22.setReadOnly();
        boolean boolean29 = file22.setWritable(true, false);
        java.net.URI uRI30 = file22.toURI();
        boolean boolean31 = file22.mkdir();
        java.io.File file32 = file22.getCanonicalFile();
        boolean boolean33 = file17.renameTo(file22);
        boolean boolean36 = file22.setWritable(true, true);
        boolean boolean37 = file22.canRead();
        boolean boolean38 = file22.canExecute();
        java.lang.String str39 = file22.getCanonicalPath();
        int int40 = file1.compareTo(file22);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNull("file16.getParent() == null", file16.getParent());
        org.junit.Assert.assertEquals(file16.toString(), "");
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file17.toString(), "/hi!8422263643971315301:");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull("file22.getParent() == null", file22.getParent());
        org.junit.Assert.assertEquals(file22.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(uRI30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(file32);
// flaky:         org.junit.Assert.assertEquals(file32.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file32.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "/experiment" + "'", str39, "/experiment");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test01024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01024");
        java.io.File file2 = java.io.File.createTempFile("/hi!3773348476178109447:", "hi!6147520189804127628:");
        long long3 = file2.getUsableSpace();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/hi!3773348476178109447:494474526428562831hi!6147520189804127628:");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 280499515392L + "'", long3 == 280499515392L);
    }

    @Test
    public void test01025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01025");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.canExecute();
        long long8 = file4.getFreeSpace();
        boolean boolean10 = file4.setLastModified((long) 10);
        java.io.File file12 = new java.io.File("");
        boolean boolean15 = file12.setWritable(true, true);
        boolean boolean16 = file12.setReadOnly();
        boolean boolean19 = file12.setWritable(true, false);
        java.net.URI uRI20 = file12.toURI();
        boolean boolean21 = file12.mkdir();
        java.io.File file22 = file12.getCanonicalFile();
        boolean boolean23 = file22.canRead();
        boolean boolean24 = file4.renameTo(file22);
        java.io.File file25 = file4.getParentFile();
        java.lang.String str26 = file25.getPath();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!7990643218422142716:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 299098619904L + "'", long8 == 299098619904L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull("file12.getParent() == null", file12.getParent());
        org.junit.Assert.assertEquals(file12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(uRI20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(file22);
// flaky:         org.junit.Assert.assertEquals(file22.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file22.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertNull("file25.getParent() == null", file25.getParent());
        org.junit.Assert.assertEquals(file25.toString(), "/");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "/" + "'", str26, "/");
    }

    @Test
    public void test01026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01026");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.lang.String str9 = file1.getName();
        java.io.File file10 = file1.getCanonicalFile();
        boolean boolean12 = file1.setLastModified(299098718208L);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = file1.createNewFile();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No such file or directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(file10);
// flaky:         org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01027");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double19 = geometricMean3.evaluate(doubleArray16);
        empiricalDistributionImpl0.load(doubleArray16);
        java.io.File file23 = java.io.File.createTempFile("hi!", "");
        boolean boolean25 = file23.setLastModified((long) '#');
        java.io.File file26 = file23.getCanonicalFile();
        empiricalDistributionImpl0.load(file23);
        double[] doubleArray28 = empiricalDistributionImpl0.getUpperBounds();
        java.util.List list29 = empiricalDistributionImpl0.getBinStats();
        java.io.File file31 = new java.io.File("");
        boolean boolean34 = file31.setWritable(true, true);
        boolean boolean35 = file31.setReadOnly();
        boolean boolean38 = file31.setWritable(true, false);
        java.net.URI uRI39 = file31.toURI();
        boolean boolean40 = file31.mkdir();
        java.io.File file41 = file31.getAbsoluteFile();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file41);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /experiment (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.51188643150958d + "'", double19 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file23.toString(), "/tmp/hi!714364372857106412");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/tmp/hi!714364372857106412");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNull("file31.getParent() == null", file31.getParent());
        org.junit.Assert.assertEquals(file31.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(uRI39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(file41);
// flaky:         org.junit.Assert.assertEquals(file41.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file41.toString(), "/experiment");
    }

    @Test
    public void test01028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01028");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("/hi!4833017334119786469:", "/hi!4902629864105712484:");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/hi!4833017334119786469:4290913030038340120/hi!4902629864105712484:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01029");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) (-1L));
        geometricMean0.increment((double) (byte) 100);
        geometricMean0.increment((double) 1645454026000L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long11 = variance10.getN();
        double[] doubleArray17 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double19 = variance10.evaluate(doubleArray17, (double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            double double22 = geometricMean0.evaluate(doubleArray17, 0, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 19.43999999999942d + "'", double19 == 19.43999999999942d);
    }

    @Test
    public void test01030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01030");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double19 = geometricMean3.evaluate(doubleArray16);
        empiricalDistributionImpl0.load(doubleArray16);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file25 = new java.io.File("");
        java.io.File file26 = java.io.File.createTempFile("hi!", ":", file25);
        java.lang.String str27 = file26.getCanonicalPath();
        boolean boolean29 = file26.setExecutable(false);
        boolean boolean31 = file26.setWritable(true);
        boolean boolean32 = file26.mkdirs();
        boolean boolean35 = file26.setExecutable(true, false);
        empiricalDistributionImpl0.load(file26);
        java.io.File file37 = file26.getParentFile();
        boolean boolean40 = file26.setReadable(false, true);
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.51188643150958d + "'", double19 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNull("file25.getParent() == null", file25.getParent());
        org.junit.Assert.assertEquals(file25.toString(), "");
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/hi!4430024561513440915:");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "/hi!4430024561513440915:" + "'", str27, "/hi!4430024561513440915:");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertNull("file37.getParent() == null", file37.getParent());
        org.junit.Assert.assertEquals(file37.toString(), "/");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test01031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01031");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler6 = null;
        java.net.URL uRL7 = new java.net.URL(uRL3, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler6);
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        boolean boolean12 = uRL3.sameFile(uRL11);
        java.io.File file15 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL16 = file15.toURL();
        java.lang.String str17 = uRL16.getAuthority();
        java.lang.String str18 = uRL16.getUserInfo();
        int int19 = uRL16.getDefaultPort();
        java.lang.String str20 = uRL16.getUserInfo();
        java.io.File file23 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL24 = file23.toURL();
        java.lang.String str25 = uRL24.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler27 = null;
        java.net.URL uRL28 = new java.net.URL(uRL24, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler27);
        boolean boolean29 = uRL16.sameFile(uRL28);
        boolean boolean30 = uRL11.sameFile(uRL28);
        java.lang.String str31 = uRL11.getPath();
        java.net.Proxy proxy32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection33 = uRL11.openConnection(proxy32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(file15.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file15.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL16);
// flaky:         org.junit.Assert.assertEquals(uRL16.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file23.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL24);
// flaky:         org.junit.Assert.assertEquals(uRL24.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(uRL28.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str31, "/experiment/hi!2169115775229245488/hi!");
    }

    @Test
    public void test01032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01032");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL3 = new java.net.URL("/hi!8858262046242226862:", "hi!4533436540036848542:", "/hi!6147520189804127628:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!8858262046242226862:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01033");
        java.io.File file1 = new java.io.File("");
        boolean boolean3 = file1.setReadable(true);
        long long4 = file1.lastModified();
        java.io.File file6 = new java.io.File(file1, "/hi!8130836485477920045:");
        boolean boolean8 = file6.setExecutable(true);
        boolean boolean9 = file6.setReadOnly();
        java.io.File file11 = new java.io.File(file6, "/hi!7974603651672147098:");
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
        org.junit.Assert.assertEquals(file6.toString(), "/hi!8130836485477920045:");
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals(file11.getParent(), "/hi!8130836485477920045:");
        org.junit.Assert.assertEquals(file11.toString(), "/hi!8130836485477920045:/hi!7974603651672147098:");
    }

    @Test
    public void test01034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01034");
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException("hi!", throwable3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException4);
        java.lang.Throwable throwable9 = null;
        java.io.IOException iOException10 = new java.io.IOException("hi!", throwable9);
        java.io.IOException iOException11 = new java.io.IOException(throwable9);
        java.io.IOException iOException12 = new java.io.IOException("/hi!8130836485477920045:", (java.lang.Throwable) iOException11);
        iOException6.addSuppressed((java.lang.Throwable) iOException12);
        java.lang.Throwable throwable15 = null;
        java.io.IOException iOException16 = new java.io.IOException("hi!", throwable15);
        java.lang.Throwable throwable18 = null;
        java.io.IOException iOException19 = new java.io.IOException("hi!", throwable18);
        java.io.IOException iOException20 = new java.io.IOException(throwable18);
        java.lang.Throwable throwable23 = null;
        java.io.IOException iOException24 = new java.io.IOException("hi!", throwable23);
        java.io.IOException iOException25 = new java.io.IOException((java.lang.Throwable) iOException24);
        java.io.IOException iOException26 = new java.io.IOException("hi!2169115775229245488", (java.lang.Throwable) iOException25);
        iOException20.addSuppressed((java.lang.Throwable) iOException25);
        iOException16.addSuppressed((java.lang.Throwable) iOException25);
        java.lang.Throwable throwable30 = null;
        java.io.IOException iOException31 = new java.io.IOException("hi!", throwable30);
        java.io.IOException iOException32 = new java.io.IOException(throwable30);
        java.lang.Throwable throwable35 = null;
        java.io.IOException iOException36 = new java.io.IOException("hi!", throwable35);
        java.io.IOException iOException37 = new java.io.IOException((java.lang.Throwable) iOException36);
        java.io.IOException iOException38 = new java.io.IOException("hi!2169115775229245488", (java.lang.Throwable) iOException37);
        iOException32.addSuppressed((java.lang.Throwable) iOException37);
        java.lang.Throwable throwable42 = null;
        java.io.IOException iOException43 = new java.io.IOException("hi!", throwable42);
        java.io.IOException iOException44 = new java.io.IOException((java.lang.Throwable) iOException43);
        java.io.IOException iOException45 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException43);
        iOException32.addSuppressed((java.lang.Throwable) iOException45);
        iOException25.addSuppressed((java.lang.Throwable) iOException32);
        java.lang.Throwable[] throwableArray48 = iOException25.getSuppressed();
        iOException6.addSuppressed((java.lang.Throwable) iOException25);
        java.io.IOException iOException50 = new java.io.IOException("/hi!8585273558777411375:", (java.lang.Throwable) iOException25);
        java.lang.Throwable throwable53 = null;
        java.io.IOException iOException54 = new java.io.IOException("hi!", throwable53);
        java.io.IOException iOException55 = new java.io.IOException((java.lang.Throwable) iOException54);
        java.io.IOException iOException56 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException54);
        java.io.IOException iOException57 = new java.io.IOException((java.lang.Throwable) iOException54);
        iOException50.addSuppressed((java.lang.Throwable) iOException57);
        java.lang.String str59 = iOException57.toString();
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java.io.IOException: java.io.IOException: hi!" + "'", str59, "java.io.IOException: java.io.IOException: hi!");
    }

    @Test
    public void test01035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01035");
        java.io.IOException iOException1 = new java.io.IOException("/hi!6147520189804127628:");
    }

    @Test
    public void test01036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01036");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean1.increment((double) (short) 100);
        geometricMean1.increment((double) (-1L));
        geometricMean1.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean8 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean8.increment((double) (short) 100);
        geometricMean8.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        double double24 = geometricMean8.evaluate(doubleArray21);
        double double25 = geometricMean1.evaluate(doubleArray21);
        double double28 = sum0.evaluate(doubleArray21, 0, 0);
        sum0.increment((double) 1645454026000L);
        sum0.clear();
        sum0.increment((double) (-3));
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics34 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double35 = summaryStatistics34.getMin();
        double double36 = summaryStatistics34.getStandardDeviation();
        double double37 = summaryStatistics34.getMean();
        double double38 = summaryStatistics34.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double41 = secondMoment40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment40);
        summaryStatistics34.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment40);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        summaryStatistics34.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance45);
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean47.increment((double) 0);
        double double50 = mean47.getResult();
        mean47.clear();
        double[] doubleArray52 = new double[] {};
        mean47.incrementAll(doubleArray52);
        double double54 = variance45.evaluate(doubleArray52);
        double double55 = sum0.evaluate(doubleArray52);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl56 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary57 = empiricalDistributionImpl56.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary58 = empiricalDistributionImpl56.getSampleStats();
        int int59 = empiricalDistributionImpl56.getBinCount();
        java.util.List list60 = empiricalDistributionImpl56.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl61 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary62 = empiricalDistributionImpl61.getSampleStats();
        java.io.File file66 = new java.io.File("");
        java.io.File file67 = java.io.File.createTempFile("hi!", ":", file66);
        java.lang.String str68 = file67.getCanonicalPath();
        boolean boolean69 = file67.createNewFile();
        empiricalDistributionImpl61.load(file67);
        boolean boolean71 = empiricalDistributionImpl61.isLoaded();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics72 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double73 = summaryStatistics72.getMin();
        double double74 = summaryStatistics72.getStandardDeviation();
        double double75 = summaryStatistics72.getMean();
        double double76 = summaryStatistics72.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double79 = secondMoment78.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment78);
        summaryStatistics72.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment78);
        org.apache.commons.math.stat.descriptive.moment.Variance variance83 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        summaryStatistics72.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance83);
        org.apache.commons.math.stat.descriptive.moment.Mean mean85 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean85.increment((double) 0);
        double double88 = mean85.getResult();
        mean85.clear();
        double[] doubleArray90 = new double[] {};
        mean85.incrementAll(doubleArray90);
        double double92 = variance83.evaluate(doubleArray90);
        empiricalDistributionImpl61.load(doubleArray90);
        empiricalDistributionImpl56.load(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = sum0.evaluate(doubleArray90, (int) '#', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2.51188643150958d + "'", double24 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2.51188643150958d + "'", double25 == 2.51188643150958d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNull(statisticalSummary57);
        org.junit.Assert.assertNull(statisticalSummary58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1000 + "'", int59 == 1000);
        org.junit.Assert.assertNotNull(list60);
        org.junit.Assert.assertNull(statisticalSummary62);
        org.junit.Assert.assertNull("file66.getParent() == null", file66.getParent());
        org.junit.Assert.assertEquals(file66.toString(), "");
        org.junit.Assert.assertNotNull(file67);
        org.junit.Assert.assertEquals(file67.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file67.toString(), "/hi!8568198745875506489:");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "/hi!8568198745875506489:" + "'", str68, "/hi!8568198745875506489:");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double92));
    }

    @Test
    public void test01037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01037");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean2.increment((double) 0);
        double double5 = mean2.getResult();
        long long6 = mean2.getN();
        mean2.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean2);
        double double9 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.clear();
        double double12 = secondMoment10.getResult();
        secondMoment10.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        variance15.setBiasCorrected(true);
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance15);
        double double19 = summaryStatistics0.getMin();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test01038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01038");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance3.increment(24.299999999999272d);
        boolean boolean7 = variance3.equals((java.lang.Object) 0.60030657367044d);
        variance3.clear();
        double double9 = variance3.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test01039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01039");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMax();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.Mean mean6 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean6.increment((double) 10.0f);
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean6);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares10 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long11 = sumOfSquares10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long16 = variance15.getN();
        double[] doubleArray22 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double24 = variance15.evaluate(doubleArray22, (double) 'a');
        double double28 = variance13.evaluate(doubleArray22, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double31 = sumOfSquares10.evaluate(doubleArray22, (int) (short) 1, 0);
        double double32 = sumOfSquares10.getResult();
        long long33 = sumOfSquares10.getN();
        sumOfSquares10.clear();
        long long35 = sumOfSquares10.getN();
        double double36 = sumOfSquares10.getResult();
        sumOfSquares10.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares10);
        double double39 = summaryStatistics0.getStandardDeviation();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 19.43999999999942d + "'", double24 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test01040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01040");
        java.io.File file3 = new java.io.File("java.io.IOException: hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file4 = java.io.File.createTempFile("/hi!6914064389442203092:", "hi!", file3);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No such file or directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "java.io.IOException: hi!");
    }

    @Test
    public void test01041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01041");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean2.increment((double) 0);
        double double5 = mean2.getResult();
        long long6 = mean2.getN();
        mean2.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean2);
        double double9 = summaryStatistics0.getMean();
        double double10 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min11 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min11.clear();
        double[] doubleArray18 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double19 = min11.evaluate(doubleArray18);
        long long20 = min11.getN();
        long long21 = min11.getN();
        min11.increment((double) 100.0f);
        long long24 = min11.getN();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min11);
        min11.increment(0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
    }

    @Test
    public void test01042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01042");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl2 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl2.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl4 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int5 = empiricalDistributionImpl4.getBinCount();
        boolean boolean6 = empiricalDistributionImpl4.isLoaded();
        java.util.List list7 = empiricalDistributionImpl4.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean8 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean8.increment((double) (short) 100);
        geometricMean8.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = geometricMean8.getSumLogImpl();
        long long14 = geometricMean8.getN();
        double double15 = geometricMean8.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics16 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double17 = summaryStatistics16.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min18 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics16.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min18);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean20 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean20.increment((double) (short) 100);
        geometricMean20.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long27 = variance26.getN();
        double[] doubleArray33 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double35 = variance26.evaluate(doubleArray33, (double) 'a');
        double double36 = geometricMean20.evaluate(doubleArray33);
        min18.incrementAll(doubleArray33);
        geometricMean8.incrementAll(doubleArray33);
        empiricalDistributionImpl4.load(doubleArray33);
        empiricalDistributionImpl2.load(doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            sum0.incrementAll(doubleArray33, (-11), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1000 + "'", int5 == 1000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(list7);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 19.43999999999942d + "'", double35 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2.51188643150958d + "'", double36 == 2.51188643150958d);
    }

    @Test
    public void test01043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01043");
        java.io.File file1 = new java.io.File("");
        boolean boolean3 = file1.setReadable(true);
        long long4 = file1.lastModified();
        java.io.File file6 = new java.io.File(file1, "/hi!8130836485477920045:");
        boolean boolean9 = file1.setExecutable(false, false);
        boolean boolean12 = file1.setExecutable(true, false);
        java.io.File file13 = file1.getParentFile();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = file13.setReadable(false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
        org.junit.Assert.assertEquals(file6.toString(), "/hi!8130836485477920045:");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(file13);
    }

    @Test
    public void test01044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01044");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs1 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        long long2 = sumOfLogs1.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean4.increment((double) 0);
        double double7 = mean4.getResult();
        long long8 = mean4.getN();
        mean4.clear();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = empiricalDistributionImpl10.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl12.getSampleStats();
        boolean boolean14 = empiricalDistributionImpl12.isLoaded();
        boolean boolean15 = empiricalDistributionImpl12.isLoaded();
        java.util.List list16 = empiricalDistributionImpl12.getBinStats();
        int int17 = empiricalDistributionImpl12.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl18 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long24 = variance23.getN();
        double[] doubleArray30 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double32 = variance23.evaluate(doubleArray30, (double) 'a');
        mean21.incrementAll(doubleArray30);
        empiricalDistributionImpl18.load(doubleArray30);
        empiricalDistributionImpl12.load(doubleArray30);
        empiricalDistributionImpl10.load(doubleArray30);
        double double37 = mean4.evaluate(doubleArray30);
        sumOfLogs1.incrementAll(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = mean0.evaluate(doubleArray30, (int) (short) 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNull(statisticalSummary11);
        org.junit.Assert.assertNull(statisticalSummary13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(list16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1000 + "'", int17 == 1000);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 19.43999999999942d + "'", double32 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 4.6d + "'", double37 == 4.6d);
    }

    @Test
    public void test01045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01045");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.clear();
        secondMoment1.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        long long6 = variance5.getN();
        variance5.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics9 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double10 = summaryStatistics9.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean11.increment((double) 0);
        double double14 = mean11.getResult();
        long long15 = mean11.getN();
        mean11.clear();
        summaryStatistics9.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean11);
        double double18 = summaryStatistics9.getMean();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean19 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean19.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long24 = variance23.getN();
        double[] doubleArray30 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double32 = variance23.evaluate(doubleArray30, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long38 = variance37.getN();
        double[] doubleArray44 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double46 = variance37.evaluate(doubleArray44, (double) 'a');
        mean35.incrementAll(doubleArray44);
        double double49 = variance23.evaluate(doubleArray44, (double) (byte) 1);
        geometricMean19.incrementAll(doubleArray44);
        summaryStatistics9.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long54 = variance53.getN();
        double[] doubleArray60 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double62 = variance53.evaluate(doubleArray60, (double) 'a');
        variance53.clear();
        double[] doubleArray67 = new double[] { (byte) 0, (short) 0, 299098734592L };
        double double69 = variance53.evaluate(doubleArray67, (double) 1);
        double double70 = geometricMean19.evaluate(doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            variance5.incrementAll(doubleArray67, (-50), (int) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 19.43999999999942d + "'", double32 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 19.43999999999942d + "'", double46 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 19.44d + "'", double49 == 19.44d);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 19.43999999999942d + "'", double62 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 0.0, 2.99098734592E11]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.988001178545237E22d + "'", double69 == 1.988001178545237E22d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
    }

    @Test
    public void test01046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01046");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean2.increment((double) 0);
        double double5 = mean2.getResult();
        long long6 = mean2.getN();
        mean2.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean2);
        double double9 = summaryStatistics0.getSumOfLogs();
        double double10 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics11 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double12 = summaryStatistics11.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics11.getMeanImpl();
        boolean boolean14 = summaryStatistics0.equals((java.lang.Object) storelessUnivariateStatistic13);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double17 = secondMoment16.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment16);
        secondMoment16.increment((double) 0.0f);
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment16);
        double double22 = summaryStatistics0.getSum();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test01047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01047");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.net.URL uRL7 = new java.net.URL(uRL3, "hi!2169115775229245488");
        java.net.URI uRI8 = uRL7.toURI();
        java.lang.String str9 = uRL7.getAuthority();
        java.lang.String str10 = uRL7.getHost();
        java.net.Proxy proxy11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection12 = uRL7.openConnection(proxy11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!2169115775229245488");
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test01048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01048");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean2.increment((double) (short) 100);
        geometricMean2.increment(0.0d);
        geometricMean2.clear();
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean2);
        geometricMean2.increment((double) 3L);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares11 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long12 = sumOfSquares11.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long17 = variance16.getN();
        double[] doubleArray23 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double25 = variance16.evaluate(doubleArray23, (double) 'a');
        double double29 = variance14.evaluate(doubleArray23, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double32 = sumOfSquares11.evaluate(doubleArray23, (int) (short) 1, 0);
        sumOfSquares11.increment(0.0d);
        sumOfSquares11.clear();
        sumOfSquares11.clear();
        // The following exception was thrown during execution in test generation
        try {
            geometricMean2.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementation must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 19.43999999999942d + "'", double25 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
    }

    @Test
    public void test01049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01049");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int1 = empiricalDistributionImpl0.getBinCount();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        int int3 = empiricalDistributionImpl0.getBinCount();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1000 + "'", int1 == 1000);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000);
    }

    @Test
    public void test01050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01050");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        boolean boolean10 = file1.mkdir();
        java.io.File file11 = file1.getCanonicalFile();
        boolean boolean12 = file11.canRead();
        java.nio.file.Path path13 = file11.toPath();
        java.lang.String str14 = file11.getAbsolutePath();
        java.io.File file16 = new java.io.File("/hi!4533436540036848542:");
        boolean boolean18 = file16.setReadable(true);
        long long19 = file16.getFreeSpace();
        long long20 = file16.lastModified();
        boolean boolean23 = file16.setExecutable(false, false);
        java.lang.String str24 = file16.getPath();
        java.io.File file25 = file16.getAbsoluteFile();
        int int26 = file11.compareTo(file16);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(file11);
// flaky:         org.junit.Assert.assertEquals(file11.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(path13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "/experiment" + "'", str14, "/experiment");
        org.junit.Assert.assertEquals(file16.getParent(), "/");
        org.junit.Assert.assertEquals(file16.toString(), "/hi!4533436540036848542:");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 299098632192L + "'", long19 == 299098632192L);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645454106000L + "'", long20 == 1645454106000L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "/hi!4533436540036848542:" + "'", str24, "/hi!4533436540036848542:");
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/");
        org.junit.Assert.assertEquals(file25.toString(), "/hi!4533436540036848542:");
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
    }

    @Test
    public void test01051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01051");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getVarianceImpl();
        java.lang.String str12 = summaryStatistics0.toString();
        double double13 = summaryStatistics0.getSum();
        double double14 = summaryStatistics0.getSumOfLogs();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "SummaryStatistics:\nn: 0\nmin: -Infinity\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str12, "SummaryStatistics:\nn: 0\nmin: -Infinity\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test01052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01052");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long1 = sumOfSquares0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long6 = variance5.getN();
        double[] doubleArray12 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double14 = variance5.evaluate(doubleArray12, (double) 'a');
        double double18 = variance3.evaluate(doubleArray12, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double21 = sumOfSquares0.evaluate(doubleArray12, (int) (short) 1, 0);
        double double22 = sumOfSquares0.getResult();
        long long23 = sumOfSquares0.getN();
        sumOfSquares0.clear();
        sumOfSquares0.increment((double) (short) 100);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl27.getSampleStats();
        java.io.File file32 = new java.io.File("");
        java.io.File file33 = java.io.File.createTempFile("hi!", ":", file32);
        java.lang.String str34 = file33.getCanonicalPath();
        boolean boolean35 = file33.createNewFile();
        empiricalDistributionImpl27.load(file33);
        double[] doubleArray37 = empiricalDistributionImpl27.getUpperBounds();
        double[] doubleArray38 = empiricalDistributionImpl27.getUpperBounds();
        sumOfSquares0.incrementAll(doubleArray38);
        long long40 = sumOfSquares0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long46 = variance45.getN();
        double[] doubleArray52 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double54 = variance45.evaluate(doubleArray52, (double) 'a');
        mean43.incrementAll(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = sumOfSquares0.evaluate(doubleArray52, 2, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 19.43999999999942d + "'", double14 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNull("file32.getParent() == null", file32.getParent());
        org.junit.Assert.assertEquals(file32.toString(), "");
        org.junit.Assert.assertNotNull(file33);
        org.junit.Assert.assertEquals(file33.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file33.toString(), "/hi!5207108866145912725:");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "/hi!5207108866145912725:" + "'", str34, "/hi!5207108866145912725:");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1001L + "'", long40 == 1001L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 19.43999999999942d + "'", double54 == 19.43999999999942d);
    }

    @Test
    public void test01053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01053");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        java.lang.String str5 = file4.getCanonicalPath();
        boolean boolean7 = file4.setExecutable(false);
        boolean boolean9 = file4.setWritable(true);
        boolean boolean10 = file4.mkdirs();
        boolean boolean13 = file4.setExecutable(true, false);
        java.io.File file14 = file4.getAbsoluteFile();
        long long15 = file14.getTotalSpace();
        java.io.File file17 = new java.io.File("");
        boolean boolean20 = file17.setWritable(true, true);
        boolean boolean21 = file17.setReadOnly();
        boolean boolean24 = file17.setWritable(true, false);
        java.net.URI uRI25 = file17.toURI();
        java.io.File file26 = new java.io.File(uRI25);
        java.io.File file27 = new java.io.File(uRI25);
        int int28 = file14.compareTo(file27);
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!8765074542702220579:");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/hi!8765074542702220579:" + "'", str5, "/hi!8765074542702220579:");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/hi!8765074542702220579:");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 364740218880L + "'", long15 == 364740218880L);
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(uRI25);
// flaky:         org.junit.Assert.assertEquals(file26.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file27.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file27.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
    }

    @Test
    public void test01054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01054");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics1 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean2.clear();
        summaryStatistics1.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.clear();
        long long7 = secondMoment5.getN();
        secondMoment5.clear();
        double double9 = secondMoment5.getResult();
        summaryStatistics1.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment5);
        double double12 = secondMoment5.getResult();
        org.junit.Assert.assertNotNull(summaryStatistics1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test01055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01055");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean1.increment((double) (short) 100);
        geometricMean1.increment((double) (-1L));
        geometricMean1.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean8 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean8.increment((double) (short) 100);
        geometricMean8.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        double double24 = geometricMean8.evaluate(doubleArray21);
        double double25 = geometricMean1.evaluate(doubleArray21);
        double double28 = sum0.evaluate(doubleArray21, 0, 0);
        sum0.increment((double) 1645454026000L);
        sum0.clear();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int33 = empiricalDistributionImpl32.getBinCount();
        boolean boolean34 = empiricalDistributionImpl32.isLoaded();
        int int35 = empiricalDistributionImpl32.getBinCount();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean36.increment((double) 0);
        double double39 = mean36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean40.increment((double) 0);
        double double43 = mean40.getResult();
        mean40.clear();
        double[] doubleArray45 = new double[] {};
        mean40.incrementAll(doubleArray45);
        double double47 = mean36.evaluate(doubleArray45);
        empiricalDistributionImpl32.load(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            double double51 = sum0.evaluate(doubleArray45, (-1), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2.51188643150958d + "'", double24 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2.51188643150958d + "'", double25 == 2.51188643150958d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1000 + "'", int33 == 1000);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1000 + "'", int35 == 1000);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
    }

    @Test
    public void test01056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01056");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min0.clear();
        double[] doubleArray7 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double8 = min0.evaluate(doubleArray7);
        long long9 = min0.getN();
        long long10 = min0.getN();
        min0.increment((double) 100.0f);
        long long13 = min0.getN();
        org.apache.commons.math.stat.descriptive.rank.Min min14 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min14.clear();
        double[] doubleArray21 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double22 = min14.evaluate(doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = min0.evaluate(doubleArray21, 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
    }

    @Test
    public void test01057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01057");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("/hi!8911907902090116871:", "/hi!2519542467229659542:", (int) (byte) 10, "java.io.IOException: java.io.IOException: hi!", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!8911907902090116871:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01058");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int1 = empiricalDistributionImpl0.getBinCount();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics2 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics2.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean3);
        java.io.File file6 = new java.io.File("");
        java.lang.String str7 = file6.getParent();
        boolean boolean8 = summaryStatistics2.equals((java.lang.Object) file6);
        long long9 = file6.getFreeSpace();
        java.io.File file11 = new java.io.File(file6, "/hi!3523803642448568020:");
        boolean boolean14 = file6.setExecutable(false, true);
        long long15 = file6.length();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file6);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1000 + "'", int1 == 1000);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals(file11.getParent(), "/");
        org.junit.Assert.assertEquals(file11.toString(), "/hi!3523803642448568020:");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test01059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01059");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        long long2 = sum0.getN();
        sum0.clear();
        sum0.increment((double) 1645454035000L);
        long long6 = sum0.getN();
        sum0.clear();
        double double8 = sum0.getResult();
        long long9 = sum0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double11 = secondMoment10.getResult();
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        long long14 = variance13.getN();
        variance13.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares17 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long18 = sumOfSquares17.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long23 = variance22.getN();
        double[] doubleArray29 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double31 = variance22.evaluate(doubleArray29, (double) 'a');
        double double35 = variance20.evaluate(doubleArray29, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double38 = sumOfSquares17.evaluate(doubleArray29, (int) (short) 1, 0);
        double double39 = variance13.evaluate(doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            double double42 = sum0.evaluate(doubleArray29, (-50), (int) ':');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 19.43999999999942d + "'", double31 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 24.3d + "'", double39 == 24.3d);
    }

    @Test
    public void test01060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01060");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        java.io.File file5 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL6 = file5.toURL();
        java.net.URI uRI7 = uRL6.toURI();
        java.lang.String str8 = uRL6.getUserInfo();
        java.lang.String str9 = uRL6.getFile();
        java.lang.String str10 = uRL6.getAuthority();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(uRL6);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /experiment/hi!2169115775229245488/hi! (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(file5.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file5.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL6);
// flaky:         org.junit.Assert.assertEquals(uRL6.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertNull(str8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str9, "/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test01061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01061");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getGeoMeanImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics3 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        summaryStatistics3.clear();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics3.getGeoMeanImpl();
        summaryStatistics0.setMaxImpl(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
    }

    @Test
    public void test01062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01062");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.lang.String str5 = uRL3.getUserInfo();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getAuthority();
        java.lang.String str8 = uRL3.getAuthority();
        java.lang.String str9 = uRL3.getPath();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str9, "/experiment/hi!2169115775229245488/hi!");
    }

    @Test
    public void test01063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01063");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long6 = mean5.getN();
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean5);
        mean5.increment((double) (-27));
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance11.increment((double) (byte) 100);
        boolean boolean14 = variance11.isBiasCorrected();
        long long15 = variance11.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics16 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double17 = summaryStatistics16.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min18 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics16.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min18);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic20 = summaryStatistics16.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = summaryStatistics16.getSummary();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic22 = summaryStatistics16.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic23 = summaryStatistics16.getGeoMeanImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares24 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long25 = sumOfSquares24.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long30 = variance29.getN();
        double[] doubleArray36 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double38 = variance29.evaluate(doubleArray36, (double) 'a');
        double double42 = variance27.evaluate(doubleArray36, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double45 = sumOfSquares24.evaluate(doubleArray36, (int) (short) 1, 0);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics46 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double47 = summaryStatistics46.getMin();
        double double48 = summaryStatistics46.getStandardDeviation();
        double double49 = summaryStatistics46.getMean();
        double double50 = summaryStatistics46.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min51 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics46.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min51);
        double[] doubleArray53 = new double[] {};
        min51.incrementAll(doubleArray53);
        double double55 = sumOfSquares24.evaluate(doubleArray53);
        storelessUnivariateStatistic23.incrementAll(doubleArray53);
        double double57 = variance11.evaluate(doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            double double60 = mean5.evaluate(doubleArray53, (-3), 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic20);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic22);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 19.43999999999942d + "'", double38 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
    }

    @Test
    public void test01064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01064");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.canExecute();
        java.io.File file9 = new java.io.File("");
        boolean boolean12 = file9.setWritable(true, true);
        boolean boolean13 = file9.setReadOnly();
        boolean boolean16 = file9.setWritable(true, false);
        java.net.URI uRI17 = file9.toURI();
        boolean boolean18 = file9.mkdir();
        java.io.File file19 = file9.getCanonicalFile();
        boolean boolean20 = file4.renameTo(file9);
        boolean boolean23 = file9.setWritable(true, true);
        boolean boolean24 = file9.canRead();
        java.lang.String str25 = file9.getAbsolutePath();
        java.lang.String str26 = file9.toString();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!5301211255024403219:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(uRI17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(file19);
// flaky:         org.junit.Assert.assertEquals(file19.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file19.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "/experiment" + "'", str25, "/experiment");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test01065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01065");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        double double2 = sumOfLogs0.getResult();
        sumOfLogs0.increment((double) (-27));
        double double5 = sumOfLogs0.getResult();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs6 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        sumOfLogs6.clear();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean8 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs6);
        org.apache.commons.math.stat.descriptive.summary.Sum sum9 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long10 = sum9.getN();
        double double11 = sum9.getResult();
        sum9.clear();
        sum9.clear();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long20 = variance19.getN();
        double[] doubleArray26 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double28 = variance19.evaluate(doubleArray26, (double) 'a');
        mean17.incrementAll(doubleArray26);
        empiricalDistributionImpl14.load(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long35 = variance34.getN();
        double[] doubleArray41 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double43 = variance34.evaluate(doubleArray41, (double) 'a');
        double double47 = variance32.evaluate(doubleArray41, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        empiricalDistributionImpl14.load(doubleArray41);
        double double51 = sum9.evaluate(doubleArray41, 1, 1);
        double double52 = geometricMean8.evaluate(doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            double double55 = sumOfLogs0.evaluate(doubleArray41, 47, 48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 19.43999999999942d + "'", double28 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 19.43999999999942d + "'", double43 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2.51188643150958d + "'", double52 == 2.51188643150958d);
    }

    @Test
    public void test01066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01066");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        boolean boolean11 = file1.setExecutable(true);
        boolean boolean13 = file1.setWritable(true);
        boolean boolean16 = file1.setExecutable(true, false);
        file1.deleteOnExit();
        boolean boolean18 = file1.setReadOnly();
        boolean boolean19 = file1.isHidden();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01067");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.net.URL uRL7 = new java.net.URL(uRL3, "hi!2169115775229245488");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics8 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double9 = summaryStatistics8.getMin();
        double double10 = summaryStatistics8.getStandardDeviation();
        double double11 = summaryStatistics8.getMean();
        double double12 = summaryStatistics8.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics8.getGeoMeanImpl();
        long long14 = summaryStatistics8.getN();
        boolean boolean15 = uRL7.equals((java.lang.Object) long14);
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!2169115775229245488");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test01068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01068");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.canExecute();
        java.io.File file9 = new java.io.File("");
        boolean boolean12 = file9.setWritable(true, true);
        boolean boolean13 = file9.setReadOnly();
        boolean boolean16 = file9.setWritable(true, false);
        java.net.URI uRI17 = file9.toURI();
        boolean boolean18 = file9.mkdir();
        java.io.File file19 = file9.getCanonicalFile();
        boolean boolean20 = file4.renameTo(file9);
        boolean boolean23 = file9.setWritable(true, true);
        boolean boolean24 = file9.canRead();
        boolean boolean25 = file9.canExecute();
        java.lang.String str26 = file9.getCanonicalPath();
        boolean boolean27 = file9.isHidden();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!2571937683652719781:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(uRI17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(file19);
// flaky:         org.junit.Assert.assertEquals(file19.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file19.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "/experiment" + "'", str26, "/experiment");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test01069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01069");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        double double2 = sumOfLogs0.getResult();
        sumOfLogs0.increment((double) (-27));
        double double5 = sumOfLogs0.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean6 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        long long7 = sumOfLogs0.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs8 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double9 = sumOfLogs8.getResult();
        double double10 = sumOfLogs8.getResult();
        double double11 = sumOfLogs8.getResult();
        double double12 = sumOfLogs8.getResult();
        long long13 = sumOfLogs8.getN();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl14 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl14.getSampleStats();
        boolean boolean16 = empiricalDistributionImpl14.isLoaded();
        boolean boolean17 = empiricalDistributionImpl14.isLoaded();
        java.util.List list18 = empiricalDistributionImpl14.getBinStats();
        int int19 = empiricalDistributionImpl14.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long26 = variance25.getN();
        double[] doubleArray32 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double34 = variance25.evaluate(doubleArray32, (double) 'a');
        mean23.incrementAll(doubleArray32);
        empiricalDistributionImpl20.load(doubleArray32);
        empiricalDistributionImpl14.load(doubleArray32);
        boolean boolean38 = empiricalDistributionImpl14.isLoaded();
        java.util.List list39 = empiricalDistributionImpl14.getBinStats();
        double[] doubleArray40 = empiricalDistributionImpl14.getUpperBounds();
        double double43 = sumOfLogs8.evaluate(doubleArray40, (int) (short) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double46 = sumOfLogs0.evaluate(doubleArray40, 1000, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1000 + "'", int19 == 1000);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 19.43999999999942d + "'", double34 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(list39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
    }

    @Test
    public void test01070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01070");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = summaryStatistics0.getSummary();
        double double5 = summaryStatistics0.getMax();
        long long6 = summaryStatistics0.getN();
        double double7 = summaryStatistics0.getStandardDeviation();
        summaryStatistics0.addValue(2.51188643150958d);
        double double10 = summaryStatistics0.getVariance();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(statisticalSummary4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test01071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01071");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long5 = variance4.getN();
        double[] doubleArray11 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double13 = variance4.evaluate(doubleArray11, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long19 = variance18.getN();
        double[] doubleArray25 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double27 = variance18.evaluate(doubleArray25, (double) 'a');
        mean16.incrementAll(doubleArray25);
        double double30 = variance4.evaluate(doubleArray25, (double) (byte) 1);
        geometricMean0.incrementAll(doubleArray25);
        geometricMean0.clear();
        org.apache.commons.math.stat.descriptive.summary.Sum sum33 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long34 = sum33.getN();
        double double35 = sum33.getResult();
        geometricMean0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum33);
        double double37 = sum33.getResult();
        long long38 = sum33.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean39.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double43 = secondMoment42.getResult();
        secondMoment42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment42);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment47);
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment52);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long57 = variance56.getN();
        double[] doubleArray63 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double65 = variance56.evaluate(doubleArray63, (double) 'a');
        mean54.incrementAll(doubleArray63);
        double double67 = variance51.evaluate(doubleArray63);
        double double68 = secondMoment42.evaluate(doubleArray63);
        mean39.incrementAll(doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            double double72 = sum33.evaluate(doubleArray63, 35, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 19.43999999999942d + "'", double13 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 19.43999999999942d + "'", double27 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 19.44d + "'", double30 == 19.44d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 19.43999999999942d + "'", double65 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 24.3d + "'", double67 == 24.3d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 97.2d + "'", double68 == 97.2d);
    }

    @Test
    public void test01072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01072");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double6 = secondMoment5.getResult();
        secondMoment5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment5);
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean9);
        double double11 = summaryStatistics0.getSum();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test01073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01073");
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException("hi!", throwable3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException4);
        java.lang.Throwable throwable9 = null;
        java.io.IOException iOException10 = new java.io.IOException("hi!", throwable9);
        java.io.IOException iOException11 = new java.io.IOException(throwable9);
        java.io.IOException iOException12 = new java.io.IOException("/hi!8130836485477920045:", (java.lang.Throwable) iOException11);
        iOException6.addSuppressed((java.lang.Throwable) iOException12);
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.io.IOException iOException15 = new java.io.IOException("/hi!6244728997591896465:", (java.lang.Throwable) iOException14);
        java.io.IOException iOException16 = new java.io.IOException((java.lang.Throwable) iOException14);
        java.lang.String str17 = iOException16.toString();
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.io.IOException: java.io.IOException: java.io.IOException: /hi!4533436540036848542:" + "'", str17, "java.io.IOException: java.io.IOException: java.io.IOException: /hi!4533436540036848542:");
    }

    @Test
    public void test01074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01074");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMax();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = summaryStatistics0.getSummary();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs6 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double7 = sumOfLogs6.getResult();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfLogs6);
        double[] doubleArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            sumOfLogs6.incrementAll(doubleArray9, 1000, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(statisticalSummary5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test01075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01075");
        java.io.File file2 = new java.io.File("/hi!2756764035548942023:", ":");
        java.io.File file3 = file2.getParentFile();
        java.io.File file5 = new java.io.File(file2, "/hi!8130836485477920045:");
        java.io.File file6 = file5.getCanonicalFile();
        long long7 = file6.lastModified();
        file6.deleteOnExit();
        boolean boolean9 = file6.isHidden();
        org.junit.Assert.assertEquals(file2.getParent(), "/hi!2756764035548942023:");
        org.junit.Assert.assertEquals(file2.toString(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/");
        org.junit.Assert.assertEquals(file3.toString(), "/hi!2756764035548942023:");
        org.junit.Assert.assertEquals(file5.getParent(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertEquals(file5.toString(), "/hi!2756764035548942023:/:/hi!8130836485477920045:");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertEquals(file6.toString(), "/hi!2756764035548942023:/:/hi!8130836485477920045:");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01076");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double19 = geometricMean3.evaluate(doubleArray16);
        empiricalDistributionImpl0.load(doubleArray16);
        java.io.File file23 = java.io.File.createTempFile("hi!", "");
        boolean boolean25 = file23.setLastModified((long) '#');
        java.io.File file26 = file23.getCanonicalFile();
        empiricalDistributionImpl0.load(file23);
        java.net.URI uRI28 = file23.toURI();
        java.io.File file29 = file23.getAbsoluteFile();
        java.net.URL uRL30 = file23.toURL();
        java.lang.String str31 = file23.getName();
        boolean boolean34 = file23.setExecutable(false, false);
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.51188643150958d + "'", double19 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file23.toString(), "/tmp/hi!4907096570172865581");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/tmp/hi!4907096570172865581");
        org.junit.Assert.assertNotNull(uRI28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file29.toString(), "/tmp/hi!4907096570172865581");
        org.junit.Assert.assertNotNull(uRL30);
// flaky:         org.junit.Assert.assertEquals(uRL30.toString(), "file:/tmp/hi!4907096570172865581");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!4907096570172865581" + "'", str31, "hi!4907096570172865581");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test01077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01077");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.lang.String str5 = uRL3.getQuery();
        java.lang.String str6 = uRL3.getAuthority();
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream7 = uRL3.openStream();
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /experiment/hi!2169115775229245488/hi! (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test01078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01078");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = geometricMean0.getSumLogImpl();
        geometricMean0.clear();
        long long7 = geometricMean0.getN();
        geometricMean0.increment((double) 299098718208L);
        geometricMean0.clear();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test01079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01079");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("/hi!3308917902506818979:", "/hi!8695361449339891175:", (-24), "file:/experiment/hi!2169115775229245488/hi!8754354838924134808:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: Invalid port number :-24");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01080");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.lang.String str5 = uRL3.getUserInfo();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getUserInfo();
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        java.lang.String str12 = uRL11.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler14 = null;
        java.net.URL uRL15 = new java.net.URL(uRL11, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler14);
        boolean boolean16 = uRL3.sameFile(uRL15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj17 = uRL3.getContent();
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /experiment/hi!2169115775229245488/hi! (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(uRL15.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test01081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01081");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getProtocol();
        java.lang.String str5 = uRL3.getQuery();
        java.lang.String str6 = uRL3.getHost();
        java.net.Proxy proxy7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection8 = uRL3.openConnection(proxy7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "file" + "'", str4, "file");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test01082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01082");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double19 = geometricMean3.evaluate(doubleArray16);
        empiricalDistributionImpl0.load(doubleArray16);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file25 = new java.io.File("");
        java.io.File file26 = java.io.File.createTempFile("hi!", ":", file25);
        java.lang.String str27 = file26.getCanonicalPath();
        boolean boolean29 = file26.setExecutable(false);
        boolean boolean31 = file26.setWritable(true);
        boolean boolean32 = file26.mkdirs();
        boolean boolean35 = file26.setExecutable(true, false);
        empiricalDistributionImpl0.load(file26);
        java.io.File file38 = new java.io.File("");
        boolean boolean41 = file38.setWritable(true, true);
        boolean boolean42 = file38.setReadOnly();
        boolean boolean45 = file38.setWritable(true, false);
        java.lang.String str46 = file38.getName();
        java.io.File file47 = file38.getCanonicalFile();
        int int48 = file26.compareTo(file47);
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.51188643150958d + "'", double19 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNull("file25.getParent() == null", file25.getParent());
        org.junit.Assert.assertEquals(file25.toString(), "");
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/hi!263942561679354528:");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "/hi!263942561679354528:" + "'", str27, "/hi!263942561679354528:");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull("file38.getParent() == null", file38.getParent());
        org.junit.Assert.assertEquals(file38.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(file47);
// flaky:         org.junit.Assert.assertEquals(file47.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file47.toString(), "/experiment");
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
    }

    @Test
    public void test01083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01083");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler6 = null;
        java.net.URL uRL7 = new java.net.URL(uRL3, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler6);
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        boolean boolean12 = uRL3.sameFile(uRL11);
        java.net.URL uRL14 = new java.net.URL(uRL11, "/hi!4129638666993068054:");
        java.lang.Class[] classArray15 = new java.lang.Class[] {};
        java.lang.Object obj16 = uRL14.getContent(classArray15);
        java.lang.String str17 = uRL14.getPath();
        int int18 = uRL14.getPort();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "/hi!4129638666993068054:" + "'", str17, "/hi!4129638666993068054:");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test01084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01084");
        java.io.File file2 = java.io.File.createTempFile("hi!", "");
        java.lang.String str3 = file2.getName();
        java.lang.String str4 = file2.getAbsolutePath();
        boolean boolean7 = file2.setExecutable(true, false);
        boolean boolean9 = file2.setWritable(false);
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/hi!7548465787427365260");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!7548465787427365260" + "'", str3, "hi!7548465787427365260");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/tmp/hi!7548465787427365260" + "'", str4, "/tmp/hi!7548465787427365260");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01085");
        java.io.File file2 = new java.io.File("hi!2553205981964178444:", "/hi!3684051994355354645:");
        boolean boolean3 = file2.isFile();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2553205981964178444:");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2553205981964178444:/hi!3684051994355354645:");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test01086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01086");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        double double1 = max0.getResult();
        max0.increment(24.3d);
        long long4 = max0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
    }

    @Test
    public void test01087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01087");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.net.URL uRL7 = new java.net.URL(uRL3, "hi!2169115775229245488");
        int int8 = uRL3.getDefaultPort();
        int int9 = uRL3.getPort();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test01088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01088");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long2 = variance1.getN();
        long long3 = variance1.getN();
        variance1.increment((double) 10.0f);
        variance1.increment((double) 280499544064L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test01089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01089");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double19 = geometricMean3.evaluate(doubleArray16);
        empiricalDistributionImpl0.load(doubleArray16);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl0.getSampleStats();
        double double22 = empiricalDistributionImpl0.getNextValue();
        java.io.File file24 = new java.io.File("");
        boolean boolean26 = file24.setReadable(true);
        long long27 = file24.lastModified();
        java.io.File file29 = new java.io.File(file24, "/hi!8130836485477920045:");
        boolean boolean32 = file24.setExecutable(false, false);
        boolean boolean35 = file24.setExecutable(true, false);
        boolean boolean36 = file24.delete();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file24);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.51188643150958d + "'", double19 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(statisticalSummary21);
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertEquals(file29.getParent(), "/");
        org.junit.Assert.assertEquals(file29.toString(), "/hi!8130836485477920045:");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test01090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01090");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("/hi!5288805238342399462:", "/hi!4494286101665568306:", (-11), "/hi!5184045723875108700:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: Invalid port number :-11");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01091");
        java.io.File file2 = java.io.File.createTempFile("hi!", "");
        boolean boolean4 = file2.setLastModified((long) '#');
        java.io.File file5 = file2.getCanonicalFile();
        long long6 = file2.getUsableSpace();
        java.io.File file10 = new java.io.File("");
        java.io.File file11 = java.io.File.createTempFile("hi!", ":", file10);
        java.lang.String str12 = file11.getAbsolutePath();
        boolean boolean13 = file11.setReadOnly();
        boolean boolean14 = file2.renameTo(file11);
        java.io.File file16 = new java.io.File("");
        boolean boolean19 = file16.setWritable(true, true);
        boolean boolean20 = file16.setReadOnly();
        boolean boolean23 = file16.setWritable(true, false);
        java.net.URI uRI24 = file16.toURI();
        boolean boolean25 = file16.mkdir();
        java.io.File file26 = file16.getCanonicalFile();
        java.io.File file27 = file16.getAbsoluteFile();
        int int28 = file11.compareTo(file16);
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/hi!7524190417861593733");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/tmp/hi!7524190417861593733");
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 280499503104L + "'", long6 == 280499503104L);
        org.junit.Assert.assertNull("file10.getParent() == null", file10.getParent());
        org.junit.Assert.assertEquals(file10.toString(), "");
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/hi!8808544731406550607:");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/hi!8808544731406550607:" + "'", str12, "/hi!8808544731406550607:");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull("file16.getParent() == null", file16.getParent());
        org.junit.Assert.assertEquals(file16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(uRI24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(file26);
// flaky:         org.junit.Assert.assertEquals(file26.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/experiment");
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "/");
        org.junit.Assert.assertEquals(file27.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 24 + "'", int28 == 24);
    }

    @Test
    public void test01092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01092");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean0.increment((double) 0);
        double double3 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean4.increment((double) 0);
        double double7 = mean4.getResult();
        mean4.clear();
        double[] doubleArray9 = new double[] {};
        mean4.incrementAll(doubleArray9);
        double double11 = mean0.evaluate(doubleArray9);
        mean0.clear();
        mean0.increment((double) 280499613696L);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test01093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01093");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        java.util.List list2 = empiricalDistributionImpl1.getBinStats();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        boolean boolean4 = empiricalDistributionImpl1.isLoaded();
        java.io.File file7 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL8 = file7.toURL();
        java.lang.String str9 = uRL8.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler11 = null;
        java.net.URL uRL12 = new java.net.URL(uRL8, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler11);
        java.io.File file15 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL16 = file15.toURL();
        java.lang.String str17 = uRL16.getAuthority();
        java.lang.String str18 = uRL16.getQuery();
        boolean boolean19 = uRL8.sameFile(uRL16);
        int int20 = uRL16.getPort();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL16);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /experiment/hi!2169115775229245488/hi! (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file7.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL8);
// flaky:         org.junit.Assert.assertEquals(uRL8.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals(uRL12.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file15.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file15.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL16);
// flaky:         org.junit.Assert.assertEquals(uRL16.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test01094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01094");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        double double2 = sum0.getResult();
        sum0.clear();
        sum0.clear();
        double double5 = sum0.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics6 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double7 = summaryStatistics6.getVariance();
        double double8 = summaryStatistics6.getStandardDeviation();
        double double9 = summaryStatistics6.getSum();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics6.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics6.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double14 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        secondMoment13.increment((double) (byte) 10);
        secondMoment13.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean20 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean20.increment((double) (short) 100);
        geometricMean20.increment((double) (-1L));
        geometricMean20.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean27 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean27.increment((double) (short) 100);
        geometricMean27.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long34 = variance33.getN();
        double[] doubleArray40 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double42 = variance33.evaluate(doubleArray40, (double) 'a');
        double double43 = geometricMean27.evaluate(doubleArray40);
        double double44 = geometricMean20.evaluate(doubleArray40);
        secondMoment13.incrementAll(doubleArray40);
        double double46 = storelessUnivariateStatistic11.evaluate(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            double double49 = sum0.evaluate(doubleArray40, (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 19.43999999999942d + "'", double42 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2.51188643150958d + "'", double43 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2.51188643150958d + "'", double44 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 4.6d + "'", double46 == 4.6d);
    }

    @Test
    public void test01095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01095");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int1 = empiricalDistributionImpl0.getBinCount();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        java.util.List list3 = empiricalDistributionImpl0.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl7.getSampleStats();
        java.io.File file12 = new java.io.File("");
        java.io.File file13 = java.io.File.createTempFile("hi!", ":", file12);
        java.lang.String str14 = file13.getCanonicalPath();
        boolean boolean15 = file13.createNewFile();
        empiricalDistributionImpl7.load(file13);
        boolean boolean17 = file13.setReadOnly();
        java.io.File file18 = file13.getAbsoluteFile();
        empiricalDistributionImpl0.load(file13);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: No bin selected");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1000 + "'", int1 == 1000);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNull(statisticalSummary6);
        org.junit.Assert.assertNull(statisticalSummary8);
        org.junit.Assert.assertNull("file12.getParent() == null", file12.getParent());
        org.junit.Assert.assertEquals(file12.toString(), "");
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/hi!3433933769940059127:");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "/hi!3433933769940059127:" + "'", str14, "/hi!3433933769940059127:");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file18.toString(), "/hi!3433933769940059127:");
    }

    @Test
    public void test01096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01096");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        boolean boolean10 = file1.setExecutable(true);
        boolean boolean11 = file1.exists();
        java.lang.String str12 = file1.getName();
        boolean boolean13 = file1.mkdirs();
        boolean boolean15 = file1.setLastModified(1645454069000L);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test01097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01097");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double19 = geometricMean3.evaluate(doubleArray16);
        empiricalDistributionImpl0.load(doubleArray16);
        java.io.File file23 = java.io.File.createTempFile("hi!", "");
        boolean boolean25 = file23.setLastModified((long) '#');
        java.io.File file26 = file23.getCanonicalFile();
        empiricalDistributionImpl0.load(file23);
        boolean boolean28 = empiricalDistributionImpl0.isLoaded();
        java.util.List list29 = empiricalDistributionImpl0.getBinStats();
        java.io.File file31 = new java.io.File("");
        boolean boolean34 = file31.setWritable(true, true);
        boolean boolean35 = file31.setReadOnly();
        boolean boolean38 = file31.setWritable(true, false);
        java.lang.String str39 = file31.getName();
        java.io.File file40 = file31.getCanonicalFile();
        boolean boolean42 = file31.setLastModified(299098718208L);
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file31);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.51188643150958d + "'", double19 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file23.toString(), "/tmp/hi!1297012379865873586");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/tmp/hi!1297012379865873586");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNull("file31.getParent() == null", file31.getParent());
        org.junit.Assert.assertEquals(file31.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(file40);
// flaky:         org.junit.Assert.assertEquals(file40.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file40.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test01098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01098");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean0.increment((double) 0);
        double double3 = mean0.getResult();
        long long4 = mean0.getN();
        mean0.clear();
        mean0.increment(121.5d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        long long11 = variance9.getN();
        variance9.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double16 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        double double19 = secondMoment15.getResult();
        secondMoment15.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment21);
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        double double26 = variance25.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl27 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl27.getSampleStats();
        java.io.File file32 = new java.io.File("");
        java.io.File file33 = java.io.File.createTempFile("hi!", ":", file32);
        java.lang.String str34 = file33.getCanonicalPath();
        boolean boolean35 = file33.createNewFile();
        empiricalDistributionImpl27.load(file33);
        double[] doubleArray37 = empiricalDistributionImpl27.getUpperBounds();
        double[] doubleArray38 = empiricalDistributionImpl27.getUpperBounds();
        variance25.incrementAll(doubleArray38, 1, (int) (short) 1);
        double double44 = secondMoment15.evaluate(doubleArray38, 1, 0);
        double double45 = variance9.evaluate(doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            double double48 = mean0.evaluate(doubleArray38, (int) 'a', (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNull(statisticalSummary28);
        org.junit.Assert.assertNull("file32.getParent() == null", file32.getParent());
        org.junit.Assert.assertEquals(file32.toString(), "");
        org.junit.Assert.assertNotNull(file33);
        org.junit.Assert.assertEquals(file33.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file33.toString(), "/hi!6994215860900850419:");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "/hi!6994215860900850419:" + "'", str34, "/hi!6994215860900850419:");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
    }

    @Test
    public void test01099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01099");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getQuery();
        java.net.URLStreamHandler uRLStreamHandler9 = null;
        java.net.URL uRL10 = new java.net.URL(uRL3, "/experiment/hi!2169115775229245488/hi!/", uRLStreamHandler9);
        java.net.URL uRL12 = new java.net.URL(uRL3, "/hi!4642557990994400587:");
        int int13 = uRL12.getPort();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals(uRL12.toString(), "file:/hi!4642557990994400587:");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test01100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01100");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long2 = variance1.getN();
        double[] doubleArray8 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double10 = variance1.evaluate(doubleArray8, (double) 'a');
        variance1.clear();
        double double12 = variance1.getResult();
        double double13 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 19.43999999999942d + "'", double10 == 19.43999999999942d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test01101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01101");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean4.increment((double) (short) 100);
        long long7 = geometricMean4.getN();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean4);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares9 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long10 = sumOfSquares9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        double double27 = variance12.evaluate(doubleArray21, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double30 = sumOfSquares9.evaluate(doubleArray21, (int) (short) 1, 0);
        sumOfSquares9.increment(0.0d);
        double double33 = sumOfSquares9.getResult();
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares9);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics35 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double36 = summaryStatistics35.getMean();
        double double37 = summaryStatistics35.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic38 = summaryStatistics35.getSumImpl();
        summaryStatistics0.setSumsqImpl(storelessUnivariateStatistic38);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics40 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double41 = summaryStatistics40.getMin();
        double double42 = summaryStatistics40.getStandardDeviation();
        double double43 = summaryStatistics40.getSumsq();
        double double44 = summaryStatistics40.getVariance();
        double double45 = summaryStatistics40.getSum();
        boolean boolean47 = summaryStatistics40.equals((java.lang.Object) 1645454029000L);
        summaryStatistics40.addValue((double) (-3));
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic50 = summaryStatistics40.getMinImpl();
        summaryStatistics0.setMaxImpl(storelessUnivariateStatistic50);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic50);
    }

    @Test
    public void test01102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01102");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getVarianceImpl();
        java.lang.String str12 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics0.getSumImpl();
        double double14 = summaryStatistics0.getSum();
        double double15 = summaryStatistics0.getMin();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "SummaryStatistics:\nn: 0\nmin: -Infinity\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str12, "SummaryStatistics:\nn: 0\nmin: -Infinity\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + Double.NEGATIVE_INFINITY + "'", double15 == Double.NEGATIVE_INFINITY);
    }

    @Test
    public void test01103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01103");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        double double2 = sumOfLogs0.getResult();
        sumOfLogs0.clear();
        double double4 = sumOfLogs0.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics5 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double6 = summaryStatistics5.getMin();
        double double7 = summaryStatistics5.getStandardDeviation();
        double double8 = summaryStatistics5.getSum();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares9 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long10 = sumOfSquares9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        double double27 = variance12.evaluate(doubleArray21, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double30 = sumOfSquares9.evaluate(doubleArray21, (int) (short) 1, 0);
        double double31 = sumOfSquares9.getResult();
        long long32 = sumOfSquares9.getN();
        sumOfSquares9.clear();
        summaryStatistics5.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares9);
        sumOfSquares9.clear();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long42 = variance41.getN();
        double[] doubleArray48 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double50 = variance41.evaluate(doubleArray48, (double) 'a');
        mean39.incrementAll(doubleArray48);
        empiricalDistributionImpl36.load(doubleArray48);
        sumOfSquares9.incrementAll(doubleArray48, 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = sumOfLogs0.evaluate(doubleArray48, (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 19.43999999999942d + "'", double50 == 19.43999999999942d);
    }

    @Test
    public void test01104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01104");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        double double2 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics3 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double4 = summaryStatistics3.getMin();
        double double5 = summaryStatistics3.getStandardDeviation();
        double double6 = summaryStatistics3.getMean();
        double double7 = summaryStatistics3.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long9 = mean8.getN();
        summaryStatistics3.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        long long11 = mean8.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        double double13 = summaryStatistics0.getVariance();
        double double14 = summaryStatistics0.getSumOfLogs();
        summaryStatistics0.addValue((double) 1645454018000L);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test01105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01105");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min0.clear();
        double[] doubleArray7 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double8 = min0.evaluate(doubleArray7);
        long long9 = min0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double11 = secondMoment10.getResult();
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean14 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean14.increment((double) (short) 100);
        geometricMean14.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long21 = variance20.getN();
        double[] doubleArray27 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double29 = variance20.evaluate(doubleArray27, (double) 'a');
        double double30 = geometricMean14.evaluate(doubleArray27);
        double double31 = variance13.evaluate(doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = min0.evaluate(doubleArray27, 100, 57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 19.43999999999942d + "'", double29 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2.51188643150958d + "'", double30 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 24.3d + "'", double31 == 24.3d);
    }

    @Test
    public void test01106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01106");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics11 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics11.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean12);
        java.io.File file15 = new java.io.File("");
        java.lang.String str16 = file15.getParent();
        boolean boolean17 = summaryStatistics11.equals((java.lang.Object) file15);
        summaryStatistics11.addValue(19.44d);
        double double20 = summaryStatistics11.getMax();
        double double21 = summaryStatistics11.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic22 = summaryStatistics11.getGeoMeanImpl();
        summaryStatistics0.setMeanImpl(storelessUnivariateStatistic22);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic24 = summaryStatistics0.getMinImpl();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 19.44d + "'", double20 == 19.44d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic22);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic24);
    }

    @Test
    public void test01107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01107");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        boolean boolean11 = file1.setExecutable(false);
        boolean boolean14 = file1.setExecutable(true, false);
        java.io.File file15 = file1.getAbsoluteFile();
        java.net.URI uRI16 = file1.toURI();
        boolean boolean17 = file1.isDirectory();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(file15);
// flaky:         org.junit.Assert.assertEquals(file15.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file15.toString(), "/experiment");
        org.junit.Assert.assertNotNull(uRI16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01108");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean2.increment((double) 0);
        double double5 = mean2.getResult();
        long long6 = mean2.getN();
        mean2.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean2);
        double double9 = summaryStatistics0.getMean();
        double double10 = summaryStatistics0.getStandardDeviation();
        summaryStatistics0.addValue(6.907755278982137d);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics13 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double14 = summaryStatistics13.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min15 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics13.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min15);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = summaryStatistics13.getSummary();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic18 = summaryStatistics13.getGeoMeanImpl();
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.setSumImpl(storelessUnivariateStatistic18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementations must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(statisticalSummary17);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic18);
    }

    @Test
    public void test01109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01109");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = summaryStatistics0.getSummary();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.clear();
        long long5 = secondMoment3.getN();
        secondMoment3.clear();
        double double7 = secondMoment3.getResult();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment3);
        double double9 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = summaryStatistics0.getSummary();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(statisticalSummary10);
    }

    @Test
    public void test01110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01110");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        double double2 = sum0.getResult();
        sum0.increment((double) (-1L));
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long7 = variance6.getN();
        double[] doubleArray13 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double15 = variance6.evaluate(doubleArray13, (double) 'a');
        variance6.clear();
        double[] doubleArray20 = new double[] { (byte) 0, (short) 0, 299098734592L };
        double double22 = variance6.evaluate(doubleArray20, (double) 1);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics23 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics23.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean24);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean26 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean26.increment((double) (short) 100);
        geometricMean26.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic31 = geometricMean26.getSumLogImpl();
        summaryStatistics23.setMinImpl(storelessUnivariateStatistic31);
        double double33 = summaryStatistics23.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics23.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean37.increment((double) 0);
        double double40 = mean37.getResult();
        mean37.clear();
        double[] doubleArray42 = new double[] {};
        mean37.incrementAll(doubleArray42);
        variance35.incrementAll(doubleArray42);
        double double46 = variance6.evaluate(doubleArray42, 100.0d);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl47 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary48 = empiricalDistributionImpl47.getSampleStats();
        boolean boolean49 = empiricalDistributionImpl47.isLoaded();
        boolean boolean50 = empiricalDistributionImpl47.isLoaded();
        boolean boolean51 = empiricalDistributionImpl47.isLoaded();
        boolean boolean52 = empiricalDistributionImpl47.isLoaded();
        java.io.File file56 = new java.io.File("");
        java.io.File file57 = java.io.File.createTempFile("hi!", ":", file56);
        java.lang.String str58 = file57.getAbsolutePath();
        boolean boolean59 = file57.setReadOnly();
        boolean boolean61 = file57.setLastModified(364740218880L);
        empiricalDistributionImpl47.load(file57);
        java.util.List list63 = empiricalDistributionImpl47.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl64 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = empiricalDistributionImpl64.getSampleStats();
        boolean boolean66 = empiricalDistributionImpl64.isLoaded();
        boolean boolean67 = empiricalDistributionImpl64.isLoaded();
        java.util.List list68 = empiricalDistributionImpl64.getBinStats();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics69 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean70 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics69.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean70);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean72 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean72.increment((double) (short) 100);
        geometricMean72.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic77 = geometricMean72.getSumLogImpl();
        summaryStatistics69.setMinImpl(storelessUnivariateStatistic77);
        double double79 = summaryStatistics69.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics69.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance81);
        org.apache.commons.math.stat.descriptive.rank.Min min83 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min83.clear();
        double[] doubleArray90 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double91 = min83.evaluate(doubleArray90);
        variance81.incrementAll(doubleArray90);
        empiricalDistributionImpl64.load(doubleArray90);
        empiricalDistributionImpl47.load(doubleArray90);
        variance6.incrementAll(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = sum0.evaluate(doubleArray90, (int) ' ', 47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 19.43999999999942d + "'", double15 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 2.99098734592E11]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.988001178545237E22d + "'", double22 == 1.988001178545237E22d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNull(statisticalSummary48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull("file56.getParent() == null", file56.getParent());
        org.junit.Assert.assertEquals(file56.toString(), "");
        org.junit.Assert.assertNotNull(file57);
        org.junit.Assert.assertEquals(file57.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file57.toString(), "/hi!8887735824814585051:");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "/hi!8887735824814585051:" + "'", str58, "/hi!8887735824814585051:");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(list63);
        org.junit.Assert.assertNull(statisticalSummary65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(list68);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic77);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + (-1.0d) + "'", double91 == (-1.0d));
    }

    @Test
    public void test01111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01111");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "");
        java.lang.String str3 = file2.getParent();
        boolean boolean5 = file2.setReadable(true);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488");
        org.junit.Assert.assertNull(str3);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test01112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01112");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        java.io.File file10 = new java.io.File(uRI9);
        java.io.File file11 = file10.getCanonicalFile();
        java.lang.String str12 = file10.getCanonicalPath();
        boolean boolean13 = file10.exists();
        java.lang.Throwable throwable16 = null;
        java.io.IOException iOException17 = new java.io.IOException("hi!", throwable16);
        java.io.IOException iOException18 = new java.io.IOException((java.lang.Throwable) iOException17);
        java.io.IOException iOException19 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException17);
        boolean boolean20 = file10.equals((java.lang.Object) iOException19);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
// flaky:         org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/experiment");
        org.junit.Assert.assertNotNull(file11);
// flaky:         org.junit.Assert.assertEquals(file11.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/experiment");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/experiment" + "'", str12, "/experiment");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test01113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01113");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics1 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double2 = summaryStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean3.increment((double) 0);
        double double6 = mean3.getResult();
        long long7 = mean3.getN();
        mean3.clear();
        summaryStatistics1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean3);
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean3);
        long long11 = mean3.getN();
        mean3.clear();
        org.apache.commons.math.stat.descriptive.summary.Sum sum13 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean14 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean14.increment((double) (short) 100);
        geometricMean14.increment((double) (-1L));
        geometricMean14.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean21 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean21.increment((double) (short) 100);
        geometricMean21.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long28 = variance27.getN();
        double[] doubleArray34 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double36 = variance27.evaluate(doubleArray34, (double) 'a');
        double double37 = geometricMean21.evaluate(doubleArray34);
        double double38 = geometricMean14.evaluate(doubleArray34);
        double double41 = sum13.evaluate(doubleArray34, 0, 0);
        sum13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long44 = mean43.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double46 = secondMoment45.getResult();
        secondMoment45.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean49 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean49.increment((double) (short) 100);
        geometricMean49.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long56 = variance55.getN();
        double[] doubleArray62 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double64 = variance55.evaluate(doubleArray62, (double) 'a');
        double double65 = geometricMean49.evaluate(doubleArray62);
        double double66 = variance48.evaluate(doubleArray62);
        double double67 = mean43.evaluate(doubleArray62);
        double double68 = sum13.evaluate(doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            double double71 = mean3.evaluate(doubleArray62, 12, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 19.43999999999942d + "'", double36 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2.51188643150958d + "'", double37 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2.51188643150958d + "'", double38 == 2.51188643150958d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 19.43999999999942d + "'", double64 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2.51188643150958d + "'", double65 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 24.3d + "'", double66 == 24.3d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 4.6d + "'", double67 == 4.6d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 23.0d + "'", double68 == 23.0d);
    }

    @Test
    public void test01114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01114");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMean();
        double double2 = summaryStatistics0.getSumOfLogs();
        summaryStatistics0.addValue((double) ':');
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getGeoMeanImpl();
        double double6 = summaryStatistics0.getSumsq();
        summaryStatistics0.addValue((double) 1183744L);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3364.0d + "'", double6 == 3364.0d);
    }

    @Test
    public void test01115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01115");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean1.increment((double) (short) 100);
        long long4 = geometricMean1.getN();
        geometricMean1.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics6 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics6.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean7);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean9 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean9.increment((double) (short) 100);
        geometricMean9.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic14 = geometricMean9.getSumLogImpl();
        summaryStatistics6.setMinImpl(storelessUnivariateStatistic14);
        double double16 = summaryStatistics6.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double19 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment18);
        summaryStatistics6.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment18);
        geometricMean1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment18);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int25 = empiricalDistributionImpl24.getBinCount();
        boolean boolean26 = empiricalDistributionImpl24.isLoaded();
        int int27 = empiricalDistributionImpl24.getBinCount();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean28.increment((double) 0);
        double double31 = mean28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean32.increment((double) 0);
        double double35 = mean32.getResult();
        mean32.clear();
        double[] doubleArray37 = new double[] {};
        mean32.incrementAll(doubleArray37);
        double double39 = mean28.evaluate(doubleArray37);
        empiricalDistributionImpl24.load(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = variance23.evaluate(doubleArray37, (double) (-70), 100, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1000 + "'", int25 == 1000);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1000 + "'", int27 == 1000);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test01116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01116");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        summaryStatistics0.addValue(19.44d);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = summaryStatistics0.getMeanImpl();
        double double10 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getMeanImpl();
        double[] doubleArray12 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double13 = storelessUnivariateStatistic11.evaluate(doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 19.44d + "'", double10 == 19.44d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
    }

    @Test
    public void test01117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01117");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long1 = sumOfSquares0.getN();
        long long2 = sumOfSquares0.getN();
        sumOfSquares0.increment((double) 1645454026000L);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares5 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long6 = sumOfSquares5.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long11 = variance10.getN();
        double[] doubleArray17 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double19 = variance10.evaluate(doubleArray17, (double) 'a');
        double double23 = variance8.evaluate(doubleArray17, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double26 = sumOfSquares5.evaluate(doubleArray17, (int) (short) 1, 0);
        double double27 = sumOfSquares5.getResult();
        long long28 = sumOfSquares5.getN();
        sumOfSquares5.increment((double) 1000);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double33 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        double double36 = secondMoment32.getResult();
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment38);
        secondMoment38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        double double43 = variance42.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl44 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = empiricalDistributionImpl44.getSampleStats();
        java.io.File file49 = new java.io.File("");
        java.io.File file50 = java.io.File.createTempFile("hi!", ":", file49);
        java.lang.String str51 = file50.getCanonicalPath();
        boolean boolean52 = file50.createNewFile();
        empiricalDistributionImpl44.load(file50);
        double[] doubleArray54 = empiricalDistributionImpl44.getUpperBounds();
        double[] doubleArray55 = empiricalDistributionImpl44.getUpperBounds();
        variance42.incrementAll(doubleArray55, 1, (int) (short) 1);
        double double61 = secondMoment32.evaluate(doubleArray55, 1, 0);
        sumOfSquares5.incrementAll(doubleArray55, 0, (int) (short) 100);
        double double67 = sumOfSquares0.evaluate(doubleArray55, (int) (byte) 1, 100);
        long long68 = sumOfSquares0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 19.43999999999942d + "'", double19 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNull(statisticalSummary45);
        org.junit.Assert.assertNull("file49.getParent() == null", file49.getParent());
        org.junit.Assert.assertEquals(file49.toString(), "");
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file50.toString(), "/hi!8324214168344734490:");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "/hi!8324214168344734490:" + "'", str51, "/hi!8324214168344734490:");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
    }

    @Test
    public void test01118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01118");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long1 = sumOfSquares0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long6 = variance5.getN();
        double[] doubleArray12 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double14 = variance5.evaluate(doubleArray12, (double) 'a');
        double double18 = variance3.evaluate(doubleArray12, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double21 = sumOfSquares0.evaluate(doubleArray12, (int) (short) 1, 0);
        sumOfSquares0.increment(0.0d);
        long long24 = sumOfSquares0.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics25 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double26 = summaryStatistics25.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min27 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics25.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min27);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic29 = summaryStatistics25.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = summaryStatistics25.getSummary();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics31 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double32 = summaryStatistics31.getMin();
        double double33 = summaryStatistics31.getStandardDeviation();
        double double34 = summaryStatistics31.getMean();
        double double35 = summaryStatistics31.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min36 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics31.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min36);
        summaryStatistics25.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min36);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares39 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long40 = sumOfSquares39.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long45 = variance44.getN();
        double[] doubleArray51 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double53 = variance44.evaluate(doubleArray51, (double) 'a');
        double double57 = variance42.evaluate(doubleArray51, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double60 = sumOfSquares39.evaluate(doubleArray51, (int) (short) 1, 0);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics61 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double62 = summaryStatistics61.getMin();
        double double63 = summaryStatistics61.getStandardDeviation();
        double double64 = summaryStatistics61.getMean();
        double double65 = summaryStatistics61.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min66 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics61.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min66);
        double[] doubleArray68 = new double[] {};
        min66.incrementAll(doubleArray68);
        double double70 = sumOfSquares39.evaluate(doubleArray68);
        summaryStatistics25.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares39);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean74 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment72);
        secondMoment72.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment72);
        double double77 = variance76.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl78 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary79 = empiricalDistributionImpl78.getSampleStats();
        java.io.File file83 = new java.io.File("");
        java.io.File file84 = java.io.File.createTempFile("hi!", ":", file83);
        java.lang.String str85 = file84.getCanonicalPath();
        boolean boolean86 = file84.createNewFile();
        empiricalDistributionImpl78.load(file84);
        double[] doubleArray88 = empiricalDistributionImpl78.getUpperBounds();
        double[] doubleArray89 = empiricalDistributionImpl78.getUpperBounds();
        variance76.incrementAll(doubleArray89, 1, (int) (short) 1);
        double double95 = sumOfSquares39.evaluate(doubleArray89, 1, 2);
        double double98 = sumOfSquares0.evaluate(doubleArray89, 2, (int) '#');
        double double99 = sumOfSquares0.getResult();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 19.43999999999942d + "'", double14 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic29);
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 19.43999999999942d + "'", double53 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNull(statisticalSummary79);
        org.junit.Assert.assertNull("file83.getParent() == null", file83.getParent());
        org.junit.Assert.assertEquals(file83.toString(), "");
        org.junit.Assert.assertNotNull(file84);
        org.junit.Assert.assertEquals(file84.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file84.toString(), "/hi!7408716065304687015:");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "/hi!7408716065304687015:" + "'", str85, "/hi!7408716065304687015:");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue(Double.isNaN(double98));
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 0.0d + "'", double99 == 0.0d);
    }

    @Test
    public void test01119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01119");
        java.io.File file1 = new java.io.File("hi!");
        file1.deleteOnExit();
        boolean boolean3 = file1.isFile();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test01120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01120");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        double double1 = max0.getResult();
        max0.clear();
        long long3 = max0.getN();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl4 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int5 = empiricalDistributionImpl4.getBinCount();
        boolean boolean6 = empiricalDistributionImpl4.isLoaded();
        java.util.List list7 = empiricalDistributionImpl4.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean8 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean8.increment((double) (short) 100);
        geometricMean8.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = geometricMean8.getSumLogImpl();
        long long14 = geometricMean8.getN();
        double double15 = geometricMean8.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics16 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double17 = summaryStatistics16.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min18 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics16.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min18);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean20 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean20.increment((double) (short) 100);
        geometricMean20.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long27 = variance26.getN();
        double[] doubleArray33 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double35 = variance26.evaluate(doubleArray33, (double) 'a');
        double double36 = geometricMean20.evaluate(doubleArray33);
        min18.incrementAll(doubleArray33);
        geometricMean8.incrementAll(doubleArray33);
        empiricalDistributionImpl4.load(doubleArray33);
        double[] doubleArray40 = empiricalDistributionImpl4.getUpperBounds();
        // The following exception was thrown during execution in test generation
        try {
            double double43 = max0.evaluate(doubleArray40, (-6), 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1000 + "'", int5 == 1000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(list7);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 19.43999999999942d + "'", double35 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2.51188643150958d + "'", double36 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(doubleArray40);
    }

    @Test
    public void test01121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01121");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares4 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long5 = sumOfSquares4.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double22 = variance7.evaluate(doubleArray16, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double25 = sumOfSquares4.evaluate(doubleArray16, (int) (short) 1, 0);
        double double26 = sumOfSquares4.getResult();
        long long27 = sumOfSquares4.getN();
        sumOfSquares4.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares4);
        double double30 = sumOfSquares4.getResult();
        long long31 = sumOfSquares4.getN();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl32.getSampleStats();
        java.io.File file37 = new java.io.File("");
        java.io.File file38 = java.io.File.createTempFile("hi!", ":", file37);
        java.lang.String str39 = file38.getCanonicalPath();
        boolean boolean40 = file38.createNewFile();
        empiricalDistributionImpl32.load(file38);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean42 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean42.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long47 = variance46.getN();
        double[] doubleArray53 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double55 = variance46.evaluate(doubleArray53, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean58 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment56);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long61 = variance60.getN();
        double[] doubleArray67 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double69 = variance60.evaluate(doubleArray67, (double) 'a');
        mean58.incrementAll(doubleArray67);
        double double72 = variance46.evaluate(doubleArray67, (double) (byte) 1);
        geometricMean42.incrementAll(doubleArray67);
        empiricalDistributionImpl32.load(doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            double double77 = sumOfSquares4.evaluate(doubleArray67, (int) (short) 1, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertNull("file37.getParent() == null", file37.getParent());
        org.junit.Assert.assertEquals(file37.toString(), "");
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file38.toString(), "/hi!5753665800463934223:");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "/hi!5753665800463934223:" + "'", str39, "/hi!5753665800463934223:");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 19.43999999999942d + "'", double55 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 19.43999999999942d + "'", double69 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 19.44d + "'", double72 == 19.44d);
    }

    @Test
    public void test01122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01122");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) (-1L));
        geometricMean0.increment((double) (byte) 1);
        geometricMean0.increment((double) 299098718208L);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares9 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long10 = sumOfSquares9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        double double27 = variance12.evaluate(doubleArray21, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double30 = sumOfSquares9.evaluate(doubleArray21, (int) (short) 1, 0);
        sumOfSquares9.increment(0.0d);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl33 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl33.getSampleStats();
        java.io.File file38 = new java.io.File("");
        java.io.File file39 = java.io.File.createTempFile("hi!", ":", file38);
        java.lang.String str40 = file39.getCanonicalPath();
        boolean boolean41 = file39.createNewFile();
        empiricalDistributionImpl33.load(file39);
        double[] doubleArray43 = empiricalDistributionImpl33.getUpperBounds();
        double double46 = sumOfSquares9.evaluate(doubleArray43, 100, (int) (short) 1);
        double double47 = geometricMean0.evaluate(doubleArray43);
        geometricMean0.increment((double) 280499605504L);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics50 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double51 = summaryStatistics50.getVariance();
        double double52 = summaryStatistics50.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics53 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double54 = summaryStatistics53.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic55 = summaryStatistics53.getGeoMeanImpl();
        summaryStatistics50.setGeoMeanImpl(storelessUnivariateStatistic55);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics57 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double58 = summaryStatistics57.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min59 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics57.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min59);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean61 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean61.increment((double) (short) 100);
        geometricMean61.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long68 = variance67.getN();
        double[] doubleArray74 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double76 = variance67.evaluate(doubleArray74, (double) 'a');
        double double77 = geometricMean61.evaluate(doubleArray74);
        min59.incrementAll(doubleArray74);
        storelessUnivariateStatistic55.incrementAll(doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            double double82 = geometricMean0.evaluate(doubleArray74, (int) (byte) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNull(statisticalSummary34);
        org.junit.Assert.assertNull("file38.getParent() == null", file38.getParent());
        org.junit.Assert.assertEquals(file38.toString(), "");
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertEquals(file39.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file39.toString(), "/hi!4486170169405626457:");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "/hi!4486170169405626457:" + "'", str40, "/hi!4486170169405626457:");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic55);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 19.43999999999942d + "'", double76 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2.51188643150958d + "'", double77 == 2.51188643150958d);
    }

    @Test
    public void test01123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01123");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.lang.String str5 = uRL3.getUserInfo();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getUserInfo();
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        java.lang.String str12 = uRL11.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler14 = null;
        java.net.URL uRL15 = new java.net.URL(uRL11, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler14);
        boolean boolean16 = uRL3.sameFile(uRL15);
        java.net.URI uRI17 = uRL3.toURI();
        java.io.File file20 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL21 = file20.toURL();
        java.lang.String str22 = uRL21.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler24 = null;
        java.net.URL uRL25 = new java.net.URL(uRL21, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler24);
        java.io.File file28 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL29 = file28.toURL();
        boolean boolean30 = uRL21.sameFile(uRL29);
        java.net.URL uRL32 = new java.net.URL(uRL29, "/hi!4129638666993068054:");
        java.lang.Class[] classArray33 = new java.lang.Class[] {};
        java.lang.Object obj34 = uRL32.getContent(classArray33);
        int int35 = uRL32.getPort();
        boolean boolean36 = uRL3.sameFile(uRL32);
        java.net.Proxy proxy37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection38 = uRL3.openConnection(proxy37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(uRL15.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(uRI17);
        org.junit.Assert.assertEquals(file20.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file20.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL21);
// flaky:         org.junit.Assert.assertEquals(uRL21.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals(uRL25.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file28.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file28.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL29);
// flaky:         org.junit.Assert.assertEquals(uRL29.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals(uRL32.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test01124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01124");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("/hi!4494286101665568306:", "/hi!7767618465474715269:", (-24), "/hi!3308917902506818979:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: Invalid port number :-24");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01125");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        java.io.File file10 = new java.io.File(uRI9);
        boolean boolean11 = file10.isDirectory();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
// flaky:         org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test01126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01126");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler6 = null;
        java.net.URL uRL7 = new java.net.URL(uRL3, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler6);
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        java.lang.String str12 = uRL11.getAuthority();
        java.lang.String str13 = uRL11.getQuery();
        boolean boolean14 = uRL3.sameFile(uRL11);
        java.lang.String str15 = uRL11.getRef();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj16 = uRL11.getContent();
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /experiment/hi!2169115775229245488/hi! (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test01127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01127");
        java.io.File file1 = new java.io.File("hi!8178014370112320629");
        boolean boolean2 = file1.mkdirs();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "hi!8178014370112320629");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test01128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01128");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        double double2 = sumOfLogs0.getResult();
        long long3 = sumOfLogs0.getN();
        sumOfLogs0.clear();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean5 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean6 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        geometricMean6.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test01129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01129");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = summaryStatistics0.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics13 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double14 = summaryStatistics13.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics13.getGeoMeanImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic15);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic17 = summaryStatistics0.getMinImpl();
        double double18 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.summary.Sum sum19 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long20 = sum19.getN();
        long long21 = sum19.getN();
        sum19.increment((double) ':');
        sum19.increment(1.645454026E12d);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum19);
        long long27 = sum19.getN();
        double double28 = sum19.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean29 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean29.increment((double) (short) 100);
        geometricMean29.increment((double) (-1L));
        geometricMean29.increment((double) (byte) 100);
        geometricMean29.increment((double) 1645454035000L);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean41 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long44 = variance43.getN();
        double[] doubleArray50 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double52 = variance43.evaluate(doubleArray50, (double) 'a');
        mean41.incrementAll(doubleArray50);
        empiricalDistributionImpl38.load(doubleArray50);
        java.util.List list55 = empiricalDistributionImpl38.getBinStats();
        double[] doubleArray56 = empiricalDistributionImpl38.getUpperBounds();
        double double59 = geometricMean29.evaluate(doubleArray56, (int) (byte) 0, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            double double62 = sum19.evaluate(doubleArray56, 12, (-70));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.645454026058E12d + "'", double28 == 1.645454026058E12d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 19.43999999999942d + "'", double52 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.6d + "'", double59 == 0.6d);
    }

    @Test
    public void test01130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01130");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        java.lang.String str5 = file4.getCanonicalPath();
        long long6 = file4.getTotalSpace();
        java.lang.String str7 = file4.getName();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!1588474338978738941:");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/hi!1588474338978738941:" + "'", str5, "/hi!1588474338978738941:");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 364740218880L + "'", long6 == 364740218880L);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!1588474338978738941:" + "'", str7, "hi!1588474338978738941:");
    }

    @Test
    public void test01131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01131");
        java.io.File file2 = java.io.File.createTempFile("/hi!3899957486724203326:", "hi!2776393821320652817");
        boolean boolean3 = file2.exists();
        java.lang.String str4 = file2.getAbsolutePath();
        boolean boolean5 = file2.isDirectory();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/hi!3899957486724203326:6559125646724654406hi!2776393821320652817");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/tmp/hi!3899957486724203326:6559125646724654406hi!2776393821320652817" + "'", str4, "/tmp/hi!3899957486724203326:6559125646724654406hi!2776393821320652817");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test01132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01132");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler6 = null;
        java.net.URL uRL7 = new java.net.URL(uRL3, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler6);
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        boolean boolean12 = uRL3.sameFile(uRL11);
        java.net.URL uRL14 = new java.net.URL(uRL11, "/hi!4129638666993068054:");
        java.lang.String str15 = uRL11.getQuery();
        java.lang.String str16 = uRL11.getQuery();
        java.io.File file19 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL20 = file19.toURL();
        java.lang.String str21 = uRL20.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler23 = null;
        java.net.URL uRL24 = new java.net.URL(uRL20, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler23);
        java.lang.String str25 = uRL20.toExternalForm();
        java.net.URL uRL27 = new java.net.URL(uRL20, "/hi!6147520189804127628:");
        boolean boolean28 = uRL11.sameFile(uRL20);
        java.lang.String str29 = uRL11.getAuthority();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file19.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL20);
// flaky:         org.junit.Assert.assertEquals(uRL20.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals(uRL24.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str25, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(uRL27.toString(), "file:/hi!6147520189804127628:");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test01133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01133");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL3 = new java.net.URL("/hi!7117751630234114856:", "/hi!1306851027237685264:", "/hi!4642557990994400587:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!7117751630234114856:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01134");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getSum();
        long long2 = summaryStatistics0.getN();
        double double3 = summaryStatistics0.getSum();
        long long4 = summaryStatistics0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test01135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01135");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL3 = new java.net.URL("", "/hi!3067136083950392099:", "hi!3424111480641751587");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: ");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01136");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file5 = new java.io.File("");
        java.io.File file6 = java.io.File.createTempFile("hi!", ":", file5);
        java.lang.String str7 = file6.getCanonicalPath();
        boolean boolean8 = file6.createNewFile();
        empiricalDistributionImpl0.load(file6);
        int int10 = empiricalDistributionImpl0.getBinCount();
        boolean boolean11 = empiricalDistributionImpl0.isLoaded();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: No bin selected");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/hi!8554660763340273841:");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/hi!8554660763340273841:" + "'", str7, "/hi!8554660763340273841:");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1000 + "'", int10 == 1000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test01137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01137");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double4 = secondMoment0.getResult();
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int8 = empiricalDistributionImpl7.getBinCount();
        boolean boolean9 = empiricalDistributionImpl7.isLoaded();
        java.util.List list10 = empiricalDistributionImpl7.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean11 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean11.increment((double) (short) 100);
        geometricMean11.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = geometricMean11.getSumLogImpl();
        long long17 = geometricMean11.getN();
        double double18 = geometricMean11.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics19 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double20 = summaryStatistics19.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min21 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics19.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min21);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean23 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean23.increment((double) (short) 100);
        geometricMean23.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long30 = variance29.getN();
        double[] doubleArray36 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double38 = variance29.evaluate(doubleArray36, (double) 'a');
        double double39 = geometricMean23.evaluate(doubleArray36);
        min21.incrementAll(doubleArray36);
        geometricMean11.incrementAll(doubleArray36);
        empiricalDistributionImpl7.load(doubleArray36);
        double[] doubleArray43 = empiricalDistributionImpl7.getUpperBounds();
        double[] doubleArray44 = empiricalDistributionImpl7.getUpperBounds();
        // The following exception was thrown during execution in test generation
        try {
            double double47 = variance6.evaluate(doubleArray44, (int) (short) 0, (-6));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 19.43999999999942d + "'", double38 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.51188643150958d + "'", double39 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
    }

    @Test
    public void test01138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01138");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares0.increment((double) (byte) 1);
        long long3 = sumOfSquares0.getN();
        sumOfSquares0.clear();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
    }

    @Test
    public void test01139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01139");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long2 = variance1.getN();
        double[] doubleArray8 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double10 = variance1.evaluate(doubleArray8, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long16 = variance15.getN();
        double[] doubleArray22 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double24 = variance15.evaluate(doubleArray22, (double) 'a');
        mean13.incrementAll(doubleArray22);
        double double27 = variance1.evaluate(doubleArray22, (double) (byte) 1);
        variance1.increment((double) 1.0f);
        long long30 = variance1.getN();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl31.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl31.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean34 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean34.increment((double) (short) 100);
        geometricMean34.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long41 = variance40.getN();
        double[] doubleArray47 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double49 = variance40.evaluate(doubleArray47, (double) 'a');
        double double50 = geometricMean34.evaluate(doubleArray47);
        empiricalDistributionImpl31.load(doubleArray47);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary52 = empiricalDistributionImpl31.getSampleStats();
        java.io.File file56 = new java.io.File("");
        java.io.File file57 = java.io.File.createTempFile("hi!", ":", file56);
        java.lang.String str58 = file57.getCanonicalPath();
        boolean boolean60 = file57.setExecutable(false);
        boolean boolean62 = file57.setWritable(true);
        boolean boolean63 = file57.mkdirs();
        boolean boolean66 = file57.setExecutable(true, false);
        empiricalDistributionImpl31.load(file57);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long70 = variance69.getN();
        long long71 = variance69.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double73 = secondMoment72.getResult();
        secondMoment72.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment72);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean76 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean76.increment((double) (short) 100);
        geometricMean76.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long83 = variance82.getN();
        double[] doubleArray89 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double91 = variance82.evaluate(doubleArray89, (double) 'a');
        double double92 = geometricMean76.evaluate(doubleArray89);
        double double93 = variance75.evaluate(doubleArray89);
        double double94 = variance69.evaluate(doubleArray89);
        empiricalDistributionImpl31.load(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray89, (-27), (-6));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 19.43999999999942d + "'", double10 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 19.43999999999942d + "'", double24 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 19.44d + "'", double27 == 19.44d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 19.43999999999942d + "'", double49 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2.51188643150958d + "'", double50 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(statisticalSummary52);
        org.junit.Assert.assertNull("file56.getParent() == null", file56.getParent());
        org.junit.Assert.assertEquals(file56.toString(), "");
        org.junit.Assert.assertNotNull(file57);
        org.junit.Assert.assertEquals(file57.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file57.toString(), "/hi!6652434077485312735:");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "/hi!6652434077485312735:" + "'", str58, "/hi!6652434077485312735:");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 19.43999999999942d + "'", double91 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2.51188643150958d + "'", double92 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 24.3d + "'", double93 == 24.3d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 19.44d + "'", double94 == 19.44d);
    }

    @Test
    public void test01140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01140");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.canExecute();
        java.io.File file9 = new java.io.File("");
        boolean boolean12 = file9.setWritable(true, true);
        boolean boolean13 = file9.setReadOnly();
        boolean boolean16 = file9.setWritable(true, false);
        java.net.URI uRI17 = file9.toURI();
        boolean boolean18 = file9.mkdir();
        java.io.File file19 = file9.getCanonicalFile();
        boolean boolean20 = file4.renameTo(file9);
        boolean boolean23 = file9.setWritable(true, true);
        boolean boolean24 = file9.canRead();
        boolean boolean25 = file9.canExecute();
        boolean boolean26 = file9.canRead();
        long long27 = file9.getUsableSpace();
        boolean boolean28 = file9.mkdir();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!8421555490162538776:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(uRI17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(file19);
// flaky:         org.junit.Assert.assertEquals(file19.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file19.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test01141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01141");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.canExecute();
        long long8 = file4.getTotalSpace();
        boolean boolean9 = file4.canRead();
        boolean boolean10 = file4.createNewFile();
        java.lang.String str11 = file4.getCanonicalPath();
        boolean boolean14 = file4.setReadable(true, false);
        java.lang.String str15 = file4.getParent();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!4443361215053273922:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 364740218880L + "'", long8 == 364740218880L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/hi!4443361215053273922:" + "'", str11, "/hi!4443361215053273922:");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "/" + "'", str15, "/");
    }

    @Test
    public void test01142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01142");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long2 = variance1.getN();
        long long3 = variance1.getN();
        variance1.clear();
        long long5 = variance1.getN();
        variance1.increment((double) (-1));
        variance1.setBiasCorrected(true);
        boolean boolean10 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long13 = variance12.getN();
        double[] doubleArray19 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double21 = variance12.evaluate(doubleArray19, (double) 'a');
        double double22 = variance12.getResult();
        boolean boolean23 = variance12.isBiasCorrected();
        variance12.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.clear();
        secondMoment26.increment(0.0d);
        secondMoment26.increment((double) (short) 1);
        java.io.File file33 = new java.io.File("");
        boolean boolean36 = file33.setWritable(true, true);
        boolean boolean37 = file33.setReadOnly();
        boolean boolean40 = file33.setWritable(true, false);
        java.net.URI uRI41 = file33.toURI();
        boolean boolean43 = file33.setExecutable(true);
        java.net.URI uRI44 = file33.toURI();
        boolean boolean45 = secondMoment26.equals((java.lang.Object) file33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance47.increment((double) (byte) 100);
        java.io.File file52 = new java.io.File("/hi!4420905478953568698:", "/experiment/hi!2169115775229245488");
        boolean boolean53 = variance47.equals((java.lang.Object) "/hi!4420905478953568698:");
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean54.increment((double) 0);
        double double57 = mean54.getResult();
        mean54.clear();
        double[] doubleArray59 = new double[] {};
        mean54.incrementAll(doubleArray59);
        double double62 = variance47.evaluate(doubleArray59, (double) (short) 0);
        double double63 = secondMoment26.evaluate(doubleArray59);
        double double65 = variance12.evaluate(doubleArray59, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double69 = variance1.evaluate(doubleArray59, (double) 1645454034000L, (int) (short) 1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 19.43999999999942d + "'", double21 == 19.43999999999942d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull("file33.getParent() == null", file33.getParent());
        org.junit.Assert.assertEquals(file33.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(uRI41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(uRI44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals(file52.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file52.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.5d + "'", double63 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
    }

    @Test
    public void test01143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01143");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        boolean boolean3 = empiricalDistributionImpl0.isLoaded();
        boolean boolean4 = empiricalDistributionImpl0.isLoaded();
        boolean boolean5 = empiricalDistributionImpl0.isLoaded();
        java.io.File file9 = new java.io.File("");
        java.io.File file10 = java.io.File.createTempFile("hi!", ":", file9);
        java.lang.String str11 = file10.getAbsolutePath();
        boolean boolean12 = file10.setReadOnly();
        boolean boolean14 = file10.setLastModified(364740218880L);
        empiricalDistributionImpl0.load(file10);
        java.util.List list16 = empiricalDistributionImpl0.getBinStats();
        java.io.File file18 = new java.io.File("");
        boolean boolean20 = file18.setReadable(true);
        long long21 = file18.lastModified();
        java.io.File file23 = new java.io.File(file18, "/hi!8130836485477920045:");
        boolean boolean25 = file23.setExecutable(true);
        java.net.URI uRI26 = file23.toURI();
        boolean boolean27 = file23.setReadOnly();
// flaky:         empiricalDistributionImpl0.load(file23);
        java.lang.String str29 = file23.toString();
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertNotNull(file10);
        org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/hi!6680842425217950486:");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/hi!6680842425217950486:" + "'", str11, "/hi!6680842425217950486:");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(list16);
        org.junit.Assert.assertNull("file18.getParent() == null", file18.getParent());
        org.junit.Assert.assertEquals(file18.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertEquals(file23.getParent(), "/");
        org.junit.Assert.assertEquals(file23.toString(), "/hi!8130836485477920045:");
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(uRI26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "/hi!8130836485477920045:" + "'", str29, "/hi!8130836485477920045:");
    }

    @Test
    public void test01144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01144");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.canExecute();
        long long8 = file4.getTotalSpace();
        boolean boolean9 = file4.canRead();
        boolean boolean12 = file4.setExecutable(false, false);
        boolean boolean13 = file4.createNewFile();
        boolean boolean15 = file4.setExecutable(false);
        java.lang.String str16 = file4.getParent();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!1818980254263331677:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 364740218880L + "'", long8 == 364740218880L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "/" + "'", str16, "/");
    }

    @Test
    public void test01145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01145");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = new java.net.URL("/hi!7244294130841578860:", "/hi!4201210329362459719:", (-2), "/hi!4480358428447556126:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: Invalid port number :-2");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01146");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.net.URI uRI4 = uRL3.toURI();
        java.lang.String str5 = uRL3.getUserInfo();
        java.lang.String str6 = uRL3.getFile();
        java.net.URLConnection uRLConnection7 = uRL3.openConnection();
        java.net.URLConnection uRLConnection8 = uRL3.openConnection();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRI4);
        org.junit.Assert.assertNull(str5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str6, "/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRLConnection7);
        org.junit.Assert.assertNotNull(uRLConnection8);
    }

    @Test
    public void test01147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01147");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics12 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double13 = summaryStatistics12.getMin();
        double double14 = summaryStatistics12.getStandardDeviation();
        double double15 = summaryStatistics12.getMean();
        double double16 = summaryStatistics12.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long18 = mean17.getN();
        summaryStatistics12.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean17);
        mean17.increment((double) (-27));
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean17);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics23 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double24 = summaryStatistics23.getMin();
        double double25 = summaryStatistics23.getStandardDeviation();
        double double26 = summaryStatistics23.getMean();
        double double27 = summaryStatistics23.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double30 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment29);
        summaryStatistics23.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment29);
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment29);
        org.apache.commons.math.stat.descriptive.summary.Sum sum34 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long35 = sum34.getN();
        double double36 = sum34.getResult();
        long long37 = sum34.getN();
        org.apache.commons.math.stat.descriptive.rank.Min min38 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min38.clear();
        double[] doubleArray45 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double46 = min38.evaluate(doubleArray45);
        min38.clear();
        min38.increment(0.0d);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics50 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double51 = summaryStatistics50.getMin();
        double double52 = summaryStatistics50.getStandardDeviation();
        double double53 = summaryStatistics50.getMean();
        double double54 = summaryStatistics50.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min55 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics50.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min55);
        double[] doubleArray57 = new double[] {};
        min55.incrementAll(doubleArray57);
        double double59 = min38.evaluate(doubleArray57);
        sum34.incrementAll(doubleArray57);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment29.incrementAll(doubleArray57, (int) (short) 10, 24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
    }

    @Test
    public void test01148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01148");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        boolean boolean10 = file1.setExecutable(true);
        boolean boolean11 = file1.exists();
        java.net.URI uRI12 = file1.toURI();
        java.io.File file15 = new java.io.File("/hi!4060689751378876827:", "/hi!4201210329362459719:");
        boolean boolean16 = file1.renameTo(file15);
        boolean boolean17 = file15.isHidden();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(uRI12);
        org.junit.Assert.assertEquals(file15.getParent(), "/hi!4060689751378876827:");
        org.junit.Assert.assertEquals(file15.toString(), "/hi!4060689751378876827:/hi!4201210329362459719:");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01149");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = summaryStatistics0.getSummary();
        double double5 = statisticalSummary4.getVariance();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(statisticalSummary4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test01150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01150");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) 0);
        double double5 = geometricMean0.getResult();
        geometricMean0.increment((double) 299098615808L);
        double[] doubleArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double11 = geometricMean0.evaluate(doubleArray8, 57, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test01151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01151");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long13 = variance12.getN();
        double[] doubleArray19 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double21 = variance12.evaluate(doubleArray19, (double) 'a');
        mean10.incrementAll(doubleArray19);
        double double23 = variance7.evaluate(doubleArray19);
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance7);
        double double25 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic26 = summaryStatistics0.getGeoMeanImpl();
        double double27 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics28 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double29 = summaryStatistics28.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min30 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics28.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min30);
        java.lang.Object obj32 = null;
        boolean boolean33 = summaryStatistics28.equals(obj32);
        summaryStatistics28.clear();
        long long35 = summaryStatistics28.getN();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic36 = summaryStatistics28.getMinImpl();
        summaryStatistics0.setSumImpl(storelessUnivariateStatistic36);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 19.43999999999942d + "'", double21 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 24.3d + "'", double23 == 24.3d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic36);
    }

    @Test
    public void test01152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01152");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getGeoMeanImpl();
        long long6 = summaryStatistics0.getN();
        long long7 = summaryStatistics0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test01153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01153");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        summaryStatistics0.addValue(19.44d);
        double double9 = summaryStatistics0.getMax();
        double double10 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        double double27 = variance12.evaluate(doubleArray21, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        variance12.setBiasCorrected(true);
        variance12.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double33 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment32);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl35 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl35.getSampleStats();
        java.io.File file40 = new java.io.File("");
        java.io.File file41 = java.io.File.createTempFile("hi!", ":", file40);
        java.lang.String str42 = file41.getCanonicalPath();
        boolean boolean43 = file41.createNewFile();
        empiricalDistributionImpl35.load(file41);
        double[] doubleArray45 = empiricalDistributionImpl35.getUpperBounds();
        double[] doubleArray46 = empiricalDistributionImpl35.getUpperBounds();
        double double48 = variance34.evaluate(doubleArray46, 1.0d);
        boolean boolean49 = variance12.equals((java.lang.Object) variance34);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs50 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double51 = sumOfLogs50.getResult();
        double double52 = sumOfLogs50.getResult();
        long long53 = sumOfLogs50.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics54 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean55 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics54.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean55);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean57 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean57.increment((double) (short) 100);
        geometricMean57.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic62 = geometricMean57.getSumLogImpl();
        summaryStatistics54.setMinImpl(storelessUnivariateStatistic62);
        double double64 = summaryStatistics54.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics54.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance66);
        org.apache.commons.math.stat.descriptive.rank.Min min68 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min68.clear();
        double[] doubleArray75 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double76 = min68.evaluate(doubleArray75);
        variance66.incrementAll(doubleArray75);
        sumOfLogs50.incrementAll(doubleArray75);
        double double80 = variance12.evaluate(doubleArray75, 2.51188643150958d);
        variance12.increment(19.43999999999942d);
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementations must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 19.44d + "'", double9 == 19.44d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNull(statisticalSummary36);
        org.junit.Assert.assertNull("file40.getParent() == null", file40.getParent());
        org.junit.Assert.assertEquals(file40.toString(), "");
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file41.toString(), "/hi!3526232431028309234:");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "/hi!3526232431028309234:" + "'", str42, "/hi!3526232431028309234:");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-1.0d) + "'", double76 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 673.3000000000001d + "'", double80 == 673.3000000000001d);
    }

    @Test
    public void test01154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01154");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean0.increment((double) 0);
        double double3 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean4.increment((double) 0);
        double double7 = mean4.getResult();
        mean4.clear();
        double[] doubleArray9 = new double[] {};
        mean4.incrementAll(doubleArray9);
        double double11 = mean0.evaluate(doubleArray9);
        double double12 = mean0.getResult();
        double double13 = mean0.getResult();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test01155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01155");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        int int2 = empiricalDistributionImpl0.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl0.getSampleStats();
        java.util.List list4 = empiricalDistributionImpl0.getBinStats();
        java.util.List list5 = empiricalDistributionImpl0.getBinStats();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares6 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long7 = sumOfSquares6.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long12 = variance11.getN();
        double[] doubleArray18 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double20 = variance11.evaluate(doubleArray18, (double) 'a');
        double double24 = variance9.evaluate(doubleArray18, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double27 = sumOfSquares6.evaluate(doubleArray18, (int) (short) 1, 0);
        sumOfSquares6.increment(0.0d);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl30.getSampleStats();
        java.io.File file35 = new java.io.File("");
        java.io.File file36 = java.io.File.createTempFile("hi!", ":", file35);
        java.lang.String str37 = file36.getCanonicalPath();
        boolean boolean38 = file36.createNewFile();
        empiricalDistributionImpl30.load(file36);
        double[] doubleArray40 = empiricalDistributionImpl30.getUpperBounds();
        double double43 = sumOfSquares6.evaluate(doubleArray40, 100, (int) (short) 1);
        sumOfSquares6.clear();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs45 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double46 = sumOfLogs45.getResult();
        double double47 = sumOfLogs45.getResult();
        double double48 = sumOfLogs45.getResult();
        double double49 = sumOfLogs45.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl50 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary51 = empiricalDistributionImpl50.getSampleStats();
        java.io.File file55 = new java.io.File("");
        java.io.File file56 = java.io.File.createTempFile("hi!", ":", file55);
        java.lang.String str57 = file56.getCanonicalPath();
        boolean boolean58 = file56.createNewFile();
        empiricalDistributionImpl50.load(file56);
        double[] doubleArray60 = empiricalDistributionImpl50.getUpperBounds();
        double double63 = sumOfLogs45.evaluate(doubleArray60, (int) (byte) 1, (int) (byte) 100);
        double double64 = sumOfSquares6.evaluate(doubleArray60);
        empiricalDistributionImpl0.load(doubleArray60);
        double double66 = empiricalDistributionImpl0.getNextValue();
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1000 + "'", int2 == 1000);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 19.43999999999942d + "'", double20 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNull(statisticalSummary31);
        org.junit.Assert.assertNull("file35.getParent() == null", file35.getParent());
        org.junit.Assert.assertEquals(file35.toString(), "");
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file36.toString(), "/hi!5507722416342135211:");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "/hi!5507722416342135211:" + "'", str37, "/hi!5507722416342135211:");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNull(statisticalSummary51);
        org.junit.Assert.assertNull("file55.getParent() == null", file55.getParent());
        org.junit.Assert.assertEquals(file55.toString(), "");
        org.junit.Assert.assertNotNull(file56);
        org.junit.Assert.assertEquals(file56.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file56.toString(), "/hi!3412656420299358415:");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "/hi!3412656420299358415:" + "'", str57, "/hi!3412656420299358415:");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
    }

    @Test
    public void test01156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01156");
        java.io.File file1 = new java.io.File("");
        boolean boolean3 = file1.setReadable(true);
        long long4 = file1.lastModified();
        java.io.File file6 = new java.io.File(file1, "/hi!8130836485477920045:");
        boolean boolean9 = file1.setExecutable(false, false);
        boolean boolean12 = file1.setExecutable(true, false);
        boolean boolean13 = file1.delete();
        boolean boolean15 = file1.equals((java.lang.Object) "/hi!9039473577005721951:");
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
        org.junit.Assert.assertEquals(file6.toString(), "/hi!8130836485477920045:");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test01157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01157");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double19 = geometricMean3.evaluate(doubleArray16);
        empiricalDistributionImpl0.load(doubleArray16);
        java.util.List list21 = empiricalDistributionImpl0.getBinStats();
        java.io.File file24 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL25 = file24.toURL();
        java.net.URI uRI26 = uRL25.toURI();
        java.net.URLConnection uRLConnection27 = uRL25.openConnection();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(uRL25);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /experiment/hi!2169115775229245488/hi! (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.51188643150958d + "'", double19 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file24.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL25);
// flaky:         org.junit.Assert.assertEquals(uRL25.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRI26);
        org.junit.Assert.assertNotNull(uRLConnection27);
    }

    @Test
    public void test01158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01158");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        double double4 = summaryStatistics0.getSumOfLogs();
        double double5 = summaryStatistics0.getMean();
        double double6 = summaryStatistics0.getMin();
        double double7 = summaryStatistics0.getSum();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test01159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01159");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        java.util.List list2 = empiricalDistributionImpl1.getBinStats();
        java.util.List list3 = empiricalDistributionImpl1.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl1.getSampleStats();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = empiricalDistributionImpl1.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertNull(statisticalSummary4);
    }

    @Test
    public void test01160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01160");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = summaryStatistics0.getSummary();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics6 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double7 = summaryStatistics6.getMin();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean8 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean8.increment((double) (short) 100);
        geometricMean8.increment(0.0d);
        geometricMean8.clear();
        summaryStatistics6.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean8);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics6.getVarianceImpl();
        summaryStatistics0.setSumImpl(storelessUnivariateStatistic15);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean17 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean17.increment((double) (short) 100);
        geometricMean17.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic22 = geometricMean17.getSumLogImpl();
        long long23 = geometricMean17.getN();
        long long24 = geometricMean17.getN();
        geometricMean17.clear();
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean17);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares27 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long28 = sumOfSquares27.getN();
        long long29 = sumOfSquares27.getN();
        sumOfSquares27.increment((double) 1645454026000L);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares32 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long33 = sumOfSquares32.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long38 = variance37.getN();
        double[] doubleArray44 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double46 = variance37.evaluate(doubleArray44, (double) 'a');
        double double50 = variance35.evaluate(doubleArray44, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double53 = sumOfSquares32.evaluate(doubleArray44, (int) (short) 1, 0);
        double double54 = sumOfSquares32.getResult();
        long long55 = sumOfSquares32.getN();
        sumOfSquares32.increment((double) 1000);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double60 = secondMoment59.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment59);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment59);
        double double63 = secondMoment59.getResult();
        secondMoment59.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment65 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment65.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean67 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment65);
        secondMoment65.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment65);
        double double70 = variance69.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl71 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary72 = empiricalDistributionImpl71.getSampleStats();
        java.io.File file76 = new java.io.File("");
        java.io.File file77 = java.io.File.createTempFile("hi!", ":", file76);
        java.lang.String str78 = file77.getCanonicalPath();
        boolean boolean79 = file77.createNewFile();
        empiricalDistributionImpl71.load(file77);
        double[] doubleArray81 = empiricalDistributionImpl71.getUpperBounds();
        double[] doubleArray82 = empiricalDistributionImpl71.getUpperBounds();
        variance69.incrementAll(doubleArray82, 1, (int) (short) 1);
        double double88 = secondMoment59.evaluate(doubleArray82, 1, 0);
        sumOfSquares32.incrementAll(doubleArray82, 0, (int) (short) 100);
        double double94 = sumOfSquares27.evaluate(doubleArray82, (int) (byte) 1, 100);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = geometricMean17.evaluate(doubleArray82, (-3), 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertNotNull(statisticalSummary5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2L + "'", long24 == 2L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 19.43999999999942d + "'", double46 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNull(statisticalSummary72);
        org.junit.Assert.assertNull("file76.getParent() == null", file76.getParent());
        org.junit.Assert.assertEquals(file76.toString(), "");
        org.junit.Assert.assertNotNull(file77);
        org.junit.Assert.assertEquals(file77.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file77.toString(), "/hi!7236327835789848142:");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "/hi!7236327835789848142:" + "'", str78, "/hi!7236327835789848142:");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue(Double.isNaN(double94));
    }

    @Test
    public void test01161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01161");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.lang.String str6 = uRL3.toExternalForm();
        java.io.File file9 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL10 = file9.toURL();
        java.lang.String str11 = uRL10.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler13 = null;
        java.net.URL uRL14 = new java.net.URL(uRL10, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler13);
        boolean boolean15 = uRL3.sameFile(uRL14);
        java.net.URLStreamHandler uRLStreamHandler17 = null;
        java.net.URL uRL18 = new java.net.URL(uRL14, "/hi!8304360505110833158:", uRLStreamHandler17);
        java.lang.String str19 = uRL18.getQuery();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str6, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file9.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file9.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL10);
// flaky:         org.junit.Assert.assertEquals(uRL10.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals(uRL18.toString(), "file:/hi!8304360505110833158:");
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test01162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01162");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.canExecute();
        long long8 = file4.getFreeSpace();
        boolean boolean10 = file4.setLastModified((long) 10);
        boolean boolean11 = file4.isHidden();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!5088030450662212897:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 299098615808L + "'", long8 == 299098615808L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01163");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = summaryStatistics0.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics13 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double14 = summaryStatistics13.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics13.getGeoMeanImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic15);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic17 = summaryStatistics0.getMinImpl();
        double double18 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.summary.Sum sum19 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long20 = sum19.getN();
        long long21 = sum19.getN();
        sum19.increment((double) ':');
        sum19.increment(1.645454026E12d);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum19);
        double double27 = sum19.getResult();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.645454026058E12d + "'", double27 == 1.645454026058E12d);
    }

    @Test
    public void test01164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01164");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.lang.String str5 = uRL3.getUserInfo();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.toString();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str7, "file:/experiment/hi!2169115775229245488/hi!");
    }

    @Test
    public void test01165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01165");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        summaryStatistics0.addValue(19.44d);
        double double9 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics0.getMeanImpl();
        double double11 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = summaryStatistics0.getVarianceImpl();
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 19.44d + "'", double9 == 19.44d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 19.44d + "'", double11 == 19.44d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
    }

    @Test
    public void test01166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01166");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.net.URI uRI4 = uRL3.toURI();
        java.lang.String str5 = uRL3.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler7 = null;
        java.net.URL uRL8 = new java.net.URL(uRL3, "/hi!8641896357547398784:", uRLStreamHandler7);
        int int9 = uRL8.getDefaultPort();
        java.lang.String str10 = uRL8.toString();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRI4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals(uRL8.toString(), "file:/hi!8641896357547398784:");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "file:/hi!8641896357547398784:" + "'", str10, "file:/hi!8641896357547398784:");
    }

    @Test
    public void test01167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01167");
        java.net.URL uRL0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL2 = new java.net.URL(uRL0, "/hi!5098771555166022453:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no protocol: /hi!5098771555166022453:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01168");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        secondMoment0.increment((double) 1);
        long long4 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment(100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
    }

    @Test
    public void test01169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01169");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler6 = null;
        java.net.URL uRL7 = new java.net.URL(uRL3, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler6);
        java.lang.String str8 = uRL3.toExternalForm();
        java.net.URL uRL10 = new java.net.URL(uRL3, "/hi!6147520189804127628:");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream11 = uRL3.openStream();
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /experiment/hi!2169115775229245488/hi! (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str8, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/hi!6147520189804127628:");
    }

    @Test
    public void test01170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01170");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        java.lang.String str5 = file4.getCanonicalPath();
        java.nio.file.Path path6 = file4.toPath();
        boolean boolean9 = file4.setExecutable(false, false);
        boolean boolean11 = file4.setWritable(true);
        boolean boolean12 = file4.isHidden();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!2457289734516531611:");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/hi!2457289734516531611:" + "'", str5, "/hi!2457289734516531611:");
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01171");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSum();
        double double4 = summaryStatistics0.getGeometricMean();
        double double5 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic7 = summaryStatistics0.getSumsqImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic7);
    }

    @Test
    public void test01172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01172");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '/');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        java.io.File file4 = new java.io.File("/hi!4533436540036848542:");
        boolean boolean6 = file4.setReadable(true);
        long long7 = file4.getFreeSpace();
        long long8 = file4.lastModified();
        boolean boolean11 = file4.setExecutable(false, false);
        java.lang.String str12 = file4.getPath();
        java.io.File file13 = file4.getAbsoluteFile();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file13);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /hi!4533436540036848542: (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
        org.junit.Assert.assertEquals(file4.toString(), "/hi!4533436540036848542:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 299098611712L + "'", long7 == 299098611712L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645454106000L + "'", long8 == 1645454106000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/hi!4533436540036848542:" + "'", str12, "/hi!4533436540036848542:");
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "/");
        org.junit.Assert.assertEquals(file13.toString(), "/hi!4533436540036848542:");
    }

    @Test
    public void test01173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01173");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.canExecute();
        java.io.File file9 = new java.io.File("");
        boolean boolean12 = file9.setWritable(true, true);
        boolean boolean13 = file9.setReadOnly();
        boolean boolean16 = file9.setWritable(true, false);
        java.net.URI uRI17 = file9.toURI();
        boolean boolean18 = file9.mkdir();
        java.io.File file19 = file9.getCanonicalFile();
        boolean boolean20 = file4.renameTo(file9);
        boolean boolean23 = file9.setWritable(true, true);
        boolean boolean24 = file9.canRead();
        boolean boolean25 = file9.canExecute();
        java.lang.String str26 = file9.getCanonicalPath();
        java.lang.String str27 = file9.toString();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!6407303692428900448:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(uRI17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(file19);
// flaky:         org.junit.Assert.assertEquals(file19.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file19.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "/experiment" + "'", str26, "/experiment");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test01174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01174");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min5 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min5);
        double[] doubleArray7 = new double[] {};
        min5.incrementAll(doubleArray7);
        long long9 = min5.getN();
        long long10 = min5.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test01175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01175");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("/hi!2553205981964178444:", "/hi!1867123119367700337:");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/hi!2553205981964178444:4317170171288799278/hi!1867123119367700337:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01176");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean2.increment((double) 0);
        double double5 = mean2.getResult();
        long long6 = mean2.getN();
        mean2.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean2);
        mean2.clear();
        mean2.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long12 = mean11.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double14 = secondMoment13.getResult();
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean17 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean17.increment((double) (short) 100);
        geometricMean17.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long24 = variance23.getN();
        double[] doubleArray30 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double32 = variance23.evaluate(doubleArray30, (double) 'a');
        double double33 = geometricMean17.evaluate(doubleArray30);
        double double34 = variance16.evaluate(doubleArray30);
        double double35 = mean11.evaluate(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = mean2.evaluate(doubleArray30, (-6), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 19.43999999999942d + "'", double32 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2.51188643150958d + "'", double33 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 24.3d + "'", double34 == 24.3d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 4.6d + "'", double35 == 4.6d);
    }

    @Test
    public void test01177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01177");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file5 = new java.io.File("/hi!8695361449339891175:", "/hi!3523803642448568020:");
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file5);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /hi!8695361449339891175:/hi!3523803642448568020: (Not a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertEquals(file5.getParent(), "/hi!8695361449339891175:");
        org.junit.Assert.assertEquals(file5.toString(), "/hi!8695361449339891175:/hi!3523803642448568020:");
    }

    @Test
    public void test01178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01178");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic3 = summaryStatistics0.getGeoMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double5 = secondMoment4.getResult();
        secondMoment4.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment4);
        java.lang.Object obj9 = null;
        boolean boolean10 = secondMoment4.equals(obj9);
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment4);
        secondMoment4.clear();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl13.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = empiricalDistributionImpl13.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean16 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean16.increment((double) (short) 100);
        geometricMean16.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long23 = variance22.getN();
        double[] doubleArray29 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double31 = variance22.evaluate(doubleArray29, (double) 'a');
        double double32 = geometricMean16.evaluate(doubleArray29);
        empiricalDistributionImpl13.load(doubleArray29);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl13.getSampleStats();
        java.io.File file38 = new java.io.File("");
        java.io.File file39 = java.io.File.createTempFile("hi!", ":", file38);
        java.lang.String str40 = file39.getCanonicalPath();
        boolean boolean42 = file39.setExecutable(false);
        boolean boolean44 = file39.setWritable(true);
        boolean boolean45 = file39.mkdirs();
        boolean boolean48 = file39.setExecutable(true, false);
        empiricalDistributionImpl13.load(file39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long52 = variance51.getN();
        long long53 = variance51.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double55 = secondMoment54.getResult();
        secondMoment54.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment54);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean58 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean58.increment((double) (short) 100);
        geometricMean58.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long65 = variance64.getN();
        double[] doubleArray71 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double73 = variance64.evaluate(doubleArray71, (double) 'a');
        double double74 = geometricMean58.evaluate(doubleArray71);
        double double75 = variance57.evaluate(doubleArray71);
        double double76 = variance51.evaluate(doubleArray71);
        empiricalDistributionImpl13.load(doubleArray71);
        double double78 = secondMoment4.evaluate(doubleArray71);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment80 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double81 = secondMoment80.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment80);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl83 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary84 = empiricalDistributionImpl83.getSampleStats();
        java.io.File file88 = new java.io.File("");
        java.io.File file89 = java.io.File.createTempFile("hi!", ":", file88);
        java.lang.String str90 = file89.getCanonicalPath();
        boolean boolean91 = file89.createNewFile();
        empiricalDistributionImpl83.load(file89);
        double[] doubleArray93 = empiricalDistributionImpl83.getUpperBounds();
        double[] doubleArray94 = empiricalDistributionImpl83.getUpperBounds();
        double double96 = variance82.evaluate(doubleArray94, 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = secondMoment4.evaluate(doubleArray94, 0, (-27));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNull(statisticalSummary15);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 19.43999999999942d + "'", double31 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2.51188643150958d + "'", double32 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(statisticalSummary34);
        org.junit.Assert.assertNull("file38.getParent() == null", file38.getParent());
        org.junit.Assert.assertEquals(file38.toString(), "");
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertEquals(file39.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file39.toString(), "/hi!517331833564756055:");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "/hi!517331833564756055:" + "'", str40, "/hi!517331833564756055:");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 19.43999999999942d + "'", double73 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 2.51188643150958d + "'", double74 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 24.3d + "'", double75 == 24.3d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 19.44d + "'", double76 == 19.44d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 97.2d + "'", double78 == 97.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNull(statisticalSummary84);
        org.junit.Assert.assertNull("file88.getParent() == null", file88.getParent());
        org.junit.Assert.assertEquals(file88.toString(), "");
        org.junit.Assert.assertNotNull(file89);
        org.junit.Assert.assertEquals(file89.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file89.toString(), "/hi!6739962590351507094:");
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "/hi!6739962590351507094:" + "'", str90, "/hi!6739962590351507094:");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertTrue(Double.isNaN(double96));
    }

    @Test
    public void test01179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01179");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.canExecute();
        java.io.File file9 = new java.io.File("");
        boolean boolean12 = file9.setWritable(true, true);
        boolean boolean13 = file9.setReadOnly();
        boolean boolean16 = file9.setWritable(true, false);
        java.net.URI uRI17 = file9.toURI();
        boolean boolean18 = file9.mkdir();
        java.io.File file19 = file9.getCanonicalFile();
        boolean boolean20 = file4.renameTo(file9);
        java.lang.String str21 = file4.getPath();
        boolean boolean24 = file4.setExecutable(true, false);
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!7815708013996444960:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(uRI17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(file19);
// flaky:         org.junit.Assert.assertEquals(file19.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file19.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/hi!7815708013996444960:" + "'", str21, "/hi!7815708013996444960:");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test01180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01180");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.increment((double) (byte) 100);
        java.io.File file6 = new java.io.File("/hi!4420905478953568698:", "/experiment/hi!2169115775229245488");
        boolean boolean7 = variance1.equals((java.lang.Object) "/hi!4420905478953568698:");
        boolean boolean8 = variance1.isBiasCorrected();
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertEquals(file6.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file6.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01181");
        java.io.File file2 = new java.io.File("/hi!2756764035548942023:", ":");
        java.io.File file3 = file2.getParentFile();
        java.io.File file5 = new java.io.File(file2, "/hi!8130836485477920045:");
        java.io.File file6 = file5.getCanonicalFile();
        java.io.File file7 = file6.getParentFile();
        boolean boolean8 = file6.isAbsolute();
        org.junit.Assert.assertEquals(file2.getParent(), "/hi!2756764035548942023:");
        org.junit.Assert.assertEquals(file2.toString(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/");
        org.junit.Assert.assertEquals(file3.toString(), "/hi!2756764035548942023:");
        org.junit.Assert.assertEquals(file5.getParent(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertEquals(file5.toString(), "/hi!2756764035548942023:/:/hi!8130836485477920045:");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertEquals(file6.toString(), "/hi!2756764035548942023:/:/hi!8130836485477920045:");
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "/hi!2756764035548942023:");
        org.junit.Assert.assertEquals(file7.toString(), "/hi!2756764035548942023:/:");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test01182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01182");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        boolean boolean10 = file1.setExecutable(true);
        boolean boolean11 = file1.exists();
        java.io.File file13 = new java.io.File(file1, "/hi!7644059860405527722:");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = file1.setLastModified((long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative time");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals(file13.getParent(), "/");
        org.junit.Assert.assertEquals(file13.toString(), "/hi!7644059860405527722:");
    }

    @Test
    public void test01183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01183");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        java.lang.String str5 = file4.getCanonicalPath();
        boolean boolean7 = file4.setExecutable(false);
        java.lang.String str8 = file4.getName();
        java.lang.String str9 = file4.getName();
        boolean boolean12 = file4.setExecutable(true, true);
        boolean boolean14 = file4.setWritable(true);
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!1091631819458065695:");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/hi!1091631819458065695:" + "'", str5, "/hi!1091631819458065695:");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!1091631819458065695:" + "'", str8, "hi!1091631819458065695:");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!1091631819458065695:" + "'", str9, "hi!1091631819458065695:");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test01184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01184");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min0.clear();
        double[] doubleArray7 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double8 = min0.evaluate(doubleArray7);
        min0.clear();
        min0.clear();
        long long11 = min0.getN();
        min0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long29 = variance28.getN();
        double[] doubleArray35 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double37 = variance28.evaluate(doubleArray35, (double) 'a');
        mean26.incrementAll(doubleArray35);
        double double40 = variance14.evaluate(doubleArray35, (double) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs41 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        long long42 = sumOfLogs41.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean43 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs41);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares44 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long45 = sumOfSquares44.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long50 = variance49.getN();
        double[] doubleArray56 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double58 = variance49.evaluate(doubleArray56, (double) 'a');
        double double62 = variance47.evaluate(doubleArray56, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double65 = sumOfSquares44.evaluate(doubleArray56, (int) (short) 1, 0);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics66 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double67 = summaryStatistics66.getMin();
        double double68 = summaryStatistics66.getStandardDeviation();
        double double69 = summaryStatistics66.getMean();
        double double70 = summaryStatistics66.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min71 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics66.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min71);
        double[] doubleArray73 = new double[] {};
        min71.incrementAll(doubleArray73);
        double double75 = sumOfSquares44.evaluate(doubleArray73);
        geometricMean43.incrementAll(doubleArray73);
        double double78 = variance14.evaluate(doubleArray73, (double) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = min0.evaluate(doubleArray73, (int) (byte) 100, (-50));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 19.43999999999942d + "'", double37 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 19.44d + "'", double40 == 19.44d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 19.43999999999942d + "'", double58 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
    }

    @Test
    public void test01185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01185");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        sumOfLogs0.clear();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment3);
        secondMoment3.clear();
        double double7 = secondMoment3.getResult();
        long long8 = secondMoment3.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs9 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        long long10 = sumOfLogs9.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean11 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs9);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares12 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long13 = sumOfSquares12.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long18 = variance17.getN();
        double[] doubleArray24 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double26 = variance17.evaluate(doubleArray24, (double) 'a');
        double double30 = variance15.evaluate(doubleArray24, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double33 = sumOfSquares12.evaluate(doubleArray24, (int) (short) 1, 0);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics34 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double35 = summaryStatistics34.getMin();
        double double36 = summaryStatistics34.getStandardDeviation();
        double double37 = summaryStatistics34.getMean();
        double double38 = summaryStatistics34.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min39 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics34.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min39);
        double[] doubleArray41 = new double[] {};
        min39.incrementAll(doubleArray41);
        double double43 = sumOfSquares12.evaluate(doubleArray41);
        geometricMean11.incrementAll(doubleArray41);
        secondMoment3.incrementAll(doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            double double48 = geometricMean2.evaluate(doubleArray41, 57, (int) ':');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 19.43999999999942d + "'", double26 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double43));
    }

    @Test
    public void test01186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01186");
        java.io.IOException iOException1 = new java.io.IOException("hi!3424111480641751587");
    }

    @Test
    public void test01187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01187");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double19 = geometricMean3.evaluate(doubleArray16);
        empiricalDistributionImpl0.load(doubleArray16);
        java.io.File file23 = java.io.File.createTempFile("hi!", "");
        boolean boolean25 = file23.setLastModified((long) '#');
        java.io.File file26 = file23.getCanonicalFile();
        empiricalDistributionImpl0.load(file23);
        java.util.List list28 = empiricalDistributionImpl0.getBinStats();
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.51188643150958d + "'", double19 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file23.toString(), "/tmp/hi!3554527199540418454");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/tmp/hi!3554527199540418454");
        org.junit.Assert.assertNotNull(list28);
    }

    @Test
    public void test01188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01188");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max0.clear();
        double double2 = max0.getResult();
        long long3 = max0.getN();
        long long4 = max0.getN();
        long long5 = max0.getN();
        long long6 = max0.getN();
        org.apache.commons.math.stat.descriptive.rank.Min min7 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min7.clear();
        double[] doubleArray14 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double15 = min7.evaluate(doubleArray14);
        long long16 = min7.getN();
        long long17 = min7.getN();
        min7.clear();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl19.getSampleStats();
        boolean boolean21 = empiricalDistributionImpl19.isLoaded();
        boolean boolean22 = empiricalDistributionImpl19.isLoaded();
        java.util.List list23 = empiricalDistributionImpl19.getBinStats();
        int int24 = empiricalDistributionImpl19.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long31 = variance30.getN();
        double[] doubleArray37 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double39 = variance30.evaluate(doubleArray37, (double) 'a');
        mean28.incrementAll(doubleArray37);
        empiricalDistributionImpl25.load(doubleArray37);
        empiricalDistributionImpl19.load(doubleArray37);
        boolean boolean43 = empiricalDistributionImpl19.isLoaded();
        java.util.List list44 = empiricalDistributionImpl19.getBinStats();
        double[] doubleArray45 = empiricalDistributionImpl19.getUpperBounds();
        int int46 = empiricalDistributionImpl19.getBinCount();
        double[] doubleArray47 = empiricalDistributionImpl19.getUpperBounds();
        double double50 = min7.evaluate(doubleArray47, 57, 47);
        // The following exception was thrown during execution in test generation
        try {
            double double53 = max0.evaluate(doubleArray47, 10, (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1000 + "'", int24 == 1000);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 19.43999999999942d + "'", double39 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(list44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1000 + "'", int46 == 1000);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.6d + "'", double50 == 0.6d);
    }

    @Test
    public void test01189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01189");
        java.io.File file1 = new java.io.File("/hi!4533436540036848542:");
        boolean boolean3 = file1.setReadable(true);
        long long4 = file1.getFreeSpace();
        java.io.File file5 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int6 = file1.compareTo(file5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file1.getParent(), "/");
        org.junit.Assert.assertEquals(file1.toString(), "/hi!4533436540036848542:");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 299098611712L + "'", long4 == 299098611712L);
    }

    @Test
    public void test01190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01190");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        java.io.File file10 = new java.io.File(uRI9);
        java.io.File file11 = file10.getCanonicalFile();
        boolean boolean12 = file10.mkdir();
        long long13 = file10.getFreeSpace();
        java.lang.String str14 = file10.getCanonicalPath();
        java.lang.String str15 = file10.toString();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
// flaky:         org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/experiment");
        org.junit.Assert.assertNotNull(file11);
// flaky:         org.junit.Assert.assertEquals(file11.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 299098607616L + "'", long13 == 299098607616L);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "/experiment" + "'", str14, "/experiment");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "/experiment" + "'", str15, "/experiment");
    }

    @Test
    public void test01191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01191");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getMaxImpl();
        double double7 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean8 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean8.increment((double) (short) 100);
        geometricMean8.increment((double) 0);
        double double13 = geometricMean8.getResult();
        geometricMean8.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long18 = variance17.getN();
        long long19 = variance17.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double21 = secondMoment20.getResult();
        secondMoment20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean24 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean24.increment((double) (short) 100);
        geometricMean24.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long31 = variance30.getN();
        double[] doubleArray37 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double39 = variance30.evaluate(doubleArray37, (double) 'a');
        double double40 = geometricMean24.evaluate(doubleArray37);
        double double41 = variance23.evaluate(doubleArray37);
        double double42 = variance17.evaluate(doubleArray37);
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance17);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double46 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        double double49 = variance48.getResult();
        boolean boolean50 = variance48.isBiasCorrected();
        variance48.setBiasCorrected(true);
        double double53 = variance48.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl54 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary55 = empiricalDistributionImpl54.getSampleStats();
        boolean boolean56 = empiricalDistributionImpl54.isLoaded();
        boolean boolean57 = empiricalDistributionImpl54.isLoaded();
        java.util.List list58 = empiricalDistributionImpl54.getBinStats();
        int int59 = empiricalDistributionImpl54.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl60 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean63 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment61);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long66 = variance65.getN();
        double[] doubleArray72 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double74 = variance65.evaluate(doubleArray72, (double) 'a');
        mean63.incrementAll(doubleArray72);
        empiricalDistributionImpl60.load(doubleArray72);
        empiricalDistributionImpl54.load(doubleArray72);
        boolean boolean78 = empiricalDistributionImpl54.isLoaded();
        java.util.List list79 = empiricalDistributionImpl54.getBinStats();
        double[] doubleArray80 = empiricalDistributionImpl54.getUpperBounds();
        double double81 = variance48.evaluate(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double double84 = variance17.evaluate(doubleArray80, (-2), (-11));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 19.43999999999942d + "'", double39 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2.51188643150958d + "'", double40 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 24.3d + "'", double41 == 24.3d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 19.44d + "'", double42 == 19.44d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNull(statisticalSummary55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(list58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1000 + "'", int59 == 1000);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 19.43999999999942d + "'", double74 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(list79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.6E-4d + "'", double81 == 1.6E-4d);
    }

    @Test
    public void test01192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01192");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.net.URL uRL6 = new java.net.URL(uRL3, "/hi!2756764035548942023:");
        java.net.URI uRI7 = uRL3.toURI();
        java.lang.String str8 = uRL3.getHost();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(uRL6.toString(), "file:/hi!2756764035548942023:");
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test01193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01193");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMax();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = summaryStatistics0.getSummary();
        double double6 = statisticalSummary5.getStandardDeviation();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(statisticalSummary5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test01194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01194");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = summaryStatistics0.getSummary();
        long long5 = summaryStatistics0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(statisticalSummary4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test01195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01195");
        java.io.File file3 = new java.io.File("/hi!4533436540036848542:");
        boolean boolean4 = file3.mkdirs();
        long long5 = file3.lastModified();
        java.lang.String str6 = file3.getName();
        boolean boolean7 = file3.canExecute();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file8 = java.io.File.createTempFile("/hi!5197445895043722416:", "hi!2169115775229245488/hi!", file3);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /hi!4533436540036848542:/hi!5197445895043722416:3270156878538775415hi!2169115775229245488/hi!");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file3.getParent(), "/");
        org.junit.Assert.assertEquals(file3.toString(), "/hi!4533436540036848542:");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645454106000L + "'", long5 == 1645454106000L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!4533436540036848542:" + "'", str6, "hi!4533436540036848542:");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test01196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01196");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("", "/hi!2341625185503900209:", 12, "hi!6045577589556497825", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: ");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01197");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min0.clear();
        double[] doubleArray7 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double8 = min0.evaluate(doubleArray7);
        long long9 = min0.getN();
        long long10 = min0.getN();
        min0.increment((double) 299098669056L);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares13 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long14 = sumOfSquares13.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long19 = variance18.getN();
        double[] doubleArray25 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double27 = variance18.evaluate(doubleArray25, (double) 'a');
        double double31 = variance16.evaluate(doubleArray25, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double34 = sumOfSquares13.evaluate(doubleArray25, (int) (short) 1, 0);
        double double35 = sumOfSquares13.getResult();
        long long36 = sumOfSquares13.getN();
        sumOfSquares13.increment((double) 1000);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double41 = secondMoment40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment40);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        double double44 = secondMoment40.getResult();
        secondMoment40.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment46);
        secondMoment46.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        double double51 = variance50.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary53 = empiricalDistributionImpl52.getSampleStats();
        java.io.File file57 = new java.io.File("");
        java.io.File file58 = java.io.File.createTempFile("hi!", ":", file57);
        java.lang.String str59 = file58.getCanonicalPath();
        boolean boolean60 = file58.createNewFile();
        empiricalDistributionImpl52.load(file58);
        double[] doubleArray62 = empiricalDistributionImpl52.getUpperBounds();
        double[] doubleArray63 = empiricalDistributionImpl52.getUpperBounds();
        variance50.incrementAll(doubleArray63, 1, (int) (short) 1);
        double double69 = secondMoment40.evaluate(doubleArray63, 1, 0);
        sumOfSquares13.incrementAll(doubleArray63, 0, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double75 = min0.evaluate(doubleArray63, (-27), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 19.43999999999942d + "'", double27 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNull(statisticalSummary53);
        org.junit.Assert.assertNull("file57.getParent() == null", file57.getParent());
        org.junit.Assert.assertEquals(file57.toString(), "");
        org.junit.Assert.assertNotNull(file58);
        org.junit.Assert.assertEquals(file58.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file58.toString(), "/hi!2015278442459094524:");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "/hi!2015278442459094524:" + "'", str59, "/hi!2015278442459094524:");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
    }

    @Test
    public void test01198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01198");
        java.io.File file3 = new java.io.File("");
        boolean boolean6 = file3.setWritable(true, true);
        boolean boolean7 = file3.setReadOnly();
        boolean boolean10 = file3.setWritable(true, false);
        java.net.URI uRI11 = file3.toURI();
        java.io.File file12 = new java.io.File(uRI11);
        java.io.File file13 = new java.io.File(uRI11);
        java.io.File file14 = file13.getCanonicalFile();
        long long15 = file13.getFreeSpace();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file16 = java.io.File.createTempFile("/hi!8038304911684658292:", "/tmp/hi!5558372097558186219", file13);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /experiment/hi!8038304911684658292:348127793343165783/tmp/hi!5558372097558186219");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(uRI11);
// flaky:         org.junit.Assert.assertEquals(file12.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file13.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/experiment");
        org.junit.Assert.assertNotNull(file14);
// flaky:         org.junit.Assert.assertEquals(file14.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/experiment");
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 299098603520L + "'", long15 == 299098603520L);
    }

    @Test
    public void test01199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01199");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment(0.0d);
        geometricMean0.clear();
        double double6 = geometricMean0.getResult();
        double double7 = geometricMean0.getResult();
        double double8 = geometricMean0.getResult();
        double[] doubleArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double12 = geometricMean0.evaluate(doubleArray9, (int) '4', (-27));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test01200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01200");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment(0.0d);
        geometricMean0.clear();
        double double6 = geometricMean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double9 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment13);
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        double double18 = variance17.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl19.getSampleStats();
        java.io.File file24 = new java.io.File("");
        java.io.File file25 = java.io.File.createTempFile("hi!", ":", file24);
        java.lang.String str26 = file25.getCanonicalPath();
        boolean boolean27 = file25.createNewFile();
        empiricalDistributionImpl19.load(file25);
        double[] doubleArray29 = empiricalDistributionImpl19.getUpperBounds();
        double[] doubleArray30 = empiricalDistributionImpl19.getUpperBounds();
        variance17.incrementAll(doubleArray30, 1, (int) (short) 1);
        double double34 = variance12.evaluate(doubleArray30);
        geometricMean0.incrementAll(doubleArray30, (int) (short) 1, 1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = empiricalDistributionImpl38.getSampleStats();
        java.io.File file43 = new java.io.File("");
        java.io.File file44 = java.io.File.createTempFile("hi!", ":", file43);
        java.lang.String str45 = file44.getCanonicalPath();
        boolean boolean46 = file44.createNewFile();
        empiricalDistributionImpl38.load(file44);
        double[] doubleArray48 = empiricalDistributionImpl38.getUpperBounds();
        geometricMean0.incrementAll(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean50 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean50.increment((double) (short) 100);
        geometricMean50.increment((double) (-1L));
        geometricMean50.increment((double) (byte) 100);
        geometricMean50.increment((double) 1645454035000L);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl59 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment60.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment60);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long65 = variance64.getN();
        double[] doubleArray71 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double73 = variance64.evaluate(doubleArray71, (double) 'a');
        mean62.incrementAll(doubleArray71);
        empiricalDistributionImpl59.load(doubleArray71);
        java.util.List list76 = empiricalDistributionImpl59.getBinStats();
        double[] doubleArray77 = empiricalDistributionImpl59.getUpperBounds();
        double double80 = geometricMean50.evaluate(doubleArray77, (int) (byte) 0, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            double double83 = geometricMean0.evaluate(doubleArray77, 35, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNull(statisticalSummary20);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/hi!8779946402595749302:");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "/hi!8779946402595749302:" + "'", str26, "/hi!8779946402595749302:");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNull(statisticalSummary39);
        org.junit.Assert.assertNull("file43.getParent() == null", file43.getParent());
        org.junit.Assert.assertEquals(file43.toString(), "");
        org.junit.Assert.assertNotNull(file44);
        org.junit.Assert.assertEquals(file44.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file44.toString(), "/hi!5028808212832571515:");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "/hi!5028808212832571515:" + "'", str45, "/hi!5028808212832571515:");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 19.43999999999942d + "'", double73 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(list76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.6d + "'", double80 == 0.6d);
    }

    @Test
    public void test01201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01201");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("/hi!6943974853799061556:", "/hi!7908114067750950521:", (int) (byte) 0, "/hi!4709720742413236128:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!6943974853799061556:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01202");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMax();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.Mean mean6 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long7 = mean6.getN();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean6);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.clear();
        double double11 = secondMoment9.getResult();
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment9);
        double double13 = secondMoment9.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test01203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01203");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean2.increment((double) 0);
        double double5 = mean2.getResult();
        long long6 = mean2.getN();
        mean2.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean2);
        double double9 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean10 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean10.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long29 = variance28.getN();
        double[] doubleArray35 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double37 = variance28.evaluate(doubleArray35, (double) 'a');
        mean26.incrementAll(doubleArray35);
        double double40 = variance14.evaluate(doubleArray35, (double) (byte) 1);
        geometricMean10.incrementAll(doubleArray35);
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean10);
        double double43 = geometricMean10.getResult();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares44 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long45 = sumOfSquares44.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean46 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean46.increment((double) (short) 100);
        geometricMean46.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic51 = geometricMean46.getSumLogImpl();
        geometricMean46.clear();
        boolean boolean53 = sumOfSquares44.equals((java.lang.Object) geometricMean46);
        sumOfSquares44.increment((double) 0.0f);
        sumOfSquares44.increment(0.0d);
        // The following exception was thrown during execution in test generation
        try {
            geometricMean10.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementation must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 19.43999999999942d + "'", double37 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 19.44d + "'", double40 == 19.44d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4.641588833612779d + "'", double43 == 4.641588833612779d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test01204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01204");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) (-1L));
        geometricMean0.increment((double) (byte) 1);
        geometricMean0.increment((double) 299098718208L);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = geometricMean0.getSumLogImpl();
        java.lang.Class<?> wildcardClass10 = geometricMean0.getClass();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test01205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01205");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        java.net.URL uRL6 = file1.toURL();
        long long7 = file1.getFreeSpace();
        boolean boolean8 = file1.canRead();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(uRL6);
// flaky:         org.junit.Assert.assertEquals(uRL6.toString(), "file:/experiment");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01206");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.clear();
        secondMoment0.increment(0.0d);
        secondMoment0.increment((double) (short) 1);
        java.io.File file7 = new java.io.File("");
        boolean boolean10 = file7.setWritable(true, true);
        boolean boolean11 = file7.setReadOnly();
        boolean boolean14 = file7.setWritable(true, false);
        java.net.URI uRI15 = file7.toURI();
        boolean boolean17 = file7.setExecutable(true);
        java.net.URI uRI18 = file7.toURI();
        boolean boolean19 = secondMoment0.equals((java.lang.Object) file7);
        boolean boolean22 = file7.setWritable(true, true);
        boolean boolean23 = file7.isDirectory();
        org.junit.Assert.assertNull("file7.getParent() == null", file7.getParent());
        org.junit.Assert.assertEquals(file7.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(uRI15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(uRI18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test01207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01207");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMax();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = summaryStatistics0.getSummary();
        summaryStatistics0.addValue((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = summaryStatistics0.getSummary();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(statisticalSummary5);
        org.junit.Assert.assertNotNull(statisticalSummary8);
    }

    @Test
    public void test01208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01208");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl4 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl4.getSampleStats();
        java.io.File file9 = new java.io.File("");
        java.io.File file10 = java.io.File.createTempFile("hi!", ":", file9);
        java.lang.String str11 = file10.getCanonicalPath();
        boolean boolean12 = file10.createNewFile();
        empiricalDistributionImpl4.load(file10);
        double[] doubleArray14 = empiricalDistributionImpl4.getUpperBounds();
        double[] doubleArray15 = empiricalDistributionImpl4.getUpperBounds();
        double double17 = variance3.evaluate(doubleArray15, 1.0d);
        boolean boolean18 = variance3.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double20 = secondMoment19.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean21 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean21.increment((double) (short) 100);
        geometricMean21.increment((double) (-1L));
        geometricMean21.increment((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic28 = geometricMean21.getSumLogImpl();
        long long29 = geometricMean21.getN();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl30 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = empiricalDistributionImpl30.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = empiricalDistributionImpl30.getSampleStats();
        int int33 = empiricalDistributionImpl30.getBinCount();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.clear();
        long long36 = secondMoment34.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long39 = variance38.getN();
        double[] doubleArray45 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double47 = variance38.evaluate(doubleArray45, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment48.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean50 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment48);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long53 = variance52.getN();
        double[] doubleArray59 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double61 = variance52.evaluate(doubleArray59, (double) 'a');
        mean50.incrementAll(doubleArray59);
        double double64 = variance38.evaluate(doubleArray59, (double) (byte) 1);
        secondMoment34.incrementAll(doubleArray59);
        empiricalDistributionImpl30.load(doubleArray59);
        double double69 = geometricMean21.evaluate(doubleArray59, 3, 2);
        double double70 = secondMoment19.evaluate(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            variance3.incrementAll(doubleArray59, (-3), 57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertNotNull(file10);
        org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/hi!6235451693975906580:");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/hi!6235451693975906580:" + "'", str11, "/hi!6235451693975906580:");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3L + "'", long29 == 3L);
        org.junit.Assert.assertNull(statisticalSummary31);
        org.junit.Assert.assertNull(statisticalSummary32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1000 + "'", int33 == 1000);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 19.43999999999942d + "'", double47 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 19.43999999999942d + "'", double61 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 19.44d + "'", double64 == 19.44d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 3.1622776601683795d + "'", double69 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 97.2d + "'", double70 == 97.2d);
    }

    @Test
    public void test01209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01209");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL1 = new java.net.URL("hi!8004869517018842683:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no protocol: hi!8004869517018842683:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01210");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long2 = variance1.getN();
        double[] doubleArray8 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double10 = variance1.evaluate(doubleArray8, (double) 'a');
        variance1.clear();
        double[] doubleArray12 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray12, (int) (short) 10, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 19.43999999999942d + "'", double10 == 19.43999999999942d);
    }

    @Test
    public void test01211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01211");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double3 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long12 = variance11.getN();
        double[] doubleArray18 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double20 = variance11.evaluate(doubleArray18, (double) 'a');
        mean9.incrementAll(doubleArray18);
        empiricalDistributionImpl6.load(doubleArray18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long27 = variance26.getN();
        double[] doubleArray33 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double35 = variance26.evaluate(doubleArray33, (double) 'a');
        double double39 = variance24.evaluate(doubleArray33, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        empiricalDistributionImpl6.load(doubleArray33);
        double double42 = variance5.evaluate(doubleArray33, (double) '/');
        // The following exception was thrown during execution in test generation
        try {
            double double45 = secondMoment0.evaluate(doubleArray33, (int) '/', 47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 19.43999999999942d + "'", double20 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 19.43999999999942d + "'", double35 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 24.300000000000182d + "'", double42 == 24.300000000000182d);
    }

    @Test
    public void test01212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01212");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = summaryStatistics0.getSummary();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs5 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        long long6 = sumOfLogs5.getN();
        long long7 = sumOfLogs5.getN();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfLogs5);
        double double9 = summaryStatistics0.getMin();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(statisticalSummary4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test01213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01213");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.canExecute();
        long long8 = file4.getFreeSpace();
        boolean boolean10 = file4.setLastModified((long) 10);
        java.io.File file12 = new java.io.File("");
        boolean boolean15 = file12.setWritable(true, true);
        boolean boolean16 = file12.setReadOnly();
        boolean boolean19 = file12.setWritable(true, false);
        java.net.URI uRI20 = file12.toURI();
        boolean boolean21 = file12.mkdir();
        java.io.File file22 = file12.getCanonicalFile();
        boolean boolean23 = file22.canRead();
        boolean boolean24 = file4.renameTo(file22);
        java.io.File file26 = new java.io.File(file4, "/hi!7644059860405527722:");
        boolean boolean27 = file4.mkdir();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!3356548814222950734:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 299098603520L + "'", long8 == 299098603520L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull("file12.getParent() == null", file12.getParent());
        org.junit.Assert.assertEquals(file12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(uRI20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(file22);
// flaky:         org.junit.Assert.assertEquals(file22.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file22.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertEquals(file26.getParent(), "/hi!3356548814222950734:");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/hi!3356548814222950734:/hi!7644059860405527722:");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test01214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01214");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean0.increment((double) 0);
        mean0.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean5 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean5.increment((double) (short) 100);
        geometricMean5.increment((double) (-1L));
        geometricMean5.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean12 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean12.increment((double) (short) 100);
        geometricMean12.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long19 = variance18.getN();
        double[] doubleArray25 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double27 = variance18.evaluate(doubleArray25, (double) 'a');
        double double28 = geometricMean12.evaluate(doubleArray25);
        double double29 = geometricMean5.evaluate(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = mean0.evaluate(doubleArray25, (int) ':', 24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 19.43999999999942d + "'", double27 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2.51188643150958d + "'", double28 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2.51188643150958d + "'", double29 == 2.51188643150958d);
    }

    @Test
    public void test01215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01215");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.645454026E12d);
        double double3 = secondMoment0.getResult();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test01216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01216");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.lang.String str5 = uRL3.getUserInfo();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getAuthority();
        java.lang.String str8 = uRL3.getHost();
        java.lang.String str9 = uRL3.toExternalForm();
        int int10 = uRL3.getPort();
        java.net.Proxy proxy11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection12 = uRL3.openConnection(proxy11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str9, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test01217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01217");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean2.increment((double) 0);
        double double5 = mean2.getResult();
        long long6 = mean2.getN();
        mean2.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean2);
        double double9 = summaryStatistics0.getMean();
        double double10 = summaryStatistics0.getStandardDeviation();
        summaryStatistics0.addValue(6.907755278982137d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment13.clear();
        long long15 = secondMoment13.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long18 = variance17.getN();
        double[] doubleArray24 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double26 = variance17.evaluate(doubleArray24, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long32 = variance31.getN();
        double[] doubleArray38 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double40 = variance31.evaluate(doubleArray38, (double) 'a');
        mean29.incrementAll(doubleArray38);
        double double43 = variance17.evaluate(doubleArray38, (double) (byte) 1);
        secondMoment13.incrementAll(doubleArray38);
        secondMoment13.increment((double) 10.0f);
        secondMoment13.increment(1.5984000000000001E-4d);
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementations must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 19.43999999999942d + "'", double26 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 19.43999999999942d + "'", double40 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 19.44d + "'", double43 == 19.44d);
    }

    @Test
    public void test01218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01218");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.canExecute();
        long long8 = file4.getTotalSpace();
        boolean boolean9 = file4.canRead();
        boolean boolean12 = file4.setExecutable(false, false);
        java.io.File file14 = new java.io.File(file4, "/hi!1606956986861950762:");
        java.lang.String str15 = file14.getParent();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!2573856524367507471:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 364740218880L + "'", long8 == 364740218880L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertEquals(file14.getParent(), "/hi!2573856524367507471:");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/hi!2573856524367507471:/hi!1606956986861950762:");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "/hi!2573856524367507471:" + "'", str15, "/hi!2573856524367507471:");
    }

    @Test
    public void test01219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01219");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getVarianceImpl();
        double double2 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics3 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics3.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean4);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics3.getMaxImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic6);
        org.junit.Assert.assertNotNull(summaryStatistics0);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
    }

    @Test
    public void test01220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01220");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("/hi!3816293198257994708:", "/tmp/hi!7082277894007542717", 10, "/hi!3330290121003481408:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!3816293198257994708:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01221");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean14.increment((double) 0);
        double double17 = mean14.getResult();
        mean14.clear();
        double[] doubleArray19 = new double[] {};
        mean14.incrementAll(doubleArray19);
        variance12.incrementAll(doubleArray19);
        boolean boolean22 = variance12.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics23 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double24 = summaryStatistics23.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean25.increment((double) 0);
        double double28 = mean25.getResult();
        long long29 = mean25.getN();
        mean25.clear();
        summaryStatistics23.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean25);
        double double32 = summaryStatistics23.getMean();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean33 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean33.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long38 = variance37.getN();
        double[] doubleArray44 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double46 = variance37.evaluate(doubleArray44, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment47);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long52 = variance51.getN();
        double[] doubleArray58 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double60 = variance51.evaluate(doubleArray58, (double) 'a');
        mean49.incrementAll(doubleArray58);
        double double63 = variance37.evaluate(doubleArray58, (double) (byte) 1);
        geometricMean33.incrementAll(doubleArray58);
        summaryStatistics23.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean33);
        long long66 = geometricMean33.getN();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl67 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary68 = empiricalDistributionImpl67.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary69 = empiricalDistributionImpl67.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean70 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean70.increment((double) (short) 100);
        geometricMean70.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long77 = variance76.getN();
        double[] doubleArray83 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double85 = variance76.evaluate(doubleArray83, (double) 'a');
        double double86 = geometricMean70.evaluate(doubleArray83);
        empiricalDistributionImpl67.load(doubleArray83);
        java.io.File file90 = java.io.File.createTempFile("hi!", "");
        boolean boolean92 = file90.setLastModified((long) '#');
        java.io.File file93 = file90.getCanonicalFile();
        empiricalDistributionImpl67.load(file90);
        double[] doubleArray95 = empiricalDistributionImpl67.getUpperBounds();
        geometricMean33.incrementAll(doubleArray95);
        double double99 = variance12.evaluate(doubleArray95, 47, 24);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 19.43999999999942d + "'", double46 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 19.43999999999942d + "'", double60 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 19.44d + "'", double63 == 19.44d);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 6L + "'", long66 == 6L);
        org.junit.Assert.assertNull(statisticalSummary68);
        org.junit.Assert.assertNull(statisticalSummary69);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 19.43999999999942d + "'", double85 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2.51188643150958d + "'", double86 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(file90);
        org.junit.Assert.assertEquals(file90.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file90.toString(), "/tmp/hi!5240260696813967262");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(file93);
        org.junit.Assert.assertEquals(file93.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file93.toString(), "/tmp/hi!5240260696813967262");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertTrue(Double.isNaN(double99));
    }

    @Test
    public void test01222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01222");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        boolean boolean3 = empiricalDistributionImpl0.isLoaded();
        boolean boolean4 = empiricalDistributionImpl0.isLoaded();
        boolean boolean5 = empiricalDistributionImpl0.isLoaded();
        java.io.File file9 = new java.io.File("");
        java.io.File file10 = java.io.File.createTempFile("hi!", ":", file9);
        java.lang.String str11 = file10.getAbsolutePath();
        boolean boolean12 = file10.setReadOnly();
        boolean boolean14 = file10.setLastModified(364740218880L);
        empiricalDistributionImpl0.load(file10);
        boolean boolean16 = file10.canExecute();
        boolean boolean19 = file10.setWritable(false, false);
        long long20 = file10.lastModified();
        boolean boolean21 = file10.canRead();
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertNotNull(file10);
        org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/hi!533498733190293984:");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/hi!533498733190293984:" + "'", str11, "/hi!533498733190293984:");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 364740218000L + "'", long20 == 364740218000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test01223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01223");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMax();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.Mean mean6 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean6.increment((double) 10.0f);
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean6);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long11 = mean10.getN();
        mean10.increment(100.0d);
        boolean boolean14 = summaryStatistics0.equals((java.lang.Object) mean10);
        mean10.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics16 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double17 = summaryStatistics16.getMin();
        double double18 = summaryStatistics16.getStandardDeviation();
        double double19 = summaryStatistics16.getSum();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares20 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long21 = sumOfSquares20.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long26 = variance25.getN();
        double[] doubleArray32 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double34 = variance25.evaluate(doubleArray32, (double) 'a');
        double double38 = variance23.evaluate(doubleArray32, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double41 = sumOfSquares20.evaluate(doubleArray32, (int) (short) 1, 0);
        double double42 = sumOfSquares20.getResult();
        long long43 = sumOfSquares20.getN();
        sumOfSquares20.clear();
        summaryStatistics16.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares20);
        double double46 = sumOfSquares20.getResult();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares47 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares47.increment((double) (byte) 1);
        double double50 = sumOfSquares47.getResult();
        sumOfSquares47.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double53 = secondMoment52.getResult();
        secondMoment52.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment52);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment57.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean59 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment57);
        secondMoment57.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment57);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean64 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment62);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long67 = variance66.getN();
        double[] doubleArray73 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double75 = variance66.evaluate(doubleArray73, (double) 'a');
        mean64.incrementAll(doubleArray73);
        double double77 = variance61.evaluate(doubleArray73);
        double double78 = secondMoment52.evaluate(doubleArray73);
        double double79 = sumOfSquares47.evaluate(doubleArray73);
        sumOfSquares20.incrementAll(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = mean10.evaluate(doubleArray73, 0, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 19.43999999999942d + "'", double34 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 19.43999999999942d + "'", double75 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 24.3d + "'", double77 == 24.3d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 97.2d + "'", double78 == 97.2d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 203.0d + "'", double79 == 203.0d);
    }

    @Test
    public void test01224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01224");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max12.clear();
        double double14 = max12.getResult();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares15 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long16 = sumOfSquares15.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long21 = variance20.getN();
        double[] doubleArray27 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double29 = variance20.evaluate(doubleArray27, (double) 'a');
        double double33 = variance18.evaluate(doubleArray27, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double36 = sumOfSquares15.evaluate(doubleArray27, (int) (short) 1, 0);
        double double39 = max12.evaluate(doubleArray27, (int) (short) 1, (int) (short) 0);
        long long40 = max12.getN();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        max12.increment(24.300000000000182d);
        max12.increment(1.645454028E12d);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl46 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl46.getSampleStats();
        java.io.File file51 = new java.io.File("");
        java.io.File file52 = java.io.File.createTempFile("hi!", ":", file51);
        java.lang.String str53 = file52.getCanonicalPath();
        boolean boolean54 = file52.createNewFile();
        empiricalDistributionImpl46.load(file52);
        double[] doubleArray56 = empiricalDistributionImpl46.getUpperBounds();
        double[] doubleArray57 = empiricalDistributionImpl46.getUpperBounds();
        boolean boolean58 = empiricalDistributionImpl46.isLoaded();
        boolean boolean59 = empiricalDistributionImpl46.isLoaded();
        org.apache.commons.math.stat.descriptive.summary.Sum sum60 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long61 = sum60.getN();
        double double62 = sum60.getResult();
        long long63 = sum60.getN();
        org.apache.commons.math.stat.descriptive.rank.Min min64 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min64.clear();
        double[] doubleArray71 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double72 = min64.evaluate(doubleArray71);
        min64.clear();
        min64.increment(0.0d);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics76 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double77 = summaryStatistics76.getMin();
        double double78 = summaryStatistics76.getStandardDeviation();
        double double79 = summaryStatistics76.getMean();
        double double80 = summaryStatistics76.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min81 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics76.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min81);
        double[] doubleArray83 = new double[] {};
        min81.incrementAll(doubleArray83);
        double double85 = min64.evaluate(doubleArray83);
        sum60.incrementAll(doubleArray83);
        empiricalDistributionImpl46.load(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = max12.evaluate(doubleArray83, (-27), 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 19.43999999999942d + "'", double29 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNull(statisticalSummary47);
        org.junit.Assert.assertNull("file51.getParent() == null", file51.getParent());
        org.junit.Assert.assertEquals(file51.toString(), "");
        org.junit.Assert.assertNotNull(file52);
        org.junit.Assert.assertEquals(file52.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file52.toString(), "/hi!2512925348297379190:");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "/hi!2512925348297379190:" + "'", str53, "/hi!2512925348297379190:");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-1.0d) + "'", double72 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double85));
    }

    @Test
    public void test01225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01225");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max2 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max2.clear();
        max2.increment((double) (-1L));
        double double6 = max2.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl7.getSampleStats();
        boolean boolean9 = empiricalDistributionImpl7.isLoaded();
        boolean boolean10 = empiricalDistributionImpl7.isLoaded();
        boolean boolean11 = empiricalDistributionImpl7.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int13 = empiricalDistributionImpl12.getBinCount();
        boolean boolean14 = empiricalDistributionImpl12.isLoaded();
        java.util.List list15 = empiricalDistributionImpl12.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean16 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean16.increment((double) (short) 100);
        geometricMean16.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic21 = geometricMean16.getSumLogImpl();
        long long22 = geometricMean16.getN();
        double double23 = geometricMean16.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics24 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double25 = summaryStatistics24.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min26 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics24.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min26);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean28 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean28.increment((double) (short) 100);
        geometricMean28.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long35 = variance34.getN();
        double[] doubleArray41 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double43 = variance34.evaluate(doubleArray41, (double) 'a');
        double double44 = geometricMean28.evaluate(doubleArray41);
        min26.incrementAll(doubleArray41);
        geometricMean16.incrementAll(doubleArray41);
        empiricalDistributionImpl12.load(doubleArray41);
        empiricalDistributionImpl7.load(doubleArray41);
        double double49 = max2.evaluate(doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray41, (-2), (int) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertNull(statisticalSummary8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1000 + "'", int13 == 1000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2L + "'", long22 == 2L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 19.43999999999942d + "'", double43 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2.51188643150958d + "'", double44 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
    }

    @Test
    public void test01226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01226");
        java.io.File file4 = new java.io.File("/hi!4533436540036848542:", "/hi!2756764035548942023:");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file5 = java.io.File.createTempFile("/hi!756638498028713835:", "/tmp/hi!2169115775229245488968036049999608991", file4);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /hi!4533436540036848542:/hi!2756764035548942023:/hi!756638498028713835:5750937135206375535/tmp/hi!2169115775229245488968036049999608991");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file4.getParent(), "/hi!4533436540036848542:");
        org.junit.Assert.assertEquals(file4.toString(), "/hi!4533436540036848542:/hi!2756764035548942023:");
    }

    @Test
    public void test01227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01227");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("/hi!2477021234676728260:", "/hi!2553205981964178444:");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/hi!2477021234676728260:3368911733528106295/hi!2553205981964178444:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01228");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long4 = variance3.getN();
        double[] doubleArray10 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double12 = variance3.evaluate(doubleArray10, (double) 'a');
        double double16 = variance1.evaluate(doubleArray10, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        variance1.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 19.43999999999942d + "'", double12 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test01229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01229");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("/hi!4607576507875646529:", "/hi!4632801551493047224:");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/hi!4607576507875646529:4947978362882644928/hi!4632801551493047224:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01230");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getGeoMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean6 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean6.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = geometricMean6.getSumLogImpl();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean6);
        summaryStatistics0.addValue((double) 0.0f);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double16 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        double double19 = variance18.getResult();
        variance18.increment((double) 280499642368L);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long30 = variance29.getN();
        double[] doubleArray36 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double38 = variance29.evaluate(doubleArray36, (double) 'a');
        mean27.incrementAll(doubleArray36);
        empiricalDistributionImpl24.load(doubleArray36);
        empiricalDistributionImpl23.load(doubleArray36);
        double double42 = variance18.evaluate(doubleArray36);
        boolean boolean43 = variance18.isBiasCorrected();
        long long44 = variance18.getN();
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementations must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 19.43999999999942d + "'", double38 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 24.3d + "'", double42 == 24.3d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    public void test01231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01231");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("hi!6045577589556497825", "/hi!8708105921970863603:");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/hi!60455775895564978252630151279229024450/hi!8708105921970863603:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01232");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.net.URL uRL7 = new java.net.URL(uRL3, "hi!2169115775229245488");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = uRL3.getContent();
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /experiment/hi!2169115775229245488/hi! (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!2169115775229245488");
    }

    @Test
    public void test01233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01233");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean2.increment((double) 0);
        double double5 = mean2.getResult();
        long long6 = mean2.getN();
        mean2.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean2);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics9 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double10 = summaryStatistics9.getMin();
        double double11 = summaryStatistics9.getStandardDeviation();
        double double12 = summaryStatistics9.getMean();
        double double13 = summaryStatistics9.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min14 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics9.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min14);
        min14.increment((double) (short) 100);
        double double18 = min14.getResult();
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min14);
        double double20 = min14.getResult();
        double[] doubleArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            min14.incrementAll(doubleArray21, (int) (short) 10, (-6));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
    }

    @Test
    public void test01234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01234");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        double double5 = secondMoment1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test01235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01235");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long1 = sumOfSquares0.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean2.increment((double) (short) 100);
        geometricMean2.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic7 = geometricMean2.getSumLogImpl();
        geometricMean2.clear();
        boolean boolean9 = sumOfSquares0.equals((java.lang.Object) geometricMean2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double11 = secondMoment10.getResult();
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment10);
        mean14.clear();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares16 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long17 = sumOfSquares16.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long22 = variance21.getN();
        double[] doubleArray28 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double30 = variance21.evaluate(doubleArray28, (double) 'a');
        double double34 = variance19.evaluate(doubleArray28, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double37 = sumOfSquares16.evaluate(doubleArray28, (int) (short) 1, 0);
        double double40 = mean14.evaluate(doubleArray28, (int) (byte) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = geometricMean2.evaluate(doubleArray28, 57, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 19.43999999999942d + "'", double30 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
    }

    @Test
    public void test01236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01236");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("/hi!4060689751378876827:", "/hi!6932163193945389563:");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/hi!4060689751378876827:768051416260672932/hi!6932163193945389563:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01237");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMax();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.Mean mean6 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean6.increment((double) 10.0f);
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean6);
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long11 = mean10.getN();
        mean10.increment(100.0d);
        boolean boolean14 = summaryStatistics0.equals((java.lang.Object) mean10);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = summaryStatistics0.getSummary();
        double double17 = statisticalSummary16.getMin();
        double double18 = statisticalSummary16.getMean();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertNotNull(statisticalSummary16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test01238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01238");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double7 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double12 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long16 = variance15.getN();
        double[] doubleArray22 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double24 = variance15.evaluate(doubleArray22, (double) 'a');
        double double25 = variance13.evaluate(doubleArray22);
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance13);
        double double27 = summaryStatistics0.getVariance();
        double double28 = summaryStatistics0.getMean();
        java.lang.String str29 = summaryStatistics0.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 19.43999999999942d + "'", double24 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 19.44d + "'", double25 == 19.44d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str29, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
    }

    @Test
    public void test01239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01239");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMinImpl();
        double double6 = summaryStatistics0.getMin();
        double double7 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.rank.Min min8 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min8.clear();
        long long10 = min8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance12.increment((double) (byte) 100);
        java.io.File file17 = new java.io.File("/hi!4420905478953568698:", "/experiment/hi!2169115775229245488");
        boolean boolean18 = variance12.equals((java.lang.Object) "/hi!4420905478953568698:");
        boolean boolean19 = variance12.isBiasCorrected();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl20.getSampleStats();
        java.io.File file25 = new java.io.File("");
        java.io.File file26 = java.io.File.createTempFile("hi!", ":", file25);
        java.lang.String str27 = file26.getCanonicalPath();
        boolean boolean28 = file26.createNewFile();
        empiricalDistributionImpl20.load(file26);
        double[] doubleArray30 = empiricalDistributionImpl20.getUpperBounds();
        double double33 = variance12.evaluate(doubleArray30, (int) ':', 1);
        double double34 = min8.evaluate(doubleArray30);
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min8);
        double double36 = min8.getResult();
        org.apache.commons.math.stat.descriptive.rank.Min min37 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min37.clear();
        long long39 = min37.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance41.increment((double) (byte) 100);
        java.io.File file46 = new java.io.File("/hi!4420905478953568698:", "/experiment/hi!2169115775229245488");
        boolean boolean47 = variance41.equals((java.lang.Object) "/hi!4420905478953568698:");
        boolean boolean48 = variance41.isBiasCorrected();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl49 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary50 = empiricalDistributionImpl49.getSampleStats();
        java.io.File file54 = new java.io.File("");
        java.io.File file55 = java.io.File.createTempFile("hi!", ":", file54);
        java.lang.String str56 = file55.getCanonicalPath();
        boolean boolean57 = file55.createNewFile();
        empiricalDistributionImpl49.load(file55);
        double[] doubleArray59 = empiricalDistributionImpl49.getUpperBounds();
        double double62 = variance41.evaluate(doubleArray59, (int) ':', 1);
        double double63 = min37.evaluate(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = min8.evaluate(doubleArray59, (-50), (-11));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals(file17.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file17.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(statisticalSummary21);
        org.junit.Assert.assertNull("file25.getParent() == null", file25.getParent());
        org.junit.Assert.assertEquals(file25.toString(), "");
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/hi!4654345958938735540:");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "/hi!4654345958938735540:" + "'", str27, "/hi!4654345958938735540:");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertEquals(file46.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file46.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(statisticalSummary50);
        org.junit.Assert.assertNull("file54.getParent() == null", file54.getParent());
        org.junit.Assert.assertEquals(file54.toString(), "");
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file55.toString(), "/hi!3003808493165643742:");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "/hi!3003808493165643742:" + "'", str56, "/hi!3003808493165643742:");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
    }

    @Test
    public void test01240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01240");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics11 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics11.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean12);
        java.io.File file15 = new java.io.File("");
        java.lang.String str16 = file15.getParent();
        boolean boolean17 = summaryStatistics11.equals((java.lang.Object) file15);
        summaryStatistics11.addValue(19.44d);
        double double20 = summaryStatistics11.getMax();
        double double21 = summaryStatistics11.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic22 = summaryStatistics11.getGeoMeanImpl();
        summaryStatistics0.setMeanImpl(storelessUnivariateStatistic22);
        double double24 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long26 = mean25.getN();
        mean25.increment((double) 299098755072L);
        mean25.increment((double) 3);
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean25);
        mean25.clear();
        mean25.increment((double) 0);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 19.44d + "'", double20 == 19.44d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test01241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01241");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.io.File file3 = file2.getCanonicalFile();
        java.io.File file4 = file3.getCanonicalFile();
        java.lang.String str5 = file3.getParent();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(file3);
// flaky:         org.junit.Assert.assertEquals(file3.getParent(), "/experiment/hi!2169115775229245488");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/experiment/hi!2169115775229245488");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/experiment/hi!2169115775229245488" + "'", str5, "/experiment/hi!2169115775229245488");
    }

    @Test
    public void test01242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01242");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics2 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics2.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean3);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean5 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean5.increment((double) (short) 100);
        geometricMean5.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = geometricMean5.getSumLogImpl();
        summaryStatistics2.setMinImpl(storelessUnivariateStatistic10);
        double double12 = summaryStatistics2.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double15 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment14);
        summaryStatistics2.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment14);
        double double19 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment14);
        long long21 = secondMoment14.getN();
        long long22 = secondMoment14.getN();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long31 = variance30.getN();
        double[] doubleArray37 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double39 = variance30.evaluate(doubleArray37, (double) 'a');
        mean28.incrementAll(doubleArray37);
        empiricalDistributionImpl25.load(doubleArray37);
        empiricalDistributionImpl24.load(doubleArray37);
        double[] doubleArray43 = empiricalDistributionImpl24.getUpperBounds();
        secondMoment14.incrementAll(doubleArray43);
        java.lang.Class<?> wildcardClass45 = doubleArray43.getClass();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 19.43999999999942d + "'", double39 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test01243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01243");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.delete();
        java.io.File file9 = new java.io.File("/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        boolean boolean10 = file9.delete();
        int int11 = file4.compareTo(file9);
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!2135529553444691083:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals(file9.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file9.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-2) + "'", int11 == (-2));
    }

    @Test
    public void test01244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01244");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double19 = geometricMean3.evaluate(doubleArray16);
        empiricalDistributionImpl0.load(doubleArray16);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file25 = new java.io.File("");
        java.io.File file26 = java.io.File.createTempFile("hi!", ":", file25);
        java.lang.String str27 = file26.getCanonicalPath();
        boolean boolean29 = file26.setExecutable(false);
        boolean boolean31 = file26.setWritable(true);
        boolean boolean32 = file26.mkdirs();
        boolean boolean35 = file26.setExecutable(true, false);
        empiricalDistributionImpl0.load(file26);
        boolean boolean37 = file26.mkdirs();
        java.io.File file38 = file26.getAbsoluteFile();
        boolean boolean39 = file38.isAbsolute();
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.51188643150958d + "'", double19 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNull("file25.getParent() == null", file25.getParent());
        org.junit.Assert.assertEquals(file25.toString(), "");
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/hi!7562688282920866207:");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "/hi!7562688282920866207:" + "'", str27, "/hi!7562688282920866207:");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file38.toString(), "/hi!7562688282920866207:");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test01245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01245");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max0.clear();
        double double2 = max0.getResult();
        long long3 = max0.getN();
        long long4 = max0.getN();
        max0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double8 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double11 = variance10.getResult();
        boolean boolean12 = variance10.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double14 = secondMoment13.getResult();
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double19 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl22 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean25 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long28 = variance27.getN();
        double[] doubleArray34 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double36 = variance27.evaluate(doubleArray34, (double) 'a');
        mean25.incrementAll(doubleArray34);
        empiricalDistributionImpl22.load(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long43 = variance42.getN();
        double[] doubleArray49 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double51 = variance42.evaluate(doubleArray49, (double) 'a');
        double double55 = variance40.evaluate(doubleArray49, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        empiricalDistributionImpl22.load(doubleArray49);
        double double58 = variance21.evaluate(doubleArray49, (double) '/');
        double double59 = variance16.evaluate(doubleArray49);
        double double61 = variance10.evaluate(doubleArray49, 100.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double64 = max0.evaluate(doubleArray49, 0, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 19.43999999999942d + "'", double36 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 19.43999999999942d + "'", double51 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 24.300000000000182d + "'", double58 == 24.300000000000182d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 24.3d + "'", double59 == 24.3d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 24.299999999999272d + "'", double61 == 24.299999999999272d);
    }

    @Test
    public void test01246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01246");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file3 = new java.io.File("");
        boolean boolean6 = file3.setWritable(true, true);
        boolean boolean7 = file3.setReadOnly();
        boolean boolean10 = file3.setWritable(true, false);
        boolean boolean12 = file3.setExecutable(true);
        boolean boolean13 = file3.exists();
        java.net.URI uRI14 = file3.toURI();
        java.io.File file15 = new java.io.File(uRI14);
        java.net.URL uRL16 = file15.toURL();
        boolean boolean17 = file15.createNewFile();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file15);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /experiment (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(uRI14);
// flaky:         org.junit.Assert.assertEquals(file15.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file15.toString(), "/experiment");
        org.junit.Assert.assertNotNull(uRL16);
// flaky:         org.junit.Assert.assertEquals(uRL16.toString(), "file:/experiment/");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01247");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        double double1 = max0.getResult();
        long long2 = max0.getN();
        double double3 = max0.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean4.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long9 = variance8.getN();
        double[] doubleArray15 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double17 = variance8.evaluate(doubleArray15, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long23 = variance22.getN();
        double[] doubleArray29 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double31 = variance22.evaluate(doubleArray29, (double) 'a');
        mean20.incrementAll(doubleArray29);
        double double34 = variance8.evaluate(doubleArray29, (double) (byte) 1);
        geometricMean4.incrementAll(doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = max0.evaluate(doubleArray29, 2, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 19.43999999999942d + "'", double17 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 19.43999999999942d + "'", double31 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 19.44d + "'", double34 == 19.44d);
    }

    @Test
    public void test01248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01248");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("/hi!2085259761232088003:", "/hi!7117751630234114856:");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/hi!2085259761232088003:2596516077648048849/hi!7117751630234114856:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01249");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.canExecute();
        long long8 = file4.getFreeSpace();
        boolean boolean10 = file4.setLastModified((long) 10);
        java.io.File file12 = new java.io.File("");
        boolean boolean15 = file12.setWritable(true, true);
        boolean boolean16 = file12.setReadOnly();
        boolean boolean19 = file12.setWritable(true, false);
        java.net.URI uRI20 = file12.toURI();
        boolean boolean21 = file12.mkdir();
        java.io.File file22 = file12.getCanonicalFile();
        boolean boolean23 = file22.canRead();
        boolean boolean24 = file4.renameTo(file22);
        java.io.File file25 = file4.getParentFile();
        boolean boolean26 = file4.canWrite();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!561947733647738920:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 299098607616L + "'", long8 == 299098607616L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull("file12.getParent() == null", file12.getParent());
        org.junit.Assert.assertEquals(file12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(uRI20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(file22);
// flaky:         org.junit.Assert.assertEquals(file22.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file22.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertNull("file25.getParent() == null", file25.getParent());
        org.junit.Assert.assertEquals(file25.toString(), "/");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test01250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01250");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        long long7 = file4.length();
        java.lang.String str8 = file4.getAbsolutePath();
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/experiment" + "'", str8, "/experiment");
    }

    @Test
    public void test01251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01251");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException("hi!", throwable1);
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.lang.Throwable throwable6 = null;
        java.io.IOException iOException7 = new java.io.IOException("hi!", throwable6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.io.IOException iOException9 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException7);
        java.lang.Throwable throwable12 = null;
        java.io.IOException iOException13 = new java.io.IOException("hi!", throwable12);
        java.io.IOException iOException14 = new java.io.IOException(throwable12);
        java.io.IOException iOException15 = new java.io.IOException("/hi!8130836485477920045:", (java.lang.Throwable) iOException14);
        iOException9.addSuppressed((java.lang.Throwable) iOException15);
        java.io.IOException iOException17 = new java.io.IOException((java.lang.Throwable) iOException9);
        java.lang.Throwable throwable20 = null;
        java.io.IOException iOException21 = new java.io.IOException("hi!", throwable20);
        java.io.IOException iOException22 = new java.io.IOException((java.lang.Throwable) iOException21);
        java.io.IOException iOException23 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException21);
        java.io.IOException iOException24 = new java.io.IOException((java.lang.Throwable) iOException21);
        iOException17.addSuppressed((java.lang.Throwable) iOException24);
        iOException2.addSuppressed((java.lang.Throwable) iOException24);
        java.lang.String str27 = iOException24.toString();
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.io.IOException: java.io.IOException: hi!" + "'", str27, "java.io.IOException: java.io.IOException: hi!");
    }

    @Test
    public void test01252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01252");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getProtocol();
        java.lang.String str5 = uRL3.getQuery();
        java.lang.String str6 = uRL3.toString();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "file" + "'", str4, "file");
        org.junit.Assert.assertNull(str5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str6, "file:/experiment/hi!2169115775229245488/hi!");
    }

    @Test
    public void test01253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01253");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        long long2 = sum0.getN();
        long long3 = sum0.getN();
        long long4 = sum0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test01254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01254");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        summaryStatistics0.addValue(19.44d);
        long long9 = summaryStatistics0.getN();
        double double10 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics11 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double12 = summaryStatistics11.getMin();
        double double13 = summaryStatistics11.getStandardDeviation();
        double double14 = summaryStatistics11.getMax();
        double double15 = summaryStatistics11.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = summaryStatistics11.getMeanImpl();
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.setSumsqImpl(storelessUnivariateStatistic16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementations must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
    }

    @Test
    public void test01255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01255");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.net.URL uRL7 = new java.net.URL(uRL3, "hi!2169115775229245488");
        int int8 = uRL7.getDefaultPort();
        java.lang.String str9 = uRL7.toExternalForm();
        java.net.Proxy proxy10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection11 = uRL7.openConnection(proxy10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!2169115775229245488" + "'", str9, "file:/experiment/hi!2169115775229245488/hi!2169115775229245488");
    }

    @Test
    public void test01256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01256");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        boolean boolean10 = file1.mkdir();
        java.lang.String str11 = file1.getName();
        boolean boolean14 = file1.setExecutable(false, true);
        java.io.File file15 = file1.getCanonicalFile();
        boolean boolean16 = file15.isFile();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(file15);
// flaky:         org.junit.Assert.assertEquals(file15.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file15.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01257");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        int int2 = empiricalDistributionImpl0.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl0.getSampleStats();
        java.util.List list4 = empiricalDistributionImpl0.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl0.getSampleStats();
        int int6 = empiricalDistributionImpl0.getBinCount();
        boolean boolean7 = empiricalDistributionImpl0.isLoaded();
        boolean boolean8 = empiricalDistributionImpl0.isLoaded();
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1000 + "'", int2 == 1000);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1000 + "'", int6 == 1000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01258");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        int int2 = empiricalDistributionImpl0.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl0.getSampleStats();
        java.util.List list4 = empiricalDistributionImpl0.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl0.getSampleStats();
        int int6 = empiricalDistributionImpl0.getBinCount();
        java.io.File file10 = new java.io.File("");
        java.io.File file11 = java.io.File.createTempFile("hi!", ":", file10);
        boolean boolean13 = file11.setWritable(true);
        boolean boolean14 = file11.canExecute();
        java.io.File file16 = new java.io.File("");
        boolean boolean19 = file16.setWritable(true, true);
        boolean boolean20 = file16.setReadOnly();
        boolean boolean23 = file16.setWritable(true, false);
        java.net.URI uRI24 = file16.toURI();
        boolean boolean25 = file16.mkdir();
        java.io.File file26 = file16.getCanonicalFile();
        boolean boolean27 = file11.renameTo(file16);
        boolean boolean30 = file16.setWritable(true, true);
        boolean boolean33 = file16.setWritable(false, false);
        boolean boolean34 = file16.canWrite();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file16);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message:  (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1000 + "'", int2 == 1000);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1000 + "'", int6 == 1000);
        org.junit.Assert.assertNull("file10.getParent() == null", file10.getParent());
        org.junit.Assert.assertEquals(file10.toString(), "");
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/hi!3916227125664525010:");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull("file16.getParent() == null", file16.getParent());
        org.junit.Assert.assertEquals(file16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(uRI24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(file26);
// flaky:         org.junit.Assert.assertEquals(file26.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test01259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01259");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double5 = variance4.getResult();
        variance4.increment((double) 280499642368L);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl9 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long16 = variance15.getN();
        double[] doubleArray22 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double24 = variance15.evaluate(doubleArray22, (double) 'a');
        mean13.incrementAll(doubleArray22);
        empiricalDistributionImpl10.load(doubleArray22);
        empiricalDistributionImpl9.load(doubleArray22);
        double double28 = variance4.evaluate(doubleArray22);
        boolean boolean29 = variance4.isBiasCorrected();
        long long30 = variance4.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean31.increment((double) 0);
        double double34 = mean31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean35.increment((double) 0);
        double double38 = mean35.getResult();
        mean35.clear();
        double[] doubleArray40 = new double[] {};
        mean35.incrementAll(doubleArray40);
        double double42 = mean31.evaluate(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            double double46 = variance4.evaluate(doubleArray40, (double) (-1L), 12, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 19.43999999999942d + "'", double24 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 24.3d + "'", double28 == 24.3d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double42));
    }

    @Test
    public void test01260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01260");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double19 = geometricMean3.evaluate(doubleArray16);
        empiricalDistributionImpl0.load(doubleArray16);
        java.io.File file23 = java.io.File.createTempFile("hi!", "");
        boolean boolean25 = file23.setLastModified((long) '#');
        java.io.File file26 = file23.getCanonicalFile();
        empiricalDistributionImpl0.load(file23);
        java.net.URI uRI28 = file23.toURI();
        java.io.File file29 = file23.getAbsoluteFile();
        java.net.URL uRL30 = file23.toURL();
        java.lang.String str31 = uRL30.getRef();
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.51188643150958d + "'", double19 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file23.toString(), "/tmp/hi!7631142830160180833");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/tmp/hi!7631142830160180833");
        org.junit.Assert.assertNotNull(uRI28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file29.toString(), "/tmp/hi!7631142830160180833");
        org.junit.Assert.assertNotNull(uRL30);
// flaky:         org.junit.Assert.assertEquals(uRL30.toString(), "file:/tmp/hi!7631142830160180833");
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test01261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01261");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        long long7 = file4.lastModified();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!6162514175965948558:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645454129000L + "'", long7 == 1645454129000L);
    }

    @Test
    public void test01262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01262");
        java.io.File file3 = new java.io.File("");
        boolean boolean6 = file3.setWritable(true, true);
        boolean boolean7 = file3.setReadOnly();
        boolean boolean10 = file3.setWritable(true, false);
        java.net.URI uRI11 = file3.toURI();
        boolean boolean12 = file3.mkdir();
        java.io.File file13 = file3.getCanonicalFile();
        java.io.File file14 = file3.getAbsoluteFile();
        boolean boolean16 = file14.setWritable(true);
        boolean boolean18 = file14.setLastModified(299098755072L);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file19 = java.io.File.createTempFile("/hi!3061471582456786922:", "/hi!3873812041336023575:", file14);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /experiment/hi!3061471582456786922:8487626932668193940/hi!3873812041336023575:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(uRI11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(file13);
// flaky:         org.junit.Assert.assertEquals(file13.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/experiment");
        org.junit.Assert.assertNotNull(file14);
// flaky:         org.junit.Assert.assertEquals(file14.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test01263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01263");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.clear();
        long long3 = secondMoment1.getN();
        secondMoment1.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean6 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.clear();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test01264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01264");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        double double2 = sumOfLogs0.getResult();
        long long3 = sumOfLogs0.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics4 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics4.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean5);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean7 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean7.increment((double) (short) 100);
        geometricMean7.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = geometricMean7.getSumLogImpl();
        summaryStatistics4.setMinImpl(storelessUnivariateStatistic12);
        double double14 = summaryStatistics4.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics4.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance16);
        org.apache.commons.math.stat.descriptive.rank.Min min18 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min18.clear();
        double[] doubleArray25 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double26 = min18.evaluate(doubleArray25);
        variance16.incrementAll(doubleArray25);
        sumOfLogs0.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double31 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment30);
        boolean boolean33 = sumOfLogs0.equals((java.lang.Object) variance32);
        long long34 = variance32.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double37 = secondMoment36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        double double40 = variance39.getResult();
        boolean boolean41 = variance39.isBiasCorrected();
        variance39.setBiasCorrected(true);
        boolean boolean44 = variance39.isBiasCorrected();
        variance39.setBiasCorrected(false);
        variance39.clear();
        org.apache.commons.math.stat.descriptive.rank.Min min48 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min48.clear();
        long long50 = min48.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance52.increment((double) (byte) 100);
        java.io.File file57 = new java.io.File("/hi!4420905478953568698:", "/experiment/hi!2169115775229245488");
        boolean boolean58 = variance52.equals((java.lang.Object) "/hi!4420905478953568698:");
        boolean boolean59 = variance52.isBiasCorrected();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl60 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary61 = empiricalDistributionImpl60.getSampleStats();
        java.io.File file65 = new java.io.File("");
        java.io.File file66 = java.io.File.createTempFile("hi!", ":", file65);
        java.lang.String str67 = file66.getCanonicalPath();
        boolean boolean68 = file66.createNewFile();
        empiricalDistributionImpl60.load(file66);
        double[] doubleArray70 = empiricalDistributionImpl60.getUpperBounds();
        double double73 = variance52.evaluate(doubleArray70, (int) ':', 1);
        double double74 = min48.evaluate(doubleArray70);
        double double75 = variance39.evaluate(doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            double double78 = variance32.evaluate(doubleArray70, (int) (short) 1, (-24));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertEquals(file57.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file57.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(statisticalSummary61);
        org.junit.Assert.assertNull("file65.getParent() == null", file65.getParent());
        org.junit.Assert.assertEquals(file65.toString(), "");
        org.junit.Assert.assertNotNull(file66);
        org.junit.Assert.assertEquals(file66.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file66.toString(), "/hi!2446209620341209808:");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "/hi!2446209620341209808:" + "'", str67, "/hi!2446209620341209808:");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
    }

    @Test
    public void test01265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01265");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        int int3 = empiricalDistributionImpl0.getBinCount();
        java.net.URL uRL4 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(uRL4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000);
    }

    @Test
    public void test01266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01266");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max0.increment((double) '#');
        max0.clear();
        double double4 = max0.getResult();
        max0.clear();
        long long6 = max0.getN();
        long long7 = max0.getN();
        long long8 = max0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test01267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01267");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        long long7 = file4.getFreeSpace();
        java.io.File file9 = new java.io.File("");
        boolean boolean12 = file9.setWritable(true, true);
        boolean boolean13 = file9.setReadOnly();
        boolean boolean16 = file9.setWritable(true, false);
        boolean boolean17 = file9.setReadOnly();
        boolean boolean18 = file4.renameTo(file9);
        boolean boolean20 = file9.setWritable(false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = file9.createNewFile();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No such file or directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test01268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01268");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        java.io.File file10 = new java.io.File(uRI9);
        java.io.File file11 = file10.getCanonicalFile();
        boolean boolean12 = file10.mkdir();
        long long13 = file10.getFreeSpace();
        long long14 = file10.length();
        java.lang.String str15 = file10.toString();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
// flaky:         org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/experiment");
        org.junit.Assert.assertNotNull(file11);
// flaky:         org.junit.Assert.assertEquals(file11.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 299098619904L + "'", long13 == 299098619904L);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 28672L + "'", long14 == 28672L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "/experiment" + "'", str15, "/experiment");
    }

    @Test
    public void test01269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01269");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file5 = new java.io.File("");
        java.io.File file6 = java.io.File.createTempFile("hi!", ":", file5);
        java.lang.String str7 = file6.getCanonicalPath();
        boolean boolean8 = file6.createNewFile();
        empiricalDistributionImpl0.load(file6);
        boolean boolean10 = empiricalDistributionImpl0.isLoaded();
        int int11 = empiricalDistributionImpl0.getBinCount();
        java.util.List list12 = empiricalDistributionImpl0.getBinStats();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: No bin selected");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/hi!1317419679645712150:");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/hi!1317419679645712150:" + "'", str7, "/hi!1317419679645712150:");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000);
        org.junit.Assert.assertNotNull(list12);
    }

    @Test
    public void test01270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01270");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        java.lang.Object obj4 = null;
        boolean boolean5 = summaryStatistics0.equals(obj4);
        summaryStatistics0.clear();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic7 = summaryStatistics0.getSumImpl();
        long long8 = summaryStatistics0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test01271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01271");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int1 = empiricalDistributionImpl0.getBinCount();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        java.util.List list3 = empiricalDistributionImpl0.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl7 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary8 = empiricalDistributionImpl7.getSampleStats();
        java.io.File file12 = new java.io.File("");
        java.io.File file13 = java.io.File.createTempFile("hi!", ":", file12);
        java.lang.String str14 = file13.getCanonicalPath();
        boolean boolean15 = file13.createNewFile();
        empiricalDistributionImpl7.load(file13);
        boolean boolean17 = file13.setReadOnly();
        java.io.File file18 = file13.getAbsoluteFile();
        empiricalDistributionImpl0.load(file13);
        java.io.File file21 = new java.io.File("");
        boolean boolean24 = file21.setWritable(true, true);
        boolean boolean25 = file21.setReadOnly();
        boolean boolean28 = file21.setWritable(true, false);
        boolean boolean30 = file21.setExecutable(true);
        boolean boolean31 = file21.exists();
        java.net.URI uRI32 = file21.toURI();
        boolean boolean35 = file21.setExecutable(false, true);
        int int36 = file13.compareTo(file21);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1000 + "'", int1 == 1000);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNull(statisticalSummary6);
        org.junit.Assert.assertNull(statisticalSummary8);
        org.junit.Assert.assertNull("file12.getParent() == null", file12.getParent());
        org.junit.Assert.assertEquals(file12.toString(), "");
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/hi!3859950844448801592:");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "/hi!3859950844448801592:" + "'", str14, "/hi!3859950844448801592:");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file18.toString(), "/hi!3859950844448801592:");
        org.junit.Assert.assertNull("file21.getParent() == null", file21.getParent());
        org.junit.Assert.assertEquals(file21.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(uRI32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 24 + "'", int36 == 24);
    }

    @Test
    public void test01272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01272");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler6 = null;
        java.net.URL uRL7 = new java.net.URL(uRL3, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler6);
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        boolean boolean12 = uRL3.sameFile(uRL11);
        java.lang.String str13 = uRL11.getAuthority();
        java.lang.String str14 = uRL11.getUserInfo();
        java.io.File file17 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL18 = file17.toURL();
        java.lang.String str19 = uRL18.getAuthority();
        java.net.URL uRL21 = new java.net.URL(uRL18, "/hi!2756764035548942023:");
        java.net.URI uRI22 = uRL18.toURI();
        java.lang.String str23 = uRL18.getRef();
        boolean boolean24 = uRL11.equals((java.lang.Object) uRL18);
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals(file17.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file17.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL18);
// flaky:         org.junit.Assert.assertEquals(uRL18.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals(uRL21.toString(), "file:/hi!2756764035548942023:");
        org.junit.Assert.assertNotNull(uRI22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test01273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01273");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        boolean boolean3 = empiricalDistributionImpl0.isLoaded();
        boolean boolean4 = empiricalDistributionImpl0.isLoaded();
        boolean boolean5 = empiricalDistributionImpl0.isLoaded();
        java.io.File file9 = new java.io.File("");
        java.io.File file10 = java.io.File.createTempFile("hi!", ":", file9);
        java.lang.String str11 = file10.getAbsolutePath();
        boolean boolean12 = file10.setReadOnly();
        boolean boolean14 = file10.setLastModified(364740218880L);
        empiricalDistributionImpl0.load(file10);
        java.util.List list16 = empiricalDistributionImpl0.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean18 = empiricalDistributionImpl0.isLoaded();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: No bin selected");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertNotNull(file10);
        org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/hi!2753791976504526302:");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/hi!2753791976504526302:" + "'", str11, "/hi!2753791976504526302:");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(list16);
        org.junit.Assert.assertNotNull(statisticalSummary17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test01274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01274");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        double double7 = summaryStatistics0.getSumsq();
        java.lang.String str8 = summaryStatistics0.toString();
        double double9 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics0.getVarianceImpl();
        summaryStatistics0.clear();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = null;
        summaryStatistics0.setVarianceImpl(storelessUnivariateStatistic12);
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str8, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
    }

    @Test
    public void test01275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01275");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        double double5 = summaryStatistics0.getSumsq();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test01276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01276");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min5 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min5);
        double[] doubleArray7 = new double[] {};
        min5.incrementAll(doubleArray7);
        min5.clear();
        double double10 = min5.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test01277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01277");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("/hi!2756764035548942023:/:", "/hi!2848648942161525338:");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/:7142332319210555447/hi!2848648942161525338:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01278");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        summaryStatistics0.addValue(19.44d);
        double double9 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics0.getMeanImpl();
        double double11 = summaryStatistics0.getVariance();
        double double12 = summaryStatistics0.getSumOfLogs();
        double double13 = summaryStatistics0.getSumOfLogs();
        double double14 = summaryStatistics0.getVariance();
        double double15 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = summaryStatistics0.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic17 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic18 = summaryStatistics0.getMeanImpl();
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 19.44d + "'", double9 == 19.44d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 19.44d + "'", double12 == 19.44d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 19.44d + "'", double13 == 19.44d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 19.44d + "'", double15 == 19.44d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic17);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic18);
    }

    @Test
    public void test01279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01279");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        mean2.increment((double) ':');
        long long5 = mean2.getN();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test01280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01280");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL3 = new java.net.URL("/hi!6870853967439974392:", "/hi!4536144997978638686:", "/hi!533498733190293984:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!6870853967439974392:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01281");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.clear();
        long long2 = secondMoment0.getN();
        secondMoment0.increment((double) 4096L);
        long long5 = secondMoment0.getN();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
    }

    @Test
    public void test01282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01282");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.canExecute();
        long long8 = file4.getFreeSpace();
        java.io.File file9 = file4.getParentFile();
        boolean boolean10 = file9.mkdir();
        boolean boolean13 = file9.setWritable(true, true);
        boolean boolean14 = file9.exists();
        boolean boolean15 = file9.mkdir();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = file9.setLastModified((long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative time");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!755894519055053669:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 299098603520L + "'", long8 == 299098603520L);
        org.junit.Assert.assertNotNull(file9);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "/");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test01283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01283");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.lang.String str6 = uRL3.toExternalForm();
        java.io.File file9 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL10 = file9.toURL();
        java.lang.String str11 = uRL10.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler13 = null;
        java.net.URL uRL14 = new java.net.URL(uRL10, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler13);
        boolean boolean15 = uRL3.sameFile(uRL14);
        java.net.URLConnection uRLConnection16 = uRL3.openConnection();
        java.net.URLStreamHandler uRLStreamHandler18 = null;
        java.net.URL uRL19 = new java.net.URL(uRL3, "/hi!702762667928310535:", uRLStreamHandler18);
        java.net.Proxy proxy20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection21 = uRL3.openConnection(proxy20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!/" + "'", str6, "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals(file9.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file9.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL10);
// flaky:         org.junit.Assert.assertEquals(uRL10.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(uRLConnection16);
        org.junit.Assert.assertEquals(uRL19.toString(), "file:/hi!702762667928310535:");
    }

    @Test
    public void test01284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01284");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        summaryStatistics0.addValue(19.44d);
        long long9 = summaryStatistics0.getN();
        double double10 = summaryStatistics0.getMin();
        double double11 = summaryStatistics0.getMax();
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 19.44d + "'", double10 == 19.44d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 19.44d + "'", double11 == 19.44d);
    }

    @Test
    public void test01285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01285");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.lang.String str5 = uRL3.getQuery();
        java.lang.String str6 = uRL3.getAuthority();
        java.lang.Object obj7 = null;
        boolean boolean8 = uRL3.equals(obj7);
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01286");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        double double2 = summaryStatistics0.getStandardDeviation();
        summaryStatistics0.addValue((double) 1000);
        double double5 = summaryStatistics0.getSumOfLogs();
        double double6 = summaryStatistics0.getGeometricMean();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 6.907755278982137d + "'", double5 == 6.907755278982137d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 999.9999999999998d + "'", double6 == 999.9999999999998d);
    }

    @Test
    public void test01287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01287");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL1 = new java.net.URL("/hi!1367451121206341241:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no protocol: /hi!1367451121206341241:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01288");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = summaryStatistics0.getSummary();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.clear();
        long long5 = secondMoment3.getN();
        secondMoment3.clear();
        double double7 = secondMoment3.getResult();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment3);
        java.lang.String str9 = summaryStatistics0.toString();
        double double10 = summaryStatistics0.getGeometricMean();
        long long11 = summaryStatistics0.getN();
        double double12 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = summaryStatistics0.getSummary();
        long long14 = statisticalSummary13.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str9, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(statisticalSummary13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test01289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01289");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = new java.net.URL("/hi!8006405156084128172:", "/hi!5299575738112091390:", (-27), "/hi!5752496371842051724:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: Invalid port number :-27");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01290");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment(0.0d);
        geometricMean0.clear();
        geometricMean0.clear();
        geometricMean0.increment(24.3d);
        geometricMean0.clear();
    }

    @Test
    public void test01291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01291");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        double double2 = sumOfLogs0.getResult();
        double double3 = sumOfLogs0.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl4 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl4.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = empiricalDistributionImpl4.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean7 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean7.increment((double) (short) 100);
        geometricMean7.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long14 = variance13.getN();
        double[] doubleArray20 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double22 = variance13.evaluate(doubleArray20, (double) 'a');
        double double23 = geometricMean7.evaluate(doubleArray20);
        empiricalDistributionImpl4.load(doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = sumOfLogs0.evaluate(doubleArray20, (int) '#', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNull(statisticalSummary6);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 19.43999999999942d + "'", double22 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2.51188643150958d + "'", double23 == 2.51188643150958d);
    }

    @Test
    public void test01292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01292");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long6 = mean5.getN();
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean5);
        java.lang.String str8 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics9 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double10 = summaryStatistics9.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics9.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment12);
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long22 = variance21.getN();
        double[] doubleArray28 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double30 = variance21.evaluate(doubleArray28, (double) 'a');
        mean19.incrementAll(doubleArray28);
        double double32 = variance16.evaluate(doubleArray28);
        summaryStatistics9.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance16);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic34 = summaryStatistics9.getSumLogImpl();
        summaryStatistics0.setGeoMeanImpl(storelessUnivariateStatistic34);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean36 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean36.increment((double) (short) 100);
        geometricMean36.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long43 = variance42.getN();
        double[] doubleArray49 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double51 = variance42.evaluate(doubleArray49, (double) 'a');
        double double52 = geometricMean36.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic53 = geometricMean36.getSumLogImpl();
        geometricMean36.clear();
        double double55 = geometricMean36.getResult();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long59 = variance58.getN();
        double[] doubleArray65 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double67 = variance58.evaluate(doubleArray65, (double) 'a');
        variance58.clear();
        double[] doubleArray72 = new double[] { (byte) 0, (short) 0, 299098734592L };
        double double74 = variance58.evaluate(doubleArray72, (double) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double77 = geometricMean36.evaluate(doubleArray72, (int) (byte) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str8, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 19.43999999999942d + "'", double30 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 24.3d + "'", double32 == 24.3d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic34);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 19.43999999999942d + "'", double51 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2.51188643150958d + "'", double52 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic53);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 19.43999999999942d + "'", double67 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 2.99098734592E11]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.988001178545237E22d + "'", double74 == 1.988001178545237E22d);
    }

    @Test
    public void test01293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01293");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler6 = null;
        java.net.URL uRL7 = new java.net.URL(uRL3, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler6);
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        boolean boolean12 = uRL3.sameFile(uRL11);
        java.net.URL uRL14 = new java.net.URL(uRL11, "/hi!4129638666993068054:");
        java.lang.String str15 = uRL11.getQuery();
        java.lang.String str16 = uRL11.getQuery();
        java.io.File file19 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL20 = file19.toURL();
        java.lang.String str21 = uRL20.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler23 = null;
        java.net.URL uRL24 = new java.net.URL(uRL20, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler23);
        java.lang.String str25 = uRL20.toExternalForm();
        java.net.URL uRL27 = new java.net.URL(uRL20, "/hi!6147520189804127628:");
        boolean boolean28 = uRL11.sameFile(uRL20);
        int int29 = uRL20.getDefaultPort();
        java.lang.String str30 = uRL20.getUserInfo();
        java.lang.String str31 = uRL20.toString();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals(file19.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file19.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL20);
// flaky:         org.junit.Assert.assertEquals(uRL20.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals(uRL24.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!/" + "'", str25, "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals(uRL27.toString(), "file:/hi!6147520189804127628:");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(str30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!/" + "'", str31, "file:/experiment/hi!2169115775229245488/hi!/");
    }

    @Test
    public void test01294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01294");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.exists();
        java.io.File file8 = file4.getAbsoluteFile();
        boolean boolean10 = file8.setWritable(false);
        boolean boolean11 = file8.isHidden();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!163446832090005013:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/hi!163446832090005013:");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01295");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = geometricMean0.getSumLogImpl();
        geometricMean0.clear();
        double double7 = geometricMean0.getResult();
        double double8 = geometricMean0.getResult();
        long long9 = geometricMean0.getN();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = geometricMean0.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics11 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double12 = summaryStatistics11.getMin();
        double double13 = summaryStatistics11.getStandardDeviation();
        double double14 = summaryStatistics11.getSumsq();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary15 = summaryStatistics11.getSummary();
        double double16 = summaryStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics17 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics17.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean18);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean20 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean20.increment((double) (short) 100);
        geometricMean20.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic25 = geometricMean20.getSumLogImpl();
        summaryStatistics17.setMinImpl(storelessUnivariateStatistic25);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic27 = summaryStatistics17.getVarianceImpl();
        summaryStatistics11.setVarianceImpl(storelessUnivariateStatistic27);
        double double29 = summaryStatistics11.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean30 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean30.increment((double) (short) 100);
        geometricMean30.increment((double) (-1L));
        geometricMean30.increment((double) (byte) 1);
        geometricMean30.increment((double) 299098718208L);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares39 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long40 = sumOfSquares39.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long45 = variance44.getN();
        double[] doubleArray51 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double53 = variance44.evaluate(doubleArray51, (double) 'a');
        double double57 = variance42.evaluate(doubleArray51, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double60 = sumOfSquares39.evaluate(doubleArray51, (int) (short) 1, 0);
        sumOfSquares39.increment(0.0d);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl63 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary64 = empiricalDistributionImpl63.getSampleStats();
        java.io.File file68 = new java.io.File("");
        java.io.File file69 = java.io.File.createTempFile("hi!", ":", file68);
        java.lang.String str70 = file69.getCanonicalPath();
        boolean boolean71 = file69.createNewFile();
        empiricalDistributionImpl63.load(file69);
        double[] doubleArray73 = empiricalDistributionImpl63.getUpperBounds();
        double double76 = sumOfSquares39.evaluate(doubleArray73, 100, (int) (short) 1);
        double double77 = geometricMean30.evaluate(doubleArray73);
        boolean boolean78 = summaryStatistics11.equals((java.lang.Object) doubleArray73);
        double double81 = storelessUnivariateStatistic10.evaluate(doubleArray73, 3, 1);
        storelessUnivariateStatistic10.increment((double) ':');
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(statisticalSummary15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic25);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 19.43999999999942d + "'", double53 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNull(statisticalSummary64);
        org.junit.Assert.assertNull("file68.getParent() == null", file68.getParent());
        org.junit.Assert.assertEquals(file68.toString(), "");
        org.junit.Assert.assertNotNull(file69);
        org.junit.Assert.assertEquals(file69.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file69.toString(), "/hi!8123280001738921978:");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "/hi!8123280001738921978:" + "'", str70, "/hi!8123280001738921978:");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
    }

    @Test
    public void test01296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01296");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getMaxImpl();
        double double7 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean8 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean8.increment((double) (short) 100);
        geometricMean8.increment((double) 0);
        double double13 = geometricMean8.getResult();
        geometricMean8.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long18 = variance17.getN();
        long long19 = variance17.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double21 = secondMoment20.getResult();
        secondMoment20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean24 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean24.increment((double) (short) 100);
        geometricMean24.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long31 = variance30.getN();
        double[] doubleArray37 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double39 = variance30.evaluate(doubleArray37, (double) 'a');
        double double40 = geometricMean24.evaluate(doubleArray37);
        double double41 = variance23.evaluate(doubleArray37);
        double double42 = variance17.evaluate(doubleArray37);
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance17);
        org.apache.commons.math.stat.descriptive.summary.Sum sum44 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long45 = sum44.getN();
        double double46 = sum44.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl47 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary48 = empiricalDistributionImpl47.getSampleStats();
        boolean boolean49 = empiricalDistributionImpl47.isLoaded();
        boolean boolean50 = empiricalDistributionImpl47.isLoaded();
        boolean boolean51 = empiricalDistributionImpl47.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int53 = empiricalDistributionImpl52.getBinCount();
        boolean boolean54 = empiricalDistributionImpl52.isLoaded();
        java.util.List list55 = empiricalDistributionImpl52.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean56 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean56.increment((double) (short) 100);
        geometricMean56.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic61 = geometricMean56.getSumLogImpl();
        long long62 = geometricMean56.getN();
        double double63 = geometricMean56.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics64 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double65 = summaryStatistics64.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min66 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics64.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min66);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean68 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean68.increment((double) (short) 100);
        geometricMean68.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long75 = variance74.getN();
        double[] doubleArray81 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double83 = variance74.evaluate(doubleArray81, (double) 'a');
        double double84 = geometricMean68.evaluate(doubleArray81);
        min66.incrementAll(doubleArray81);
        geometricMean56.incrementAll(doubleArray81);
        empiricalDistributionImpl52.load(doubleArray81);
        empiricalDistributionImpl47.load(doubleArray81);
        sum44.incrementAll(doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = variance17.evaluate(doubleArray81, (-27), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 19.43999999999942d + "'", double39 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2.51188643150958d + "'", double40 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 24.3d + "'", double41 == 24.3d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 19.44d + "'", double42 == 19.44d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNull(statisticalSummary48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1000 + "'", int53 == 1000);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 2L + "'", long62 == 2L);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 19.43999999999942d + "'", double83 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2.51188643150958d + "'", double84 == 2.51188643150958d);
    }

    @Test
    public void test01297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01297");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.clear();
        long long4 = secondMoment2.getN();
        secondMoment2.increment((double) 1645454028000L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long12 = variance11.getN();
        double[] doubleArray18 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double20 = variance11.evaluate(doubleArray18, (double) 'a');
        mean9.incrementAll(doubleArray18);
        double double24 = secondMoment2.evaluate(doubleArray18, 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = max0.evaluate(doubleArray18, (-11), (-70));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 19.43999999999942d + "'", double20 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }

    @Test
    public void test01298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01298");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        java.io.File file10 = new java.io.File(uRI9);
        long long11 = file10.lastModified();
        file10.deleteOnExit();
        long long13 = file10.lastModified();
        org.apache.commons.math.stat.descriptive.rank.Max max14 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max14.clear();
        double double16 = max14.getResult();
        long long17 = max14.getN();
        long long18 = max14.getN();
        long long19 = max14.getN();
        max14.clear();
        boolean boolean21 = file10.equals((java.lang.Object) max14);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
// flaky:         org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/experiment");
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645454131000L + "'", long11 == 1645454131000L);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645454131000L + "'", long13 == 1645454131000L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test01299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01299");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getMaxImpl();
        double double7 = summaryStatistics0.getSumOfLogs();
        double double8 = summaryStatistics0.getGeometricMean();
        double double9 = summaryStatistics0.getGeometricMean();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test01300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01300");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        long long6 = secondMoment1.getN();
        double double7 = secondMoment1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test01301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01301");
        java.io.File file2 = java.io.File.createTempFile("hi!", "");
        boolean boolean4 = file2.setLastModified((long) '#');
        java.io.File file5 = file2.getCanonicalFile();
        java.io.File file7 = new java.io.File(file5, "/hi!4420905478953568698:");
        java.io.File file9 = new java.io.File("");
        boolean boolean12 = file9.setWritable(true, true);
        boolean boolean13 = file9.setReadOnly();
        boolean boolean16 = file9.setWritable(true, false);
        java.net.URI uRI17 = file9.toURI();
        boolean boolean19 = file9.setExecutable(false);
        boolean boolean20 = file5.renameTo(file9);
        boolean boolean21 = file5.isAbsolute();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/hi!7432466177091558347");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/tmp/hi!7432466177091558347");
// flaky:         org.junit.Assert.assertEquals(file7.getParent(), "/tmp/hi!7432466177091558347");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/tmp/hi!7432466177091558347/hi!4420905478953568698:");
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(uRI17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test01302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01302");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMinImpl();
        double double6 = summaryStatistics0.getMin();
        double double7 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.rank.Min min8 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min8.clear();
        long long10 = min8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance12.increment((double) (byte) 100);
        java.io.File file17 = new java.io.File("/hi!4420905478953568698:", "/experiment/hi!2169115775229245488");
        boolean boolean18 = variance12.equals((java.lang.Object) "/hi!4420905478953568698:");
        boolean boolean19 = variance12.isBiasCorrected();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl20 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl20.getSampleStats();
        java.io.File file25 = new java.io.File("");
        java.io.File file26 = java.io.File.createTempFile("hi!", ":", file25);
        java.lang.String str27 = file26.getCanonicalPath();
        boolean boolean28 = file26.createNewFile();
        empiricalDistributionImpl20.load(file26);
        double[] doubleArray30 = empiricalDistributionImpl20.getUpperBounds();
        double double33 = variance12.evaluate(doubleArray30, (int) ':', 1);
        double double34 = min8.evaluate(doubleArray30);
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min8);
        long long36 = min8.getN();
        double double37 = min8.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals(file17.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file17.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(statisticalSummary21);
        org.junit.Assert.assertNull("file25.getParent() == null", file25.getParent());
        org.junit.Assert.assertEquals(file25.toString(), "");
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/hi!2517505526487165275:");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "/hi!2517505526487165275:" + "'", str27, "/hi!2517505526487165275:");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
    }

    @Test
    public void test01303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01303");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        boolean boolean10 = file1.setExecutable(true);
        long long11 = file1.lastModified();
        java.lang.String str12 = file1.getParent();
        boolean boolean14 = file1.setExecutable(false);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01304");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getGeoMeanImpl();
        double double6 = summaryStatistics0.getStandardDeviation();
        double double7 = summaryStatistics0.getMax();
        summaryStatistics0.addValue((double) 0L);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares12 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long13 = sumOfSquares12.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long18 = variance17.getN();
        double[] doubleArray24 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double26 = variance17.evaluate(doubleArray24, (double) 'a');
        double double30 = variance15.evaluate(doubleArray24, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double33 = sumOfSquares12.evaluate(doubleArray24, (int) (short) 1, 0);
        double double34 = sumOfSquares12.getResult();
        long long35 = sumOfSquares12.getN();
        sumOfSquares12.increment((double) 1000);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double40 = secondMoment39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment39);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        double double43 = secondMoment39.getResult();
        secondMoment39.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment45);
        secondMoment45.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        double double50 = variance49.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl51 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary52 = empiricalDistributionImpl51.getSampleStats();
        java.io.File file56 = new java.io.File("");
        java.io.File file57 = java.io.File.createTempFile("hi!", ":", file56);
        java.lang.String str58 = file57.getCanonicalPath();
        boolean boolean59 = file57.createNewFile();
        empiricalDistributionImpl51.load(file57);
        double[] doubleArray61 = empiricalDistributionImpl51.getUpperBounds();
        double[] doubleArray62 = empiricalDistributionImpl51.getUpperBounds();
        variance49.incrementAll(doubleArray62, 1, (int) (short) 1);
        double double68 = secondMoment39.evaluate(doubleArray62, 1, 0);
        sumOfSquares12.incrementAll(doubleArray62, 0, (int) (short) 100);
        storelessUnivariateStatistic11.incrementAll(doubleArray62, (int) (short) 100, (int) (short) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 19.43999999999942d + "'", double26 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNull(statisticalSummary52);
        org.junit.Assert.assertNull("file56.getParent() == null", file56.getParent());
        org.junit.Assert.assertEquals(file56.toString(), "");
        org.junit.Assert.assertNotNull(file57);
        org.junit.Assert.assertEquals(file57.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file57.toString(), "/hi!8667665574929620280:");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "/hi!8667665574929620280:" + "'", str58, "/hi!8667665574929620280:");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
    }

    @Test
    public void test01305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01305");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = summaryStatistics0.getSummary();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.clear();
        long long5 = secondMoment3.getN();
        secondMoment3.clear();
        double double7 = secondMoment3.getResult();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int11 = empiricalDistributionImpl10.getBinCount();
        boolean boolean12 = empiricalDistributionImpl10.isLoaded();
        java.util.List list13 = empiricalDistributionImpl10.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean14 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean14.increment((double) (short) 100);
        geometricMean14.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic19 = geometricMean14.getSumLogImpl();
        long long20 = geometricMean14.getN();
        double double21 = geometricMean14.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics22 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double23 = summaryStatistics22.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min24 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics22.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min24);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean26 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean26.increment((double) (short) 100);
        geometricMean26.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long33 = variance32.getN();
        double[] doubleArray39 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double41 = variance32.evaluate(doubleArray39, (double) 'a');
        double double42 = geometricMean26.evaluate(doubleArray39);
        min24.incrementAll(doubleArray39);
        geometricMean14.incrementAll(doubleArray39);
        empiricalDistributionImpl10.load(doubleArray39);
        double double48 = secondMoment3.evaluate(doubleArray39, (int) (byte) 1, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long51 = variance50.getN();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl52 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary53 = empiricalDistributionImpl52.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary54 = empiricalDistributionImpl52.getSampleStats();
        java.util.List list55 = empiricalDistributionImpl52.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl52.getSampleStats();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs57 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean58 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs57);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl59 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = empiricalDistributionImpl59.getSampleStats();
        boolean boolean61 = empiricalDistributionImpl59.isLoaded();
        boolean boolean62 = empiricalDistributionImpl59.isLoaded();
        java.util.List list63 = empiricalDistributionImpl59.getBinStats();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics64 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean65 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics64.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean65);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean67 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean67.increment((double) (short) 100);
        geometricMean67.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic72 = geometricMean67.getSumLogImpl();
        summaryStatistics64.setMinImpl(storelessUnivariateStatistic72);
        double double74 = summaryStatistics64.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics64.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance76);
        org.apache.commons.math.stat.descriptive.rank.Min min78 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min78.clear();
        double[] doubleArray85 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double86 = min78.evaluate(doubleArray85);
        variance76.incrementAll(doubleArray85);
        empiricalDistributionImpl59.load(doubleArray85);
        geometricMean58.incrementAll(doubleArray85, (int) (byte) 0, (int) (byte) 1);
        empiricalDistributionImpl52.load(doubleArray85);
        double double95 = variance50.evaluate(doubleArray85, (int) (short) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment3.incrementAll(doubleArray85, 3, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 19.43999999999942d + "'", double41 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2.51188643150958d + "'", double42 == 2.51188643150958d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNull(statisticalSummary53);
        org.junit.Assert.assertNull(statisticalSummary54);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNull(statisticalSummary56);
        org.junit.Assert.assertNull(statisticalSummary60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(list63);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic72);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-1.0d) + "'", double86 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
    }

    @Test
    public void test01306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01306");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics1 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double2 = summaryStatistics1.getMin();
        double double3 = summaryStatistics1.getStandardDeviation();
        double double4 = summaryStatistics1.getMean();
        double double5 = summaryStatistics1.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double8 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment7);
        summaryStatistics1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double13 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long17 = variance16.getN();
        double[] doubleArray23 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double25 = variance16.evaluate(doubleArray23, (double) 'a');
        double double26 = variance14.evaluate(doubleArray23);
        summaryStatistics1.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance14);
        long long28 = summaryStatistics1.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics29 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double30 = summaryStatistics29.getVariance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = summaryStatistics29.getSummary();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.clear();
        long long34 = secondMoment32.getN();
        secondMoment32.clear();
        double double36 = secondMoment32.getResult();
        summaryStatistics29.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment32);
        summaryStatistics1.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long40 = secondMoment32.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment32);
        variance41.clear();
        boolean boolean43 = variance41.isBiasCorrected();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 19.43999999999942d + "'", double25 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 19.44d + "'", double26 == 19.44d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(statisticalSummary31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test01307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01307");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        java.lang.String str5 = file4.getCanonicalPath();
        boolean boolean7 = file4.setExecutable(false);
        java.io.File file9 = new java.io.File(file4, "/hi!4480358428447556126:");
        boolean boolean11 = file4.setLastModified(299098726400L);
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!8604224020980964353:");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/hi!8604224020980964353:" + "'", str5, "/hi!8604224020980964353:");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertEquals(file9.getParent(), "/hi!8604224020980964353:");
// flaky:         org.junit.Assert.assertEquals(file9.toString(), "/hi!8604224020980964353:/hi!4480358428447556126:");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test01308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01308");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics4 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double5 = summaryStatistics4.getMin();
        double double6 = summaryStatistics4.getStandardDeviation();
        double double7 = summaryStatistics4.getSum();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares8 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long9 = sumOfSquares8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long14 = variance13.getN();
        double[] doubleArray20 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double22 = variance13.evaluate(doubleArray20, (double) 'a');
        double double26 = variance11.evaluate(doubleArray20, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double29 = sumOfSquares8.evaluate(doubleArray20, (int) (short) 1, 0);
        double double30 = sumOfSquares8.getResult();
        long long31 = sumOfSquares8.getN();
        sumOfSquares8.clear();
        summaryStatistics4.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares8);
        double double34 = sumOfSquares8.getResult();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares35 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares35.increment((double) (byte) 1);
        double double38 = sumOfSquares35.getResult();
        sumOfSquares35.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double41 = secondMoment40.getResult();
        secondMoment40.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment40);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment45);
        secondMoment45.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment50);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long55 = variance54.getN();
        double[] doubleArray61 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double63 = variance54.evaluate(doubleArray61, (double) 'a');
        mean52.incrementAll(doubleArray61);
        double double65 = variance49.evaluate(doubleArray61);
        double double66 = secondMoment40.evaluate(doubleArray61);
        double double67 = sumOfSquares35.evaluate(doubleArray61);
        sumOfSquares8.incrementAll(doubleArray61);
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares8);
        summaryStatistics0.addValue(8.648205307215453E19d);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 19.43999999999942d + "'", double22 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 19.43999999999942d + "'", double63 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 24.3d + "'", double65 == 24.3d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 97.2d + "'", double66 == 97.2d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 203.0d + "'", double67 == 203.0d);
    }

    @Test
    public void test01309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01309");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        long long2 = sumOfLogs0.getN();
        org.apache.commons.math.stat.descriptive.rank.Min min3 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min3.clear();
        double[] doubleArray10 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double11 = min3.evaluate(doubleArray10);
        double double14 = sumOfLogs0.evaluate(doubleArray10, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean15 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        long long16 = sumOfLogs0.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean17 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        sumOfLogs0.increment(377.91360000000003d);
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long21 = mean20.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double23 = secondMoment22.getResult();
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean26 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean26.increment((double) (short) 100);
        geometricMean26.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long33 = variance32.getN();
        double[] doubleArray39 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double41 = variance32.evaluate(doubleArray39, (double) 'a');
        double double42 = geometricMean26.evaluate(doubleArray39);
        double double43 = variance25.evaluate(doubleArray39);
        double double44 = mean20.evaluate(doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = sumOfLogs0.evaluate(doubleArray39, (-70), 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4.060443010546419d + "'", double14 == 4.060443010546419d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 19.43999999999942d + "'", double41 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2.51188643150958d + "'", double42 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 24.3d + "'", double43 == 24.3d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 4.6d + "'", double44 == 4.6d);
    }

    @Test
    public void test01310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01310");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        java.io.File file10 = new java.io.File(uRI9);
        long long11 = file10.lastModified();
        file10.deleteOnExit();
        file10.deleteOnExit();
        long long14 = file10.length();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics15 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics15.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean16);
        java.io.File file19 = new java.io.File("");
        java.lang.String str20 = file19.getParent();
        boolean boolean21 = summaryStatistics15.equals((java.lang.Object) file19);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares22 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long23 = sumOfSquares22.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long28 = variance27.getN();
        double[] doubleArray34 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double36 = variance27.evaluate(doubleArray34, (double) 'a');
        double double40 = variance25.evaluate(doubleArray34, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double43 = sumOfSquares22.evaluate(doubleArray34, (int) (short) 1, 0);
        double double44 = sumOfSquares22.getResult();
        long long45 = sumOfSquares22.getN();
        sumOfSquares22.clear();
        sumOfSquares22.clear();
        summaryStatistics15.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares22);
        boolean boolean49 = file10.equals((java.lang.Object) summaryStatistics15);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
// flaky:         org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/experiment");
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645454132000L + "'", long11 == 1645454132000L);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 28672L + "'", long14 == 28672L);
        org.junit.Assert.assertNull("file19.getParent() == null", file19.getParent());
        org.junit.Assert.assertEquals(file19.toString(), "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 19.43999999999942d + "'", double36 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test01311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01311");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        double double2 = sumOfLogs0.getResult();
        long long3 = sumOfLogs0.getN();
        sumOfLogs0.clear();
        long long5 = sumOfLogs0.getN();
        long long6 = sumOfLogs0.getN();
        long long7 = sumOfLogs0.getN();
        sumOfLogs0.increment((double) 1645454111000L);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test01312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01312");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(0);
        java.util.List list2 = empiricalDistributionImpl1.getBinStats();
        int int3 = empiricalDistributionImpl1.getBinCount();
        int int4 = empiricalDistributionImpl1.getBinCount();
        java.io.File file7 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL8 = file7.toURL();
        java.io.File file11 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL12 = file11.toURL();
        java.lang.String str13 = uRL12.getAuthority();
        int int14 = uRL12.getPort();
        java.lang.String str15 = uRL12.toExternalForm();
        java.io.File file18 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL19 = file18.toURL();
        java.lang.String str20 = uRL19.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler22 = null;
        java.net.URL uRL23 = new java.net.URL(uRL19, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler22);
        boolean boolean24 = uRL12.sameFile(uRL23);
        java.lang.String str25 = uRL23.getQuery();
        java.io.File file28 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL29 = file28.toURL();
        java.lang.String str30 = uRL29.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler32 = null;
        java.net.URL uRL33 = new java.net.URL(uRL29, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler32);
        java.io.File file36 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL37 = file36.toURL();
        boolean boolean38 = uRL29.sameFile(uRL37);
        java.net.URL uRL40 = new java.net.URL(uRL37, "/hi!4129638666993068054:");
        java.lang.Class[] classArray41 = new java.lang.Class[] {};
        java.lang.Object obj42 = uRL40.getContent(classArray41);
        java.lang.Object obj43 = null; // flaky: uRL23.getContent(classArray41);
        java.lang.Object obj44 = null; // flaky: uRL8.getContent(classArray41);
        java.io.File file47 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL48 = file47.toURL();
        java.lang.String str49 = uRL48.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler51 = null;
        java.net.URL uRL52 = new java.net.URL(uRL48, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler51);
        java.lang.String str53 = uRL48.getUserInfo();
        boolean boolean54 = uRL8.sameFile(uRL48);
        java.net.URLStreamHandler uRLStreamHandler56 = null;
        java.net.URL uRL57 = new java.net.URL(uRL48, "/hi!3873812041336023575:", uRLStreamHandler56);
        java.lang.String str58 = uRL48.toExternalForm();
        // The following exception was thrown during execution in test generation
{ // flaky:         try {
// flaky:             empiricalDistributionImpl1.load(uRL48);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: URL file:/experiment/hi!2169115775229245488/hi!/ contains no data");
// flaky:         } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals(file7.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file7.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL8);
// flaky:         org.junit.Assert.assertEquals(uRL8.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals(file11.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file11.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL12);
// flaky:         org.junit.Assert.assertEquals(uRL12.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!/" + "'", str15, "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals(file18.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file18.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL19);
        org.junit.Assert.assertEquals(uRL19.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals(uRL23.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals(file28.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file28.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL29);
        org.junit.Assert.assertEquals(uRL29.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals(uRL33.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file36.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file36.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL37);
        org.junit.Assert.assertEquals(uRL37.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals(uRL40.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals(file47.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file47.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL48);
        org.junit.Assert.assertEquals(uRL48.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals(uRL52.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals(uRL57.toString(), "file:/hi!3873812041336023575:");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!/" + "'", str58, "file:/experiment/hi!2169115775229245488/hi!/");
    }

    @Test
    public void test01313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01313");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = geometricMean0.getSumLogImpl();
        long long6 = geometricMean0.getN();
        double double7 = geometricMean0.getResult();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean0.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long11 = variance10.getN();
        double[] doubleArray17 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double19 = variance10.evaluate(doubleArray17, (double) 'a');
        variance10.clear();
        double[] doubleArray24 = new double[] { (byte) 0, (short) 0, 299098734592L };
        double double26 = variance10.evaluate(doubleArray24, (double) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = geometricMean0.evaluate(doubleArray24, (-24), 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 19.43999999999942d + "'", double19 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0, 2.99098734592E11]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.988001178545237E22d + "'", double26 == 1.988001178545237E22d);
    }

    @Test
    public void test01314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01314");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.canExecute();
        java.io.File file9 = new java.io.File("");
        boolean boolean12 = file9.setWritable(true, true);
        boolean boolean13 = file9.setReadOnly();
        boolean boolean16 = file9.setWritable(true, false);
        java.net.URI uRI17 = file9.toURI();
        boolean boolean18 = file9.mkdir();
        java.io.File file19 = file9.getCanonicalFile();
        boolean boolean20 = file4.renameTo(file9);
        boolean boolean23 = file9.setWritable(true, true);
        boolean boolean26 = file9.setWritable(false, false);
        java.io.File file29 = new java.io.File("/hi!1050638282446274787:", "");
        boolean boolean30 = file29.mkdir();
        long long31 = file29.getFreeSpace();
        boolean boolean32 = file9.renameTo(file29);
        java.lang.String str33 = file29.getParent();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!601825263082317363:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(uRI17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(file19);
// flaky:         org.junit.Assert.assertEquals(file19.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file19.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals(file29.getParent(), "/");
        org.junit.Assert.assertEquals(file29.toString(), "/hi!1050638282446274787:");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 299098599424L + "'", long31 == 299098599424L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "/" + "'", str33, "/");
    }

    @Test
    public void test01315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01315");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long11 = variance10.getN();
        double[] doubleArray17 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double19 = variance10.evaluate(doubleArray17, (double) 'a');
        mean8.incrementAll(doubleArray17);
        empiricalDistributionImpl5.load(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long26 = variance25.getN();
        double[] doubleArray32 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double34 = variance25.evaluate(doubleArray32, (double) 'a');
        double double38 = variance23.evaluate(doubleArray32, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        empiricalDistributionImpl5.load(doubleArray32);
        double double41 = variance4.evaluate(doubleArray32, (double) '/');
        variance4.increment((double) 299098669056L);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl44 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary45 = empiricalDistributionImpl44.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary46 = empiricalDistributionImpl44.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean47 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean47.increment((double) (short) 100);
        geometricMean47.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long54 = variance53.getN();
        double[] doubleArray60 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double62 = variance53.evaluate(doubleArray60, (double) 'a');
        double double63 = geometricMean47.evaluate(doubleArray60);
        empiricalDistributionImpl44.load(doubleArray60);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = empiricalDistributionImpl44.getSampleStats();
        double double66 = empiricalDistributionImpl44.getNextValue();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean67 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean67.increment((double) (short) 100);
        geometricMean67.increment((double) (-1L));
        geometricMean67.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean74 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean74.increment((double) (short) 100);
        geometricMean74.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long81 = variance80.getN();
        double[] doubleArray87 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double89 = variance80.evaluate(doubleArray87, (double) 'a');
        double double90 = geometricMean74.evaluate(doubleArray87);
        double double91 = geometricMean67.evaluate(doubleArray87);
        empiricalDistributionImpl44.load(doubleArray87);
        variance4.incrementAll(doubleArray87, 0, 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 19.43999999999942d + "'", double19 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 19.43999999999942d + "'", double34 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 24.300000000000182d + "'", double41 == 24.300000000000182d);
        org.junit.Assert.assertNull(statisticalSummary45);
        org.junit.Assert.assertNull(statisticalSummary46);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 19.43999999999942d + "'", double62 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2.51188643150958d + "'", double63 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(statisticalSummary65);
// flaky:         org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 19.43999999999942d + "'", double89 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2.51188643150958d + "'", double90 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 2.51188643150958d + "'", double91 == 2.51188643150958d);
    }

    @Test
    public void test01316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01316");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean1.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean1);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = geometricMean1.getSumLogImpl();
        geometricMean1.increment((double) 299098755072L);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl9 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        mean12.incrementAll(doubleArray21);
        empiricalDistributionImpl9.load(doubleArray21);
        empiricalDistributionImpl8.load(doubleArray21);
        boolean boolean27 = empiricalDistributionImpl8.isLoaded();
        double[] doubleArray28 = empiricalDistributionImpl8.getUpperBounds();
        // The following exception was thrown during execution in test generation
        try {
            double double31 = geometricMean1.evaluate(doubleArray28, 1, (-24));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(summaryStatistics0);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 1.0]");
    }

    @Test
    public void test01317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01317");
        java.io.File file2 = java.io.File.createTempFile("/experiment/hi!2169115775229245488", "");
        boolean boolean3 = file2.delete();
        java.lang.String str4 = file2.getPath();
        boolean boolean5 = file2.createNewFile();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/hi!21691157752292454888078445996954184296");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/tmp/hi!21691157752292454888078445996954184296" + "'", str4, "/tmp/hi!21691157752292454888078445996954184296");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test01318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01318");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getGeoMeanImpl();
        double double6 = summaryStatistics0.getStandardDeviation();
        double double7 = summaryStatistics0.getMax();
        summaryStatistics0.addValue((double) 0L);
        double double10 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getMeanImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
    }

    @Test
    public void test01319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01319");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSumsq();
        double double4 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getGeoMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long11 = variance10.getN();
        double[] doubleArray17 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double19 = variance10.evaluate(doubleArray17, (double) 'a');
        mean8.incrementAll(doubleArray17);
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long24 = variance23.getN();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl25.getSampleStats();
        java.util.List list28 = empiricalDistributionImpl25.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary29 = empiricalDistributionImpl25.getSampleStats();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs30 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean31 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs30);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = empiricalDistributionImpl32.getSampleStats();
        boolean boolean34 = empiricalDistributionImpl32.isLoaded();
        boolean boolean35 = empiricalDistributionImpl32.isLoaded();
        java.util.List list36 = empiricalDistributionImpl32.getBinStats();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics37 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics37.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean38);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean40 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean40.increment((double) (short) 100);
        geometricMean40.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic45 = geometricMean40.getSumLogImpl();
        summaryStatistics37.setMinImpl(storelessUnivariateStatistic45);
        double double47 = summaryStatistics37.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics37.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance49);
        org.apache.commons.math.stat.descriptive.rank.Min min51 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min51.clear();
        double[] doubleArray58 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double59 = min51.evaluate(doubleArray58);
        variance49.incrementAll(doubleArray58);
        empiricalDistributionImpl32.load(doubleArray58);
        geometricMean31.incrementAll(doubleArray58, (int) (byte) 0, (int) (byte) 1);
        empiricalDistributionImpl25.load(doubleArray58);
        double double68 = variance23.evaluate(doubleArray58, (int) (short) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double71 = mean8.evaluate(doubleArray58, (-2), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 19.43999999999942d + "'", double19 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNull(statisticalSummary26);
        org.junit.Assert.assertNull(statisticalSummary27);
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(statisticalSummary29);
        org.junit.Assert.assertNull(statisticalSummary33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic45);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-1.0d) + "'", double59 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
    }

    @Test
    public void test01320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01320");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("/hi!7815708013996444960:", "/hi!7647546737984116786:");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/hi!7815708013996444960:8340368063032487122/hi!7647546737984116786:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01321");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        summaryStatistics0.addValue(19.44d);
        double double9 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics0.getMeanImpl();
        double double11 = summaryStatistics0.getMean();
        double double12 = summaryStatistics0.getGeometricMean();
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 19.44d + "'", double9 == 19.44d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 19.44d + "'", double11 == 19.44d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 2.77130757082054E8d + "'", double12 == 2.77130757082054E8d);
    }

    @Test
    public void test01322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01322");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        sumOfLogs0.increment((double) (-3));
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = empiricalDistributionImpl5.getSampleStats();
        boolean boolean7 = empiricalDistributionImpl5.isLoaded();
        int int8 = empiricalDistributionImpl5.getBinCount();
        boolean boolean9 = geometricMean4.equals((java.lang.Object) empiricalDistributionImpl5);
        java.io.File file12 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL13 = file12.toURL();
        java.lang.String str14 = uRL13.getAuthority();
        java.lang.String str15 = uRL13.getUserInfo();
        int int16 = uRL13.getDefaultPort();
        java.lang.String str17 = uRL13.getUserInfo();
        java.io.File file20 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL21 = file20.toURL();
        java.lang.String str22 = uRL21.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler24 = null;
        java.net.URL uRL25 = new java.net.URL(uRL21, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler24);
        boolean boolean26 = uRL13.sameFile(uRL25);
        java.io.File file29 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL30 = file29.toURL();
        java.lang.String str31 = uRL30.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler33 = null;
        java.net.URL uRL34 = new java.net.URL(uRL30, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler33);
        java.io.File file37 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL38 = file37.toURL();
        boolean boolean39 = uRL30.sameFile(uRL38);
        java.net.URL uRL41 = new java.net.URL(uRL38, "/hi!4129638666993068054:");
        java.lang.Class[] classArray42 = new java.lang.Class[] {};
        java.lang.Object obj43 = uRL41.getContent(classArray42);
        java.lang.Object obj44 = null; // flaky: uRL25.getContent(classArray42);
        java.net.URL uRL46 = new java.net.URL(uRL25, "/hi!3938804822785417105:");
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl5.load(uRL46);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: URL file:/hi!3938804822785417105: contains no data");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNull(statisticalSummary6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals(file12.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file12.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL13);
// flaky:         org.junit.Assert.assertEquals(uRL13.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals(file20.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file20.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL21);
// flaky:         org.junit.Assert.assertEquals(uRL21.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals(uRL25.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals(file29.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file29.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL30);
// flaky:         org.junit.Assert.assertEquals(uRL30.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals(uRL34.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file37.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file37.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL38);
// flaky:         org.junit.Assert.assertEquals(uRL38.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals(uRL41.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals(uRL46.toString(), "file:/hi!3938804822785417105:");
    }

    @Test
    public void test01323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01323");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics1 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean2);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean4.increment((double) (short) 100);
        geometricMean4.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = geometricMean4.getSumLogImpl();
        summaryStatistics1.setMinImpl(storelessUnivariateStatistic9);
        double double11 = summaryStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double14 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        summaryStatistics1.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment13);
        secondMoment13.increment((double) '/');
        double double20 = secondMoment13.getResult();
        secondMoment13.increment((double) 2L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test01324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01324");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler6 = null;
        java.net.URL uRL7 = new java.net.URL(uRL3, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler6);
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        boolean boolean12 = uRL3.sameFile(uRL11);
        java.net.URL uRL14 = new java.net.URL(uRL11, "/hi!4129638666993068054:");
        java.lang.Class[] classArray15 = new java.lang.Class[] {};
        java.lang.Object obj16 = uRL14.getContent(classArray15);
        java.lang.String str17 = uRL14.getPath();
        java.net.URI uRI18 = uRL14.toURI();
        java.net.URLConnection uRLConnection19 = uRL14.openConnection();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "/hi!4129638666993068054:" + "'", str17, "/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(uRI18);
        org.junit.Assert.assertNotNull(uRLConnection19);
    }

    @Test
    public void test01325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01325");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file5 = new java.io.File("");
        java.io.File file6 = java.io.File.createTempFile("hi!", ":", file5);
        java.lang.String str7 = file6.getCanonicalPath();
        boolean boolean8 = file6.createNewFile();
        empiricalDistributionImpl0.load(file6);
        boolean boolean10 = empiricalDistributionImpl0.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl0.getUpperBounds();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int13 = empiricalDistributionImpl12.getBinCount();
        boolean boolean14 = empiricalDistributionImpl12.isLoaded();
        java.util.List list15 = empiricalDistributionImpl12.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean16 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean16.increment((double) (short) 100);
        geometricMean16.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic21 = geometricMean16.getSumLogImpl();
        long long22 = geometricMean16.getN();
        double double23 = geometricMean16.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics24 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double25 = summaryStatistics24.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min26 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics24.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min26);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean28 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean28.increment((double) (short) 100);
        geometricMean28.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long35 = variance34.getN();
        double[] doubleArray41 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double43 = variance34.evaluate(doubleArray41, (double) 'a');
        double double44 = geometricMean28.evaluate(doubleArray41);
        min26.incrementAll(doubleArray41);
        geometricMean16.incrementAll(doubleArray41);
        empiricalDistributionImpl12.load(doubleArray41);
        double[] doubleArray48 = empiricalDistributionImpl12.getUpperBounds();
        empiricalDistributionImpl0.load(doubleArray48);
        int int50 = empiricalDistributionImpl0.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary51 = empiricalDistributionImpl0.getSampleStats();
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/hi!348952429339545546:");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/hi!348952429339545546:" + "'", str7, "/hi!348952429339545546:");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1000 + "'", int13 == 1000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2L + "'", long22 == 2L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 19.43999999999942d + "'", double43 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2.51188643150958d + "'", double44 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1000 + "'", int50 == 1000);
        org.junit.Assert.assertNotNull(statisticalSummary51);
    }

    @Test
    public void test01326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01326");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        long long10 = file1.getUsableSpace();
        long long11 = file1.getTotalSpace();
        java.net.URI uRI12 = file1.toURI();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(uRI12);
    }

    @Test
    public void test01327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01327");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("/hi!7565224060518856347:", "/hi!1674194436795154558:");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/hi!7565224060518856347:6658072751152874917/hi!1674194436795154558:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01328");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        boolean boolean10 = file1.mkdir();
        java.lang.String str11 = file1.getName();
        java.lang.String str12 = file1.getAbsolutePath();
        java.io.File file14 = new java.io.File(file1, ":");
        boolean boolean17 = file14.setReadable(false, false);
        java.io.File file19 = new java.io.File(file14, "/hi!2898540627131260511:");
        boolean boolean20 = file19.isHidden();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/experiment" + "'", str12, "/experiment");
        org.junit.Assert.assertEquals(file14.getParent(), "/");
        org.junit.Assert.assertEquals(file14.toString(), "/:");
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals(file19.getParent(), "/:");
        org.junit.Assert.assertEquals(file19.toString(), "/:/hi!2898540627131260511:");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test01329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01329");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("/hi!8647219287495694686:", "java.io.IOException: /hi!8130836485477920045:", (int) 'a', "java.io.IOException: java.io.IOException: java.io.IOException: /hi!4533436540036848542:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!8647219287495694686:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01330");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        boolean boolean3 = false; // flaky: file2.createNewFile();
        long long4 = file2.getFreeSpace();
        long long5 = file2.lastModified();
        java.io.File file6 = file2.getParentFile();
        long long7 = file2.lastModified();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 299098595328L + "'", long4 == 299098595328L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645454130000L + "'", long5 == 1645454130000L);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "hi!2169115775229245488");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645454130000L + "'", long7 == 1645454130000L);
    }

    @Test
    public void test01331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01331");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean2.increment((double) 0);
        double double5 = mean2.getResult();
        long long6 = mean2.getN();
        mean2.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean2);
        double double9 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean10 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean10.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long29 = variance28.getN();
        double[] doubleArray35 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double37 = variance28.evaluate(doubleArray35, (double) 'a');
        mean26.incrementAll(doubleArray35);
        double double40 = variance14.evaluate(doubleArray35, (double) (byte) 1);
        geometricMean10.incrementAll(doubleArray35);
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean10);
        double double43 = summaryStatistics0.getSumOfLogs();
        java.lang.Class<?> wildcardClass44 = summaryStatistics0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 19.43999999999942d + "'", double37 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 19.44d + "'", double40 == 19.44d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test01332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01332");
        java.io.File file2 = java.io.File.createTempFile("hi!", "");
        boolean boolean4 = file2.setLastModified((long) '#');
        java.io.File file5 = file2.getCanonicalFile();
        java.io.File file7 = new java.io.File(file5, "/hi!4420905478953568698:");
        java.io.File file9 = new java.io.File("");
        boolean boolean12 = file9.setWritable(true, true);
        boolean boolean13 = file9.setReadOnly();
        boolean boolean16 = file9.setWritable(true, false);
        java.net.URI uRI17 = file9.toURI();
        boolean boolean19 = file9.setExecutable(false);
        boolean boolean20 = file5.renameTo(file9);
        java.io.File file22 = new java.io.File(file9, "/hi!7687468563058800479:");
        boolean boolean23 = file9.isFile();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/hi!1133057648233434069");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/tmp/hi!1133057648233434069");
// flaky:         org.junit.Assert.assertEquals(file7.getParent(), "/tmp/hi!1133057648233434069");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/tmp/hi!1133057648233434069/hi!4420905478953568698:");
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(uRI17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals(file22.getParent(), "/");
        org.junit.Assert.assertEquals(file22.toString(), "/hi!7687468563058800479:");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test01333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01333");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMean();
        double double2 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics3 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double4 = summaryStatistics3.getMin();
        double double5 = summaryStatistics3.getStandardDeviation();
        double double6 = summaryStatistics3.getMean();
        double double7 = summaryStatistics3.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long9 = mean8.getN();
        summaryStatistics3.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        mean8.increment((double) (-27));
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        summaryStatistics0.addValue((double) 280499609600L);
        double double16 = summaryStatistics0.getMin();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2.804996096E11d + "'", double16 == 2.804996096E11d);
    }

    @Test
    public void test01334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01334");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long2 = variance1.getN();
        variance1.increment((double) 299098755072L);
        boolean boolean5 = variance1.isBiasCorrected();
        variance1.increment((double) 280499609600L);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl8 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int9 = empiricalDistributionImpl8.getBinCount();
        boolean boolean10 = empiricalDistributionImpl8.isLoaded();
        java.util.List list11 = empiricalDistributionImpl8.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean12 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean12.increment((double) (short) 100);
        geometricMean12.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic17 = geometricMean12.getSumLogImpl();
        long long18 = geometricMean12.getN();
        double double19 = geometricMean12.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics20 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double21 = summaryStatistics20.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min22 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics20.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min22);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean24 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean24.increment((double) (short) 100);
        geometricMean24.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long31 = variance30.getN();
        double[] doubleArray37 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double39 = variance30.evaluate(doubleArray37, (double) 'a');
        double double40 = geometricMean24.evaluate(doubleArray37);
        min22.incrementAll(doubleArray37);
        geometricMean12.incrementAll(doubleArray37);
        empiricalDistributionImpl8.load(doubleArray37);
        double[] doubleArray44 = empiricalDistributionImpl8.getUpperBounds();
        double[] doubleArray45 = empiricalDistributionImpl8.getUpperBounds();
        // The following exception was thrown during execution in test generation
        try {
            double double48 = variance1.evaluate(doubleArray45, (int) (short) -1, (int) ':');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1000 + "'", int9 == 1000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 19.43999999999942d + "'", double39 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2.51188643150958d + "'", double40 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
    }

    @Test
    public void test01335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01335");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares4 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long5 = sumOfSquares4.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double22 = variance7.evaluate(doubleArray16, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double25 = sumOfSquares4.evaluate(doubleArray16, (int) (short) 1, 0);
        double double26 = sumOfSquares4.getResult();
        long long27 = sumOfSquares4.getN();
        sumOfSquares4.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares4);
        sumOfSquares4.clear();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl31 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long37 = variance36.getN();
        double[] doubleArray43 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double45 = variance36.evaluate(doubleArray43, (double) 'a');
        mean34.incrementAll(doubleArray43);
        empiricalDistributionImpl31.load(doubleArray43);
        sumOfSquares4.incrementAll(doubleArray43, 0, (int) (short) 1);
        sumOfSquares4.clear();
        sumOfSquares4.clear();
        sumOfSquares4.increment((double) 1645454066000L);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 19.43999999999942d + "'", double45 == 19.43999999999942d);
    }

    @Test
    public void test01336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01336");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        double double2 = summaryStatistics0.getStandardDeviation();
        summaryStatistics0.addValue((double) 1000);
        double double5 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = null;
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.setSumLogImpl(storelessUnivariateStatistic6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementations must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 6.907755278982137d + "'", double5 == 6.907755278982137d);
    }

    @Test
    public void test01337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01337");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.lang.String str5 = uRL3.getUserInfo();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getUserInfo();
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        java.lang.String str12 = uRL11.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler14 = null;
        java.net.URL uRL15 = new java.net.URL(uRL11, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler14);
        boolean boolean16 = uRL3.sameFile(uRL15);
        java.net.URI uRI17 = uRL15.toURI();
        java.io.File file18 = new java.io.File(uRI17);
        boolean boolean19 = file18.canRead();
        boolean boolean20 = file18.mkdirs();
        java.lang.String str21 = file18.getPath();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(uRL15.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(uRI17);
        org.junit.Assert.assertEquals(file18.getParent(), "/experiment/hi!2169115775229245488");
        org.junit.Assert.assertEquals(file18.toString(), "/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str21, "/experiment/hi!2169115775229245488/hi!");
    }

    @Test
    public void test01338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01338");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        java.lang.String str10 = file1.getParent();
        boolean boolean12 = file1.setReadable(false);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01339");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        boolean boolean3 = empiricalDistributionImpl0.isLoaded();
        java.util.List list4 = empiricalDistributionImpl0.getBinStats();
        int int5 = empiricalDistributionImpl0.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long12 = variance11.getN();
        double[] doubleArray18 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double20 = variance11.evaluate(doubleArray18, (double) 'a');
        mean9.incrementAll(doubleArray18);
        empiricalDistributionImpl6.load(doubleArray18);
        empiricalDistributionImpl0.load(doubleArray18);
        java.io.File file26 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL27 = file26.toURL();
        java.lang.String str28 = uRL27.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler30 = null;
        java.net.URL uRL31 = new java.net.URL(uRL27, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler30);
        java.io.File file34 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL35 = file34.toURL();
        boolean boolean36 = uRL27.sameFile(uRL35);
        java.lang.String str37 = uRL35.getAuthority();
        java.lang.String str38 = uRL35.getRef();
        // The following exception was thrown during execution in test generation
{ // flaky:         try {
// flaky:             empiricalDistributionImpl0.load(uRL35);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: URL file:/experiment/hi!2169115775229245488/hi!/ contains no data");
// flaky:         } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1000 + "'", int5 == 1000);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 19.43999999999942d + "'", double20 == 19.43999999999942d);
        org.junit.Assert.assertEquals(file26.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file26.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL27);
// flaky:         org.junit.Assert.assertEquals(uRL27.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals(uRL31.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file34.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file34.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL35);
// flaky:         org.junit.Assert.assertEquals(uRL35.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test01340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01340");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl2 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl2.getSampleStats();
        boolean boolean4 = empiricalDistributionImpl2.isLoaded();
        boolean boolean5 = empiricalDistributionImpl2.isLoaded();
        java.util.List list6 = empiricalDistributionImpl2.getBinStats();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics7 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics7.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean10 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean10.increment((double) (short) 100);
        geometricMean10.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = geometricMean10.getSumLogImpl();
        summaryStatistics7.setMinImpl(storelessUnivariateStatistic15);
        double double17 = summaryStatistics7.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics7.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance19);
        org.apache.commons.math.stat.descriptive.rank.Min min21 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min21.clear();
        double[] doubleArray28 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double29 = min21.evaluate(doubleArray28);
        variance19.incrementAll(doubleArray28);
        empiricalDistributionImpl2.load(doubleArray28);
        geometricMean1.incrementAll(doubleArray28, (int) (byte) 0, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long36 = mean35.getN();
        // The following exception was thrown during execution in test generation
        try {
            geometricMean1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementation must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test01341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01341");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        summaryStatistics0.addValue(19.44d);
        double double9 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics0.getMeanImpl();
        long long11 = summaryStatistics0.getN();
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 19.44d + "'", double9 == 19.44d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test01342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01342");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        int int3 = empiricalDistributionImpl0.getBinCount();
        java.util.List list4 = empiricalDistributionImpl0.getBinStats();
        boolean boolean5 = empiricalDistributionImpl0.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl0.getSampleStats();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(statisticalSummary6);
        org.junit.Assert.assertNull(statisticalSummary7);
    }

    @Test
    public void test01343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01343");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max0.clear();
        max0.increment((double) (-1L));
        double double4 = max0.getResult();
        max0.clear();
        max0.increment((double) 1.0f);
        max0.clear();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
    }

    @Test
    public void test01344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01344");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("/hi!3209482044556219813:", "/hi!2457289734516531611:");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/hi!3209482044556219813:4647884972843883829/hi!2457289734516531611:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01345");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.net.URL uRL7 = new java.net.URL(uRL3, "hi!2169115775229245488");
        java.lang.String str8 = uRL7.getRef();
        java.lang.String str9 = uRL7.getProtocol();
        java.lang.String str10 = uRL7.getProtocol();
        java.lang.String str11 = uRL7.getQuery();
        java.lang.String str12 = uRL7.getAuthority();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = uRL7.getContent();
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /experiment/hi!2169115775229245488/hi!/hi!2169115775229245488 (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!/hi!2169115775229245488");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "file" + "'", str9, "file");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "file" + "'", str10, "file");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test01346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01346");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int1 = empiricalDistributionImpl0.getBinCount();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean4.increment((double) (short) 100);
        geometricMean4.increment((double) (-1L));
        geometricMean4.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean11 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean11.increment((double) (short) 100);
        geometricMean11.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long18 = variance17.getN();
        double[] doubleArray24 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double26 = variance17.evaluate(doubleArray24, (double) 'a');
        double double27 = geometricMean11.evaluate(doubleArray24);
        double double28 = geometricMean4.evaluate(doubleArray24);
        empiricalDistributionImpl0.load(doubleArray24);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs30 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double31 = sumOfLogs30.getResult();
        double double32 = sumOfLogs30.getResult();
        sumOfLogs30.clear();
        double double34 = sumOfLogs30.getResult();
        sumOfLogs30.increment((double) 5L);
        double double37 = sumOfLogs30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long40 = variance39.getN();
        long long41 = variance39.getN();
        variance39.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double46 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        double double49 = secondMoment45.getResult();
        secondMoment45.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment51);
        secondMoment51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment51);
        double double56 = variance55.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl57 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary58 = empiricalDistributionImpl57.getSampleStats();
        java.io.File file62 = new java.io.File("");
        java.io.File file63 = java.io.File.createTempFile("hi!", ":", file62);
        java.lang.String str64 = file63.getCanonicalPath();
        boolean boolean65 = file63.createNewFile();
        empiricalDistributionImpl57.load(file63);
        double[] doubleArray67 = empiricalDistributionImpl57.getUpperBounds();
        double[] doubleArray68 = empiricalDistributionImpl57.getUpperBounds();
        variance55.incrementAll(doubleArray68, 1, (int) (short) 1);
        double double74 = secondMoment45.evaluate(doubleArray68, 1, 0);
        double double75 = variance39.evaluate(doubleArray68);
        double double76 = sumOfLogs30.evaluate(doubleArray68);
        empiricalDistributionImpl0.load(doubleArray68);
        java.net.URL uRL78 = null;
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(uRL78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1000 + "'", int1 == 1000);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 19.43999999999942d + "'", double26 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2.51188643150958d + "'", double27 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2.51188643150958d + "'", double28 == 2.51188643150958d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.6094379124341003d + "'", double37 == 1.6094379124341003d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNull(statisticalSummary58);
        org.junit.Assert.assertNull("file62.getParent() == null", file62.getParent());
        org.junit.Assert.assertEquals(file62.toString(), "");
        org.junit.Assert.assertNotNull(file63);
        org.junit.Assert.assertEquals(file63.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file63.toString(), "/hi!4085354790291677114:");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "/hi!4085354790291677114:" + "'", str64, "/hi!4085354790291677114:");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
    }

    @Test
    public void test01347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01347");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        java.io.File file10 = new java.io.File(uRI9);
        boolean boolean11 = file10.canExecute();
        long long12 = file10.length();
        long long13 = file10.length();
        boolean boolean15 = file10.setWritable(true);
        boolean boolean16 = file10.isDirectory();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
// flaky:         org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 28672L + "'", long12 == 28672L);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 28672L + "'", long13 == 28672L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test01348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01348");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long13 = variance12.getN();
        double[] doubleArray19 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double21 = variance12.evaluate(doubleArray19, (double) 'a');
        mean10.incrementAll(doubleArray19);
        double double23 = variance7.evaluate(doubleArray19);
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance7);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic25 = summaryStatistics0.getSumLogImpl();
        double double26 = summaryStatistics0.getSumsq();
        long long27 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics28 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double29 = summaryStatistics28.getMin();
        double double30 = summaryStatistics28.getStandardDeviation();
        double double31 = summaryStatistics28.getMean();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics32 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double33 = summaryStatistics32.getMin();
        double double34 = summaryStatistics32.getStandardDeviation();
        double double35 = summaryStatistics32.getSum();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares36 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long37 = sumOfSquares36.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long42 = variance41.getN();
        double[] doubleArray48 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double50 = variance41.evaluate(doubleArray48, (double) 'a');
        double double54 = variance39.evaluate(doubleArray48, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double57 = sumOfSquares36.evaluate(doubleArray48, (int) (short) 1, 0);
        double double58 = sumOfSquares36.getResult();
        long long59 = sumOfSquares36.getN();
        sumOfSquares36.clear();
        summaryStatistics32.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares36);
        double double62 = sumOfSquares36.getResult();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares63 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares63.increment((double) (byte) 1);
        double double66 = sumOfSquares63.getResult();
        sumOfSquares63.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double69 = secondMoment68.getResult();
        secondMoment68.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment68);
        org.apache.commons.math.stat.descriptive.moment.Mean mean72 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment68);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment73 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment73.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean75 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment73);
        secondMoment73.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment73);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean80 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment78);
        org.apache.commons.math.stat.descriptive.moment.Variance variance82 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long83 = variance82.getN();
        double[] doubleArray89 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double91 = variance82.evaluate(doubleArray89, (double) 'a');
        mean80.incrementAll(doubleArray89);
        double double93 = variance77.evaluate(doubleArray89);
        double double94 = secondMoment68.evaluate(doubleArray89);
        double double95 = sumOfSquares63.evaluate(doubleArray89);
        sumOfSquares36.incrementAll(doubleArray89);
        summaryStatistics28.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares36);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic98 = summaryStatistics28.getMeanImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic98);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 19.43999999999942d + "'", double21 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 24.3d + "'", double23 == 24.3d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 19.43999999999942d + "'", double50 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 19.43999999999942d + "'", double91 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 24.3d + "'", double93 == 24.3d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 97.2d + "'", double94 == 97.2d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 203.0d + "'", double95 == 203.0d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic98);
    }

    @Test
    public void test01349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01349");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.lang.String str5 = uRL3.getUserInfo();
        java.lang.String str6 = uRL3.getUserInfo();
        java.io.File file9 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL10 = file9.toURL();
        java.lang.String str11 = uRL10.getAuthority();
        java.lang.String str12 = uRL10.getUserInfo();
        int int13 = uRL10.getDefaultPort();
        java.lang.String str14 = uRL10.getUserInfo();
        java.lang.String str15 = uRL10.toExternalForm();
        java.io.File file18 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL19 = file18.toURL();
        java.lang.String str20 = uRL19.getProtocol();
        java.io.File file23 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL24 = file23.toURL();
        java.lang.String str25 = uRL24.getAuthority();
        java.lang.String str26 = uRL24.getUserInfo();
        int int27 = uRL24.getDefaultPort();
        java.lang.String str28 = uRL24.getUserInfo();
        java.io.File file31 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL32 = file31.toURL();
        java.lang.String str33 = uRL32.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler35 = null;
        java.net.URL uRL36 = new java.net.URL(uRL32, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler35);
        boolean boolean37 = uRL24.sameFile(uRL36);
        int int38 = uRL24.getPort();
        java.io.File file41 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL42 = file41.toURL();
        java.lang.String str43 = uRL42.getAuthority();
        java.lang.String str44 = uRL42.getUserInfo();
        int int45 = uRL42.getDefaultPort();
        java.lang.String str46 = uRL42.getUserInfo();
        java.io.File file49 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL50 = file49.toURL();
        java.lang.String str51 = uRL50.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler53 = null;
        java.net.URL uRL54 = new java.net.URL(uRL50, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler53);
        boolean boolean55 = uRL42.sameFile(uRL54);
        java.io.File file58 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL59 = file58.toURL();
        java.lang.String str60 = uRL59.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler62 = null;
        java.net.URL uRL63 = new java.net.URL(uRL59, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler62);
        java.io.File file66 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL67 = file66.toURL();
        boolean boolean68 = uRL59.sameFile(uRL67);
        java.net.URL uRL70 = new java.net.URL(uRL67, "/hi!4129638666993068054:");
        java.lang.Class[] classArray71 = new java.lang.Class[] {};
        java.lang.Object obj72 = uRL70.getContent(classArray71);
        java.lang.Object obj73 = uRL54.getContent(classArray71);
        java.lang.Object obj74 = null; // flaky: uRL24.getContent(classArray71);
        java.lang.Object obj75 = null; // flaky: uRL19.getContent(classArray71);
        java.lang.Object obj76 = null; // flaky: uRL10.getContent(classArray71);
        java.lang.Object obj77 = null; // flaky: uRL3.getContent(classArray71);
        java.net.Proxy proxy78 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection79 = uRL3.openConnection(proxy78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals(file9.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file9.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL10);
// flaky:         org.junit.Assert.assertEquals(uRL10.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(str14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!/" + "'", str15, "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals(file18.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file18.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL19);
        org.junit.Assert.assertEquals(uRL19.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "file" + "'", str20, "file");
        org.junit.Assert.assertEquals(file23.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file23.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL24);
        org.junit.Assert.assertEquals(uRL24.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals(file31.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file31.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL32);
        org.junit.Assert.assertEquals(uRL32.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals(uRL36.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertEquals(file41.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file41.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL42);
        org.junit.Assert.assertEquals(uRL42.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals(file49.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file49.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL50);
        org.junit.Assert.assertEquals(uRL50.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals(uRL54.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals(file58.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file58.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL59);
        org.junit.Assert.assertEquals(uRL59.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals(uRL63.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file66.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file66.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL67);
        org.junit.Assert.assertEquals(uRL67.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals(uRL70.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNull(obj77);
    }

    @Test
    public void test01350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01350");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        double double2 = sumOfLogs0.getResult();
        long long3 = sumOfLogs0.getN();
        sumOfLogs0.clear();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean5 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean6 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics7 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double8 = summaryStatistics7.getMin();
        double double9 = summaryStatistics7.getStandardDeviation();
        double double10 = summaryStatistics7.getMean();
        double double11 = summaryStatistics7.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = summaryStatistics7.getGeoMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean13 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean13.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = geometricMean13.getSumLogImpl();
        summaryStatistics7.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean13);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic18 = geometricMean13.getSumLogImpl();
        geometricMean6.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean13);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.clear();
        secondMoment21.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment21);
        // The following exception was thrown during execution in test generation
        try {
            geometricMean13.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementation must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic18);
    }

    @Test
    public void test01351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01351");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) '/');
        boolean boolean2 = empiricalDistributionImpl1.isLoaded();
        java.io.File file5 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL6 = file5.toURL();
        java.net.URI uRI7 = uRL6.toURI();
        java.net.URLConnection uRLConnection8 = uRL6.openConnection();
        int int9 = uRL6.getPort();
        java.io.File file12 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL13 = file12.toURL();
        java.io.File file16 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL17 = file16.toURL();
        java.lang.String str18 = uRL17.getAuthority();
        int int19 = uRL17.getPort();
        java.lang.String str20 = uRL17.toExternalForm();
        java.io.File file23 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL24 = file23.toURL();
        java.lang.String str25 = uRL24.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler27 = null;
        java.net.URL uRL28 = new java.net.URL(uRL24, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler27);
        boolean boolean29 = uRL17.sameFile(uRL28);
        java.lang.String str30 = uRL28.getQuery();
        java.io.File file33 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL34 = file33.toURL();
        java.lang.String str35 = uRL34.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler37 = null;
        java.net.URL uRL38 = new java.net.URL(uRL34, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler37);
        java.io.File file41 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL42 = file41.toURL();
        boolean boolean43 = uRL34.sameFile(uRL42);
        java.net.URL uRL45 = new java.net.URL(uRL42, "/hi!4129638666993068054:");
        java.lang.Class[] classArray46 = new java.lang.Class[] {};
        java.lang.Object obj47 = uRL45.getContent(classArray46);
        java.lang.Object obj48 = uRL28.getContent(classArray46);
        java.lang.Object obj49 = null; // flaky: uRL13.getContent(classArray46);
        java.lang.Object obj50 = null; // flaky: uRL6.getContent(classArray46);
        java.net.URLStreamHandler uRLStreamHandler52 = null;
        java.net.URL uRL53 = new java.net.URL(uRL6, "hi!8754354838924134808:", uRLStreamHandler52);
        java.net.URLStreamHandler uRLStreamHandler55 = null;
        java.net.URL uRL56 = new java.net.URL(uRL6, "/hi!3219637187155528239:", uRLStreamHandler55);
        java.net.URI uRI57 = uRL56.toURI();
        java.lang.String str58 = uRL56.getProtocol();
        java.net.URI uRI59 = uRL56.toURI();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(uRL56);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: URL file:/hi!3219637187155528239: contains no data");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(file5.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file5.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL6);
// flaky:         org.junit.Assert.assertEquals(uRL6.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertNotNull(uRLConnection8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals(file12.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file12.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL13);
// flaky:         org.junit.Assert.assertEquals(uRL13.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals(file16.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file16.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL17);
// flaky:         org.junit.Assert.assertEquals(uRL17.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!/" + "'", str20, "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals(file23.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file23.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL24);
// flaky:         org.junit.Assert.assertEquals(uRL24.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(uRL28.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals(file33.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file33.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL34);
        org.junit.Assert.assertEquals(uRL34.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals(uRL38.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file41.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file41.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL42);
        org.junit.Assert.assertEquals(uRL42.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals(uRL45.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertEquals(uRL53.toString(), "file:/experiment/hi!2169115775229245488/hi!/hi!8754354838924134808:");
        org.junit.Assert.assertEquals(uRL56.toString(), "file:/hi!3219637187155528239:");
        org.junit.Assert.assertNotNull(uRI57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "file" + "'", str58, "file");
        org.junit.Assert.assertNotNull(uRI59);
    }

    @Test
    public void test01352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01352");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        boolean boolean10 = file1.mkdir();
        java.io.File file11 = file1.getAbsoluteFile();
        boolean boolean12 = file1.exists();
        boolean boolean14 = file1.setExecutable(false);
        java.net.URL uRL15 = file1.toURL();
        boolean boolean17 = file1.setLastModified(299098611712L);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(file11);
// flaky:         org.junit.Assert.assertEquals(file11.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(uRL15);
// flaky:         org.junit.Assert.assertEquals(uRL15.toString(), "file:/experiment");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01353");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max12.clear();
        double double14 = max12.getResult();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares15 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long16 = sumOfSquares15.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long21 = variance20.getN();
        double[] doubleArray27 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double29 = variance20.evaluate(doubleArray27, (double) 'a');
        double double33 = variance18.evaluate(doubleArray27, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double36 = sumOfSquares15.evaluate(doubleArray27, (int) (short) 1, 0);
        double double39 = max12.evaluate(doubleArray27, (int) (short) 1, (int) (short) 0);
        long long40 = max12.getN();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        max12.increment((double) 2L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 19.43999999999942d + "'", double29 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test01354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01354");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long6 = variance5.getN();
        double[] doubleArray12 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double14 = variance5.evaluate(doubleArray12, (double) 'a');
        mean3.incrementAll(doubleArray12);
        empiricalDistributionImpl0.load(doubleArray12);
        double double17 = empiricalDistributionImpl0.getNextValue();
        double double18 = empiricalDistributionImpl0.getNextValue();
        double[] doubleArray19 = empiricalDistributionImpl0.getUpperBounds();
        double[] doubleArray20 = empiricalDistributionImpl0.getUpperBounds();
        java.io.File file23 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL24 = file23.toURL();
        java.lang.String str25 = uRL24.getAuthority();
        int int26 = uRL24.getPort();
        java.net.URL uRL28 = new java.net.URL(uRL24, "hi!2169115775229245488");
        java.net.URI uRI29 = uRL28.toURI();
        java.lang.String str30 = uRL28.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler32 = null;
        java.net.URL uRL33 = new java.net.URL(uRL28, "/hi!6990434208804735311:", uRLStreamHandler32);
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(uRL33);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: URL file:/hi!6990434208804735311: contains no data");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 19.43999999999942d + "'", double14 == 19.43999999999942d);
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file23.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL24);
// flaky:         org.junit.Assert.assertEquals(uRL24.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
// flaky:         org.junit.Assert.assertEquals(uRL28.toString(), "file:/experiment/hi!2169115775229245488/hi!/hi!2169115775229245488");
        org.junit.Assert.assertNotNull(uRI29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals(uRL33.toString(), "file:/hi!6990434208804735311:");
    }

    @Test
    public void test01355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01355");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        double double2 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics3 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double4 = summaryStatistics3.getMin();
        double double5 = summaryStatistics3.getStandardDeviation();
        double double6 = summaryStatistics3.getMean();
        double double7 = summaryStatistics3.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long9 = mean8.getN();
        summaryStatistics3.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        long long11 = mean8.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        mean8.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test01356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01356");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.net.URL uRL7 = new java.net.URL(uRL3, "hi!2169115775229245488");
        java.net.URI uRI8 = uRL7.toURI();
        java.net.URLStreamHandler uRLStreamHandler10 = null;
        java.net.URL uRL11 = new java.net.URL(uRL7, "/hi!1245110116910934768:", uRLStreamHandler10);
        int int12 = uRL11.getPort();
        java.net.Proxy proxy13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection14 = uRL11.openConnection(proxy13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!/hi!2169115775229245488");
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertEquals(uRL11.toString(), "file:/hi!1245110116910934768:");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test01357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01357");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) (-1L));
        geometricMean0.increment((double) (byte) 1);
        geometricMean0.increment((double) 299098718208L);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares9 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long10 = sumOfSquares9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        double double27 = variance12.evaluate(doubleArray21, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double30 = sumOfSquares9.evaluate(doubleArray21, (int) (short) 1, 0);
        sumOfSquares9.increment(0.0d);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl33 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl33.getSampleStats();
        java.io.File file38 = new java.io.File("");
        java.io.File file39 = java.io.File.createTempFile("hi!", ":", file38);
        java.lang.String str40 = file39.getCanonicalPath();
        boolean boolean41 = file39.createNewFile();
        empiricalDistributionImpl33.load(file39);
        double[] doubleArray43 = empiricalDistributionImpl33.getUpperBounds();
        double double46 = sumOfSquares9.evaluate(doubleArray43, 100, (int) (short) 1);
        double double47 = geometricMean0.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic48 = geometricMean0.getSumLogImpl();
        long long49 = geometricMean0.getN();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNull(statisticalSummary34);
        org.junit.Assert.assertNull("file38.getParent() == null", file38.getParent());
        org.junit.Assert.assertEquals(file38.toString(), "");
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertEquals(file39.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file39.toString(), "/hi!5086923693606033539:");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "/hi!5086923693606033539:" + "'", str40, "/hi!5086923693606033539:");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 4L + "'", long49 == 4L);
    }

    @Test
    public void test01358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01358");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        summaryStatistics0.addValue(19.44d);
        double double9 = summaryStatistics0.getMax();
        java.lang.String str10 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics11 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics12 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double13 = summaryStatistics12.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean14.increment((double) 0);
        double double17 = mean14.getResult();
        long long18 = mean14.getN();
        mean14.clear();
        summaryStatistics12.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean14);
        summaryStatistics11.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean14);
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementations must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 19.44d + "'", double9 == 19.44d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "SummaryStatistics:\nn: 1\nmin: 19.44\nmax: 19.44\nmean: 19.44\ngeometric mean: 2.77130757082054E8\nvariance: 0.0\nsum of squares: 377.91360000000003\nstandard deviation: 0.0\nsum of logs: 19.44\n" + "'", str10, "SummaryStatistics:\nn: 1\nmin: 19.44\nmax: 19.44\nmean: 19.44\ngeometric mean: 2.77130757082054E8\nvariance: 0.0\nsum of squares: 377.91360000000003\nstandard deviation: 0.0\nsum of logs: 19.44\n");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
    }

    @Test
    public void test01359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01359");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.net.URI uRI6 = uRL3.toURI();
        int int7 = uRL3.getPort();
        java.net.Proxy proxy8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection9 = uRL3.openConnection(proxy8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test01360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01360");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getPath();
        int int8 = uRL3.getPort();
        java.lang.String str9 = uRL3.getRef();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/experiment/hi!2169115775229245488/hi!/" + "'", str7, "/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test01361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01361");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        boolean boolean10 = file1.mkdir();
        java.io.File file11 = file1.getAbsoluteFile();
        boolean boolean12 = file1.exists();
        boolean boolean14 = file1.setExecutable(false);
        java.lang.String str15 = file1.toString();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(file11);
// flaky:         org.junit.Assert.assertEquals(file11.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test01362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01362");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl3 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl3.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean6 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean6.increment((double) (short) 100);
        geometricMean6.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long13 = variance12.getN();
        double[] doubleArray19 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double21 = variance12.evaluate(doubleArray19, (double) 'a');
        double double22 = geometricMean6.evaluate(doubleArray19);
        empiricalDistributionImpl3.load(doubleArray19);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = empiricalDistributionImpl3.getSampleStats();
        java.io.File file28 = new java.io.File("");
        java.io.File file29 = java.io.File.createTempFile("hi!", ":", file28);
        java.lang.String str30 = file29.getCanonicalPath();
        boolean boolean32 = file29.setExecutable(false);
        boolean boolean34 = file29.setWritable(true);
        boolean boolean35 = file29.mkdirs();
        boolean boolean38 = file29.setExecutable(true, false);
        empiricalDistributionImpl3.load(file29);
        java.io.File file40 = file29.getParentFile();
        empiricalDistributionImpl0.load(file29);
        java.util.List list42 = empiricalDistributionImpl0.getBinStats();
        // The following exception was thrown during execution in test generation
        try {
            double double43 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: No bin selected");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(statisticalSummary4);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 19.43999999999942d + "'", double21 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2.51188643150958d + "'", double22 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(statisticalSummary24);
        org.junit.Assert.assertNull("file28.getParent() == null", file28.getParent());
        org.junit.Assert.assertEquals(file28.toString(), "");
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file29.toString(), "/hi!5395696290799556391:");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/hi!5395696290799556391:" + "'", str30, "/hi!5395696290799556391:");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertNull("file40.getParent() == null", file40.getParent());
        org.junit.Assert.assertEquals(file40.toString(), "/");
        org.junit.Assert.assertNotNull(list42);
    }

    @Test
    public void test01363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01363");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max0.clear();
        max0.increment((double) (-1L));
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl4 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int5 = empiricalDistributionImpl4.getBinCount();
        boolean boolean6 = empiricalDistributionImpl4.isLoaded();
        java.util.List list7 = empiricalDistributionImpl4.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean8 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean8.increment((double) (short) 100);
        geometricMean8.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = geometricMean8.getSumLogImpl();
        long long14 = geometricMean8.getN();
        double double15 = geometricMean8.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics16 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double17 = summaryStatistics16.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min18 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics16.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min18);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean20 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean20.increment((double) (short) 100);
        geometricMean20.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long27 = variance26.getN();
        double[] doubleArray33 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double35 = variance26.evaluate(doubleArray33, (double) 'a');
        double double36 = geometricMean20.evaluate(doubleArray33);
        min18.incrementAll(doubleArray33);
        geometricMean8.incrementAll(doubleArray33);
        empiricalDistributionImpl4.load(doubleArray33);
        double[] doubleArray40 = empiricalDistributionImpl4.getUpperBounds();
        double double43 = max0.evaluate(doubleArray40, (int) 'a', 10);
        long long44 = max0.getN();
        double double45 = max0.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl46 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = empiricalDistributionImpl46.getSampleStats();
        boolean boolean48 = empiricalDistributionImpl46.isLoaded();
        boolean boolean49 = empiricalDistributionImpl46.isLoaded();
        boolean boolean50 = empiricalDistributionImpl46.isLoaded();
        boolean boolean51 = empiricalDistributionImpl46.isLoaded();
        java.io.File file55 = new java.io.File("");
        java.io.File file56 = java.io.File.createTempFile("hi!", ":", file55);
        java.lang.String str57 = file56.getAbsolutePath();
        boolean boolean58 = file56.setReadOnly();
        boolean boolean60 = file56.setLastModified(364740218880L);
        empiricalDistributionImpl46.load(file56);
        java.util.List list62 = empiricalDistributionImpl46.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl63 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary64 = empiricalDistributionImpl63.getSampleStats();
        boolean boolean65 = empiricalDistributionImpl63.isLoaded();
        boolean boolean66 = empiricalDistributionImpl63.isLoaded();
        java.util.List list67 = empiricalDistributionImpl63.getBinStats();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics68 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean69 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics68.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean69);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean71 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean71.increment((double) (short) 100);
        geometricMean71.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic76 = geometricMean71.getSumLogImpl();
        summaryStatistics68.setMinImpl(storelessUnivariateStatistic76);
        double double78 = summaryStatistics68.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics68.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance80);
        org.apache.commons.math.stat.descriptive.rank.Min min82 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min82.clear();
        double[] doubleArray89 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double90 = min82.evaluate(doubleArray89);
        variance80.incrementAll(doubleArray89);
        empiricalDistributionImpl63.load(doubleArray89);
        empiricalDistributionImpl46.load(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = max0.evaluate(doubleArray89, 48, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1000 + "'", int5 == 1000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(list7);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 19.43999999999942d + "'", double35 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2.51188643150958d + "'", double36 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.6d + "'", double43 == 0.6d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertNull(statisticalSummary47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull("file55.getParent() == null", file55.getParent());
        org.junit.Assert.assertEquals(file55.toString(), "");
        org.junit.Assert.assertNotNull(file56);
        org.junit.Assert.assertEquals(file56.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file56.toString(), "/hi!7001041438495571188:");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "/hi!7001041438495571188:" + "'", str57, "/hi!7001041438495571188:");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(list62);
        org.junit.Assert.assertNull(statisticalSummary64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(list67);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic76);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
    }

    @Test
    public void test01364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01364");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        boolean boolean3 = false; // flaky: file2.createNewFile();
        java.net.URL uRL4 = file2.toURL();
        java.lang.String str5 = uRL4.getPath();
        java.lang.String str6 = uRL4.toExternalForm();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(uRL4);
// flaky:         org.junit.Assert.assertEquals(uRL4.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/experiment/hi!2169115775229245488/hi!/" + "'", str5, "/experiment/hi!2169115775229245488/hi!/");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!/" + "'", str6, "file:/experiment/hi!2169115775229245488/hi!/");
    }

    @Test
    public void test01365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01365");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double4 = secondMoment0.getResult();
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double8 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double11 = secondMoment7.getResult();
        double double12 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        boolean boolean14 = variance6.equals((java.lang.Object) variance13);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs15 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        long long16 = sumOfLogs15.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean17 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs15);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean18.increment((double) 0);
        double double21 = mean18.getResult();
        long long22 = mean18.getN();
        mean18.clear();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl24 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = empiricalDistributionImpl24.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl26 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = empiricalDistributionImpl26.getSampleStats();
        boolean boolean28 = empiricalDistributionImpl26.isLoaded();
        boolean boolean29 = empiricalDistributionImpl26.isLoaded();
        java.util.List list30 = empiricalDistributionImpl26.getBinStats();
        int int31 = empiricalDistributionImpl26.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl32 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long38 = variance37.getN();
        double[] doubleArray44 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double46 = variance37.evaluate(doubleArray44, (double) 'a');
        mean35.incrementAll(doubleArray44);
        empiricalDistributionImpl32.load(doubleArray44);
        empiricalDistributionImpl26.load(doubleArray44);
        empiricalDistributionImpl24.load(doubleArray44);
        double double51 = mean18.evaluate(doubleArray44);
        sumOfLogs15.incrementAll(doubleArray44);
        double double53 = variance13.evaluate(doubleArray44);
        double[] doubleArray54 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double58 = variance13.evaluate(doubleArray54, 2.804996096E11d, (int) (byte) -1, 57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNull(statisticalSummary25);
        org.junit.Assert.assertNull(statisticalSummary27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1000 + "'", int31 == 1000);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 19.43999999999942d + "'", double46 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 4.6d + "'", double51 == 4.6d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 24.3d + "'", double53 == 24.3d);
    }

    @Test
    public void test01366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01366");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        long long1 = sumOfLogs0.getN();
        sumOfLogs0.clear();
        double double3 = sumOfLogs0.getResult();
        sumOfLogs0.clear();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean5 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean5.increment((double) (short) 100);
        geometricMean5.increment((double) (-1L));
        geometricMean5.increment((double) (byte) 1);
        geometricMean5.increment((double) 299098718208L);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares14 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long15 = sumOfSquares14.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long20 = variance19.getN();
        double[] doubleArray26 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double28 = variance19.evaluate(doubleArray26, (double) 'a');
        double double32 = variance17.evaluate(doubleArray26, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double35 = sumOfSquares14.evaluate(doubleArray26, (int) (short) 1, 0);
        sumOfSquares14.increment(0.0d);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = empiricalDistributionImpl38.getSampleStats();
        java.io.File file43 = new java.io.File("");
        java.io.File file44 = java.io.File.createTempFile("hi!", ":", file43);
        java.lang.String str45 = file44.getCanonicalPath();
        boolean boolean46 = file44.createNewFile();
        empiricalDistributionImpl38.load(file44);
        double[] doubleArray48 = empiricalDistributionImpl38.getUpperBounds();
        double double51 = sumOfSquares14.evaluate(doubleArray48, 100, (int) (short) 1);
        double double52 = geometricMean5.evaluate(doubleArray48);
        // The following exception was thrown during execution in test generation
        try {
            double double55 = sumOfLogs0.evaluate(doubleArray48, (int) (short) 1, (-27));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 19.43999999999942d + "'", double28 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNull(statisticalSummary39);
        org.junit.Assert.assertNull("file43.getParent() == null", file43.getParent());
        org.junit.Assert.assertEquals(file43.toString(), "");
        org.junit.Assert.assertNotNull(file44);
        org.junit.Assert.assertEquals(file44.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file44.toString(), "/hi!8726112818518953344:");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "/hi!8726112818518953344:" + "'", str45, "/hi!8726112818518953344:");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
    }

    @Test
    public void test01367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01367");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL7 = file6.toURL();
        java.lang.String str8 = uRL7.getAuthority();
        int int9 = uRL7.getPort();
        java.lang.String str10 = uRL7.toExternalForm();
        java.io.File file13 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL14 = file13.toURL();
        java.lang.String str15 = uRL14.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler17 = null;
        java.net.URL uRL18 = new java.net.URL(uRL14, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler17);
        boolean boolean19 = uRL7.sameFile(uRL18);
        java.lang.String str20 = uRL18.getQuery();
        java.io.File file23 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL24 = file23.toURL();
        java.lang.String str25 = uRL24.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler27 = null;
        java.net.URL uRL28 = new java.net.URL(uRL24, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler27);
        java.io.File file31 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL32 = file31.toURL();
        boolean boolean33 = uRL24.sameFile(uRL32);
        java.net.URL uRL35 = new java.net.URL(uRL32, "/hi!4129638666993068054:");
        java.lang.Class[] classArray36 = new java.lang.Class[] {};
        java.lang.Object obj37 = uRL35.getContent(classArray36);
        java.lang.Object obj38 = uRL18.getContent(classArray36);
        java.lang.Object obj39 = null; // flaky: uRL3.getContent(classArray36);
        java.io.File file42 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL43 = file42.toURL();
        java.lang.String str44 = uRL43.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler46 = null;
        java.net.URL uRL47 = new java.net.URL(uRL43, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler46);
        java.lang.String str48 = uRL43.getUserInfo();
        boolean boolean49 = uRL3.sameFile(uRL43);
        java.lang.String str50 = uRL43.getPath();
        java.lang.String str51 = uRL43.toExternalForm();
        java.net.URLStreamHandler uRLStreamHandler53 = null;
        java.net.URL uRL54 = new java.net.URL(uRL43, "/hi!8821528321128643775:", uRLStreamHandler53);
        java.lang.String str55 = uRL54.getRef();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals(file6.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file6.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!/" + "'", str10, "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals(file13.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file13.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL14);
// flaky:         org.junit.Assert.assertEquals(uRL14.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals(uRL18.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals(file23.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file23.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL24);
// flaky:         org.junit.Assert.assertEquals(uRL24.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(uRL28.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file31.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file31.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL32);
// flaky:         org.junit.Assert.assertEquals(uRL32.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals(uRL35.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file42.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL43);
        org.junit.Assert.assertEquals(uRL43.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals(uRL47.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "/experiment/hi!2169115775229245488/hi!/" + "'", str50, "/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!/" + "'", str51, "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals(uRL54.toString(), "file:/hi!8821528321128643775:");
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test01368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01368");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        boolean boolean10 = file1.setExecutable(true);
        boolean boolean11 = file1.exists();
        boolean boolean12 = file1.canRead();
        long long13 = file1.getUsableSpace();
        java.io.File file14 = file1.getCanonicalFile();
        java.net.URI uRI15 = file1.toURI();
        boolean boolean17 = file1.setLastModified(6L);
        java.io.File file18 = file1.getCanonicalFile();
        long long19 = file18.getTotalSpace();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(file14);
// flaky:         org.junit.Assert.assertEquals(file14.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/experiment");
        org.junit.Assert.assertNotNull(uRI15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(file18);
// flaky:         org.junit.Assert.assertEquals(file18.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file18.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 364740218880L + "'", long19 == 364740218880L);
    }

    @Test
    public void test01369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01369");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = geometricMean0.getSumLogImpl();
        geometricMean0.clear();
        double double7 = geometricMean0.getResult();
        double double8 = geometricMean0.getResult();
        long long9 = geometricMean0.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares10 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long11 = sumOfSquares10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long16 = variance15.getN();
        double[] doubleArray22 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double24 = variance15.evaluate(doubleArray22, (double) 'a');
        double double28 = variance13.evaluate(doubleArray22, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double31 = sumOfSquares10.evaluate(doubleArray22, (int) (short) 1, 0);
        double double32 = sumOfSquares10.getResult();
        long long33 = sumOfSquares10.getN();
        sumOfSquares10.clear();
        long long35 = sumOfSquares10.getN();
        double double36 = sumOfSquares10.getResult();
        geometricMean0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl38 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = empiricalDistributionImpl38.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = empiricalDistributionImpl38.getSampleStats();
        java.util.List list41 = empiricalDistributionImpl38.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = empiricalDistributionImpl38.getSampleStats();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs43 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean44 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs43);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl45 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary46 = empiricalDistributionImpl45.getSampleStats();
        boolean boolean47 = empiricalDistributionImpl45.isLoaded();
        boolean boolean48 = empiricalDistributionImpl45.isLoaded();
        java.util.List list49 = empiricalDistributionImpl45.getBinStats();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics50 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics50.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean51);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean53 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean53.increment((double) (short) 100);
        geometricMean53.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic58 = geometricMean53.getSumLogImpl();
        summaryStatistics50.setMinImpl(storelessUnivariateStatistic58);
        double double60 = summaryStatistics50.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics50.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance62);
        org.apache.commons.math.stat.descriptive.rank.Min min64 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min64.clear();
        double[] doubleArray71 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double72 = min64.evaluate(doubleArray71);
        variance62.incrementAll(doubleArray71);
        empiricalDistributionImpl45.load(doubleArray71);
        geometricMean44.incrementAll(doubleArray71, (int) (byte) 0, (int) (byte) 1);
        empiricalDistributionImpl38.load(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = sumOfSquares10.evaluate(doubleArray71, 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 19.43999999999942d + "'", double24 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNull(statisticalSummary39);
        org.junit.Assert.assertNull(statisticalSummary40);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNull(statisticalSummary42);
        org.junit.Assert.assertNull(statisticalSummary46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(list49);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic58);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-1.0d) + "'", double72 == (-1.0d));
    }

    @Test
    public void test01370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01370");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean10 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean10.increment((double) (short) 100);
        long long13 = geometricMean10.getN();
        geometricMean10.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics15 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics15.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean16);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean18 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean18.increment((double) (short) 100);
        geometricMean18.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic23 = geometricMean18.getSumLogImpl();
        summaryStatistics15.setMinImpl(storelessUnivariateStatistic23);
        double double25 = summaryStatistics15.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double28 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment27);
        summaryStatistics15.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment27);
        geometricMean10.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment27);
        long long32 = secondMoment27.getN();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment27);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic34 = summaryStatistics0.getSumsqImpl();
        long long35 = summaryStatistics0.getN();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test01371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01371");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "");
        java.lang.String str3 = file2.getCanonicalPath();
        java.lang.String str4 = file2.getName();
        java.lang.String str5 = file2.getName();
        boolean boolean8 = file2.setReadable(true, false);
        long long9 = file2.length();
        file2.deleteOnExit();
        boolean boolean11 = file2.isHidden();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/experiment/hi!2169115775229245488" + "'", str3, "/experiment/hi!2169115775229245488");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!2169115775229245488" + "'", str4, "hi!2169115775229245488");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!2169115775229245488" + "'", str5, "hi!2169115775229245488");
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4096L + "'", long9 == 4096L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01372");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long5 = variance4.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics6 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double7 = summaryStatistics6.getVariance();
        double double8 = summaryStatistics6.getStandardDeviation();
        double double9 = summaryStatistics6.getSum();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics6.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics6.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double14 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        secondMoment13.increment((double) (byte) 10);
        secondMoment13.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean20 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean20.increment((double) (short) 100);
        geometricMean20.increment((double) (-1L));
        geometricMean20.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean27 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean27.increment((double) (short) 100);
        geometricMean27.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long34 = variance33.getN();
        double[] doubleArray40 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double42 = variance33.evaluate(doubleArray40, (double) 'a');
        double double43 = geometricMean27.evaluate(doubleArray40);
        double double44 = geometricMean20.evaluate(doubleArray40);
        secondMoment13.incrementAll(doubleArray40);
        double double46 = storelessUnivariateStatistic11.evaluate(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            double double49 = variance4.evaluate(doubleArray40, (int) (byte) 0, 47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 19.43999999999942d + "'", double42 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2.51188643150958d + "'", double43 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2.51188643150958d + "'", double44 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 4.6d + "'", double46 == 4.6d);
    }

    @Test
    public void test01373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01373");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double5 = variance4.getResult();
        variance4.increment((double) 280499642368L);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl9 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl10 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long16 = variance15.getN();
        double[] doubleArray22 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double24 = variance15.evaluate(doubleArray22, (double) 'a');
        mean13.incrementAll(doubleArray22);
        empiricalDistributionImpl10.load(doubleArray22);
        empiricalDistributionImpl9.load(doubleArray22);
        double double28 = variance4.evaluate(doubleArray22);
        boolean boolean29 = variance4.isBiasCorrected();
        long long30 = variance4.getN();
        long long31 = variance4.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 19.43999999999942d + "'", double24 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 24.3d + "'", double28 == 24.3d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test01374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01374");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = summaryStatistics0.getSummary();
        double double5 = summaryStatistics0.getMax();
        double double6 = summaryStatistics0.getSum();
        double double7 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.clear();
        long long10 = secondMoment8.getN();
        secondMoment8.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment8);
        mean13.increment(2.51188643150958d);
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean13);
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean17.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double21 = secondMoment20.getResult();
        secondMoment20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean27 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment25);
        secondMoment25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long35 = variance34.getN();
        double[] doubleArray41 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double43 = variance34.evaluate(doubleArray41, (double) 'a');
        mean32.incrementAll(doubleArray41);
        double double45 = variance29.evaluate(doubleArray41);
        double double46 = secondMoment20.evaluate(doubleArray41);
        mean17.incrementAll(doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            double double50 = mean13.evaluate(doubleArray41, 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(statisticalSummary4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 19.43999999999942d + "'", double43 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 24.3d + "'", double45 == 24.3d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 97.2d + "'", double46 == 97.2d);
    }

    @Test
    public void test01375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01375");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        boolean boolean10 = file1.mkdir();
        java.io.File file11 = file1.getAbsoluteFile();
        boolean boolean12 = file1.exists();
        java.io.File file14 = new java.io.File("file:/experiment/hi!2169115775229245488/hi!/");
        boolean boolean15 = file1.equals((java.lang.Object) "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(file11);
// flaky:         org.junit.Assert.assertEquals(file11.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals(file14.getParent(), "file:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertEquals(file14.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test01376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01376");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = summaryStatistics0.getSummary();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = summaryStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics0.getSumLogImpl();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(statisticalSummary11);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
    }

    @Test
    public void test01377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01377");
        java.io.File file2 = java.io.File.createTempFile("hi!", "");
        boolean boolean4 = file2.setLastModified((long) '#');
        java.io.File file5 = file2.getCanonicalFile();
        boolean boolean6 = file5.canWrite();
        boolean boolean8 = file5.setLastModified((long) (short) 10);
        boolean boolean9 = file5.isDirectory();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/hi!4281475194535825584");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/tmp/hi!4281475194535825584");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01378");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) (-1L));
        geometricMean0.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean7 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean7.increment((double) (short) 100);
        geometricMean7.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long14 = variance13.getN();
        double[] doubleArray20 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double22 = variance13.evaluate(doubleArray20, (double) 'a');
        double double23 = geometricMean7.evaluate(doubleArray20);
        double double24 = geometricMean0.evaluate(doubleArray20);
        long long25 = geometricMean0.getN();
        long long26 = geometricMean0.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics27 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double28 = summaryStatistics27.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean29.increment((double) 0);
        double double32 = mean29.getResult();
        long long33 = mean29.getN();
        mean29.clear();
        summaryStatistics27.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean29);
        double double36 = summaryStatistics27.getMean();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean37 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean37.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long42 = variance41.getN();
        double[] doubleArray48 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double50 = variance41.evaluate(doubleArray48, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long56 = variance55.getN();
        double[] doubleArray62 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double64 = variance55.evaluate(doubleArray62, (double) 'a');
        mean53.incrementAll(doubleArray62);
        double double67 = variance41.evaluate(doubleArray62, (double) (byte) 1);
        geometricMean37.incrementAll(doubleArray62);
        summaryStatistics27.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean37);
        long long70 = geometricMean37.getN();
        geometricMean37.clear();
        long long72 = geometricMean37.getN();
        geometricMean37.clear();
        // The following exception was thrown during execution in test generation
        try {
            geometricMean0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementation must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 19.43999999999942d + "'", double22 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2.51188643150958d + "'", double23 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2.51188643150958d + "'", double24 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3L + "'", long25 == 3L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 3L + "'", long26 == 3L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 19.43999999999942d + "'", double50 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 19.43999999999942d + "'", double64 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 19.44d + "'", double67 == 19.44d);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 6L + "'", long70 == 6L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
    }

    @Test
    public void test01379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01379");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        boolean boolean10 = file1.setExecutable(true);
        boolean boolean11 = file1.exists();
        java.net.URI uRI12 = file1.toURI();
        java.io.File file13 = new java.io.File(uRI12);
        java.io.File file14 = new java.io.File(uRI12);
        java.io.File file15 = new java.io.File(uRI12);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(uRI12);
// flaky:         org.junit.Assert.assertEquals(file13.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file14.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file15.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file15.toString(), "/experiment");
    }

    @Test
    public void test01380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01380");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        long long10 = file1.getUsableSpace();
        long long11 = file1.getTotalSpace();
        boolean boolean12 = file1.isAbsolute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01381");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        boolean boolean3 = empiricalDistributionImpl0.isLoaded();
        boolean boolean4 = empiricalDistributionImpl0.isLoaded();
        boolean boolean5 = empiricalDistributionImpl0.isLoaded();
        int int6 = empiricalDistributionImpl0.getBinCount();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1000 + "'", int6 == 1000);
    }

    @Test
    public void test01382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01382");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double19 = geometricMean3.evaluate(doubleArray16);
        empiricalDistributionImpl0.load(doubleArray16);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file25 = new java.io.File("");
        java.io.File file26 = java.io.File.createTempFile("hi!", ":", file25);
        java.lang.String str27 = file26.getCanonicalPath();
        boolean boolean29 = file26.setExecutable(false);
        boolean boolean31 = file26.setWritable(true);
        boolean boolean32 = file26.mkdirs();
        boolean boolean35 = file26.setExecutable(true, false);
        empiricalDistributionImpl0.load(file26);
        boolean boolean37 = file26.mkdirs();
        java.io.File file38 = file26.getAbsoluteFile();
        boolean boolean39 = file38.canWrite();
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.51188643150958d + "'", double19 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNull("file25.getParent() == null", file25.getParent());
        org.junit.Assert.assertEquals(file25.toString(), "");
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/hi!4816758765780257669:");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "/hi!4816758765780257669:" + "'", str27, "/hi!4816758765780257669:");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file38.toString(), "/hi!4816758765780257669:");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test01383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01383");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        long long4 = min2.getN();
        double double5 = min2.getResult();
        long long6 = min2.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.clear();
        long long9 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long12 = variance11.getN();
        double[] doubleArray18 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double20 = variance11.evaluate(doubleArray18, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long26 = variance25.getN();
        double[] doubleArray32 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double34 = variance25.evaluate(doubleArray32, (double) 'a');
        mean23.incrementAll(doubleArray32);
        double double37 = variance11.evaluate(doubleArray32, (double) (byte) 1);
        secondMoment7.incrementAll(doubleArray32);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics39 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics39.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean40);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean42 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean42.increment((double) (short) 100);
        geometricMean42.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic47 = geometricMean42.getSumLogImpl();
        summaryStatistics39.setMinImpl(storelessUnivariateStatistic47);
        double double49 = summaryStatistics39.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics39.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance51);
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean53.increment((double) 0);
        double double56 = mean53.getResult();
        mean53.clear();
        double[] doubleArray58 = new double[] {};
        mean53.incrementAll(doubleArray58);
        variance51.incrementAll(doubleArray58);
        double double61 = secondMoment7.evaluate(doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            double double64 = min2.evaluate(doubleArray58, 3, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 19.43999999999942d + "'", double20 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 19.43999999999942d + "'", double34 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 19.44d + "'", double37 == 19.44d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 97.2d + "'", double61 == 97.2d);
    }

    @Test
    public void test01384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01384");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long2 = variance1.getN();
        long long3 = variance1.getN();
        variance1.increment((double) 10.0f);
        boolean boolean6 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs7 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double8 = sumOfLogs7.getResult();
        double double9 = sumOfLogs7.getResult();
        sumOfLogs7.increment((double) (-27));
        sumOfLogs7.clear();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl13.getSampleStats();
        int int15 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = empiricalDistributionImpl13.getSampleStats();
        java.util.List list17 = empiricalDistributionImpl13.getBinStats();
        java.util.List list18 = empiricalDistributionImpl13.getBinStats();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares19 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long20 = sumOfSquares19.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long25 = variance24.getN();
        double[] doubleArray31 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double33 = variance24.evaluate(doubleArray31, (double) 'a');
        double double37 = variance22.evaluate(doubleArray31, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double40 = sumOfSquares19.evaluate(doubleArray31, (int) (short) 1, 0);
        sumOfSquares19.increment(0.0d);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl43 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = empiricalDistributionImpl43.getSampleStats();
        java.io.File file48 = new java.io.File("");
        java.io.File file49 = java.io.File.createTempFile("hi!", ":", file48);
        java.lang.String str50 = file49.getCanonicalPath();
        boolean boolean51 = file49.createNewFile();
        empiricalDistributionImpl43.load(file49);
        double[] doubleArray53 = empiricalDistributionImpl43.getUpperBounds();
        double double56 = sumOfSquares19.evaluate(doubleArray53, 100, (int) (short) 1);
        sumOfSquares19.clear();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs58 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double59 = sumOfLogs58.getResult();
        double double60 = sumOfLogs58.getResult();
        double double61 = sumOfLogs58.getResult();
        double double62 = sumOfLogs58.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl63 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary64 = empiricalDistributionImpl63.getSampleStats();
        java.io.File file68 = new java.io.File("");
        java.io.File file69 = java.io.File.createTempFile("hi!", ":", file68);
        java.lang.String str70 = file69.getCanonicalPath();
        boolean boolean71 = file69.createNewFile();
        empiricalDistributionImpl63.load(file69);
        double[] doubleArray73 = empiricalDistributionImpl63.getUpperBounds();
        double double76 = sumOfLogs58.evaluate(doubleArray73, (int) (byte) 1, (int) (byte) 100);
        double double77 = sumOfSquares19.evaluate(doubleArray73);
        empiricalDistributionImpl13.load(doubleArray73);
        double double81 = sumOfLogs7.evaluate(doubleArray73, 48, 2);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray73, (-1), 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 19.43999999999942d + "'", double33 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNull(statisticalSummary44);
        org.junit.Assert.assertNull("file48.getParent() == null", file48.getParent());
        org.junit.Assert.assertEquals(file48.toString(), "");
        org.junit.Assert.assertNotNull(file49);
        org.junit.Assert.assertEquals(file49.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file49.toString(), "/hi!5304538194386455805:");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "/hi!5304538194386455805:" + "'", str50, "/hi!5304538194386455805:");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNull(statisticalSummary64);
        org.junit.Assert.assertNull("file68.getParent() == null", file68.getParent());
        org.junit.Assert.assertEquals(file68.toString(), "");
        org.junit.Assert.assertNotNull(file69);
        org.junit.Assert.assertEquals(file69.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file69.toString(), "/hi!7903685792768374655:");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "/hi!7903685792768374655:" + "'", str70, "/hi!7903685792768374655:");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double81));
    }

    @Test
    public void test01385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01385");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long6 = variance5.getN();
        double[] doubleArray12 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double14 = variance5.evaluate(doubleArray12, (double) 'a');
        mean3.incrementAll(doubleArray12);
        empiricalDistributionImpl0.load(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long21 = variance20.getN();
        double[] doubleArray27 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double29 = variance20.evaluate(doubleArray27, (double) 'a');
        double double33 = variance18.evaluate(doubleArray27, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        empiricalDistributionImpl0.load(doubleArray27);
        java.util.List list35 = empiricalDistributionImpl0.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl36 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary37 = empiricalDistributionImpl36.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = empiricalDistributionImpl36.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean39 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean39.increment((double) (short) 100);
        geometricMean39.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long46 = variance45.getN();
        double[] doubleArray52 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double54 = variance45.evaluate(doubleArray52, (double) 'a');
        double double55 = geometricMean39.evaluate(doubleArray52);
        empiricalDistributionImpl36.load(doubleArray52);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary57 = empiricalDistributionImpl36.getSampleStats();
        java.io.File file61 = new java.io.File("");
        java.io.File file62 = java.io.File.createTempFile("hi!", ":", file61);
        java.lang.String str63 = file62.getCanonicalPath();
        boolean boolean65 = file62.setExecutable(false);
        boolean boolean67 = file62.setWritable(true);
        boolean boolean68 = file62.mkdirs();
        boolean boolean71 = file62.setExecutable(true, false);
        empiricalDistributionImpl36.load(file62);
        java.io.File file73 = file62.getParentFile();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file73);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: / (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 19.43999999999942d + "'", double14 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 19.43999999999942d + "'", double29 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertNull(statisticalSummary37);
        org.junit.Assert.assertNull(statisticalSummary38);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 19.43999999999942d + "'", double54 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2.51188643150958d + "'", double55 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(statisticalSummary57);
        org.junit.Assert.assertNull("file61.getParent() == null", file61.getParent());
        org.junit.Assert.assertEquals(file61.toString(), "");
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file62.toString(), "/hi!962348873764222259:");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "/hi!962348873764222259:" + "'", str63, "/hi!962348873764222259:");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(file73);
        org.junit.Assert.assertNull("file73.getParent() == null", file73.getParent());
        org.junit.Assert.assertEquals(file73.toString(), "/");
    }

    @Test
    public void test01386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01386");
        java.io.IOException iOException1 = new java.io.IOException("file:/hi!8641896357547398784:");
        java.lang.String str2 = iOException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.io.IOException: file:/hi!8641896357547398784:" + "'", str2, "java.io.IOException: file:/hi!8641896357547398784:");
    }

    @Test
    public void test01387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01387");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("/hi!2799480476628007388:", "/hi!4108939907517973775:", (-6), "/hi!1806516956665641575:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: Invalid port number :-6");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01388");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = summaryStatistics0.getSummary();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.clear();
        long long5 = secondMoment3.getN();
        secondMoment3.clear();
        double double7 = secondMoment3.getResult();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment3);
        secondMoment3.increment((double) '#');
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test01389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01389");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl4 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl4.getSampleStats();
        java.io.File file9 = new java.io.File("");
        java.io.File file10 = java.io.File.createTempFile("hi!", ":", file9);
        java.lang.String str11 = file10.getCanonicalPath();
        boolean boolean12 = file10.createNewFile();
        empiricalDistributionImpl4.load(file10);
        double[] doubleArray14 = empiricalDistributionImpl4.getUpperBounds();
        double[] doubleArray15 = empiricalDistributionImpl4.getUpperBounds();
        double double17 = variance3.evaluate(doubleArray15, 1.0d);
        variance3.increment((double) 280499605504L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.clear();
        secondMoment20.increment(0.0d);
        secondMoment20.increment((double) (short) 1);
        java.io.File file27 = new java.io.File("");
        boolean boolean30 = file27.setWritable(true, true);
        boolean boolean31 = file27.setReadOnly();
        boolean boolean34 = file27.setWritable(true, false);
        java.net.URI uRI35 = file27.toURI();
        boolean boolean37 = file27.setExecutable(true);
        java.net.URI uRI38 = file27.toURI();
        boolean boolean39 = secondMoment20.equals((java.lang.Object) file27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance41.increment((double) (byte) 100);
        java.io.File file46 = new java.io.File("/hi!4420905478953568698:", "/experiment/hi!2169115775229245488");
        boolean boolean47 = variance41.equals((java.lang.Object) "/hi!4420905478953568698:");
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean48.increment((double) 0);
        double double51 = mean48.getResult();
        mean48.clear();
        double[] doubleArray53 = new double[] {};
        mean48.incrementAll(doubleArray53);
        double double56 = variance41.evaluate(doubleArray53, (double) (short) 0);
        double double57 = secondMoment20.evaluate(doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            double double61 = variance3.evaluate(doubleArray53, (double) 2, 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertNotNull(file10);
        org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/hi!3177527701172530992:");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/hi!3177527701172530992:" + "'", str11, "/hi!3177527701172530992:");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNull("file27.getParent() == null", file27.getParent());
        org.junit.Assert.assertEquals(file27.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(uRI35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(uRI38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals(file46.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file46.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.5d + "'", double57 == 0.5d);
    }

    @Test
    public void test01390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01390");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long1 = sumOfSquares0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long6 = variance5.getN();
        double[] doubleArray12 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double14 = variance5.evaluate(doubleArray12, (double) 'a');
        double double18 = variance3.evaluate(doubleArray12, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double21 = sumOfSquares0.evaluate(doubleArray12, (int) (short) 1, 0);
        double double22 = sumOfSquares0.getResult();
        long long23 = sumOfSquares0.getN();
        sumOfSquares0.increment((double) 1000);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean26 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean26.increment((double) (short) 100);
        geometricMean26.increment((double) (-1L));
        geometricMean26.increment((double) (byte) 1);
        geometricMean26.increment((double) 299098718208L);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares35 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long36 = sumOfSquares35.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long41 = variance40.getN();
        double[] doubleArray47 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double49 = variance40.evaluate(doubleArray47, (double) 'a');
        double double53 = variance38.evaluate(doubleArray47, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double56 = sumOfSquares35.evaluate(doubleArray47, (int) (short) 1, 0);
        sumOfSquares35.increment(0.0d);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl59 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = empiricalDistributionImpl59.getSampleStats();
        java.io.File file64 = new java.io.File("");
        java.io.File file65 = java.io.File.createTempFile("hi!", ":", file64);
        java.lang.String str66 = file65.getCanonicalPath();
        boolean boolean67 = file65.createNewFile();
        empiricalDistributionImpl59.load(file65);
        double[] doubleArray69 = empiricalDistributionImpl59.getUpperBounds();
        double double72 = sumOfSquares35.evaluate(doubleArray69, 100, (int) (short) 1);
        double double73 = geometricMean26.evaluate(doubleArray69);
        double double76 = sumOfSquares0.evaluate(doubleArray69, (int) '/', 1);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 19.43999999999942d + "'", double14 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 19.43999999999942d + "'", double49 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNull(statisticalSummary60);
        org.junit.Assert.assertNull("file64.getParent() == null", file64.getParent());
        org.junit.Assert.assertEquals(file64.toString(), "");
        org.junit.Assert.assertNotNull(file65);
        org.junit.Assert.assertEquals(file65.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file65.toString(), "/hi!8304740925808907442:");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "/hi!8304740925808907442:" + "'", str66, "/hi!8304740925808907442:");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
    }

    @Test
    public void test01391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01391");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.net.URI uRI6 = uRL3.toURI();
        int int7 = uRL3.getPort();
        java.net.URI uRI8 = uRL3.toURI();
        java.net.URLStreamHandler uRLStreamHandler10 = null;
        java.net.URL uRL11 = new java.net.URL(uRL3, "/hi!8006405156084128172:", uRLStreamHandler10);
        java.net.Proxy proxy12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection13 = uRL11.openConnection(proxy12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertEquals(uRL11.toString(), "file:/hi!8006405156084128172:");
    }

    @Test
    public void test01392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01392");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        int int2 = empiricalDistributionImpl0.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl0.getSampleStats();
        java.util.List list4 = empiricalDistributionImpl0.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl0.getSampleStats();
        int int6 = empiricalDistributionImpl0.getBinCount();
        boolean boolean7 = empiricalDistributionImpl0.isLoaded();
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        java.lang.String str12 = uRL11.getAuthority();
        int int13 = uRL11.getPort();
        java.net.URI uRI14 = uRL11.toURI();
        int int15 = uRL11.getPort();
        java.net.URI uRI16 = uRL11.toURI();
        java.net.URLStreamHandler uRLStreamHandler18 = null;
        java.net.URL uRL19 = new java.net.URL(uRL11, "/hi!8006405156084128172:", uRLStreamHandler18);
        java.net.URLStreamHandler uRLStreamHandler21 = null;
        java.net.URL uRL22 = new java.net.URL(uRL11, "/hi!3772792150792173750:", uRLStreamHandler21);
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(uRL22);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: URL file:/hi!3772792150792173750: contains no data");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1000 + "'", int2 == 1000);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1000 + "'", int6 == 1000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(uRI14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(uRI16);
        org.junit.Assert.assertEquals(uRL19.toString(), "file:/hi!8006405156084128172:");
        org.junit.Assert.assertEquals(uRL22.toString(), "file:/hi!3772792150792173750:");
    }

    @Test
    public void test01393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01393");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.net.URL uRL7 = new java.net.URL(uRL3, "hi!2169115775229245488");
        java.lang.String str8 = uRL7.getQuery();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!/hi!2169115775229245488");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test01394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01394");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("/hi!1995299374527999331:", "/hi!770052040063289124:", 35, "/hi!2756764035548942023:/:/hi!8130836485477920045:", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!1995299374527999331:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01395");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares4 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long5 = sumOfSquares4.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double22 = variance7.evaluate(doubleArray16, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double25 = sumOfSquares4.evaluate(doubleArray16, (int) (short) 1, 0);
        double double26 = sumOfSquares4.getResult();
        long long27 = sumOfSquares4.getN();
        sumOfSquares4.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares4);
        double double30 = sumOfSquares4.getResult();
        long long31 = sumOfSquares4.getN();
        double double32 = sumOfSquares4.getResult();
        long long33 = sumOfSquares4.getN();
        java.lang.Class<?> wildcardClass34 = sumOfSquares4.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test01396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01396");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean1.increment((double) (short) 100);
        geometricMean1.increment((double) (-1L));
        geometricMean1.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean8 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean8.increment((double) (short) 100);
        geometricMean8.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        double double24 = geometricMean8.evaluate(doubleArray21);
        double double25 = geometricMean1.evaluate(doubleArray21);
        double double28 = sum0.evaluate(doubleArray21, 0, 0);
        sum0.increment((double) 1645454026000L);
        double double31 = sum0.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl33 = new org.apache.commons.math.random.EmpiricalDistributionImpl((int) (byte) 10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl34 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long40 = variance39.getN();
        double[] doubleArray46 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double48 = variance39.evaluate(doubleArray46, (double) 'a');
        mean37.incrementAll(doubleArray46);
        empiricalDistributionImpl34.load(doubleArray46);
        empiricalDistributionImpl33.load(doubleArray46);
        double[] doubleArray52 = empiricalDistributionImpl33.getUpperBounds();
        double double53 = sum0.evaluate(doubleArray52);
        double[] doubleArray54 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double57 = sum0.evaluate(doubleArray54, (-1), (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2.51188643150958d + "'", double24 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2.51188643150958d + "'", double25 == 2.51188643150958d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.645454026E12d + "'", double31 == 1.645454026E12d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 19.43999999999942d + "'", double48 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 6.3999999999999995d + "'", double53 == 6.3999999999999995d);
    }

    @Test
    public void test01397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01397");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMean();
        double double2 = summaryStatistics0.getSumOfLogs();
        summaryStatistics0.addValue((double) ':');
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getGeoMeanImpl();
        double double6 = summaryStatistics0.getSumsq();
        double double7 = summaryStatistics0.getStandardDeviation();
        double double8 = summaryStatistics0.getGeometricMean();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3364.0d + "'", double6 == 3364.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 57.999999999999986d + "'", double8 == 57.999999999999986d);
    }

    @Test
    public void test01398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01398");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        long long1 = sumOfLogs0.getN();
        long long2 = sumOfLogs0.getN();
        sumOfLogs0.clear();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean5.increment((double) 0);
        double double8 = mean5.getResult();
        long long9 = mean5.getN();
        mean5.clear();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl11 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary12 = empiricalDistributionImpl11.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl13.getSampleStats();
        boolean boolean15 = empiricalDistributionImpl13.isLoaded();
        boolean boolean16 = empiricalDistributionImpl13.isLoaded();
        java.util.List list17 = empiricalDistributionImpl13.getBinStats();
        int int18 = empiricalDistributionImpl13.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long25 = variance24.getN();
        double[] doubleArray31 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double33 = variance24.evaluate(doubleArray31, (double) 'a');
        mean22.incrementAll(doubleArray31);
        empiricalDistributionImpl19.load(doubleArray31);
        empiricalDistributionImpl13.load(doubleArray31);
        empiricalDistributionImpl11.load(doubleArray31);
        double double38 = mean5.evaluate(doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = geometricMean4.evaluate(doubleArray31, (int) (short) 100, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNull(statisticalSummary12);
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1000 + "'", int18 == 1000);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 19.43999999999942d + "'", double33 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 4.6d + "'", double38 == 4.6d);
    }

    @Test
    public void test01399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01399");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        java.io.File file10 = new java.io.File(uRI9);
        long long11 = file10.lastModified();
        java.net.URL uRL12 = file10.toURL();
        java.lang.Object obj13 = null;
        boolean boolean14 = uRL12.equals(obj13);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
// flaky:         org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/experiment");
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645454139000L + "'", long11 == 1645454139000L);
        org.junit.Assert.assertNotNull(uRL12);
// flaky:         org.junit.Assert.assertEquals(uRL12.toString(), "file:/experiment/");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01400");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.lang.String str5 = uRL3.getUserInfo();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getUserInfo();
        java.lang.String str8 = uRL3.toExternalForm();
        java.io.File file11 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL12 = file11.toURL();
        java.lang.String str13 = uRL12.getProtocol();
        java.io.File file16 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL17 = file16.toURL();
        java.lang.String str18 = uRL17.getAuthority();
        java.lang.String str19 = uRL17.getUserInfo();
        int int20 = uRL17.getDefaultPort();
        java.lang.String str21 = uRL17.getUserInfo();
        java.io.File file24 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL25 = file24.toURL();
        java.lang.String str26 = uRL25.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler28 = null;
        java.net.URL uRL29 = new java.net.URL(uRL25, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler28);
        boolean boolean30 = uRL17.sameFile(uRL29);
        int int31 = uRL17.getPort();
        java.io.File file34 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL35 = file34.toURL();
        java.lang.String str36 = uRL35.getAuthority();
        java.lang.String str37 = uRL35.getUserInfo();
        int int38 = uRL35.getDefaultPort();
        java.lang.String str39 = uRL35.getUserInfo();
        java.io.File file42 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL43 = file42.toURL();
        java.lang.String str44 = uRL43.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler46 = null;
        java.net.URL uRL47 = new java.net.URL(uRL43, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler46);
        boolean boolean48 = uRL35.sameFile(uRL47);
        java.io.File file51 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL52 = file51.toURL();
        java.lang.String str53 = uRL52.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler55 = null;
        java.net.URL uRL56 = new java.net.URL(uRL52, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler55);
        java.io.File file59 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL60 = file59.toURL();
        boolean boolean61 = uRL52.sameFile(uRL60);
        java.net.URL uRL63 = new java.net.URL(uRL60, "/hi!4129638666993068054:");
        java.lang.Class[] classArray64 = new java.lang.Class[] {};
        java.lang.Object obj65 = uRL63.getContent(classArray64);
        java.lang.Object obj66 = uRL47.getContent(classArray64);
        java.lang.Object obj67 = null; // flaky: uRL17.getContent(classArray64);
        java.lang.Object obj68 = null; // flaky: uRL12.getContent(classArray64);
        java.lang.Object obj69 = null; // flaky: uRL3.getContent(classArray64);
        java.lang.String str70 = uRL3.getFile();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!/" + "'", str8, "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals(file11.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file11.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL12);
// flaky:         org.junit.Assert.assertEquals(uRL12.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "file" + "'", str13, "file");
        org.junit.Assert.assertEquals(file16.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file16.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL17);
// flaky:         org.junit.Assert.assertEquals(uRL17.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals(file24.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file24.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL25);
        org.junit.Assert.assertEquals(uRL25.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals(uRL29.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals(file34.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file34.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL35);
        org.junit.Assert.assertEquals(uRL35.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals(file42.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file42.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL43);
        org.junit.Assert.assertEquals(uRL43.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals(uRL47.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals(file51.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file51.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL52);
        org.junit.Assert.assertEquals(uRL52.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals(uRL56.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file59.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file59.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL60);
        org.junit.Assert.assertEquals(uRL60.toString(), "file:/experiment/hi!2169115775229245488/hi!/");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals(uRL63.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "/experiment/hi!2169115775229245488/hi!/" + "'", str70, "/experiment/hi!2169115775229245488/hi!/");
    }

    @Test
    public void test01401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01401");
        java.io.File file1 = new java.io.File("");
        boolean boolean3 = file1.setReadable(true);
        long long4 = file1.lastModified();
        java.io.File file6 = new java.io.File(file1, "/hi!8130836485477920045:");
        boolean boolean9 = file1.setExecutable(false, false);
        java.lang.String str10 = file1.getParent();
        long long11 = file1.lastModified();
        java.lang.String str12 = file1.getParent();
        boolean boolean13 = file1.canWrite();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
        org.junit.Assert.assertEquals(file6.toString(), "/hi!8130836485477920045:");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01402");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        int int2 = empiricalDistributionImpl0.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = empiricalDistributionImpl0.getSampleStats();
        java.util.List list4 = empiricalDistributionImpl0.getBinStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl0.getSampleStats();
        int int6 = empiricalDistributionImpl0.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl0.getSampleStats();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1000 + "'", int2 == 1000);
        org.junit.Assert.assertNull(statisticalSummary3);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1000 + "'", int6 == 1000);
        org.junit.Assert.assertNull(statisticalSummary7);
    }

    @Test
    public void test01403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01403");
        java.io.File file1 = new java.io.File("/hi!7562571041818304391:");
        org.junit.Assert.assertEquals(file1.getParent(), "/");
        org.junit.Assert.assertEquals(file1.toString(), "/hi!7562571041818304391:");
    }

    @Test
    public void test01404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01404");
        java.io.File file1 = new java.io.File("");
        boolean boolean3 = file1.setReadable(true);
        long long4 = file1.lastModified();
        java.io.File file6 = new java.io.File(file1, "/hi!8130836485477920045:");
        boolean boolean9 = file1.setExecutable(false, false);
        boolean boolean12 = file1.setExecutable(true, false);
        java.io.File file13 = file1.getParentFile();
        java.io.File file15 = new java.io.File("");
        boolean boolean18 = file15.setWritable(true, true);
        boolean boolean19 = file15.setReadOnly();
        boolean boolean22 = file15.setWritable(true, false);
        java.net.URI uRI23 = file15.toURI();
        boolean boolean24 = file15.mkdir();
        java.io.File file25 = file15.getCanonicalFile();
        java.io.File file26 = file15.getAbsoluteFile();
        boolean boolean28 = file26.setWritable(true);
        boolean boolean30 = file26.setLastModified(299098755072L);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = file13.compareTo(file26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
        org.junit.Assert.assertEquals(file6.toString(), "/hi!8130836485477920045:");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(file13);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(uRI23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(file25);
// flaky:         org.junit.Assert.assertEquals(file25.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/experiment");
        org.junit.Assert.assertNotNull(file26);
// flaky:         org.junit.Assert.assertEquals(file26.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test01405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01405");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean2.increment((double) 0);
        double double5 = mean2.getResult();
        long long6 = mean2.getN();
        mean2.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean2);
        double double9 = summaryStatistics0.getMean();
        double double10 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.rank.Min min11 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min11.clear();
        double[] doubleArray18 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double19 = min11.evaluate(doubleArray18);
        long long20 = min11.getN();
        long long21 = min11.getN();
        min11.increment((double) 100.0f);
        long long24 = min11.getN();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min11);
        min11.increment((double) (-27));
        min11.increment((-27.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
    }

    @Test
    public void test01406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01406");
        java.io.File file2 = java.io.File.createTempFile("hi!", "");
        boolean boolean4 = file2.setLastModified((long) '#');
        java.io.File file5 = file2.getCanonicalFile();
        boolean boolean6 = file5.canWrite();
        java.nio.file.Path path7 = file5.toPath();
        boolean boolean8 = file5.exists();
        long long9 = file5.lastModified();
        boolean boolean11 = file5.setLastModified((long) '#');
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/hi!1388576331798471332");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/tmp/hi!1388576331798471332");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(path7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test01407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01407");
        java.io.IOException iOException1 = new java.io.IOException("/hi!1995299374527999331:");
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.lang.String str3 = iOException2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.io.IOException: java.io.IOException: /hi!1995299374527999331:" + "'", str3, "java.io.IOException: java.io.IOException: /hi!1995299374527999331:");
    }

    @Test
    public void test01408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01408");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getGeoMeanImpl();
        double double6 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = summaryStatistics0.getSummary();
        long long8 = summaryStatistics0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(statisticalSummary7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test01409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01409");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.canExecute();
        java.io.File file9 = new java.io.File("");
        boolean boolean12 = file9.setWritable(true, true);
        boolean boolean13 = file9.setReadOnly();
        boolean boolean16 = file9.setWritable(true, false);
        java.net.URI uRI17 = file9.toURI();
        boolean boolean18 = file9.mkdir();
        java.io.File file19 = file9.getCanonicalFile();
        boolean boolean20 = file4.renameTo(file9);
        boolean boolean23 = file9.setWritable(true, true);
        boolean boolean24 = file9.canRead();
        boolean boolean25 = file9.canExecute();
        boolean boolean28 = file9.setExecutable(true, false);
        boolean boolean29 = file9.isHidden();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!477859399717833866:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(uRI17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(file19);
// flaky:         org.junit.Assert.assertEquals(file19.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file19.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test01410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01410");
        java.io.File file2 = new java.io.File("/hi!4533436540036848542:", "/hi!2756764035548942023:");
        boolean boolean3 = file2.delete();
        boolean boolean5 = file2.setWritable(false);
        boolean boolean8 = file2.setReadable(true, false);
        org.junit.Assert.assertEquals(file2.getParent(), "/hi!4533436540036848542:");
        org.junit.Assert.assertEquals(file2.toString(), "/hi!4533436540036848542:/hi!2756764035548942023:");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01411");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double7 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance11);
        double double13 = summaryStatistics0.getVariance();
        summaryStatistics0.clear();
        double double15 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double17 = secondMoment16.getResult();
        secondMoment16.clear();
        double double19 = secondMoment16.getResult();
        secondMoment16.clear();
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment16);
        double double22 = secondMoment16.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test01412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01412");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) 0);
        double double5 = geometricMean0.getResult();
        geometricMean0.clear();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic7 = geometricMean0.getSumLogImpl();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic7);
    }

    @Test
    public void test01413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01413");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        summaryStatistics0.addValue(19.44d);
        double double9 = summaryStatistics0.getMax();
        double double10 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getGeoMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long14 = variance13.getN();
        double[] doubleArray20 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double22 = variance13.evaluate(doubleArray20, (double) 'a');
        variance13.clear();
        double[] doubleArray27 = new double[] { (byte) 0, (short) 0, 299098734592L };
        double double29 = variance13.evaluate(doubleArray27, (double) 1);
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementations must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 19.44d + "'", double9 == 19.44d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 19.43999999999942d + "'", double22 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0, 2.99098734592E11]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.988001178545237E22d + "'", double29 == 1.988001178545237E22d);
    }

    @Test
    public void test01414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01414");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        double double2 = sum0.getResult();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs3 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double4 = sumOfLogs3.getResult();
        long long5 = sumOfLogs3.getN();
        org.apache.commons.math.stat.descriptive.rank.Min min6 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min6.clear();
        double[] doubleArray13 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double14 = min6.evaluate(doubleArray13);
        double double17 = sumOfLogs3.evaluate(doubleArray13, 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = sum0.evaluate(doubleArray13, (int) (short) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 4.060443010546419d + "'", double17 == 4.060443010546419d);
    }

    @Test
    public void test01415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01415");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        boolean boolean9 = file1.mkdir();
        boolean boolean10 = file1.canWrite();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test01416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01416");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares4 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long5 = sumOfSquares4.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double22 = variance7.evaluate(doubleArray16, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double25 = sumOfSquares4.evaluate(doubleArray16, (int) (short) 1, 0);
        double double26 = sumOfSquares4.getResult();
        long long27 = sumOfSquares4.getN();
        sumOfSquares4.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares4);
        double double30 = sumOfSquares4.getResult();
        long long31 = sumOfSquares4.getN();
        long long32 = sumOfSquares4.getN();
        sumOfSquares4.increment((double) 'a');
        long long35 = sumOfSquares4.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
    }

    @Test
    public void test01417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01417");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        boolean boolean3 = empiricalDistributionImpl0.isLoaded();
        boolean boolean4 = empiricalDistributionImpl0.isLoaded();
        boolean boolean5 = empiricalDistributionImpl0.isLoaded();
        java.io.File file9 = new java.io.File("");
        java.io.File file10 = java.io.File.createTempFile("hi!", ":", file9);
        java.lang.String str11 = file10.getAbsolutePath();
        boolean boolean12 = file10.setReadOnly();
        boolean boolean14 = file10.setLastModified(364740218880L);
        empiricalDistributionImpl0.load(file10);
        java.util.List list16 = empiricalDistributionImpl0.getBinStats();
        java.io.File file18 = new java.io.File("");
        boolean boolean20 = file18.setReadable(true);
        long long21 = file18.lastModified();
        java.io.File file23 = new java.io.File(file18, "/hi!8130836485477920045:");
        boolean boolean25 = file23.setExecutable(true);
        java.net.URI uRI26 = file23.toURI();
        boolean boolean27 = file23.setReadOnly();
// flaky:         empiricalDistributionImpl0.load(file23);
        boolean boolean30 = file23.setLastModified((long) 'a');
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "");
        org.junit.Assert.assertNotNull(file10);
        org.junit.Assert.assertEquals(file10.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/hi!2966445676709228214:");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/hi!2966445676709228214:" + "'", str11, "/hi!2966445676709228214:");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(list16);
        org.junit.Assert.assertNull("file18.getParent() == null", file18.getParent());
        org.junit.Assert.assertEquals(file18.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertEquals(file23.getParent(), "/");
        org.junit.Assert.assertEquals(file23.toString(), "/hi!8130836485477920045:");
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(uRI26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test01418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01418");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        boolean boolean3 = empiricalDistributionImpl0.isLoaded();
        boolean boolean4 = empiricalDistributionImpl0.isLoaded();
        boolean boolean5 = empiricalDistributionImpl0.isLoaded();
        int int6 = empiricalDistributionImpl0.getBinCount();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary7 = empiricalDistributionImpl0.getSampleStats();
        java.util.List list8 = empiricalDistributionImpl0.getBinStats();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1000 + "'", int6 == 1000);
        org.junit.Assert.assertNull(statisticalSummary7);
        org.junit.Assert.assertNotNull(list8);
    }

    @Test
    public void test01419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01419");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        long long2 = sum0.getN();
        sum0.clear();
        sum0.increment((double) 1645454035000L);
        long long6 = sum0.getN();
        sum0.clear();
        double double8 = sum0.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics9 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double10 = summaryStatistics9.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min11 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics9.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min11);
        java.lang.Object obj13 = null;
        boolean boolean14 = summaryStatistics9.equals(obj13);
        summaryStatistics9.clear();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = summaryStatistics9.getSummary();
        double double17 = summaryStatistics9.getSumsq();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics18 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double19 = summaryStatistics18.getMin();
        double double20 = summaryStatistics18.getStandardDeviation();
        double double21 = summaryStatistics18.getSumsq();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean22 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean22.increment((double) (short) 100);
        geometricMean22.increment((double) (-1L));
        geometricMean22.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean29 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean29.increment((double) (short) 100);
        geometricMean29.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long36 = variance35.getN();
        double[] doubleArray42 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double44 = variance35.evaluate(doubleArray42, (double) 'a');
        double double45 = geometricMean29.evaluate(doubleArray42);
        double double46 = geometricMean22.evaluate(doubleArray42);
        summaryStatistics18.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean22);
        summaryStatistics9.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean22);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl49 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment50);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long55 = variance54.getN();
        double[] doubleArray61 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double63 = variance54.evaluate(doubleArray61, (double) 'a');
        mean52.incrementAll(doubleArray61);
        empiricalDistributionImpl49.load(doubleArray61);
        geometricMean22.incrementAll(doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            sum0.incrementAll(doubleArray61, 2, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(statisticalSummary16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 19.43999999999942d + "'", double44 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2.51188643150958d + "'", double45 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2.51188643150958d + "'", double46 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 19.43999999999942d + "'", double63 == 19.43999999999942d);
    }

    @Test
    public void test01420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01420");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file5 = new java.io.File("");
        java.io.File file6 = java.io.File.createTempFile("hi!", ":", file5);
        java.lang.String str7 = file6.getCanonicalPath();
        boolean boolean8 = file6.createNewFile();
        empiricalDistributionImpl0.load(file6);
        boolean boolean10 = empiricalDistributionImpl0.isLoaded();
        double[] doubleArray11 = empiricalDistributionImpl0.getUpperBounds();
        int int12 = empiricalDistributionImpl0.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int14 = empiricalDistributionImpl13.getBinCount();
        boolean boolean15 = empiricalDistributionImpl13.isLoaded();
        java.util.List list16 = empiricalDistributionImpl13.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean17 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean17.increment((double) (short) 100);
        geometricMean17.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic22 = geometricMean17.getSumLogImpl();
        long long23 = geometricMean17.getN();
        double double24 = geometricMean17.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics25 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double26 = summaryStatistics25.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min27 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics25.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min27);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean29 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean29.increment((double) (short) 100);
        geometricMean29.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long36 = variance35.getN();
        double[] doubleArray42 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double44 = variance35.evaluate(doubleArray42, (double) 'a');
        double double45 = geometricMean29.evaluate(doubleArray42);
        min27.incrementAll(doubleArray42);
        geometricMean17.incrementAll(doubleArray42);
        empiricalDistributionImpl13.load(doubleArray42);
        double[] doubleArray49 = empiricalDistributionImpl13.getUpperBounds();
        empiricalDistributionImpl0.load(doubleArray49);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary51 = empiricalDistributionImpl0.getSampleStats();
        java.io.File file54 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL55 = file54.toURL();
        java.lang.String str56 = uRL55.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler58 = null;
        java.net.URL uRL59 = new java.net.URL(uRL55, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler58);
        java.io.File file62 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL63 = file62.toURL();
        boolean boolean64 = uRL55.sameFile(uRL63);
        java.io.File file67 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL68 = file67.toURL();
        java.lang.String str69 = uRL68.getAuthority();
        java.lang.String str70 = uRL68.getUserInfo();
        int int71 = uRL68.getDefaultPort();
        java.lang.String str72 = uRL68.getUserInfo();
        java.io.File file75 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL76 = file75.toURL();
        java.lang.String str77 = uRL76.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler79 = null;
        java.net.URL uRL80 = new java.net.URL(uRL76, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler79);
        boolean boolean81 = uRL68.sameFile(uRL80);
        boolean boolean82 = uRL63.sameFile(uRL80);
        java.lang.String str83 = uRL63.getPath();
        java.lang.String str84 = uRL63.getProtocol();
        // The following exception was thrown during execution in test generation
{ // flaky:         try {
// flaky:             empiricalDistributionImpl0.load(uRL63);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: URL file:/experiment/hi!2169115775229245488/hi! contains no data");
// flaky:         } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/hi!5549173990632369931:");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/hi!5549173990632369931:" + "'", str7, "/hi!5549173990632369931:");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1000 + "'", int12 == 1000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1000 + "'", int14 == 1000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(list16);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 19.43999999999942d + "'", double44 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2.51188643150958d + "'", double45 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(statisticalSummary51);
        org.junit.Assert.assertEquals(file54.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file54.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL55);
// flaky:         org.junit.Assert.assertEquals(uRL55.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals(uRL59.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file62.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file62.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL63);
// flaky:         org.junit.Assert.assertEquals(uRL63.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals(file67.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file67.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL68);
// flaky:         org.junit.Assert.assertEquals(uRL68.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals(file75.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file75.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL76);
        org.junit.Assert.assertEquals(uRL76.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals(uRL80.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str83, "/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "file" + "'", str84, "file");
    }

    @Test
    public void test01421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01421");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        long long2 = sumOfLogs0.getN();
        org.apache.commons.math.stat.descriptive.rank.Min min3 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min3.clear();
        double[] doubleArray10 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double11 = min3.evaluate(doubleArray10);
        double double14 = sumOfLogs0.evaluate(doubleArray10, 1, (int) (byte) 1);
        sumOfLogs0.clear();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean16 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long21 = variance20.getN();
        double[] doubleArray27 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double29 = variance20.evaluate(doubleArray27, (double) 'a');
        double double33 = variance18.evaluate(doubleArray27, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            geometricMean16.incrementAll(doubleArray27, 1000, 47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4.060443010546419d + "'", double14 == 4.060443010546419d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 19.43999999999942d + "'", double29 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    }

    @Test
    public void test01422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01422");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.net.URL uRL7 = new java.net.URL(uRL3, "hi!2169115775229245488");
        boolean boolean9 = uRL3.equals((java.lang.Object) "hi!632387485957745443:");
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01423");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.net.URI uRI9 = file1.toURI();
        boolean boolean11 = file1.setExecutable(true);
        boolean boolean13 = file1.setWritable(true);
        boolean boolean16 = file1.setExecutable(true, false);
        long long17 = file1.length();
        java.io.File file19 = new java.io.File(file1, "/tmp/hi!1234432139093283804");
        java.lang.String str20 = file19.getPath();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals(file19.getParent(), "/tmp");
        org.junit.Assert.assertEquals(file19.toString(), "/tmp/hi!1234432139093283804");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "/tmp/hi!1234432139093283804" + "'", str20, "/tmp/hi!1234432139093283804");
    }

    @Test
    public void test01424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01424");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.canRead();
        boolean boolean8 = file1.setWritable(true, true);
        java.lang.String str9 = file1.getName();
        boolean boolean11 = file1.equals((java.lang.Object) 1645454033000L);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01425");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.canRead();
        boolean boolean6 = file1.isDirectory();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test01426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01426");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        summaryStatistics0.clear();
        double double2 = summaryStatistics0.getMean();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test01427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01427");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException("/hi!3816293198257994708:", throwable1);
        java.io.IOException iOException4 = new java.io.IOException("hi!8754354838924134808:");
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        iOException2.addSuppressed((java.lang.Throwable) iOException4);
        java.lang.String str7 = iOException4.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.io.IOException: hi!8754354838924134808:" + "'", str7, "java.io.IOException: hi!8754354838924134808:");
    }

    @Test
    public void test01428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01428");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double19 = geometricMean3.evaluate(doubleArray16);
        empiricalDistributionImpl0.load(doubleArray16);
        double[] doubleArray21 = empiricalDistributionImpl0.getUpperBounds();
        java.util.List list22 = empiricalDistributionImpl0.getBinStats();
        java.io.File file26 = new java.io.File("");
        java.io.File file27 = java.io.File.createTempFile("hi!", ":", file26);
        boolean boolean29 = file27.setWritable(true);
        boolean boolean30 = file27.canExecute();
        long long31 = file27.getFreeSpace();
        boolean boolean33 = file27.setLastModified((long) 10);
        java.io.File file35 = new java.io.File("");
        boolean boolean38 = file35.setWritable(true, true);
        boolean boolean39 = file35.setReadOnly();
        boolean boolean42 = file35.setWritable(true, false);
        java.net.URI uRI43 = file35.toURI();
        boolean boolean44 = file35.mkdir();
        java.io.File file45 = file35.getCanonicalFile();
        boolean boolean46 = file45.canRead();
        boolean boolean47 = file27.renameTo(file45);
        boolean boolean49 = file45.setWritable(false);
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl0.load(file45);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /experiment (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.51188643150958d + "'", double19 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNull("file26.getParent() == null", file26.getParent());
        org.junit.Assert.assertEquals(file26.toString(), "");
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file27.toString(), "/hi!3389528880925581272:");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 299098587136L + "'", long31 == 299098587136L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull("file35.getParent() == null", file35.getParent());
        org.junit.Assert.assertEquals(file35.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(uRI43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(file45);
// flaky:         org.junit.Assert.assertEquals(file45.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file45.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test01429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01429");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.net.URL uRL7 = new java.net.URL(uRL3, "hi!2169115775229245488");
        java.net.URI uRI8 = uRL7.toURI();
        java.io.File file11 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL12 = file11.toURL();
        java.lang.String str13 = uRL12.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler15 = null;
        java.net.URL uRL16 = new java.net.URL(uRL12, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler15);
        java.io.File file19 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL20 = file19.toURL();
        boolean boolean21 = uRL12.sameFile(uRL20);
        java.net.URL uRL23 = new java.net.URL(uRL20, "/hi!4129638666993068054:");
        java.lang.Class[] classArray24 = new java.lang.Class[] {};
        java.lang.Object obj25 = uRL23.getContent(classArray24);
        int int26 = uRL23.getPort();
        java.lang.Object obj27 = uRL23.getContent();
        boolean boolean28 = uRL7.sameFile(uRL23);
        java.net.Proxy proxy29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection30 = uRL23.openConnection(proxy29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!2169115775229245488");
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertEquals(file11.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file11.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL12);
// flaky:         org.junit.Assert.assertEquals(uRL12.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals(uRL16.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file19.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file19.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL20);
// flaky:         org.junit.Assert.assertEquals(uRL20.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals(uRL23.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test01430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01430");
        java.io.File file2 = new java.io.File("/tmp/hi!21691157752292454888078445996954184296", "/hi!4376954783929028723:");
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp/hi!21691157752292454888078445996954184296");
        org.junit.Assert.assertEquals(file2.toString(), "/tmp/hi!21691157752292454888078445996954184296/hi!4376954783929028723:");
    }

    @Test
    public void test01431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01431");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        java.lang.String str6 = uRL3.toExternalForm();
        int int7 = uRL3.getDefaultPort();
        java.net.URLStreamHandler uRLStreamHandler9 = null;
        java.net.URL uRL10 = new java.net.URL(uRL3, "/hi!8695361449339891175:", uRLStreamHandler9);
        java.lang.String str11 = uRL10.toString();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str6, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/hi!8695361449339891175:");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "file:/hi!8695361449339891175:" + "'", str11, "file:/hi!8695361449339891175:");
    }

    @Test
    public void test01432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01432");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long2 = variance1.getN();
        long long3 = variance1.getN();
        variance1.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double8 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        double double11 = secondMoment7.getResult();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment13);
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        double double18 = variance17.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl19.getSampleStats();
        java.io.File file24 = new java.io.File("");
        java.io.File file25 = java.io.File.createTempFile("hi!", ":", file24);
        java.lang.String str26 = file25.getCanonicalPath();
        boolean boolean27 = file25.createNewFile();
        empiricalDistributionImpl19.load(file25);
        double[] doubleArray29 = empiricalDistributionImpl19.getUpperBounds();
        double[] doubleArray30 = empiricalDistributionImpl19.getUpperBounds();
        variance17.incrementAll(doubleArray30, 1, (int) (short) 1);
        double double36 = secondMoment7.evaluate(doubleArray30, 1, 0);
        double double37 = variance1.evaluate(doubleArray30);
        double[] doubleArray38 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double39 = variance1.evaluate(doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNull(statisticalSummary20);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/hi!3771956807485700654:");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "/hi!3771956807485700654:" + "'", str26, "/hi!3771956807485700654:");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
    }

    @Test
    public void test01433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01433");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double7 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double12 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long16 = variance15.getN();
        double[] doubleArray22 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double24 = variance15.evaluate(doubleArray22, (double) 'a');
        double double25 = variance13.evaluate(doubleArray22);
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance13);
        variance13.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 19.43999999999942d + "'", double24 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 19.44d + "'", double25 == 19.44d);
    }

    @Test
    public void test01434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01434");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        // The following exception was thrown during execution in test generation
        try {
            double double3 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: distribution not loaded");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test01435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01435");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.lang.String str5 = uRL3.getQuery();
        java.lang.String str6 = uRL3.getAuthority();
        java.lang.String str7 = uRL3.getAuthority();
        java.io.File file11 = new java.io.File("");
        java.io.File file12 = java.io.File.createTempFile("hi!", ":", file11);
        boolean boolean14 = file12.setWritable(true);
        boolean boolean15 = file12.canExecute();
        java.io.File file17 = new java.io.File("");
        boolean boolean20 = file17.setWritable(true, true);
        boolean boolean21 = file17.setReadOnly();
        boolean boolean24 = file17.setWritable(true, false);
        java.net.URI uRI25 = file17.toURI();
        boolean boolean26 = file17.mkdir();
        java.io.File file27 = file17.getCanonicalFile();
        boolean boolean28 = file12.renameTo(file17);
        boolean boolean31 = file17.setWritable(true, true);
        boolean boolean32 = file17.canRead();
        boolean boolean33 = file17.canWrite();
        java.net.URL uRL34 = file17.toURL();
        boolean boolean35 = uRL3.sameFile(uRL34);
        java.net.Proxy proxy36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection37 = uRL3.openConnection(proxy36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "");
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/hi!7312646198192003499:");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(uRI25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(file27);
// flaky:         org.junit.Assert.assertEquals(file27.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file27.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(uRL34);
// flaky:         org.junit.Assert.assertEquals(uRL34.toString(), "file:/experiment");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test01436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01436");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.clear();
        double double2 = geometricMean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long4 = mean3.getN();
        mean3.clear();
        geometricMean0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean3);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test01437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01437");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = new java.net.URL("/hi!8754354838924134808:", "/hi!4642557990994400587:", 12, "/hi!7692830521395659731:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!8754354838924134808:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01438");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        double double2 = sum0.getResult();
        sum0.clear();
        sum0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double6 = secondMoment5.getResult();
        secondMoment5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double11 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl13 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary14 = empiricalDistributionImpl13.getSampleStats();
        java.io.File file18 = new java.io.File("");
        java.io.File file19 = java.io.File.createTempFile("hi!", ":", file18);
        java.lang.String str20 = file19.getCanonicalPath();
        boolean boolean21 = file19.createNewFile();
        empiricalDistributionImpl13.load(file19);
        double[] doubleArray23 = empiricalDistributionImpl13.getUpperBounds();
        double[] doubleArray24 = empiricalDistributionImpl13.getUpperBounds();
        double double26 = variance12.evaluate(doubleArray24, 1.0d);
        variance8.incrementAll(doubleArray24);
        // The following exception was thrown during execution in test generation
        try {
            double double30 = sum0.evaluate(doubleArray24, (-50), (int) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNull(statisticalSummary14);
        org.junit.Assert.assertNull("file18.getParent() == null", file18.getParent());
        org.junit.Assert.assertEquals(file18.toString(), "");
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file19.toString(), "/hi!6703442443883960891:");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "/hi!6703442443883960891:" + "'", str20, "/hi!6703442443883960891:");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test01439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01439");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.lang.String str5 = uRL3.getUserInfo();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getUserInfo();
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        java.lang.String str12 = uRL11.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler14 = null;
        java.net.URL uRL15 = new java.net.URL(uRL11, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler14);
        boolean boolean16 = uRL3.sameFile(uRL15);
        int int17 = uRL3.getPort();
        java.net.URLConnection uRLConnection18 = uRL3.openConnection();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(uRL15.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(uRLConnection18);
    }

    @Test
    public void test01440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01440");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        java.lang.String str9 = file1.getName();
        boolean boolean11 = file1.setReadable(true);
        java.io.File file12 = file1.getAbsoluteFile();
        java.io.File file14 = new java.io.File("hi!");
        boolean boolean15 = file12.equals((java.lang.Object) file14);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(file12);
// flaky:         org.junit.Assert.assertEquals(file12.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/experiment");
        org.junit.Assert.assertNull("file14.getParent() == null", file14.getParent());
        org.junit.Assert.assertEquals(file14.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test01441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01441");
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException("hi!", throwable2);
        java.io.IOException iOException4 = new java.io.IOException(throwable2);
        java.io.IOException iOException5 = new java.io.IOException("/hi!8130836485477920045:", (java.lang.Throwable) iOException4);
        java.lang.Throwable throwable8 = null;
        java.io.IOException iOException9 = new java.io.IOException("hi!", throwable8);
        java.io.IOException iOException10 = new java.io.IOException((java.lang.Throwable) iOException9);
        java.io.IOException iOException11 = new java.io.IOException("hi!2169115775229245488", (java.lang.Throwable) iOException10);
        iOException5.addSuppressed((java.lang.Throwable) iOException11);
        java.io.IOException iOException15 = new java.io.IOException("/hi!4420905478953568698:");
        java.io.IOException iOException16 = new java.io.IOException("/hi!7369237896365310890:", (java.lang.Throwable) iOException15);
        iOException5.addSuppressed((java.lang.Throwable) iOException16);
        java.lang.String str18 = iOException5.toString();
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.io.IOException: /hi!8130836485477920045:" + "'", str18, "java.io.IOException: /hi!8130836485477920045:");
    }

    @Test
    public void test01442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01442");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long10 = variance9.getN();
        double[] doubleArray16 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double18 = variance9.evaluate(doubleArray16, (double) 'a');
        double double19 = geometricMean3.evaluate(doubleArray16);
        empiricalDistributionImpl0.load(doubleArray16);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = empiricalDistributionImpl0.getSampleStats();
        java.util.List list23 = empiricalDistributionImpl0.getBinStats();
        double double24 = empiricalDistributionImpl0.getNextValue();
        boolean boolean25 = empiricalDistributionImpl0.isLoaded();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.clear();
        long long28 = secondMoment26.getN();
        long long29 = secondMoment26.getN();
        double double30 = secondMoment26.getResult();
        long long31 = secondMoment26.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics32 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double33 = summaryStatistics32.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min34 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics32.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min34);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic36 = summaryStatistics32.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic37 = summaryStatistics32.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic38 = summaryStatistics32.getMaxImpl();
        double double39 = summaryStatistics32.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double41 = secondMoment40.getResult();
        secondMoment40.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        double double44 = secondMoment40.getResult();
        double double45 = secondMoment40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double48 = secondMoment47.getResult();
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        double double51 = secondMoment47.getResult();
        double double52 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        boolean boolean54 = variance46.equals((java.lang.Object) variance53);
        summaryStatistics32.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance46);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance57.increment((double) (byte) 100);
        java.io.File file62 = new java.io.File("/hi!4420905478953568698:", "/experiment/hi!2169115775229245488");
        boolean boolean63 = variance57.equals((java.lang.Object) "/hi!4420905478953568698:");
        boolean boolean64 = variance57.isBiasCorrected();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl65 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment66.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean68 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment66);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long71 = variance70.getN();
        double[] doubleArray77 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double79 = variance70.evaluate(doubleArray77, (double) 'a');
        mean68.incrementAll(doubleArray77);
        empiricalDistributionImpl65.load(doubleArray77);
        java.util.List list82 = empiricalDistributionImpl65.getBinStats();
        double[] doubleArray83 = empiricalDistributionImpl65.getUpperBounds();
        double double87 = variance57.evaluate(doubleArray83, (double) (short) 1, (int) (short) 10, (int) '4');
        double double88 = variance46.evaluate(doubleArray83);
        secondMoment26.incrementAll(doubleArray83, (int) (short) 10, 57);
        empiricalDistributionImpl0.load(doubleArray83);
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 19.43999999999942d + "'", double18 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.51188643150958d + "'", double19 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(statisticalSummary21);
        org.junit.Assert.assertNotNull(statisticalSummary22);
        org.junit.Assert.assertNotNull(list23);
// flaky:         org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic36);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic37);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals(file62.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file62.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 19.43999999999942d + "'", double79 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2.7328566760003855E-16d + "'", double87 == 2.7328566760003855E-16d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.6E-4d + "'", double88 == 1.6E-4d);
    }

    @Test
    public void test01443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01443");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        java.lang.Object obj4 = null;
        boolean boolean5 = summaryStatistics0.equals(obj4);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long8 = variance7.getN();
        variance7.increment((double) 299098755072L);
        double double11 = variance7.getResult();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance7);
        variance7.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test01444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01444");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = empiricalDistributionImpl0.getSampleStats();
        int int3 = empiricalDistributionImpl0.getBinCount();
        java.util.List list4 = empiricalDistributionImpl0.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl5 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = empiricalDistributionImpl5.getSampleStats();
        java.io.File file10 = new java.io.File("");
        java.io.File file11 = java.io.File.createTempFile("hi!", ":", file10);
        java.lang.String str12 = file11.getCanonicalPath();
        boolean boolean13 = file11.createNewFile();
        empiricalDistributionImpl5.load(file11);
        boolean boolean15 = empiricalDistributionImpl5.isLoaded();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics16 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double17 = summaryStatistics16.getMin();
        double double18 = summaryStatistics16.getStandardDeviation();
        double double19 = summaryStatistics16.getMean();
        double double20 = summaryStatistics16.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double23 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment22);
        summaryStatistics16.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        summaryStatistics16.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance27);
        org.apache.commons.math.stat.descriptive.moment.Mean mean29 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean29.increment((double) 0);
        double double32 = mean29.getResult();
        mean29.clear();
        double[] doubleArray34 = new double[] {};
        mean29.incrementAll(doubleArray34);
        double double36 = variance27.evaluate(doubleArray34);
        empiricalDistributionImpl5.load(doubleArray34);
        empiricalDistributionImpl0.load(doubleArray34);
        java.io.File file42 = new java.io.File("");
        java.io.File file43 = java.io.File.createTempFile("hi!", ":", file42);
        boolean boolean45 = file43.setWritable(true);
        boolean boolean46 = file43.canExecute();
        long long47 = file43.getTotalSpace();
        boolean boolean48 = file43.canRead();
        boolean boolean49 = file43.createNewFile();
        java.lang.String str50 = file43.getCanonicalPath();
        empiricalDistributionImpl0.load(file43);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = empiricalDistributionImpl0.getNextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: No bin selected");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1000 + "'", int3 == 1000);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertNull(statisticalSummary6);
        org.junit.Assert.assertNull("file10.getParent() == null", file10.getParent());
        org.junit.Assert.assertEquals(file10.toString(), "");
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/hi!7409802493364086980:");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/hi!7409802493364086980:" + "'", str12, "/hi!7409802493364086980:");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNull("file42.getParent() == null", file42.getParent());
        org.junit.Assert.assertEquals(file42.toString(), "");
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertEquals(file43.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file43.toString(), "/hi!5596553850790922269:");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 364740218880L + "'", long47 == 364740218880L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "/hi!5596553850790922269:" + "'", str50, "/hi!5596553850790922269:");
    }

    @Test
    public void test01445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01445");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        java.net.URL uRL5 = file1.toURL();
        java.io.InputStream inputStream6 = uRL5.openStream();
        java.net.Proxy proxy7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection8 = uRL5.openConnection(proxy7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(uRL5);
// flaky:         org.junit.Assert.assertEquals(uRL5.toString(), "file:/experiment");
        org.junit.Assert.assertNotNull(inputStream6);
    }

    @Test
    public void test01446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01446");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler6 = null;
        java.net.URL uRL7 = new java.net.URL(uRL3, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler6);
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        boolean boolean12 = uRL3.sameFile(uRL11);
        java.net.URL uRL14 = new java.net.URL(uRL11, "/hi!4129638666993068054:");
        java.lang.Class[] classArray15 = new java.lang.Class[] {};
        java.lang.Object obj16 = uRL14.getContent(classArray15);
        int int17 = uRL14.getPort();
        java.lang.String str18 = uRL14.getQuery();
        java.io.InputStream inputStream19 = uRL14.openStream();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(inputStream19);
    }

    @Test
    public void test01447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01447");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long1 = sumOfSquares0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long6 = variance5.getN();
        double[] doubleArray12 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double14 = variance5.evaluate(doubleArray12, (double) 'a');
        double double18 = variance3.evaluate(doubleArray12, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double21 = sumOfSquares0.evaluate(doubleArray12, (int) (short) 1, 0);
        sumOfSquares0.increment(0.0d);
        sumOfSquares0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double26 = secondMoment25.getResult();
        secondMoment25.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double31 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment30);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl33 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary34 = empiricalDistributionImpl33.getSampleStats();
        java.io.File file38 = new java.io.File("");
        java.io.File file39 = java.io.File.createTempFile("hi!", ":", file38);
        java.lang.String str40 = file39.getCanonicalPath();
        boolean boolean41 = file39.createNewFile();
        empiricalDistributionImpl33.load(file39);
        double[] doubleArray43 = empiricalDistributionImpl33.getUpperBounds();
        double[] doubleArray44 = empiricalDistributionImpl33.getUpperBounds();
        double double46 = variance32.evaluate(doubleArray44, 1.0d);
        variance28.incrementAll(doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            double double50 = sumOfSquares0.evaluate(doubleArray44, 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 19.43999999999942d + "'", double14 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNull(statisticalSummary34);
        org.junit.Assert.assertNull("file38.getParent() == null", file38.getParent());
        org.junit.Assert.assertEquals(file38.toString(), "");
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertEquals(file39.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file39.toString(), "/hi!596050252811910281:");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "/hi!596050252811910281:" + "'", str40, "/hi!596050252811910281:");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
    }

    @Test
    public void test01448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01448");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = new java.net.URL("hi!1091631819458065695:", "file", (int) (byte) 0, "/hi!825511304588964336:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: hi!1091631819458065695:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01449");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double2 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double5 = secondMoment1.getResult();
        secondMoment1.increment((double) 299098714112L);
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment1);
        long long9 = mean8.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
    }

    @Test
    public void test01450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01450");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler6 = null;
        java.net.URL uRL7 = new java.net.URL(uRL3, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler6);
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        boolean boolean12 = uRL3.sameFile(uRL11);
        java.net.URL uRL14 = new java.net.URL(uRL11, "/hi!4129638666993068054:");
        int int15 = uRL11.getPort();
        int int16 = uRL11.getPort();
        java.lang.String str17 = uRL11.getAuthority();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(uRL14.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test01451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01451");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.net.URI uRI4 = uRL3.toURI();
        java.net.URLConnection uRLConnection5 = uRL3.openConnection();
        int int6 = uRL3.getPort();
        java.io.File file9 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL10 = file9.toURL();
        java.io.File file13 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL14 = file13.toURL();
        java.lang.String str15 = uRL14.getAuthority();
        int int16 = uRL14.getPort();
        java.lang.String str17 = uRL14.toExternalForm();
        java.io.File file20 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL21 = file20.toURL();
        java.lang.String str22 = uRL21.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler24 = null;
        java.net.URL uRL25 = new java.net.URL(uRL21, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler24);
        boolean boolean26 = uRL14.sameFile(uRL25);
        java.lang.String str27 = uRL25.getQuery();
        java.io.File file30 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL31 = file30.toURL();
        java.lang.String str32 = uRL31.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler34 = null;
        java.net.URL uRL35 = new java.net.URL(uRL31, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler34);
        java.io.File file38 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL39 = file38.toURL();
        boolean boolean40 = uRL31.sameFile(uRL39);
        java.net.URL uRL42 = new java.net.URL(uRL39, "/hi!4129638666993068054:");
        java.lang.Class[] classArray43 = new java.lang.Class[] {};
        java.lang.Object obj44 = uRL42.getContent(classArray43);
        java.lang.Object obj45 = uRL25.getContent(classArray43);
        java.lang.Object obj46 = null; // flaky: uRL10.getContent(classArray43);
        java.lang.Object obj47 = null; // flaky: uRL3.getContent(classArray43);
        java.net.URLStreamHandler uRLStreamHandler49 = null;
        java.net.URL uRL50 = new java.net.URL(uRL3, "hi!8754354838924134808:", uRLStreamHandler49);
        java.lang.String str51 = uRL3.getFile();
        java.net.URLConnection uRLConnection52 = uRL3.openConnection();
        java.net.Proxy proxy53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URLConnection uRLConnection54 = uRL3.openConnection(proxy53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: proxy can not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRI4);
        org.junit.Assert.assertNotNull(uRLConnection5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals(file9.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file9.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL10);
// flaky:         org.junit.Assert.assertEquals(uRL10.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file13.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file13.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL14);
// flaky:         org.junit.Assert.assertEquals(uRL14.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str17, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file20.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file20.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL21);
// flaky:         org.junit.Assert.assertEquals(uRL21.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals(uRL25.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals(file30.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file30.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL31);
        org.junit.Assert.assertEquals(uRL31.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals(uRL35.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file38.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file38.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL39);
        org.junit.Assert.assertEquals(uRL39.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals(uRL42.toString(), "file:/hi!4129638666993068054:");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertEquals(uRL50.toString(), "file:/experiment/hi!2169115775229245488/hi!8754354838924134808:");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str51, "/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRLConnection52);
    }

    @Test
    public void test01452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01452");
        java.io.File file2 = java.io.File.createTempFile("hi!", "");
        boolean boolean4 = file2.setWritable(true);
        long long5 = file2.getUsableSpace();
        boolean boolean8 = file2.setWritable(true, true);
        boolean boolean9 = file2.createNewFile();
        boolean boolean10 = file2.exists();
        java.lang.String str11 = file2.getCanonicalPath();
        boolean boolean14 = file2.setReadable(false, true);
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/hi!4692548702906908805");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 280499470336L + "'", long5 == 280499470336L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/tmp/hi!4692548702906908805" + "'", str11, "/tmp/hi!4692548702906908805");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test01453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01453");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean7 = file3.setReadable(false, true);
        java.lang.String str8 = file3.getCanonicalPath();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!6649022688600012949:");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/experiment" + "'", str8, "/experiment");
    }

    @Test
    public void test01454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01454");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double7 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double12 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long16 = variance15.getN();
        double[] doubleArray22 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double24 = variance15.evaluate(doubleArray22, (double) 'a');
        double double25 = variance13.evaluate(doubleArray22);
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance13);
        long long27 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics28 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double29 = summaryStatistics28.getVariance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary30 = summaryStatistics28.getSummary();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment31.clear();
        long long33 = secondMoment31.getN();
        secondMoment31.clear();
        double double35 = secondMoment31.getResult();
        summaryStatistics28.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment31);
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment31);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares38 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long39 = sumOfSquares38.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long44 = variance43.getN();
        double[] doubleArray50 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double52 = variance43.evaluate(doubleArray50, (double) 'a');
        double double56 = variance41.evaluate(doubleArray50, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double59 = sumOfSquares38.evaluate(doubleArray50, (int) (short) 1, 0);
        double double60 = sumOfSquares38.getResult();
        long long61 = sumOfSquares38.getN();
        sumOfSquares38.increment((double) 1000);
        boolean boolean64 = summaryStatistics0.equals((java.lang.Object) sumOfSquares38);
        sumOfSquares38.increment((double) 10);
        double double67 = sumOfSquares38.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 19.43999999999942d + "'", double24 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 19.44d + "'", double25 == 19.44d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(statisticalSummary30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 19.43999999999942d + "'", double52 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1000100.0d + "'", double67 == 1000100.0d);
    }

    @Test
    public void test01455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01455");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max12.clear();
        double double14 = max12.getResult();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares15 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long16 = sumOfSquares15.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long21 = variance20.getN();
        double[] doubleArray27 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double29 = variance20.evaluate(doubleArray27, (double) 'a');
        double double33 = variance18.evaluate(doubleArray27, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double36 = sumOfSquares15.evaluate(doubleArray27, (int) (short) 1, 0);
        double double39 = max12.evaluate(doubleArray27, (int) (short) 1, (int) (short) 0);
        long long40 = max12.getN();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        long long42 = max12.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares43 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long44 = sumOfSquares43.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean45 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean45.increment((double) (short) 100);
        geometricMean45.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic50 = geometricMean45.getSumLogImpl();
        geometricMean45.clear();
        boolean boolean52 = sumOfSquares43.equals((java.lang.Object) geometricMean45);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl53 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary54 = empiricalDistributionImpl53.getSampleStats();
        java.io.File file58 = new java.io.File("");
        java.io.File file59 = java.io.File.createTempFile("hi!", ":", file58);
        java.lang.String str60 = file59.getCanonicalPath();
        boolean boolean61 = file59.createNewFile();
        empiricalDistributionImpl53.load(file59);
        int int63 = empiricalDistributionImpl53.getBinCount();
        double[] doubleArray64 = empiricalDistributionImpl53.getUpperBounds();
        double double67 = sumOfSquares43.evaluate(doubleArray64, 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            double double70 = max12.evaluate(doubleArray64, 3, (-6));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 19.43999999999942d + "'", double29 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(statisticalSummary54);
        org.junit.Assert.assertNull("file58.getParent() == null", file58.getParent());
        org.junit.Assert.assertEquals(file58.toString(), "");
        org.junit.Assert.assertNotNull(file59);
        org.junit.Assert.assertEquals(file59.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file59.toString(), "/hi!2753150919911840742:");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "/hi!2753150919911840742:" + "'", str60, "/hi!2753150919911840742:");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1000 + "'", int63 == 1000);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
    }

    @Test
    public void test01456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01456");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long1 = sumOfSquares0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long6 = variance5.getN();
        double[] doubleArray12 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double14 = variance5.evaluate(doubleArray12, (double) 'a');
        double double18 = variance3.evaluate(doubleArray12, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double21 = sumOfSquares0.evaluate(doubleArray12, (int) (short) 1, 0);
        double double22 = sumOfSquares0.getResult();
        long long23 = sumOfSquares0.getN();
        sumOfSquares0.clear();
        long long25 = sumOfSquares0.getN();
        sumOfSquares0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 19.43999999999942d + "'", double14 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test01457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01457");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance12);
        double double14 = summaryStatistics0.getSumOfLogs();
        double double15 = summaryStatistics0.getVariance();
        double double16 = summaryStatistics0.getMax();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test01458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01458");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException("hi!", throwable1);
        java.io.IOException iOException3 = new java.io.IOException(throwable1);
        java.lang.Throwable throwable5 = null;
        java.io.IOException iOException6 = new java.io.IOException("hi!", throwable5);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.lang.Throwable[] throwableArray8 = iOException7.getSuppressed();
        iOException3.addSuppressed((java.lang.Throwable) iOException7);
        java.io.IOException iOException11 = new java.io.IOException("/hi!1995299374527999331:");
        java.lang.Throwable[] throwableArray12 = iOException11.getSuppressed();
        iOException7.addSuppressed((java.lang.Throwable) iOException11);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test01459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01459");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        sumOfLogs0.increment((double) (-3));
        sumOfLogs0.increment((double) 'a');
        org.junit.Assert.assertTrue(Double.isNaN(double1));
    }

    @Test
    public void test01460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01460");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getPath();
        java.net.URLStreamHandler uRLStreamHandler9 = null;
        java.net.URL uRL10 = new java.net.URL(uRL3, "/hi!8304360505110833158:", uRLStreamHandler9);
        java.net.URI uRI11 = uRL3.toURI();
        java.lang.String str12 = uRL3.toString();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str7, "/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/hi!8304360505110833158:");
        org.junit.Assert.assertNotNull(uRI11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str12, "file:/experiment/hi!2169115775229245488/hi!");
    }

    @Test
    public void test01461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01461");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean4.increment((double) (short) 100);
        geometricMean4.increment((double) (-1L));
        geometricMean4.increment((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean11 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean11.increment((double) (short) 100);
        geometricMean11.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long18 = variance17.getN();
        double[] doubleArray24 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double26 = variance17.evaluate(doubleArray24, (double) 'a');
        double double27 = geometricMean11.evaluate(doubleArray24);
        double double28 = geometricMean4.evaluate(doubleArray24);
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean4);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic30 = summaryStatistics0.getMaxImpl();
        storelessUnivariateStatistic30.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 19.43999999999942d + "'", double26 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2.51188643150958d + "'", double27 == 2.51188643150958d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2.51188643150958d + "'", double28 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic30);
    }

    @Test
    public void test01462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01462");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        long long1 = sumOfLogs0.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic3 = geometricMean2.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics4 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double5 = summaryStatistics4.getMin();
        double double6 = summaryStatistics4.getStandardDeviation();
        double double7 = summaryStatistics4.getMax();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double9 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        summaryStatistics4.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment8);
        boolean boolean12 = geometricMean2.equals((java.lang.Object) secondMoment8);
        double double13 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment8);
        secondMoment8.increment(1.645454028E12d);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl17 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = empiricalDistributionImpl17.getSampleStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl19 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary20 = empiricalDistributionImpl19.getSampleStats();
        boolean boolean21 = empiricalDistributionImpl19.isLoaded();
        boolean boolean22 = empiricalDistributionImpl19.isLoaded();
        java.util.List list23 = empiricalDistributionImpl19.getBinStats();
        int int24 = empiricalDistributionImpl19.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long31 = variance30.getN();
        double[] doubleArray37 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double39 = variance30.evaluate(doubleArray37, (double) 'a');
        mean28.incrementAll(doubleArray37);
        empiricalDistributionImpl25.load(doubleArray37);
        empiricalDistributionImpl19.load(doubleArray37);
        empiricalDistributionImpl17.load(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment8.incrementAll(doubleArray37, (-27), (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNull(statisticalSummary18);
        org.junit.Assert.assertNull(statisticalSummary20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1000 + "'", int24 == 1000);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 19.43999999999942d + "'", double39 == 19.43999999999942d);
    }

    @Test
    public void test01463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01463");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        double double1 = max0.getResult();
        max0.clear();
        long long3 = max0.getN();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl4 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = empiricalDistributionImpl4.getSampleStats();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = empiricalDistributionImpl4.getSampleStats();
        int int7 = empiricalDistributionImpl4.getBinCount();
        java.util.List list8 = empiricalDistributionImpl4.getBinStats();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl9 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = empiricalDistributionImpl9.getSampleStats();
        java.io.File file14 = new java.io.File("");
        java.io.File file15 = java.io.File.createTempFile("hi!", ":", file14);
        java.lang.String str16 = file15.getCanonicalPath();
        boolean boolean17 = file15.createNewFile();
        empiricalDistributionImpl9.load(file15);
        boolean boolean19 = empiricalDistributionImpl9.isLoaded();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics20 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double21 = summaryStatistics20.getMin();
        double double22 = summaryStatistics20.getStandardDeviation();
        double double23 = summaryStatistics20.getMean();
        double double24 = summaryStatistics20.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double27 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment26);
        summaryStatistics20.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        summaryStatistics20.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance31);
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean33.increment((double) 0);
        double double36 = mean33.getResult();
        mean33.clear();
        double[] doubleArray38 = new double[] {};
        mean33.incrementAll(doubleArray38);
        double double40 = variance31.evaluate(doubleArray38);
        empiricalDistributionImpl9.load(doubleArray38);
        empiricalDistributionImpl4.load(doubleArray38);
        double double43 = max0.evaluate(doubleArray38);
        double double44 = max0.getResult();
        double double45 = max0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNull(statisticalSummary5);
        org.junit.Assert.assertNull(statisticalSummary6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1000 + "'", int7 == 1000);
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertNull(statisticalSummary10);
        org.junit.Assert.assertNull("file14.getParent() == null", file14.getParent());
        org.junit.Assert.assertEquals(file14.toString(), "");
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file15.toString(), "/hi!3537278563975873522:");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "/hi!3537278563975873522:" + "'", str16, "/hi!3537278563975873522:");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
    }

    @Test
    public void test01464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01464");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler6 = null;
        java.net.URL uRL7 = new java.net.URL(uRL3, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler6);
        java.lang.String str8 = uRL3.toExternalForm();
        java.net.URL uRL10 = new java.net.URL(uRL3, "/hi!6147520189804127628:");
        int int11 = uRL10.getPort();
        java.lang.String str12 = uRL10.getPath();
        java.net.URLConnection uRLConnection13 = uRL10.openConnection();
        java.lang.String str14 = uRL10.getHost();
        java.lang.String str15 = uRL10.toString();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "file:/experiment/hi!2169115775229245488/hi!" + "'", str8, "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/hi!6147520189804127628:");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/hi!6147520189804127628:" + "'", str12, "/hi!6147520189804127628:");
        org.junit.Assert.assertNotNull(uRLConnection13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "file:/hi!6147520189804127628:" + "'", str15, "file:/hi!6147520189804127628:");
    }

    @Test
    public void test01465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01465");
        java.io.File file2 = java.io.File.createTempFile("hi!", "");
        java.lang.String str3 = file2.getName();
        java.lang.String str4 = file2.getAbsolutePath();
        boolean boolean5 = file2.exists();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/hi!8230630711014278275");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!8230630711014278275" + "'", str3, "hi!8230630711014278275");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/tmp/hi!8230630711014278275" + "'", str4, "/tmp/hi!8230630711014278275");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test01466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01466");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        double double2 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics3 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double4 = summaryStatistics3.getMin();
        double double5 = summaryStatistics3.getStandardDeviation();
        double double6 = summaryStatistics3.getMean();
        double double7 = summaryStatistics3.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        long long9 = mean8.getN();
        summaryStatistics3.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        long long11 = mean8.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        double double13 = summaryStatistics0.getVariance();
        double double14 = summaryStatistics0.getSumOfLogs();
        java.lang.String str15 = summaryStatistics0.toString();
        summaryStatistics0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str15, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
    }

    @Test
    public void test01467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01467");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl1 = new org.apache.commons.math.random.EmpiricalDistributionImpl(0);
        java.util.List list2 = empiricalDistributionImpl1.getBinStats();
        int int3 = empiricalDistributionImpl1.getBinCount();
        int int4 = empiricalDistributionImpl1.getBinCount();
        java.io.File file6 = new java.io.File("/hi!4533436540036848542:");
        boolean boolean7 = file6.canExecute();
        java.lang.String str8 = file6.getName();
        // The following exception was thrown during execution in test generation
        try {
            empiricalDistributionImpl1.load(file6);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /hi!4533436540036848542: (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
        org.junit.Assert.assertEquals(file6.toString(), "/hi!4533436540036848542:");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!4533436540036848542:" + "'", str8, "hi!4533436540036848542:");
    }

    @Test
    public void test01468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01468");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.lang.String str5 = uRL3.getUserInfo();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getAuthority();
        java.lang.String str8 = uRL3.getAuthority();
        java.lang.String str9 = uRL3.getUserInfo();
        java.net.URL uRL11 = new java.net.URL(uRL3, "hi!4533436540036848542:");
        java.lang.String str12 = uRL3.getAuthority();
        java.lang.Class<?> wildcardClass13 = uRL3.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics14 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance((java.lang.Class) wildcardClass13);
            org.junit.Assert.fail("Expected exception of type java.lang.InstantiationException; message: java.net.URL");
        } catch (java.lang.InstantiationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str9);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!4533436540036848542:");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test01469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01469");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double7 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double12 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long16 = variance15.getN();
        double[] doubleArray22 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double24 = variance15.evaluate(doubleArray22, (double) 'a');
        double double25 = variance13.evaluate(doubleArray22);
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance13);
        summaryStatistics0.addValue((double) (-1));
        double double29 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics30 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double31 = summaryStatistics30.getMin();
        double double32 = summaryStatistics30.getStandardDeviation();
        double double33 = summaryStatistics30.getMax();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double35 = secondMoment34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        summaryStatistics30.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment34);
        boolean boolean38 = summaryStatistics0.equals((java.lang.Object) secondMoment34);
        java.io.File file41 = new java.io.File("hi!2169115775229245488", "");
        boolean boolean42 = file41.canRead();
        boolean boolean43 = summaryStatistics0.equals((java.lang.Object) file41);
        boolean boolean46 = file41.setWritable(true, true);
        java.io.File file47 = file41.getCanonicalFile();
        file47.deleteOnExit();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 19.43999999999942d + "'", double24 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 19.44d + "'", double25 == 19.44d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull("file41.getParent() == null", file41.getParent());
        org.junit.Assert.assertEquals(file41.toString(), "hi!2169115775229245488");
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(file47);
// flaky:         org.junit.Assert.assertEquals(file47.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file47.toString(), "/experiment/hi!2169115775229245488");
    }

    @Test
    public void test01470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01470");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        mean4.clear();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean6 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean6.increment((double) (short) 100);
        long long9 = geometricMean6.getN();
        geometricMean6.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics11 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean12 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics11.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean12);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean14 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean14.increment((double) (short) 100);
        geometricMean14.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic19 = geometricMean14.getSumLogImpl();
        summaryStatistics11.setMinImpl(storelessUnivariateStatistic19);
        double double21 = summaryStatistics11.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double24 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        summaryStatistics11.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment23);
        geometricMean6.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        variance28.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long32 = variance31.getN();
        double[] doubleArray38 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double40 = variance31.evaluate(doubleArray38, (double) 'a');
        variance31.clear();
        double[] doubleArray45 = new double[] { (byte) 0, (short) 0, 299098734592L };
        double double47 = variance31.evaluate(doubleArray45, (double) 1);
        double double48 = variance28.evaluate(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            double double51 = mean4.evaluate(doubleArray45, (-2), 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 19.43999999999942d + "'", double40 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0, 2.99098734592E11]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.988001178545237E22d + "'", double47 == 1.988001178545237E22d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 2.9820017678178555E22d + "'", double48 == 2.9820017678178555E22d);
    }

    @Test
    public void test01471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01471");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("/hi!5348483820800167287:", "/hi!3521347429783265421:");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /tmp/hi!5348483820800167287:5392024958494779969/hi!3521347429783265421:");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01472");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean2.increment((double) 0);
        double double5 = mean2.getResult();
        long long6 = mean2.getN();
        mean2.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean2);
        double double9 = summaryStatistics0.getMean();
        double double10 = summaryStatistics0.getStandardDeviation();
        java.lang.String str11 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = summaryStatistics0.getMinImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str11, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
    }

    @Test
    public void test01473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01473");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        int int5 = uRL3.getPort();
        int int6 = uRL3.getDefaultPort();
        java.lang.String str7 = uRL3.getPath();
        java.net.URLStreamHandler uRLStreamHandler9 = null;
        java.net.URL uRL10 = new java.net.URL(uRL3, "/hi!8304360505110833158:", uRLStreamHandler9);
        java.net.URI uRI11 = uRL3.toURI();
        java.lang.String str12 = uRL3.getRef();
        java.lang.String str13 = uRL3.getFile();
        java.lang.String str14 = uRL3.getUserInfo();
        java.io.InputStream inputStream15 = null; // flaky: uRL3.openStream();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str7, "/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(uRL10.toString(), "file:/hi!8304360505110833158:");
        org.junit.Assert.assertNotNull(uRI11);
        org.junit.Assert.assertNull(str12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "/experiment/hi!2169115775229245488/hi!" + "'", str13, "/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertNull(str14);
// flaky:         org.junit.Assert.assertNotNull(inputStream15);
    }

    @Test
    public void test01474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01474");
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl0 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = empiricalDistributionImpl0.getSampleStats();
        boolean boolean2 = empiricalDistributionImpl0.isLoaded();
        boolean boolean3 = empiricalDistributionImpl0.isLoaded();
        java.util.List list4 = empiricalDistributionImpl0.getBinStats();
        int int5 = empiricalDistributionImpl0.getBinCount();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl6 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long12 = variance11.getN();
        double[] doubleArray18 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double20 = variance11.evaluate(doubleArray18, (double) 'a');
        mean9.incrementAll(doubleArray18);
        empiricalDistributionImpl6.load(doubleArray18);
        empiricalDistributionImpl0.load(doubleArray18);
        boolean boolean24 = empiricalDistributionImpl0.isLoaded();
        java.util.List list25 = empiricalDistributionImpl0.getBinStats();
        java.io.File file28 = java.io.File.createTempFile("hi!", "");
        boolean boolean30 = file28.setLastModified((long) '#');
        java.io.File file31 = file28.getCanonicalFile();
        boolean boolean34 = file31.setReadable(true, true);
        empiricalDistributionImpl0.load(file31);
        java.net.URL uRL36 = file31.toURL();
        int int37 = uRL36.getDefaultPort();
        org.junit.Assert.assertNull(statisticalSummary1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1000 + "'", int5 == 1000);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 19.43999999999942d + "'", double20 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file28.toString(), "/tmp/hi!8980585358640134846");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file31.toString(), "/tmp/hi!8980585358640134846");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(uRL36);
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/tmp/hi!8980585358640134846");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test01475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01475");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean4.increment((double) (short) 100);
        long long7 = geometricMean4.getN();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean4);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares9 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long10 = sumOfSquares9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long15 = variance14.getN();
        double[] doubleArray21 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double23 = variance14.evaluate(doubleArray21, (double) 'a');
        double double27 = variance12.evaluate(doubleArray21, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double30 = sumOfSquares9.evaluate(doubleArray21, (int) (short) 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = geometricMean4.evaluate(doubleArray21, 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 19.43999999999942d + "'", double23 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test01476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01476");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean2.increment((double) (short) 100);
        geometricMean2.increment(0.0d);
        geometricMean2.clear();
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean2);
        summaryStatistics0.clear();
        double double10 = summaryStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getMinImpl();
        double double12 = summaryStatistics0.getMean();
        double double13 = summaryStatistics0.getVariance();
        double double14 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean15 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean15.increment((double) (short) 100);
        geometricMean15.increment((double) (-1L));
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic20 = geometricMean15.getSumLogImpl();
        geometricMean15.increment(0.5d);
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean15);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long26 = variance25.getN();
        double[] doubleArray32 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double34 = variance25.evaluate(doubleArray32, (double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean37 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long40 = variance39.getN();
        double[] doubleArray46 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double48 = variance39.evaluate(doubleArray46, (double) 'a');
        mean37.incrementAll(doubleArray46);
        double double51 = variance25.evaluate(doubleArray46, (double) (byte) 1);
        variance25.increment((double) 1.0f);
        long long54 = variance25.getN();
        variance25.setBiasCorrected(true);
        boolean boolean57 = variance25.isBiasCorrected();
        // The following exception was thrown during execution in test generation
        try {
            geometricMean15.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementation must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic20);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 19.43999999999942d + "'", double34 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 19.43999999999942d + "'", double48 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 19.44d + "'", double51 == 19.44d);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test01477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01477");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic3 = summaryStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getMeanImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic3);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
    }

    @Test
    public void test01478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01478");
        java.io.File file1 = new java.io.File("");
        boolean boolean4 = file1.setWritable(true, true);
        boolean boolean5 = file1.setReadOnly();
        boolean boolean8 = file1.setWritable(true, false);
        boolean boolean10 = file1.setExecutable(true);
        boolean boolean11 = file1.exists();
        boolean boolean12 = file1.canRead();
        long long13 = file1.getUsableSpace();
        java.io.File file14 = file1.getCanonicalFile();
        boolean boolean15 = file14.createNewFile();
        boolean boolean16 = file14.canRead();
        java.io.File file17 = file14.getParentFile();
        java.lang.String str18 = file14.getPath();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(file14);
// flaky:         org.junit.Assert.assertEquals(file14.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(file17);
// flaky:         org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
// flaky:         org.junit.Assert.assertEquals(file17.toString(), "/");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "/experiment" + "'", str18, "/experiment");
    }

    @Test
    public void test01479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01479");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = summaryStatistics0.getSummary();
        double double5 = summaryStatistics0.getStandardDeviation();
        double double6 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.clear();
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment7);
        double double10 = secondMoment7.getResult();
        secondMoment7.increment((double) 35);
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(statisticalSummary4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test01480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01480");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean0.increment((double) 0);
        double double3 = mean0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean4.increment((double) 0);
        double double7 = mean4.getResult();
        mean4.clear();
        double[] doubleArray9 = new double[] {};
        mean4.incrementAll(doubleArray9);
        double double11 = mean0.evaluate(doubleArray9);
        mean0.increment((double) 10L);
        long long14 = mean0.getN();
        double double15 = mean0.getResult();
        mean0.increment((double) 1645454107000L);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5.0d + "'", double15 == 5.0d);
    }

    @Test
    public void test01481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01481");
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException("hi!", throwable2);
        java.lang.Throwable throwable5 = null;
        java.io.IOException iOException6 = new java.io.IOException("hi!", throwable5);
        java.io.IOException iOException7 = new java.io.IOException(throwable5);
        java.lang.Throwable throwable10 = null;
        java.io.IOException iOException11 = new java.io.IOException("hi!", throwable10);
        java.io.IOException iOException12 = new java.io.IOException((java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException("hi!2169115775229245488", (java.lang.Throwable) iOException12);
        iOException7.addSuppressed((java.lang.Throwable) iOException12);
        iOException3.addSuppressed((java.lang.Throwable) iOException12);
        java.lang.Throwable throwable17 = null;
        java.io.IOException iOException18 = new java.io.IOException("hi!", throwable17);
        java.io.IOException iOException19 = new java.io.IOException(throwable17);
        java.lang.Throwable throwable22 = null;
        java.io.IOException iOException23 = new java.io.IOException("hi!", throwable22);
        java.io.IOException iOException24 = new java.io.IOException((java.lang.Throwable) iOException23);
        java.io.IOException iOException25 = new java.io.IOException("hi!2169115775229245488", (java.lang.Throwable) iOException24);
        iOException19.addSuppressed((java.lang.Throwable) iOException24);
        java.lang.Throwable throwable29 = null;
        java.io.IOException iOException30 = new java.io.IOException("hi!", throwable29);
        java.io.IOException iOException31 = new java.io.IOException((java.lang.Throwable) iOException30);
        java.io.IOException iOException32 = new java.io.IOException("/hi!4533436540036848542:", (java.lang.Throwable) iOException30);
        iOException19.addSuppressed((java.lang.Throwable) iOException32);
        iOException12.addSuppressed((java.lang.Throwable) iOException19);
        java.lang.Throwable[] throwableArray35 = iOException12.getSuppressed();
        java.io.IOException iOException36 = new java.io.IOException("hi!6045577589556497825", (java.lang.Throwable) iOException12);
        java.lang.String str37 = iOException12.toString();
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.io.IOException: java.io.IOException: hi!" + "'", str37, "java.io.IOException: java.io.IOException: hi!");
    }

    @Test
    public void test01482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01482");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = summaryStatistics0.getSummary();
        double double5 = summaryStatistics0.getMax();
        summaryStatistics0.addValue(58.0d);
        double double8 = summaryStatistics0.getSum();
        double double9 = summaryStatistics0.getMin();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(statisticalSummary4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 58.0d + "'", double8 == 58.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 58.0d + "'", double9 == 58.0d);
    }

    @Test
    public void test01483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01483");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMean();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double7 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance11);
        double double13 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic14 = summaryStatistics0.getMeanImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic14);
    }

    @Test
    public void test01484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01484");
        java.io.File file5 = new java.io.File("");
        java.io.File file6 = java.io.File.createTempFile("hi!", ":", file5);
        java.lang.String str7 = file6.getCanonicalPath();
        boolean boolean8 = file6.mkdir();
        java.lang.String str9 = file6.getName();
        java.io.File file13 = new java.io.File("");
        java.io.File file14 = java.io.File.createTempFile("hi!", ":", file13);
        boolean boolean16 = file14.setWritable(true);
        boolean boolean17 = file14.canExecute();
        java.io.File file19 = new java.io.File("");
        boolean boolean22 = file19.setWritable(true, true);
        boolean boolean23 = file19.setReadOnly();
        boolean boolean26 = file19.setWritable(true, false);
        java.net.URI uRI27 = file19.toURI();
        boolean boolean28 = file19.mkdir();
        java.io.File file29 = file19.getCanonicalFile();
        boolean boolean30 = file14.renameTo(file19);
        boolean boolean33 = file19.setWritable(true, true);
        boolean boolean34 = file6.renameTo(file19);
        java.nio.file.Path path35 = file19.toPath();
        java.lang.String str36 = file19.getPath();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file37 = java.io.File.createTempFile("/hi!8456326571823224076:", "/experiment/hi!2169115775229245488/hi!/hi!2169115775229245488", file19);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unable to create temporary file, /hi!8456326571823224076:3298374463411917846/experiment/hi!2169115775229245488/hi!/hi!2169115775229245488");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/hi!93004954669692112:");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/hi!93004954669692112:" + "'", str7, "/hi!93004954669692112:");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!93004954669692112:" + "'", str9, "hi!93004954669692112:");
        org.junit.Assert.assertNull("file13.getParent() == null", file13.getParent());
        org.junit.Assert.assertEquals(file13.toString(), "");
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/hi!3185748101444276170:");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull("file19.getParent() == null", file19.getParent());
        org.junit.Assert.assertEquals(file19.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(uRI27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(file29);
// flaky:         org.junit.Assert.assertEquals(file29.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file29.toString(), "/experiment");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(path35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test01485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01485");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        java.io.File file4 = new java.io.File("");
        java.lang.String str5 = file4.getParent();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) file4);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares7 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long8 = sumOfSquares7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long13 = variance12.getN();
        double[] doubleArray19 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double21 = variance12.evaluate(doubleArray19, (double) 'a');
        double double25 = variance10.evaluate(doubleArray19, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double28 = sumOfSquares7.evaluate(doubleArray19, (int) (short) 1, 0);
        double double29 = sumOfSquares7.getResult();
        long long30 = sumOfSquares7.getN();
        sumOfSquares7.clear();
        sumOfSquares7.clear();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares7);
        summaryStatistics0.clear();
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 19.43999999999942d + "'", double21 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test01486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01486");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = new java.net.URL("/hi!7911456813874696312:", "/hi!2246376377893569211:", (int) 'a', "/hi!5310868634591655424:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!7911456813874696312:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01487");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean2.increment((double) 0);
        double double5 = mean2.getResult();
        long long6 = mean2.getN();
        mean2.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean2);
        double double9 = summaryStatistics0.getMean();
        double double10 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.rank.Min min11 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min11.clear();
        double[] doubleArray18 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double19 = min11.evaluate(doubleArray18);
        long long20 = min11.getN();
        min11.increment((double) 1000);
        min11.clear();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min11);
        double double25 = summaryStatistics0.getGeometricMean();
        summaryStatistics0.addValue((double) 299098705920L);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs28 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double29 = sumOfLogs28.getResult();
        long long30 = sumOfLogs28.getN();
        org.apache.commons.math.stat.descriptive.rank.Min min31 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min31.clear();
        double[] doubleArray38 = new double[] { (byte) 0, ':', 0, (-1.0d), 1.0f };
        double double39 = min31.evaluate(doubleArray38);
        double double42 = sumOfLogs28.evaluate(doubleArray38, 1, (int) (byte) 1);
        sumOfLogs28.clear();
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfLogs28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementations must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 58.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 4.060443010546419d + "'", double42 == 4.060443010546419d);
    }

    @Test
    public void test01488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01488");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max0.increment((double) '#');
        max0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment4.clear();
        long long6 = secondMoment4.getN();
        secondMoment4.increment((double) 1645454028000L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long14 = variance13.getN();
        double[] doubleArray20 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double22 = variance13.evaluate(doubleArray20, (double) 'a');
        mean11.incrementAll(doubleArray20);
        double double26 = secondMoment4.evaluate(doubleArray20, 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = max0.evaluate(doubleArray20, 48, (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 19.43999999999942d + "'", double22 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    }

    @Test
    public void test01489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01489");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean1);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (short) 100);
        geometricMean3.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = geometricMean3.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic8);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max12.clear();
        double double14 = max12.getResult();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares15 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long16 = sumOfSquares15.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long21 = variance20.getN();
        double[] doubleArray27 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double29 = variance20.evaluate(doubleArray27, (double) 'a');
        double double33 = variance18.evaluate(doubleArray27, (double) 0.0f, (int) (byte) 0, (int) (short) 1);
        double double36 = sumOfSquares15.evaluate(doubleArray27, (int) (short) 1, 0);
        double double39 = max12.evaluate(doubleArray27, (int) (short) 1, (int) (short) 0);
        long long40 = max12.getN();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        long long42 = max12.getN();
        max12.increment(1.645454035E12d);
        max12.clear();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 19.43999999999942d + "'", double29 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }

    @Test
    public void test01490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01490");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean2.increment((double) (short) 100);
        geometricMean2.increment(0.0d);
        geometricMean2.clear();
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean2);
        summaryStatistics0.clear();
        double double10 = summaryStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getMinImpl();
        double double12 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics0.getMeanImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
    }

    @Test
    public void test01491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01491");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean10 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long13 = variance12.getN();
        double[] doubleArray19 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double21 = variance12.evaluate(doubleArray19, (double) 'a');
        mean10.incrementAll(doubleArray19);
        double double23 = variance7.evaluate(doubleArray19);
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance7);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic25 = summaryStatistics0.getSumLogImpl();
        double double26 = summaryStatistics0.getSumsq();
        double double27 = summaryStatistics0.getSum();
        double double28 = summaryStatistics0.getMean();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 19.43999999999942d + "'", double21 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 24.3d + "'", double23 == 24.3d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test01492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01492");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = new java.net.URL("/hi!5342814098542721741:", "/hi!817580163903132151:", 57, "");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: /hi!5342814098542721741:");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01493");
        java.io.File file1 = new java.io.File("/");
        boolean boolean3 = file1.setLastModified((long) (short) 0);
        boolean boolean4 = file1.isHidden();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "/");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01494");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long1 = sumOfSquares0.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean2.increment((double) (short) 100);
        geometricMean2.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic7 = geometricMean2.getSumLogImpl();
        geometricMean2.clear();
        boolean boolean9 = sumOfSquares0.equals((java.lang.Object) geometricMean2);
        sumOfSquares0.increment((double) 0.0f);
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl12 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = empiricalDistributionImpl12.getSampleStats();
        java.io.File file17 = new java.io.File("");
        java.io.File file18 = java.io.File.createTempFile("hi!", ":", file17);
        java.lang.String str19 = file18.getCanonicalPath();
        boolean boolean20 = file18.createNewFile();
        empiricalDistributionImpl12.load(file18);
        boolean boolean22 = empiricalDistributionImpl12.isLoaded();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics23 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double24 = summaryStatistics23.getMin();
        double double25 = summaryStatistics23.getStandardDeviation();
        double double26 = summaryStatistics23.getMean();
        double double27 = summaryStatistics23.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double30 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment29);
        summaryStatistics23.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment29);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        summaryStatistics23.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance34);
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        mean36.increment((double) 0);
        double double39 = mean36.getResult();
        mean36.clear();
        double[] doubleArray41 = new double[] {};
        mean36.incrementAll(doubleArray41);
        double double43 = variance34.evaluate(doubleArray41);
        empiricalDistributionImpl12.load(doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = sumOfSquares0.evaluate(doubleArray41, 2, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(statisticalSummary13);
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "");
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file18.toString(), "/hi!4117565358585133167:");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "/hi!4117565358585133167:" + "'", str19, "/hi!4117565358585133167:");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double43));
    }

    @Test
    public void test01495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01495");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (short) 100);
        geometricMean0.increment((double) (-1L));
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = geometricMean0.getSumLogImpl();
        storelessUnivariateStatistic5.clear();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
    }

    @Test
    public void test01496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01496");
        java.io.File file2 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getAuthority();
        java.net.URLStreamHandler uRLStreamHandler6 = null;
        java.net.URL uRL7 = new java.net.URL(uRL3, "file:/experiment/hi!2169115775229245488/hi!", uRLStreamHandler6);
        java.io.File file10 = new java.io.File("hi!2169115775229245488", "hi!");
        java.net.URL uRL11 = file10.toURL();
        boolean boolean12 = uRL3.sameFile(uRL11);
        java.lang.String str13 = uRL11.getAuthority();
        java.io.InputStream inputStream14 = null; // flaky: uRL11.openStream();
        java.lang.String str15 = uRL11.getHost();
        org.junit.Assert.assertEquals(file2.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file2.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertEquals(file10.getParent(), "hi!2169115775229245488");
        org.junit.Assert.assertEquals(file10.toString(), "hi!2169115775229245488/hi!");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/hi!2169115775229245488/hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
// flaky:         org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test01497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01497");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = new java.net.URL("/hi!1145573477105950925:", "/hi!4833017334119786469:", (-70), "/hi!8572848173148177986:");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: Invalid port number :-70");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01498");
        java.io.File file3 = new java.io.File("");
        java.io.File file4 = java.io.File.createTempFile("hi!", ":", file3);
        boolean boolean6 = file4.setWritable(true);
        boolean boolean7 = file4.delete();
        boolean boolean8 = file4.createNewFile();
        boolean boolean9 = file4.canExecute();
        boolean boolean10 = file4.canRead();
        java.io.File file13 = java.io.File.createTempFile("hi!", "");
        boolean boolean15 = file13.setLastModified((long) '#');
        java.io.File file16 = file13.getCanonicalFile();
        java.io.File file17 = file13.getCanonicalFile();
        boolean boolean18 = file4.renameTo(file17);
        org.apache.commons.math.stat.descriptive.rank.Max max19 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max19.clear();
        max19.increment((double) (-1L));
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl23 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        int int24 = empiricalDistributionImpl23.getBinCount();
        boolean boolean25 = empiricalDistributionImpl23.isLoaded();
        java.util.List list26 = empiricalDistributionImpl23.getBinStats();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean27 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean27.increment((double) (short) 100);
        geometricMean27.increment((double) 0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic32 = geometricMean27.getSumLogImpl();
        long long33 = geometricMean27.getN();
        double double34 = geometricMean27.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics35 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double36 = summaryStatistics35.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min37 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics35.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min37);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean39 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean39.increment((double) (short) 100);
        geometricMean39.increment((double) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long46 = variance45.getN();
        double[] doubleArray52 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double54 = variance45.evaluate(doubleArray52, (double) 'a');
        double double55 = geometricMean39.evaluate(doubleArray52);
        min37.incrementAll(doubleArray52);
        geometricMean27.incrementAll(doubleArray52);
        empiricalDistributionImpl23.load(doubleArray52);
        double[] doubleArray59 = empiricalDistributionImpl23.getUpperBounds();
        double double62 = max19.evaluate(doubleArray59, (int) 'a', 10);
        long long63 = max19.getN();
        double double64 = max19.getResult();
        max19.clear();
        max19.clear();
        boolean boolean67 = file4.equals((java.lang.Object) max19);
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/hi!4160084663038912491:");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/tmp/hi!7530190169843388924");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file16.toString(), "/tmp/hi!7530190169843388924");
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file17.toString(), "/tmp/hi!7530190169843388924");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1000 + "'", int24 == 1000);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 2L + "'", long33 == 2L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 19.43999999999942d + "'", double54 == 19.43999999999942d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2.51188643150958d + "'", double55 == 2.51188643150958d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.6d + "'", double62 == 0.6d);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1.0d) + "'", double64 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test01499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01499");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        boolean boolean2 = variance1.isBiasCorrected();
        double double3 = variance1.getResult();
        boolean boolean5 = variance1.equals((java.lang.Object) 'a');
        double double6 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics7 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double8 = summaryStatistics7.getVariance();
        org.apache.commons.math.stat.descriptive.rank.Min min9 = new org.apache.commons.math.stat.descriptive.rank.Min();
        summaryStatistics7.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min9);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics7.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = summaryStatistics7.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics7.getMaxImpl();
        double double14 = summaryStatistics7.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double16 = secondMoment15.getResult();
        secondMoment15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        double double19 = secondMoment15.getResult();
        double double20 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double23 = secondMoment22.getResult();
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        double double26 = secondMoment22.getResult();
        double double27 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        boolean boolean29 = variance21.equals((java.lang.Object) variance28);
        summaryStatistics7.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance32.increment((double) (byte) 100);
        java.io.File file37 = new java.io.File("/hi!4420905478953568698:", "/experiment/hi!2169115775229245488");
        boolean boolean38 = variance32.equals((java.lang.Object) "/hi!4420905478953568698:");
        boolean boolean39 = variance32.isBiasCorrected();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl40 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long46 = variance45.getN();
        double[] doubleArray52 = new double[] { 1L, (byte) 1, 10.0d, 10L, 1.0d };
        double double54 = variance45.evaluate(doubleArray52, (double) 'a');
        mean43.incrementAll(doubleArray52);
        empiricalDistributionImpl40.load(doubleArray52);
        java.util.List list57 = empiricalDistributionImpl40.getBinStats();
        double[] doubleArray58 = empiricalDistributionImpl40.getUpperBounds();
        double double62 = variance32.evaluate(doubleArray58, (double) (short) 1, (int) (short) 10, (int) '4');
        double double63 = variance21.evaluate(doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = variance1.evaluate(doubleArray58, (-1), (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals(file37.getParent(), "/hi!4420905478953568698:/experiment");
        org.junit.Assert.assertEquals(file37.toString(), "/hi!4420905478953568698:/experiment/hi!2169115775229245488");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 19.43999999999942d + "'", double54 == 19.43999999999942d);
        org.junit.Assert.assertNotNull(list57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2.7328566760003855E-16d + "'", double62 == 2.7328566760003855E-16d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.6E-4d + "'", double63 == 1.6E-4d);
    }

    @Test
    public void test01500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01500");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        double double2 = sum0.getResult();
        sum0.clear();
        sum0.clear();
        double double5 = sum0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        long long8 = variance7.getN();
        long long9 = variance7.getN();
        variance7.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double14 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        double double17 = secondMoment13.getResult();
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment19);
        secondMoment19.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        double double24 = variance23.getResult();
        org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl25 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl25.getSampleStats();
        java.io.File file30 = new java.io.File("");
        java.io.File file31 = java.io.File.createTempFile("hi!", ":", file30);
        java.lang.String str32 = file31.getCanonicalPath();
        boolean boolean33 = file31.createNewFile();
        empiricalDistributionImpl25.load(file31);
        double[] doubleArray35 = empiricalDistributionImpl25.getUpperBounds();
        double[] doubleArray36 = empiricalDistributionImpl25.getUpperBounds();
        variance23.incrementAll(doubleArray36, 1, (int) (short) 1);
        double double42 = secondMoment13.evaluate(doubleArray36, 1, 0);
        double double43 = variance7.evaluate(doubleArray36);
        // The following exception was thrown during execution in test generation
        try {
            double double46 = sum0.evaluate(doubleArray36, 47, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNull(statisticalSummary26);
        org.junit.Assert.assertNull("file30.getParent() == null", file30.getParent());
        org.junit.Assert.assertEquals(file30.toString(), "");
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "/");
// flaky:         org.junit.Assert.assertEquals(file31.toString(), "/hi!4754655337584502208:");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "/hi!4754655337584502208:" + "'", str32, "/hi!4754655337584502208:");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
    }
}
